
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf84  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c21c  0800c21c  0001c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c25c  0800c25c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c25c  0800c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c264  0800c264  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c264  0800c264  0001c264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c268  0800c268  0001c268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  0800c26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a46c  2400008c  0800c2f8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400a4f8  0800c2f8  0002a4f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003264f  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d65  00000000  00000000  00052709  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e8  00000000  00000000  00057470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  00058c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a5d4  00000000  00000000  0005a248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a6af  00000000  00000000  0009481c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001693c7  00000000  00000000  000aeecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00218292  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006350  00000000  00000000  00218310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400008c 	.word	0x2400008c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c204 	.word	0x0800c204

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000090 	.word	0x24000090
 80002d4:	0800c204 	.word	0x0800c204

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DCMI_Init+0x60>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_DCMI_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_DCMI_Init+0x60>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DCMI_Init+0x60>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_DCMI_Init+0x60>)
 8000608:	2208      	movs	r2, #8
 800060a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_DCMI_Init+0x60>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_DCMI_Init+0x60>)
 8000626:	f001 ff0f 	bl	8002448 <HAL_DCMI_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fc20 	bl	8000e74 <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2400a124 	.word	0x2400a124
 800063c:	48020000 	.word	0x48020000

08000640 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a7a      	ldr	r2, [pc, #488]	; (8000848 <HAL_DCMI_MspInit+0x208>)
 800065e:	4293      	cmp	r3, r2
 8000660:	f040 80ed 	bne.w	800083e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000664:	4b79      	ldr	r3, [pc, #484]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000666:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066a:	4a78      	ldr	r2, [pc, #480]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000674:	4b75      	ldr	r3, [pc, #468]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	623b      	str	r3, [r7, #32]
 8000680:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a70      	ldr	r2, [pc, #448]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b6e      	ldr	r3, [pc, #440]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b6a      	ldr	r3, [pc, #424]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a69      	ldr	r2, [pc, #420]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b66      	ldr	r3, [pc, #408]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b63      	ldr	r3, [pc, #396]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	4a61      	ldr	r2, [pc, #388]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a5a      	ldr	r2, [pc, #360]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b57      	ldr	r3, [pc, #348]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a52      	ldr	r2, [pc, #328]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000718:	2370      	movs	r3, #112	; 0x70
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000728:	230d      	movs	r3, #13
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <HAL_DCMI_MspInit+0x210>)
 8000734:	f005 fcb6 	bl	80060a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000748:	230d      	movs	r3, #13
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4840      	ldr	r0, [pc, #256]	; (8000854 <HAL_DCMI_MspInit+0x214>)
 8000754:	f005 fca6 	bl	80060a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800076a:	230d      	movs	r3, #13
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <HAL_DCMI_MspInit+0x218>)
 8000776:	f005 fc95 	bl	80060a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077a:	2308      	movs	r3, #8
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800078a:	230d      	movs	r3, #13
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <HAL_DCMI_MspInit+0x21c>)
 8000796:	f005 fc85 	bl	80060a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007aa:	230d      	movs	r3, #13
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4619      	mov	r1, r3
 80007b4:	482a      	ldr	r0, [pc, #168]	; (8000860 <HAL_DCMI_MspInit+0x220>)
 80007b6:	f005 fc75 	bl	80060a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_DCMI_MspInit+0x228>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c2:	224b      	movs	r2, #75	; 0x4b
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000802:	2203      	movs	r2, #3
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000814:	f002 f95c 	bl	8002ad0 <HAL_DMA_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800081e:	f000 fb29 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000826:	649a      	str	r2, [r3, #72]	; 0x48
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	204e      	movs	r0, #78	; 0x4e
 8000834:	f001 fdd3 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000838:	204e      	movs	r0, #78	; 0x4e
 800083a:	f001 fdea 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3738      	adds	r7, #56	; 0x38
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48020000 	.word	0x48020000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021000 	.word	0x58021000
 8000854:	58020000 	.word	0x58020000
 8000858:	58020800 	.word	0x58020800
 800085c:	58020c00 	.word	0x58020c00
 8000860:	58020400 	.word	0x58020400
 8000864:	2400a0ac 	.word	0x2400a0ac
 8000868:	40020010 	.word	0x40020010

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_DMA_Init+0x4c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <MX_DMA_Init+0x4c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_DMA_Init+0x4c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	200b      	movs	r0, #11
 8000896:	f001 fda2 	bl	80023de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800089a:	200b      	movs	r0, #11
 800089c:	f001 fdb9 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	200c      	movs	r0, #12
 80008a6:	f001 fd9a 	bl	80023de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008aa:	200c      	movs	r0, #12
 80008ac:	f001 fdb1 	bl	8002412 <HAL_NVIC_EnableIRQ>

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	4b6e      	ldr	r3, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a6c      	ldr	r2, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f0:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a65      	ldr	r2, [pc, #404]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a5d      	ldr	r2, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	4a56      	ldr	r2, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093c:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a4e      	ldr	r2, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2104      	movs	r1, #4
 800098a:	4841      	ldr	r0, [pc, #260]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 800098c:	f005 fd3a 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2120      	movs	r1, #32
 8000994:	483f      	ldr	r0, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x1d8>)
 8000996:	f005 fd35 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2103      	movs	r1, #3
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 80009a0:	f005 fd30 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009aa:	483b      	ldr	r0, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 80009ac:	f005 fd2a 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	4839      	ldr	r0, [pc, #228]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80009b6:	f005 fd25 	bl	8006404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482f      	ldr	r0, [pc, #188]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 80009d2:	f005 fb67 	bl	80060a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4829      	ldr	r0, [pc, #164]	; (8000a94 <MX_GPIO_Init+0x1d8>)
 80009ee:	f005 fb59 	bl	80060a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 80009f2:	f247 0303 	movw	r3, #28675	; 0x7003
 80009f6:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f005 fb4a 	bl	80060a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a24:	f005 fb3e 	bl	80060a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a42:	f005 fb2f 	bl	80060a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 8000a64:	f005 fb1e 	bl	80060a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000a80:	f005 fb10 	bl	80060a4 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	58020000 	.word	0x58020000
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58020c00 	.word	0x58020c00

08000aa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	f005 fcc6 	bl	800646c <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f9c5 	bl	8000e74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aee:	f006 f82f 	bl	8006b50 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f9bc 	bl	8000e74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000b00:	f006 f871 	bl	8006be6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f9b3 	bl	8000e74 <Error_Handler>
  }

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2400a174 	.word	0x2400a174
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	009034b6 	.word	0x009034b6

08000b20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_I2C2_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x009034B6;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_I2C2_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b5c:	f005 fc86 	bl	800646c <HAL_I2C_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f000 f985 	bl	8000e74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b6e:	f005 ffef 	bl	8006b50 <HAL_I2CEx_ConfigAnalogFilter>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 f97c 	bl	8000e74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b80:	f006 f831 	bl	8006be6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f973 	bl	8000e74 <Error_Handler>
  }

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400a1c0 	.word	0x2400a1c0
 8000b98:	40005800 	.word	0x40005800
 8000b9c:	009034b6 	.word	0x009034b6

08000ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_I2C_MspInit+0xf4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12f      	bne.n	8000c22 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000be0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4827      	ldr	r0, [pc, #156]	; (8000c9c <HAL_I2C_MspInit+0xfc>)
 8000bfe:	f005 fa51 	bl	80060a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c20:	e033      	b.n	8000c8a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_I2C_MspInit+0x100>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d12e      	bne.n	8000c8a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_I2C_MspInit+0xfc>)
 8000c68:	f005 fa1c 	bl	80060a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40005400 	.word	0x40005400
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	40005800 	.word	0x40005800

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f001 f9fe 	bl	80020a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f81c 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f7ff fe04 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb4:	f7ff fdda 	bl	800086c <MX_DMA_Init>
  MX_DCMI_Init();
 8000cb8:	f7ff fc8e 	bl	80005d8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000cbc:	f7ff fef0 	bl	8000aa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cc0:	f7ff ff2e 	bl	8000b20 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cc4:	f000 f8de 	bl	8000e84 <MX_SPI1_Init>
  MX_UART4_Init();
 8000cc8:	f000 fd5e 	bl	8001788 <MX_UART4_Init>
  MX_TIM4_Init();
 8000ccc:	f000 faec 	bl	80012a8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000cd0:	f000 fb6c 	bl	80013ac <MX_TIM5_Init>
  MX_TIM16_Init();
 8000cd4:	f000 fbe2 	bl	800149c <MX_TIM16_Init>
  MX_TIM3_Init();
 8000cd8:	f000 fa98 	bl	800120c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ctrlCent.init();
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <main+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <main+0x3e>
 8000ce4:	24000008 	.word	0x24000008

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0cc      	sub	sp, #304	; 0x130
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cf2:	224c      	movs	r2, #76	; 0x4c
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00b fa7c 	bl	800c1f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f00b fa75 	bl	800c1f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4618      	mov	r0, r3
 8000d10:	23bc      	movs	r3, #188	; 0xbc
 8000d12:	461a      	mov	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f00b fa6d 	bl	800c1f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f005 ffb0 	bl	8006c80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <SystemClock_Config+0x184>)
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2a:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <SystemClock_Config+0x184>)
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d32:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <SystemClock_Config+0x184>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	4b4c      	ldr	r3, [pc, #304]	; (8000e70 <SystemClock_Config+0x188>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a4b      	ldr	r2, [pc, #300]	; (8000e70 <SystemClock_Config+0x188>)
 8000d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <SystemClock_Config+0x188>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5a:	bf00      	nop
 8000d5c:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <SystemClock_Config+0x188>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d68:	d1f8      	bne.n	8000d5c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d90:	2308      	movs	r3, #8
 8000d92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000d96:	23c8      	movs	r3, #200	; 0xc8
 8000d98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dae:	2308      	movs	r3, #8
 8000db0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 ff95 	bl	8006cf4 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000dd0:	f000 f850 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	233f      	movs	r3, #63	; 0x3f
 8000dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de6:	2308      	movs	r3, #8
 8000de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 fb81 	bl	8007514 <HAL_RCC_ClockConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e18:	f000 f82c 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e24:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2200      	movs	r2, #0
 8000e34:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 ff53 	bl	8007cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e50:	f000 f810 	bl	8000e74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000e54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f006 fd10 	bl	8007880 <HAL_RCC_MCOConfig>
}
 8000e60:	bf00      	nop
 8000e62:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58000400 	.word	0x58000400
 8000e70:	58024800 	.word	0x58024800

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <MX_SPI1_Init+0xa8>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ebc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI1_Init+0xa4>)
 8000f16:	f008 f9eb 	bl	80092f0 <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f20:	f7ff ffa8 	bl	8000e74 <Error_Handler>
  }

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2400a20c 	.word	0x2400a20c
 8000f2c:	40013000 	.word	0x40013000

08000f30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <HAL_SPI_MspInit+0xc8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d14d      	bne.n	8000fee <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_SPI_MspInit+0xcc>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000fac:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <HAL_SPI_MspInit+0xd0>)
 8000fca:	f005 f86b 	bl	80060a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fce:	2310      	movs	r3, #16
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_SPI_MspInit+0xd4>)
 8000fea:	f005 f85b 	bl	80060a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020000 	.word	0x58020000
 8001004:	58020400 	.word	0x58020400

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_MspInit+0x30>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x30>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x30>)
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	58024400 	.word	0x58024400

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f001 f880 	bl	800218c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001096:	f003 f843 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2400a0ac 	.word	0x2400a0ac

080010a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Stream1_IRQHandler+0x10>)
 80010aa:	f003 f839 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2400a3c4 	.word	0x2400a3c4

080010b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM3_IRQHandler+0x10>)
 80010be:	f008 fbeb 	bl	8009898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2400a32c 	.word	0x2400a32c

080010cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <UART4_IRQHandler+0x10>)
 80010d2:	f009 fd3f 	bl	800ab54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400a43c 	.word	0x2400a43c

080010e0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <DCMI_IRQHandler+0x10>)
 80010e6:	f001 fba3 	bl	8002830 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2400a124 	.word	0x2400a124

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <SystemInit+0xec>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a38      	ldr	r2, [pc, #224]	; (80011e0 <SystemInit+0xec>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <SystemInit+0xf0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	2b06      	cmp	r3, #6
 8001112:	d807      	bhi.n	8001124 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <SystemInit+0xf0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 030f 	bic.w	r3, r3, #15
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <SystemInit+0xf0>)
 800111e:	f043 0307 	orr.w	r3, r3, #7
 8001122:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <SystemInit+0xf4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <SystemInit+0xf4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <SystemInit+0xf4>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <SystemInit+0xf4>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	492b      	ldr	r1, [pc, #172]	; (80011e8 <SystemInit+0xf4>)
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <SystemInit+0xf8>)
 800113e:	4013      	ands	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <SystemInit+0xf0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	2b07      	cmp	r3, #7
 800114c:	d907      	bls.n	800115e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <SystemInit+0xf0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <SystemInit+0xf0>)
 8001158:	f043 0307 	orr.w	r3, r3, #7
 800115c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <SystemInit+0xf4>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <SystemInit+0xf4>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <SystemInit+0xf4>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <SystemInit+0xf4>)
 8001172:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <SystemInit+0xfc>)
 8001174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <SystemInit+0xf4>)
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <SystemInit+0x100>)
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <SystemInit+0xf4>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <SystemInit+0x104>)
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <SystemInit+0xf4>)
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <SystemInit+0xf4>)
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <SystemInit+0x104>)
 800118c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <SystemInit+0xf4>)
 8001190:	2200      	movs	r2, #0
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <SystemInit+0xf4>)
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <SystemInit+0x104>)
 8001198:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <SystemInit+0xf4>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <SystemInit+0xf4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <SystemInit+0xf4>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <SystemInit+0xf4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <SystemInit+0x108>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <SystemInit+0x10c>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011be:	d202      	bcs.n	80011c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <SystemInit+0x110>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <SystemInit+0x114>)
 80011c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SystemInit+0xec>)
 80011d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	52002000 	.word	0x52002000
 80011e8:	58024400 	.word	0x58024400
 80011ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80011f0:	02020200 	.word	0x02020200
 80011f4:	01ff0000 	.word	0x01ff0000
 80011f8:	01010280 	.word	0x01010280
 80011fc:	5c001000 	.word	0x5c001000
 8001200:	ffff0000 	.word	0xffff0000
 8001204:	51008108 	.word	0x51008108
 8001208:	52004000 	.word	0x52004000

0800120c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_TIM3_Init+0x94>)
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <MX_TIM3_Init+0x98>)
 800122e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001232:	22c7      	movs	r2, #199	; 0xc7
 8001234:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_TIM3_Init+0x94>)
 800123e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM3_Init+0x94>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001250:	4813      	ldr	r0, [pc, #76]	; (80012a0 <MX_TIM3_Init+0x94>)
 8001252:	f008 f960 	bl	8009516 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800125c:	f7ff fe0a 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_TIM3_Init+0x94>)
 800126e:	f008 fd43 	bl	8009cf8 <HAL_TIM_ConfigClockSource>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001278:	f7ff fdfc 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_TIM3_Init+0x94>)
 800128a:	f009 fa59 	bl	800a740 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001294:	f7ff fdee 	bl	8000e74 <Error_Handler>
  }

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2400a32c 	.word	0x2400a32c
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	; 0x38
 80012ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <MX_TIM4_Init+0xfc>)
 80012dc:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <MX_TIM4_Init+0x100>)
 80012de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MX_TIM4_Init+0xfc>)
 80012e2:	2263      	movs	r2, #99	; 0x63
 80012e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_TIM4_Init+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_TIM4_Init+0xfc>)
 80012ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80012f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <MX_TIM4_Init+0xfc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <MX_TIM4_Init+0xfc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001300:	4828      	ldr	r0, [pc, #160]	; (80013a4 <MX_TIM4_Init+0xfc>)
 8001302:	f008 f908 	bl	8009516 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800130c:	f7ff fdb2 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	4619      	mov	r1, r3
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <MX_TIM4_Init+0xfc>)
 800131e:	f008 fceb 	bl	8009cf8 <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001328:	f7ff fda4 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800132c:	481d      	ldr	r0, [pc, #116]	; (80013a4 <MX_TIM4_Init+0xfc>)
 800132e:	f008 f97f 	bl	8009630 <HAL_TIM_PWM_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001338:	f7ff fd9c 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4816      	ldr	r0, [pc, #88]	; (80013a4 <MX_TIM4_Init+0xfc>)
 800134c:	f009 f9f8 	bl	800a740 <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001356:	f7ff fd8d 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135a:	2360      	movs	r3, #96	; 0x60
 800135c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	2204      	movs	r2, #4
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM4_Init+0xfc>)
 8001372:	f008 fbb1 	bl	8009ad8 <HAL_TIM_PWM_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800137c:	f7ff fd7a 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	2208      	movs	r2, #8
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM4_Init+0xfc>)
 8001388:	f008 fba6 	bl	8009ad8 <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001392:	f7ff fd6f 	bl	8000e74 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM4_Init+0xfc>)
 8001398:	f000 f968 	bl	800166c <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3738      	adds	r7, #56	; 0x38
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2400a294 	.word	0x2400a294
 80013a8:	40000800 	.word	0x40000800

080013ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_TIM5_Init+0xe8>)
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <MX_TIM5_Init+0xec>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <MX_TIM5_Init+0xe8>)
 80013e6:	2263      	movs	r2, #99	; 0x63
 80013e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_TIM5_Init+0xe8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <MX_TIM5_Init+0xe8>)
 80013f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80013f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <MX_TIM5_Init+0xe8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001404:	4823      	ldr	r0, [pc, #140]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001406:	f008 f886 	bl	8009516 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001410:	f7ff fd30 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141e:	4619      	mov	r1, r3
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001422:	f008 fc69 	bl	8009cf8 <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800142c:	f7ff fd22 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001430:	4818      	ldr	r0, [pc, #96]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001432:	f008 f8fd 	bl	8009630 <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800143c:	f7ff fd1a 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001450:	f009 f976 	bl	800a740 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800145a:	f7ff fd0b 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 8001462:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001466:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	220c      	movs	r2, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001478:	f008 fb2e 	bl	8009ad8 <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8001482:	f7ff fcf7 	bl	8000e74 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_TIM5_Init+0xe8>)
 8001488:	f000 f8f0 	bl	800166c <HAL_TIM_MspPostInit>

}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2400a2e0 	.word	0x2400a2e0
 8001498:	40000c00 	.word	0x40000c00

0800149c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b092      	sub	sp, #72	; 0x48
 80014a0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b6:	463b      	mov	r3, r7
 80014b8:	222c      	movs	r2, #44	; 0x2c
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00a fe99 	bl	800c1f4 <memset>

  htim16.Instance = TIM16;
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <MX_TIM16_Init+0xec>)
 80014c4:	4a31      	ldr	r2, [pc, #196]	; (800158c <MX_TIM16_Init+0xf0>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100-1;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <MX_TIM16_Init+0xec>)
 80014ca:	2263      	movs	r2, #99	; 0x63
 80014cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_TIM16_Init+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_TIM16_Init+0xec>)
 80014d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80014da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_TIM16_Init+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_TIM16_Init+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_TIM16_Init+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014ee:	4826      	ldr	r0, [pc, #152]	; (8001588 <MX_TIM16_Init+0xec>)
 80014f0:	f008 f811 	bl	8009516 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80014fa:	f7ff fcbb 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014fe:	4822      	ldr	r0, [pc, #136]	; (8001588 <MX_TIM16_Init+0xec>)
 8001500:	f008 f896 	bl	8009630 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800150a:	f7ff fcb3 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	; 0x60
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <MX_TIM16_Init+0xec>)
 8001534:	f008 fad0 	bl	8009ad8 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800153e:	f7ff fc99 	bl	8000e74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM16_Init+0xec>)
 800156a:	f009 f971 	bl	800a850 <HAL_TIMEx_ConfigBreakDeadTime>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001574:	f7ff fc7e 	bl	8000e74 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM16_Init+0xec>)
 800157a:	f000 f877 	bl	800166c <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3748      	adds	r7, #72	; 0x48
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2400a378 	.word	0x2400a378
 800158c:	40014400 	.word	0x40014400

08001590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <HAL_TIM_Base_MspInit+0xc8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d117      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 80015a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a8:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 80015b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	201d      	movs	r0, #29
 80015c6:	f000 ff0a 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ca:	201d      	movs	r0, #29
 80015cc:	f000 ff21 	bl	8002412 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80015d0:	e03d      	b.n	800164e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM4)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_TIM_Base_MspInit+0xd0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10f      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 80015de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 80015ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
}
 80015fa:	e028      	b.n	800164e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM5)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_TIM_Base_MspInit+0xd4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10f      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 8001608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 8001618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	e013      	b.n	800164e <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM16)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_TIM_Base_MspInit+0xd8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10e      	bne.n	800164e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 8001632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_TIM_Base_MspInit+0xcc>)
 8001642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40000400 	.word	0x40000400
 800165c:	58024400 	.word	0x58024400
 8001660:	40000800 	.word	0x40000800
 8001664:	40000c00 	.word	0x40000c00
 8001668:	40014400 	.word	0x40014400

0800166c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_TIM_MspPostInit+0x100>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d120      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a36      	ldr	r2, [pc, #216]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80016ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	482a      	ldr	r0, [pc, #168]	; (8001774 <HAL_TIM_MspPostInit+0x108>)
 80016ca:	f004 fceb 	bl	80060a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80016ce:	e049      	b.n	8001764 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM5)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_TIM_MspPostInit+0x10c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11f      	bne.n	800171a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	4a23      	ldr	r2, [pc, #140]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001708:	2302      	movs	r3, #2
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <HAL_TIM_MspPostInit+0x110>)
 8001714:	f004 fcc6 	bl	80060a4 <HAL_GPIO_Init>
}
 8001718:	e024      	b.n	8001764 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM16)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a18      	ldr	r2, [pc, #96]	; (8001780 <HAL_TIM_MspPostInit+0x114>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d11f      	bne.n	8001764 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_TIM_MspPostInit+0x104>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001754:	2301      	movs	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_TIM_MspPostInit+0x118>)
 8001760:	f004 fca0 	bl	80060a4 <HAL_GPIO_Init>
}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40000800 	.word	0x40000800
 8001770:	58024400 	.word	0x58024400
 8001774:	58020c00 	.word	0x58020c00
 8001778:	40000c00 	.word	0x40000c00
 800177c:	58020000 	.word	0x58020000
 8001780:	40014400 	.word	0x40014400
 8001784:	58020400 	.word	0x58020400

08001788 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <MX_UART4_Init+0x90>)
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <MX_UART4_Init+0x94>)
 8001790:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <MX_UART4_Init+0x90>)
 8001794:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001798:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_UART4_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_UART4_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_UART4_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_UART4_Init+0x90>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_UART4_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_UART4_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_UART4_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_UART4_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_UART4_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <MX_UART4_Init+0x90>)
 80017d2:	f009 f8d9 	bl	800a988 <HAL_UART_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80017dc:	f7ff fb4a 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e0:	2100      	movs	r1, #0
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_UART4_Init+0x90>)
 80017e4:	f00a fb0f 	bl	800be06 <HAL_UARTEx_SetTxFifoThreshold>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80017ee:	f7ff fb41 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f2:	2100      	movs	r1, #0
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <MX_UART4_Init+0x90>)
 80017f6:	f00a fb44 	bl	800be82 <HAL_UARTEx_SetRxFifoThreshold>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001800:	f7ff fb38 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_UART4_Init+0x90>)
 8001806:	f00a fac5 	bl	800bd94 <HAL_UARTEx_DisableFifoMode>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001810:	f7ff fb30 	bl	8000e74 <Error_Handler>
  }

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2400a43c 	.word	0x2400a43c
 800181c:	40004c00 	.word	0x40004c00

08001820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a39      	ldr	r2, [pc, #228]	; (8001924 <HAL_UART_MspInit+0x104>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d16c      	bne.n	800191c <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_UART_MspInit+0x108>)
 8001844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001848:	4a37      	ldr	r2, [pc, #220]	; (8001928 <HAL_UART_MspInit+0x108>)
 800184a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800184e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_UART_MspInit+0x108>)
 8001854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_UART_MspInit+0x108>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_UART_MspInit+0x108>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_UART_MspInit+0x108>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800187e:	2303      	movs	r3, #3
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800188e:	2308      	movs	r3, #8
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4824      	ldr	r0, [pc, #144]	; (800192c <HAL_UART_MspInit+0x10c>)
 800189a:	f004 fc03 	bl	80060a4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_UART_MspInit+0x114>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018a6:	223f      	movs	r2, #63	; 0x3f
 80018a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018da:	2204      	movs	r2, #4
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018e0:	2203      	movs	r2, #3
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80018f0:	480f      	ldr	r0, [pc, #60]	; (8001930 <HAL_UART_MspInit+0x110>)
 80018f2:	f001 f8ed 	bl	8002ad0 <HAL_DMA_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 80018fc:	f7ff faba 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_UART_MspInit+0x110>)
 8001904:	679a      	str	r2, [r3, #120]	; 0x78
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_UART_MspInit+0x110>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2034      	movs	r0, #52	; 0x34
 8001912:	f000 fd64 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001916:	2034      	movs	r0, #52	; 0x34
 8001918:	f000 fd7b 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40004c00 	.word	0x40004c00
 8001928:	58024400 	.word	0x58024400
 800192c:	58020000 	.word	0x58020000
 8001930:	2400a3c4 	.word	0x2400a3c4
 8001934:	40020028 	.word	0x40020028

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800193c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800193e:	e003      	b.n	8001948 <LoopCopyDataInit>

08001940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001946:	3104      	adds	r1, #4

08001948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800194c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800194e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001950:	d3f6      	bcc.n	8001940 <CopyDataInit>
  ldr  r2, =_sbss
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001954:	e002      	b.n	800195c <LoopFillZerobss>

08001956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001958:	f842 3b04 	str.w	r3, [r2], #4

0800195c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800195e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001960:	d3f9      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001962:	f7ff fbc7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001966:	f00a fc21 	bl	800c1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff f99b 	bl	8000ca4 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001974:	0800c26c 	.word	0x0800c26c
  ldr  r0, =_sdata
 8001978:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800197c:	2400008c 	.word	0x2400008c
  ldr  r2, =_sbss
 8001980:	2400008c 	.word	0x2400008c
  ldr  r3, = _ebss
 8001984:	2400a4f8 	.word	0x2400a4f8

08001988 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC3_IRQHandler>
	...

0800198c <initCtrlCenter>:
/**
  * @brief  初始化控制程序，启动定时器控制循环.
  * @retval None
  */
void initCtrlCenter()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  ctrler.throttleInit(0);
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <initCtrlCenter+0x20>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	2000      	movs	r0, #0
 8001996:	4798      	blx	r3
  //ctrler.throttleTest();
  //GPS_Init(&huart4, NULL);
  jy61p.init(&hi2c2);
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <initCtrlCenter+0x24>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <initCtrlCenter+0x28>)
 800199e:	4798      	blx	r3
  //testGPS = get_GPS_INFO();
  HAL_TIM_Base_Start_IT(&htim3);
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <initCtrlCenter+0x2c>)
 80019a2:	f007 fe0f 	bl	80095c4 <HAL_TIM_Base_Start_IT>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2400000c 	.word	0x2400000c
 80019b0:	24000068 	.word	0x24000068
 80019b4:	2400a1c0 	.word	0x2400a1c0
 80019b8:	2400a32c 	.word	0x2400a32c

080019bc <HAL_TIM_PeriodElapsedCallback>:
const uint8_t loopPSK = 10;
uint8_t loopCount = 0;
Atti nowAngle;
//200Hz,5ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	61f8      	str	r0, [r7, #28]
  if (htim->Instance == htim3.Instance)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d120      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x56>
  {
	nowAngle = jy61p.getAtti();
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4c13      	ldr	r4, [pc, #76]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019d6:	463a      	mov	r2, r7
 80019d8:	4610      	mov	r0, r2
 80019da:	4798      	blx	r3
 80019dc:	4625      	mov	r5, r4
 80019de:	463c      	mov	r4, r7
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019e8:	e885 0003 	stmia.w	r5, {r0, r1}
    if(++loopCount >= loopPSK)
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	220a      	movs	r2, #10
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d307      	bcc.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x56>
    {
      HAL_GPIO_TogglePin(LED_LOOP_GPIO_Port, LED_LOOP_Pin);
 8001a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a06:	4809      	ldr	r0, [pc, #36]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a08:	f004 fd15 	bl	8006436 <HAL_GPIO_TogglePin>
      loopCount = 0;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2400a32c 	.word	0x2400a32c
 8001a20:	24000068 	.word	0x24000068
 8001a24:	2400a4c8 	.word	0x2400a4c8
 8001a28:	240000a8 	.word	0x240000a8
 8001a2c:	58020400 	.word	0x58020400

08001a30 <throttleInit>:
  throttleInit,
  throttleTest
};

void throttleInit(uint8_t withCalibration)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	if(withCalibration)
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d026      	beq.n	8001a8e <throttleInit+0x5e>
	{
		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	481f      	ldr	r0, [pc, #124]	; (8001ac0 <throttleInit+0x90>)
 8001a44:	f007 fe56 	bl	80096f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a48:	2104      	movs	r1, #4
 8001a4a:	481e      	ldr	r0, [pc, #120]	; (8001ac4 <throttleInit+0x94>)
 8001a4c:	f007 fe52 	bl	80096f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001a50:	2108      	movs	r1, #8
 8001a52:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <throttleInit+0x94>)
 8001a54:	f007 fe4e 	bl	80096f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <throttleInit+0x98>)
 8001a5c:	f007 fe4a 	bl	80096f4 <HAL_TIM_PWM_Start>

		HAL_Delay(100);
 8001a60:	2064      	movs	r0, #100	; 0x64
 8001a62:	f000 fbb3 	bl	80021cc <HAL_Delay>
		THROTTLE1(THROTTLE_MAX);
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <throttleInit+0x9c>)
 8001a68:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
		THROTTLE2(THROTTLE_MAX);
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <throttleInit+0xa0>)
 8001a70:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
		THROTTLE3(THROTTLE_MAX);
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <throttleInit+0xa0>)
 8001a78:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a7c:	63da      	str	r2, [r3, #60]	; 0x3c
		THROTTLE4(THROTTLE_MAX);
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <throttleInit+0xa4>)
 8001a80:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 8001a86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a8a:	f000 fb9f 	bl	80021cc <HAL_Delay>
	}
	THROTTLE1(THROTTLE_MIN);
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <throttleInit+0x9c>)
 8001a90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
	THROTTLE2(THROTTLE_MIN);
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <throttleInit+0xa0>)
 8001a98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38
	THROTTLE3(THROTTLE_MIN);
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <throttleInit+0xa0>)
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
	THROTTLE4(THROTTLE_MIN);
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <throttleInit+0xa4>)
 8001aa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8001aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ab2:	f000 fb8b 	bl	80021cc <HAL_Delay>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2400a2e0 	.word	0x2400a2e0
 8001ac4:	2400a294 	.word	0x2400a294
 8001ac8:	2400a378 	.word	0x2400a378
 8001acc:	40000c00 	.word	0x40000c00
 8001ad0:	40000800 	.word	0x40000800
 8001ad4:	40014400 	.word	0x40014400

08001ad8 <throttleTest>:

void throttleTest()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  uint32_t throttle = THROTTLE_MIN;
 8001ade:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ae2:	607b      	str	r3, [r7, #4]
  int8_t dir = +1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  while(1)
  {
    HAL_Delay(100);
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	f000 fb6f 	bl	80021cc <HAL_Delay>
    throttle += (THROTTLE_MAX - THROTTLE_MIN) / 100 * dir;
 8001aee:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	607b      	str	r3, [r7, #4]
    THROTTLE1(throttle);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b08:	d206      	bcs.n	8001b18 <throttleTest+0x40>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b10:	bf38      	it	cc
 8001b12:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001b16:	e001      	b.n	8001b1c <throttleTest+0x44>
 8001b18:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <throttleTest+0xc0>)
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
	  THROTTLE2(throttle);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b26:	d206      	bcs.n	8001b36 <throttleTest+0x5e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b2e:	bf38      	it	cc
 8001b30:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001b34:	e001      	b.n	8001b3a <throttleTest+0x62>
 8001b36:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <throttleTest+0xc4>)
 8001b3c:	6393      	str	r3, [r2, #56]	; 0x38
	  THROTTLE3(throttle);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b44:	d206      	bcs.n	8001b54 <throttleTest+0x7c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b4c:	bf38      	it	cc
 8001b4e:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001b52:	e001      	b.n	8001b58 <throttleTest+0x80>
 8001b54:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001b58:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <throttleTest+0xc4>)
 8001b5a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  THROTTLE4(throttle);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b62:	d206      	bcs.n	8001b72 <throttleTest+0x9a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b6a:	bf38      	it	cc
 8001b6c:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001b70:	e001      	b.n	8001b76 <throttleTest+0x9e>
 8001b72:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <throttleTest+0xc8>)
 8001b78:	6353      	str	r3, [r2, #52]	; 0x34
    if(throttle <= THROTTLE_MIN || throttle >= (THROTTLE_MAX * 3 / 4))dir = -dir;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b80:	d904      	bls.n	8001b8c <throttleTest+0xb4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d9ad      	bls.n	8001ae8 <throttleTest+0x10>
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	425b      	negs	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	70fb      	strb	r3, [r7, #3]
    HAL_Delay(100);
 8001b94:	e7a8      	b.n	8001ae8 <throttleTest+0x10>
 8001b96:	bf00      	nop
 8001b98:	40000c00 	.word	0x40000c00
 8001b9c:	40000800 	.word	0x40000800
 8001ba0:	40014400 	.word	0x40014400

08001ba4 <initPID>:
  }
}

void initPID(float deltaT)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	ed87 0a01 	vstr	s0, [r7, #4]
  ctrler.deltaT = deltaT;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <initPID+0x1c>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	2400000c 	.word	0x2400000c

08001bc4 <initParams>:
  * @param  Kd: 微分控制器的K.
  * @param  LimitI: 积分限幅，正数.
  * @retval None
  */
void initParams(uint8_t axis, float Kp, float Ki, float Kd, float LimitI)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001bd0:	edc7 0a03 	vstr	s1, [r7, #12]
 8001bd4:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bd8:	edc7 1a01 	vstr	s3, [r7, #4]
 8001bdc:	75fb      	strb	r3, [r7, #23]
  ctrler.params[axis].Kp = Kp;
 8001bde:	7dfa      	ldrb	r2, [r7, #23]
 8001be0:	491b      	ldr	r1, [pc, #108]	; (8001c50 <initParams+0x8c>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	3304      	adds	r3, #4
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].Ki = Ki;
 8001bf2:	7dfa      	ldrb	r2, [r7, #23]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <initParams+0x8c>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3308      	adds	r3, #8
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].Kd = Kd;
 8001c06:	7dfa      	ldrb	r2, [r7, #23]
 8001c08:	4911      	ldr	r1, [pc, #68]	; (8001c50 <initParams+0x8c>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	330c      	adds	r3, #12
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].LimitI = LimitI;
 8001c1a:	7dfa      	ldrb	r2, [r7, #23]
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <initParams+0x8c>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3310      	adds	r3, #16
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].Integral = 0;
 8001c2e:	7dfa      	ldrb	r2, [r7, #23]
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <initParams+0x8c>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3314      	adds	r3, #20
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	2400000c 	.word	0x2400000c

08001c54 <updateCtrlFrame>:
  * @param  nowAtti: 当前姿态.
  * @param  expectAtti: 期望姿态.
  * @retval None
  */
void updateCtrlFrame(Atti nowAtti, Atti expectAtti)
{
 8001c54:	b084      	sub	sp, #16
 8001c56:	b480      	push	{r7}
 8001c58:	b08b      	sub	sp, #44	; 0x2c
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001c60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float Out[3];
  float error[3] = {expectAtti.roll - nowAtti.roll, 
 8001c64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	edc7 7a03 	vstr	s15, [r7, #12]
                    expectAtti.pitch - nowAtti.pitch, 
 8001c74:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c78:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
  float error[3] = {expectAtti.roll - nowAtti.roll, 
 8001c80:	edc7 7a04 	vstr	s15, [r7, #16]
                    expectAtti.yaw - nowAtti.yaw};
 8001c84:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c88:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
  float error[3] = {expectAtti.roll - nowAtti.roll, 
 8001c90:	edc7 7a05 	vstr	s15, [r7, #20]
  float gyro[3] = {nowAtti.gx, nowAtti.gy, nowAtti.gz}; //TODO: 顺序待测
 8001c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9e:	60bb      	str	r3, [r7, #8]
  for (uint32_t i = 0; i < 3; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e0f7      	b.n	8001e96 <updateCtrlFrame+0x242>
  {
    ctrler.params[i].Integral += error[i] * ctrler.deltaT;
 8001ca6:	49d1      	ldr	r1, [pc, #836]	; (8001fec <updateCtrlFrame+0x398>)
 8001ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3314      	adds	r3, #20
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b1c      	subs	r3, #28
 8001cc6:	edd3 6a00 	vldr	s13, [r3]
 8001cca:	4bc8      	ldr	r3, [pc, #800]	; (8001fec <updateCtrlFrame+0x398>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	49c4      	ldr	r1, [pc, #784]	; (8001fec <updateCtrlFrame+0x398>)
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3314      	adds	r3, #20
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
    //积分限幅
    ctrler.params[i].Integral = LIMIT(-ctrler.params[i].LimitI, ctrler.params[i].LimitI, ctrler.params[i].Integral);
 8001cec:	49bf      	ldr	r1, [pc, #764]	; (8001fec <updateCtrlFrame+0x398>)
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eeb1 7a67 	vneg.f32	s14, s15
 8001d04:	49b9      	ldr	r1, [pc, #740]	; (8001fec <updateCtrlFrame+0x398>)
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3314      	adds	r3, #20
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	dd0c      	ble.n	8001d3c <updateCtrlFrame+0xe8>
 8001d22:	49b2      	ldr	r1, [pc, #712]	; (8001fec <updateCtrlFrame+0x398>)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3310      	adds	r3, #16
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	eef1 7a67 	vneg.f32	s15, s15
 8001d3a:	e009      	b.n	8001d50 <updateCtrlFrame+0xfc>
 8001d3c:	49ab      	ldr	r1, [pc, #684]	; (8001fec <updateCtrlFrame+0x398>)
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3314      	adds	r3, #20
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	49a6      	ldr	r1, [pc, #664]	; (8001fec <updateCtrlFrame+0x398>)
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3310      	adds	r3, #16
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	d532      	bpl.n	8001dd4 <updateCtrlFrame+0x180>
 8001d6e:	499f      	ldr	r1, [pc, #636]	; (8001fec <updateCtrlFrame+0x398>)
 8001d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3310      	adds	r3, #16
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	eeb1 7a67 	vneg.f32	s14, s15
 8001d86:	4999      	ldr	r1, [pc, #612]	; (8001fec <updateCtrlFrame+0x398>)
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3314      	adds	r3, #20
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd0c      	ble.n	8001dbe <updateCtrlFrame+0x16a>
 8001da4:	4991      	ldr	r1, [pc, #580]	; (8001fec <updateCtrlFrame+0x398>)
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3310      	adds	r3, #16
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	eef1 7a67 	vneg.f32	s15, s15
 8001dbc:	e014      	b.n	8001de8 <updateCtrlFrame+0x194>
 8001dbe:	498b      	ldr	r1, [pc, #556]	; (8001fec <updateCtrlFrame+0x398>)
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3314      	adds	r3, #20
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	e009      	b.n	8001de8 <updateCtrlFrame+0x194>
 8001dd4:	4985      	ldr	r1, [pc, #532]	; (8001fec <updateCtrlFrame+0x398>)
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3310      	adds	r3, #16
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	4980      	ldr	r1, [pc, #512]	; (8001fec <updateCtrlFrame+0x398>)
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3314      	adds	r3, #20
 8001df8:	edc3 7a00 	vstr	s15, [r3]
    //输出计算
    Out[i] = ctrler.params[i].Kp * error[i] + ctrler.params[i].Ki * ctrler.params[i].Integral - ctrler.params[i].Kd * gyro[i];
 8001dfc:	497b      	ldr	r1, [pc, #492]	; (8001fec <updateCtrlFrame+0x398>)
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b1c      	subs	r3, #28
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	4971      	ldr	r1, [pc, #452]	; (8001fec <updateCtrlFrame+0x398>)
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3308      	adds	r3, #8
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	496c      	ldr	r1, [pc, #432]	; (8001fec <updateCtrlFrame+0x398>)
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3314      	adds	r3, #20
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e54:	4965      	ldr	r1, [pc, #404]	; (8001fec <updateCtrlFrame+0x398>)
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	330c      	adds	r3, #12
 8001e64:	edd3 6a00 	vldr	s13, [r3]
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e70:	4413      	add	r3, r2
 8001e72:	3b28      	subs	r3, #40	; 0x28
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b10      	subs	r3, #16
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < 3; i++)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3301      	adds	r3, #1
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	f67f af04 	bls.w	8001ca6 <updateCtrlFrame+0x52>
  }
  THROTTLE1( - Out[PARAM_ROLL] + Out[PARAM_PITCH]);
 8001e9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eaa:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001ff0 <updateCtrlFrame+0x39c>
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d40c      	bmi.n	8001ed2 <updateCtrlFrame+0x27e>
 8001eb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001ff4 <updateCtrlFrame+0x3a0>
 8001ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	d51a      	bpl.n	8001f08 <updateCtrlFrame+0x2b4>
 8001ed2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ede:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001ff0 <updateCtrlFrame+0x39c>
 8001ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	d502      	bpl.n	8001ef2 <updateCtrlFrame+0x29e>
 8001eec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ef0:	e00c      	b.n	8001f0c <updateCtrlFrame+0x2b8>
 8001ef2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	e001      	b.n	8001f0c <updateCtrlFrame+0x2b8>
 8001f08:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001f0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <updateCtrlFrame+0x3a4>)
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
  THROTTLE2( + Out[PARAM_ROLL] + Out[PARAM_PITCH]);
 8001f10:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f14:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ff0 <updateCtrlFrame+0x39c>
 8001f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f28:	d40c      	bmi.n	8001f44 <updateCtrlFrame+0x2f0>
 8001f2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ff4 <updateCtrlFrame+0x3a0>
 8001f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	d51a      	bpl.n	8001f7a <updateCtrlFrame+0x326>
 8001f44:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ff0 <updateCtrlFrame+0x39c>
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d502      	bpl.n	8001f64 <updateCtrlFrame+0x310>
 8001f5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f62:	e00c      	b.n	8001f7e <updateCtrlFrame+0x32a>
 8001f64:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	e001      	b.n	8001f7e <updateCtrlFrame+0x32a>
 8001f7a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <updateCtrlFrame+0x3a8>)
 8001f80:	6393      	str	r3, [r2, #56]	; 0x38
  THROTTLE3( + Out[PARAM_ROLL] - Out[PARAM_PITCH]);
 8001f82:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f86:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ff0 <updateCtrlFrame+0x39c>
 8001f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	d40c      	bmi.n	8001fb6 <updateCtrlFrame+0x362>
 8001f9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ff4 <updateCtrlFrame+0x3a0>
 8001fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d524      	bpl.n	8002000 <updateCtrlFrame+0x3ac>
 8001fb6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ff0 <updateCtrlFrame+0x39c>
 8001fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fce:	d502      	bpl.n	8001fd6 <updateCtrlFrame+0x382>
 8001fd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fd4:	e016      	b.n	8002004 <updateCtrlFrame+0x3b0>
 8001fd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe6:	ee17 3a90 	vmov	r3, s15
 8001fea:	e00b      	b.n	8002004 <updateCtrlFrame+0x3b0>
 8001fec:	2400000c 	.word	0x2400000c
 8001ff0:	44fa0000 	.word	0x44fa0000
 8001ff4:	457a0000 	.word	0x457a0000
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40000800 	.word	0x40000800
 8002000:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002004:	4a24      	ldr	r2, [pc, #144]	; (8002098 <updateCtrlFrame+0x444>)
 8002006:	63d3      	str	r3, [r2, #60]	; 0x3c
  THROTTLE4( - Out[PARAM_ROLL] - Out[PARAM_PITCH]);
 8002008:	edd7 7a06 	vldr	s15, [r7, #24]
 800200c:	eeb1 7a67 	vneg.f32	s14, s15
 8002010:	edd7 7a07 	vldr	s15, [r7, #28]
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800209c <updateCtrlFrame+0x448>
 800201c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	d40e      	bmi.n	8002044 <updateCtrlFrame+0x3f0>
 8002026:	edd7 7a06 	vldr	s15, [r7, #24]
 800202a:	eeb1 7a67 	vneg.f32	s14, s15
 800202e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002036:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80020a0 <updateCtrlFrame+0x44c>
 800203a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	d51e      	bpl.n	8002082 <updateCtrlFrame+0x42e>
 8002044:	edd7 7a06 	vldr	s15, [r7, #24]
 8002048:	eeb1 7a67 	vneg.f32	s14, s15
 800204c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002054:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800209c <updateCtrlFrame+0x448>
 8002058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	d502      	bpl.n	8002068 <updateCtrlFrame+0x414>
 8002062:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002066:	e00e      	b.n	8002086 <updateCtrlFrame+0x432>
 8002068:	edd7 7a06 	vldr	s15, [r7, #24]
 800206c:	eeb1 7a67 	vneg.f32	s14, s15
 8002070:	edd7 7a07 	vldr	s15, [r7, #28]
 8002074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	e001      	b.n	8002086 <updateCtrlFrame+0x432>
 8002082:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <updateCtrlFrame+0x450>)
 8002088:	6353      	str	r3, [r2, #52]	; 0x34
}
 800208a:	bf00      	nop
 800208c:	372c      	adds	r7, #44	; 0x2c
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	b004      	add	sp, #16
 8002096:	4770      	bx	lr
 8002098:	40000800 	.word	0x40000800
 800209c:	44fa0000 	.word	0x44fa0000
 80020a0:	457a0000 	.word	0x457a0000
 80020a4:	40014400 	.word	0x40014400

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f000 f98a 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020b4:	f005 fc4e 	bl	8007954 <HAL_RCC_GetSysClockFreq>
 80020b8:	4601      	mov	r1, r0
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_Init+0x68>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <HAL_Init+0x6c>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa21 f303 	lsr.w	r3, r1, r3
 80020d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_Init+0x68>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_Init+0x6c>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_Init+0x70>)
 80020ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_Init+0x74>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 f814 	bl	8002120 <HAL_InitTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e002      	b.n	8002108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002102:	f7fe ff81 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	58024400 	.word	0x58024400
 8002114:	0800c22c 	.word	0x0800c22c
 8002118:	24000004 	.word	0x24000004
 800211c:	24000000 	.word	0x24000000

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_InitTick+0x60>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e021      	b.n	8002178 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_InitTick+0x64>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_InitTick+0x60>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002142:	fbb3 f3f1 	udiv	r3, r3, r1
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f96f 	bl	800242e <HAL_SYSTICK_Config>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00e      	b.n	8002178 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b0f      	cmp	r3, #15
 800215e:	d80a      	bhi.n	8002176 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002160:	2200      	movs	r2, #0
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f000 f939 	bl	80023de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <HAL_InitTick+0x68>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24000064 	.word	0x24000064
 8002184:	24000000 	.word	0x24000000
 8002188:	24000060 	.word	0x24000060

0800218c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x20>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x24>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4413      	add	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_IncTick+0x24>)
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	24000064 	.word	0x24000064
 80021b0:	2400a4e0 	.word	0x2400a4e0

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2400a4e0 	.word	0x2400a4e0

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_Delay+0x40>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	24000064 	.word	0x24000064

08002210 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetREVID+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0c1b      	lsrs	r3, r3, #16
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	5c001000 	.word	0x5c001000

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <__NVIC_SetPriorityGrouping+0x40>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	4313      	orrs	r3, r2
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x40>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00
 800226c:	05fa0000 	.word	0x05fa0000

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002394:	d301      	bcc.n	800239a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002396:	2301      	movs	r3, #1
 8002398:	e00f      	b.n	80023ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <SysTick_Config+0x40>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a2:	210f      	movs	r1, #15
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f7ff ff8e 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SysTick_Config+0x40>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b2:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SysTick_Config+0x40>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff29 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff40 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff90 	bl	800231c <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5f 	bl	80022c8 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff33 	bl	800228c <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa4 	bl	8002384 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e069      	b.n	800252e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f8ea 	bl	8000640 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_DCMI_Init+0xf0>)
 800248e:	400b      	ands	r3, r1
 8002490:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6819      	ldr	r1, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80024a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80024b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80024be:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80024ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80024d6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d112      	bne.n	800250e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7f1b      	ldrb	r3, [r3, #28]
 80024ec:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7f5b      	ldrb	r3, [r3, #29]
 80024f2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80024f4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7f9b      	ldrb	r3, [r3, #30]
 80024fa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80024fc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7fdb      	ldrb	r3, [r3, #31]
 8002504:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800250a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800250c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 021e 	orr.w	r2, r2, #30
 800251c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	ffe0f007 	.word	0xffe0f007

0800253c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_DCMI_Start_DMA+0x1c>
 8002554:	2302      	movs	r3, #2
 8002556:	e0ab      	b.n	80026b0 <HAL_DCMI_Start_DMA+0x174>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002576:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0202 	bic.w	r2, r2, #2
 8002586:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259c:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <HAL_DCMI_Start_DMA+0x17c>)
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	4a45      	ldr	r2, [pc, #276]	; (80026bc <HAL_DCMI_Start_DMA+0x180>)
 80025a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	2200      	movs	r2, #0
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ce:	d219      	bcs.n	8002604 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3328      	adds	r3, #40	; 0x28
 80025da:	4619      	mov	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	f000 fdd2 	bl	8003188 <HAL_DMA_Start_IT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d055      	beq.n	8002696 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e055      	b.n	80026b0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_DCMI_Start_DMA+0x17c>)
 800260a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800261e:	e009      	b.n	8002634 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002624:	085a      	lsrs	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	005a      	lsls	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d2f0      	bcs.n	8002620 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	1e9a      	subs	r2, r3, #2
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3328      	adds	r3, #40	; 0x28
 8002666:	4619      	mov	r1, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	f003 f867 	bl	8005744 <HAL_DMAEx_MultiBufferStart_IT>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00c      	beq.n	8002696 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00c      	b.n	80026b0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	08002971 	.word	0x08002971
 80026bc:	08002a97 	.word	0x08002a97

080026c0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_DCMI_Stop+0xb8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <HAL_DCMI_Stop+0xbc>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_DCMI_Stop+0x30>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e03f      	b.n	8002770 <HAL_DCMI_Stop+0xb0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3b01      	subs	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d108      	bne.n	800272e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	72fb      	strb	r3, [r7, #11]
      break;
 800272c:	e006      	b.n	800273c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e9      	bne.n	8002710 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800274a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	4618      	mov	r0, r3
 8002752:	f000 ff83 	bl	800365c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800276e:	7afb      	ldrb	r3, [r7, #11]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	24000000 	.word	0x24000000
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_DCMI_Suspend+0xa8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_DCMI_Suspend+0xac>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a5b      	lsrs	r3, r3, #9
 8002794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_DCMI_Suspend+0x30>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e034      	b.n	800281a <HAL_DCMI_Suspend+0x9a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d125      	bne.n	8002810 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2205      	movs	r2, #5
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10c      	bne.n	8002802 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	72fb      	strb	r3, [r7, #11]
        break;
 8002800:	e006      	b.n	8002810 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e5      	bne.n	80027dc <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002818:	7afb      	ldrb	r3, [r7, #11]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	24000000 	.word	0x24000000
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	4a31      	ldr	r2, [pc, #196]	; (8002930 <HAL_DCMI_IRQHandler+0x100>)
 800286c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fa10 	bl	8003c98 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_DCMI_IRQHandler+0x100>)
 80028a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 f9f4 	bl	8003c98 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2210      	movs	r2, #16
 80028c0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f840 	bl	8002948 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2208      	movs	r2, #8
 80028d8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f83e 	bl	800295c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01d      	beq.n	8002926 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d107      	bne.n	8002908 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 021e 	bic.w	r2, r2, #30
 8002906:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f009 fc05 	bl	800c130 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08002a97 	.word	0x08002a97

08002934 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	2b00      	cmp	r3, #0
 8002984:	d043      	beq.n	8002a0e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002992:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <DCMI_DMAXferCplt+0x62>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d015      	beq.n	80029d2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	00da      	lsls	r2, r3, #3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	2200      	movs	r2, #0
 80029c0:	4619      	mov	r1, r3
 80029c2:	f003 fa1d 	bl	8005e00 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	1e5a      	subs	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
 80029d0:	e044      	b.n	8002a5c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d13c      	bne.n	8002a5c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	00da      	lsls	r2, r3, #3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4413      	add	r3, r2
 80029fa:	2201      	movs	r2, #1
 80029fc:	4619      	mov	r1, r3
 80029fe:	f003 f9ff 	bl	8005e00 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a0c:	e026      	b.n	8002a5c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	e017      	b.n	8002a5c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	440a      	add	r2, r1
 8002a52:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d112      	bne.n	8002a8e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d103      	bne.n	8002a8e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d009      	beq.n	8002ac2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff ff36 	bl	8002934 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7ff fb6c 	bl	80021b4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e316      	b.n	8003116 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a66      	ldr	r2, [pc, #408]	; (8002c88 <HAL_DMA_Init+0x1b8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04a      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_DMA_Init+0x1bc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d045      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a63      	ldr	r2, [pc, #396]	; (8002c90 <HAL_DMA_Init+0x1c0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d040      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a62      	ldr	r2, [pc, #392]	; (8002c94 <HAL_DMA_Init+0x1c4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d03b      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_DMA_Init+0x1c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d036      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <HAL_DMA_Init+0x1cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_DMA_Init+0x1d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02c      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_DMA_Init+0x1d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d027      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_DMA_Init+0x1d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a59      	ldr	r2, [pc, #356]	; (8002cac <HAL_DMA_Init+0x1dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01d      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a57      	ldr	r2, [pc, #348]	; (8002cb0 <HAL_DMA_Init+0x1e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a56      	ldr	r2, [pc, #344]	; (8002cb4 <HAL_DMA_Init+0x1e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_DMA_Init+0x1e8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <HAL_DMA_Init+0x1ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <HAL_DMA_Init+0x1f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_Init+0xb8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_DMA_Init+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_DMA_Init+0xbc>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_DMA_Init+0xbe>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 813b 	beq.w	8002e0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <HAL_DMA_Init+0x1b8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d04a      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <HAL_DMA_Init+0x1bc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d045      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_DMA_Init+0x1c0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d040      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a33      	ldr	r2, [pc, #204]	; (8002c94 <HAL_DMA_Init+0x1c4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d03b      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	; (8002c98 <HAL_DMA_Init+0x1c8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d036      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a30      	ldr	r2, [pc, #192]	; (8002c9c <HAL_DMA_Init+0x1cc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d031      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2e      	ldr	r2, [pc, #184]	; (8002ca0 <HAL_DMA_Init+0x1d0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02c      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2d      	ldr	r2, [pc, #180]	; (8002ca4 <HAL_DMA_Init+0x1d4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d027      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_DMA_Init+0x1d8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d022      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <HAL_DMA_Init+0x1dc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d01d      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_DMA_Init+0x1e0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d018      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_DMA_Init+0x1e4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_DMA_Init+0x1e8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_DMA_Init+0x1ec>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_DMA_Init+0x1f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_DMA_Init+0x174>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_DMA_Init+0x1f4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <HAL_DMA_Init+0x186>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_DMA_Init+0x196>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c66:	e02f      	b.n	8002cc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c68:	f7ff faa4 	bl	80021b4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d928      	bls.n	8002cc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e246      	b.n	8003116 <HAL_DMA_Init+0x646>
 8002c88:	40020010 	.word	0x40020010
 8002c8c:	40020028 	.word	0x40020028
 8002c90:	40020040 	.word	0x40020040
 8002c94:	40020058 	.word	0x40020058
 8002c98:	40020070 	.word	0x40020070
 8002c9c:	40020088 	.word	0x40020088
 8002ca0:	400200a0 	.word	0x400200a0
 8002ca4:	400200b8 	.word	0x400200b8
 8002ca8:	40020410 	.word	0x40020410
 8002cac:	40020428 	.word	0x40020428
 8002cb0:	40020440 	.word	0x40020440
 8002cb4:	40020458 	.word	0x40020458
 8002cb8:	40020470 	.word	0x40020470
 8002cbc:	40020488 	.word	0x40020488
 8002cc0:	400204a0 	.word	0x400204a0
 8002cc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1c8      	bne.n	8002c68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4b83      	ldr	r3, [pc, #524]	; (8002ef0 <HAL_DMA_Init+0x420>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002cee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d107      	bne.n	8002d2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4313      	orrs	r3, r2
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d2c:	4b71      	ldr	r3, [pc, #452]	; (8002ef4 <HAL_DMA_Init+0x424>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b71      	ldr	r3, [pc, #452]	; (8002ef8 <HAL_DMA_Init+0x428>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d38:	d328      	bcc.n	8002d8c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b28      	cmp	r3, #40	; 0x28
 8002d40:	d903      	bls.n	8002d4a <HAL_DMA_Init+0x27a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b2e      	cmp	r3, #46	; 0x2e
 8002d48:	d917      	bls.n	8002d7a <HAL_DMA_Init+0x2aa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d50:	d903      	bls.n	8002d5a <HAL_DMA_Init+0x28a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b42      	cmp	r3, #66	; 0x42
 8002d58:	d90f      	bls.n	8002d7a <HAL_DMA_Init+0x2aa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b46      	cmp	r3, #70	; 0x46
 8002d60:	d903      	bls.n	8002d6a <HAL_DMA_Init+0x29a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b48      	cmp	r3, #72	; 0x48
 8002d68:	d907      	bls.n	8002d7a <HAL_DMA_Init+0x2aa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b4e      	cmp	r3, #78	; 0x4e
 8002d70:	d905      	bls.n	8002d7e <HAL_DMA_Init+0x2ae>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b52      	cmp	r3, #82	; 0x52
 8002d78:	d801      	bhi.n	8002d7e <HAL_DMA_Init+0x2ae>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_DMA_Init+0x2b0>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d117      	bne.n	8002de6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f002 fb31 	bl	8005430 <DMA_CheckFifoParam>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e197      	b.n	8003116 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f002 fa6c 	bl	80052cc <DMA_CalcBaseAndBitshift>
 8002df4:	4603      	mov	r3, r0
 8002df6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	223f      	movs	r2, #63	; 0x3f
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e0cd      	b.n	8002fa6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_DMA_Init+0x42c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <HAL_DMA_Init+0x430>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01d      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_DMA_Init+0x434>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <HAL_DMA_Init+0x438>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a35      	ldr	r2, [pc, #212]	; (8002f0c <HAL_DMA_Init+0x43c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00e      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <HAL_DMA_Init+0x440>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <HAL_DMA_Init+0x444>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_Init+0x38a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_DMA_Init+0x448>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Init+0x38e>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_DMA_Init+0x390>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8097 	beq.w	8002f94 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a24      	ldr	r2, [pc, #144]	; (8002efc <HAL_DMA_Init+0x42c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d021      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_DMA_Init+0x430>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01c      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <HAL_DMA_Init+0x434>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d017      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <HAL_DMA_Init+0x438>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d012      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_DMA_Init+0x43c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00d      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_DMA_Init+0x440>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d008      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_DMA_Init+0x444>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_Init+0x3e4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_DMA_Init+0x448>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_DMA_Init+0x44c>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d020      	beq.n	8002f20 <HAL_DMA_Init+0x450>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d102      	bne.n	8002eec <HAL_DMA_Init+0x41c>
 8002ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eea:	e01a      	b.n	8002f22 <HAL_DMA_Init+0x452>
 8002eec:	2300      	movs	r3, #0
 8002eee:	e018      	b.n	8002f22 <HAL_DMA_Init+0x452>
 8002ef0:	fe10803f 	.word	0xfe10803f
 8002ef4:	5c001000 	.word	0x5c001000
 8002ef8:	ffff0000 	.word	0xffff0000
 8002efc:	58025408 	.word	0x58025408
 8002f00:	5802541c 	.word	0x5802541c
 8002f04:	58025430 	.word	0x58025430
 8002f08:	58025444 	.word	0x58025444
 8002f0c:	58025458 	.word	0x58025458
 8002f10:	5802546c 	.word	0x5802546c
 8002f14:	58025480 	.word	0x58025480
 8002f18:	58025494 	.word	0x58025494
 8002f1c:	fffe000f 	.word	0xfffe000f
 8002f20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <HAL_DMA_Init+0x650>)
 8002f68:	4413      	add	r3, r2
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_DMA_Init+0x654>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	009a      	lsls	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f002 f9a7 	bl	80052cc <DMA_CalcBaseAndBitshift>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	e008      	b.n	8002fa6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0b7      	b.n	8003116 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5f      	ldr	r2, [pc, #380]	; (8003128 <HAL_DMA_Init+0x658>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d072      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5d      	ldr	r2, [pc, #372]	; (800312c <HAL_DMA_Init+0x65c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d06d      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5c      	ldr	r2, [pc, #368]	; (8003130 <HAL_DMA_Init+0x660>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d068      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5a      	ldr	r2, [pc, #360]	; (8003134 <HAL_DMA_Init+0x664>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d063      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a59      	ldr	r2, [pc, #356]	; (8003138 <HAL_DMA_Init+0x668>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a57      	ldr	r2, [pc, #348]	; (800313c <HAL_DMA_Init+0x66c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d059      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_DMA_Init+0x670>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d054      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a54      	ldr	r2, [pc, #336]	; (8003144 <HAL_DMA_Init+0x674>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04f      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_DMA_Init+0x678>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a51      	ldr	r2, [pc, #324]	; (800314c <HAL_DMA_Init+0x67c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a50      	ldr	r2, [pc, #320]	; (8003150 <HAL_DMA_Init+0x680>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a4e      	ldr	r2, [pc, #312]	; (8003154 <HAL_DMA_Init+0x684>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4d      	ldr	r2, [pc, #308]	; (8003158 <HAL_DMA_Init+0x688>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_DMA_Init+0x68c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <HAL_DMA_Init+0x690>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a48      	ldr	r2, [pc, #288]	; (8003164 <HAL_DMA_Init+0x694>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a47      	ldr	r2, [pc, #284]	; (8003168 <HAL_DMA_Init+0x698>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a45      	ldr	r2, [pc, #276]	; (800316c <HAL_DMA_Init+0x69c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_DMA_Init+0x6a0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a42      	ldr	r2, [pc, #264]	; (8003174 <HAL_DMA_Init+0x6a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a41      	ldr	r2, [pc, #260]	; (8003178 <HAL_DMA_Init+0x6a8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3f      	ldr	r2, [pc, #252]	; (800317c <HAL_DMA_Init+0x6ac>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a3e      	ldr	r2, [pc, #248]	; (8003180 <HAL_DMA_Init+0x6b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Init+0x5c6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3c      	ldr	r2, [pc, #240]	; (8003184 <HAL_DMA_Init+0x6b4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_DMA_Init+0x5ca>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_DMA_Init+0x5cc>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d032      	beq.n	8003106 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f002 fa41 	bl	8005528 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d102      	bne.n	80030b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_DMA_Init+0x624>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d80c      	bhi.n	80030f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f002 fabe 	bl	800565c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	e008      	b.n	8003106 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	a7fdabf8 	.word	0xa7fdabf8
 8003124:	cccccccd 	.word	0xcccccccd
 8003128:	40020010 	.word	0x40020010
 800312c:	40020028 	.word	0x40020028
 8003130:	40020040 	.word	0x40020040
 8003134:	40020058 	.word	0x40020058
 8003138:	40020070 	.word	0x40020070
 800313c:	40020088 	.word	0x40020088
 8003140:	400200a0 	.word	0x400200a0
 8003144:	400200b8 	.word	0x400200b8
 8003148:	40020410 	.word	0x40020410
 800314c:	40020428 	.word	0x40020428
 8003150:	40020440 	.word	0x40020440
 8003154:	40020458 	.word	0x40020458
 8003158:	40020470 	.word	0x40020470
 800315c:	40020488 	.word	0x40020488
 8003160:	400204a0 	.word	0x400204a0
 8003164:	400204b8 	.word	0x400204b8
 8003168:	58025408 	.word	0x58025408
 800316c:	5802541c 	.word	0x5802541c
 8003170:	58025430 	.word	0x58025430
 8003174:	58025444 	.word	0x58025444
 8003178:	58025458 	.word	0x58025458
 800317c:	5802546c 	.word	0x5802546c
 8003180:	58025480 	.word	0x58025480
 8003184:	58025494 	.word	0x58025494

08003188 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e226      	b.n	80035f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Start_IT+0x2a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e21f      	b.n	80035f2 <HAL_DMA_Start_IT+0x46a>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	f040 820a 	bne.w	80035dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a68      	ldr	r2, [pc, #416]	; (800337c <HAL_DMA_Start_IT+0x1f4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d04a      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a66      	ldr	r2, [pc, #408]	; (8003380 <HAL_DMA_Start_IT+0x1f8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d045      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_DMA_Start_IT+0x1fc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d040      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a63      	ldr	r2, [pc, #396]	; (8003388 <HAL_DMA_Start_IT+0x200>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d03b      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a62      	ldr	r2, [pc, #392]	; (800338c <HAL_DMA_Start_IT+0x204>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a60      	ldr	r2, [pc, #384]	; (8003390 <HAL_DMA_Start_IT+0x208>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5f      	ldr	r2, [pc, #380]	; (8003394 <HAL_DMA_Start_IT+0x20c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d02c      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a5d      	ldr	r2, [pc, #372]	; (8003398 <HAL_DMA_Start_IT+0x210>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d027      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5c      	ldr	r2, [pc, #368]	; (800339c <HAL_DMA_Start_IT+0x214>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <HAL_DMA_Start_IT+0x218>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a59      	ldr	r2, [pc, #356]	; (80033a4 <HAL_DMA_Start_IT+0x21c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_DMA_Start_IT+0x220>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_DMA_Start_IT+0x224>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a54      	ldr	r2, [pc, #336]	; (80033b0 <HAL_DMA_Start_IT+0x228>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a53      	ldr	r2, [pc, #332]	; (80033b4 <HAL_DMA_Start_IT+0x22c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_DMA_Start_IT+0xee>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a51      	ldr	r2, [pc, #324]	; (80033b8 <HAL_DMA_Start_IT+0x230>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <HAL_DMA_Start_IT+0x100>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e007      	b.n	8003298 <HAL_DMA_Start_IT+0x110>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f001 fe68 	bl	8004f74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a34      	ldr	r2, [pc, #208]	; (800337c <HAL_DMA_Start_IT+0x1f4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d04a      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a33      	ldr	r2, [pc, #204]	; (8003380 <HAL_DMA_Start_IT+0x1f8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d045      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a31      	ldr	r2, [pc, #196]	; (8003384 <HAL_DMA_Start_IT+0x1fc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d040      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a30      	ldr	r2, [pc, #192]	; (8003388 <HAL_DMA_Start_IT+0x200>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d03b      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2e      	ldr	r2, [pc, #184]	; (800338c <HAL_DMA_Start_IT+0x204>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d036      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <HAL_DMA_Start_IT+0x208>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d031      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_DMA_Start_IT+0x20c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02c      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <HAL_DMA_Start_IT+0x210>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d027      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a28      	ldr	r2, [pc, #160]	; (800339c <HAL_DMA_Start_IT+0x214>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d022      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <HAL_DMA_Start_IT+0x218>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d01d      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <HAL_DMA_Start_IT+0x21c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d018      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <HAL_DMA_Start_IT+0x220>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d013      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_DMA_Start_IT+0x224>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00e      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <HAL_DMA_Start_IT+0x228>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d009      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_DMA_Start_IT+0x22c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d004      	beq.n	8003344 <HAL_DMA_Start_IT+0x1bc>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_DMA_Start_IT+0x230>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_DMA_Start_IT+0x1c0>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_DMA_Start_IT+0x1c2>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d036      	beq.n	80033bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 021e 	bic.w	r2, r3, #30
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0216 	orr.w	r2, r2, #22
 8003360:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03e      	beq.n	80033e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0208 	orr.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e035      	b.n	80033e8 <HAL_DMA_Start_IT+0x260>
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020e 	bic.w	r2, r3, #14
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 020a 	orr.w	r2, r2, #10
 80033ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0204 	orr.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a83      	ldr	r2, [pc, #524]	; (80035fc <HAL_DMA_Start_IT+0x474>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d072      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a82      	ldr	r2, [pc, #520]	; (8003600 <HAL_DMA_Start_IT+0x478>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d06d      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a80      	ldr	r2, [pc, #512]	; (8003604 <HAL_DMA_Start_IT+0x47c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d068      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7f      	ldr	r2, [pc, #508]	; (8003608 <HAL_DMA_Start_IT+0x480>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d063      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7d      	ldr	r2, [pc, #500]	; (800360c <HAL_DMA_Start_IT+0x484>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d05e      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7c      	ldr	r2, [pc, #496]	; (8003610 <HAL_DMA_Start_IT+0x488>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d059      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7a      	ldr	r2, [pc, #488]	; (8003614 <HAL_DMA_Start_IT+0x48c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d054      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a79      	ldr	r2, [pc, #484]	; (8003618 <HAL_DMA_Start_IT+0x490>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d04f      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a77      	ldr	r2, [pc, #476]	; (800361c <HAL_DMA_Start_IT+0x494>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d04a      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a76      	ldr	r2, [pc, #472]	; (8003620 <HAL_DMA_Start_IT+0x498>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d045      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a74      	ldr	r2, [pc, #464]	; (8003624 <HAL_DMA_Start_IT+0x49c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d040      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <HAL_DMA_Start_IT+0x4a0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d03b      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a71      	ldr	r2, [pc, #452]	; (800362c <HAL_DMA_Start_IT+0x4a4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d036      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a70      	ldr	r2, [pc, #448]	; (8003630 <HAL_DMA_Start_IT+0x4a8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d031      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_DMA_Start_IT+0x4ac>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02c      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6d      	ldr	r2, [pc, #436]	; (8003638 <HAL_DMA_Start_IT+0x4b0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d027      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6b      	ldr	r2, [pc, #428]	; (800363c <HAL_DMA_Start_IT+0x4b4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6a      	ldr	r2, [pc, #424]	; (8003640 <HAL_DMA_Start_IT+0x4b8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d01d      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a68      	ldr	r2, [pc, #416]	; (8003644 <HAL_DMA_Start_IT+0x4bc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_DMA_Start_IT+0x4c0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a65      	ldr	r2, [pc, #404]	; (800364c <HAL_DMA_Start_IT+0x4c4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a64      	ldr	r2, [pc, #400]	; (8003650 <HAL_DMA_Start_IT+0x4c8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a62      	ldr	r2, [pc, #392]	; (8003654 <HAL_DMA_Start_IT+0x4cc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_DMA_Start_IT+0x350>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_DMA_Start_IT+0x4d0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Start_IT+0x354>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_DMA_Start_IT+0x356>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01a      	beq.n	8003518 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003516:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a37      	ldr	r2, [pc, #220]	; (80035fc <HAL_DMA_Start_IT+0x474>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d04a      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a36      	ldr	r2, [pc, #216]	; (8003600 <HAL_DMA_Start_IT+0x478>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d045      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a34      	ldr	r2, [pc, #208]	; (8003604 <HAL_DMA_Start_IT+0x47c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d040      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a33      	ldr	r2, [pc, #204]	; (8003608 <HAL_DMA_Start_IT+0x480>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d03b      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a31      	ldr	r2, [pc, #196]	; (800360c <HAL_DMA_Start_IT+0x484>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d036      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a30      	ldr	r2, [pc, #192]	; (8003610 <HAL_DMA_Start_IT+0x488>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d031      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <HAL_DMA_Start_IT+0x48c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02c      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <HAL_DMA_Start_IT+0x490>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d027      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2b      	ldr	r2, [pc, #172]	; (800361c <HAL_DMA_Start_IT+0x494>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <HAL_DMA_Start_IT+0x498>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01d      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <HAL_DMA_Start_IT+0x49c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_DMA_Start_IT+0x4a0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a25      	ldr	r2, [pc, #148]	; (800362c <HAL_DMA_Start_IT+0x4a4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a24      	ldr	r2, [pc, #144]	; (8003630 <HAL_DMA_Start_IT+0x4a8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a22      	ldr	r2, [pc, #136]	; (8003634 <HAL_DMA_Start_IT+0x4ac>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_Start_IT+0x430>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_DMA_Start_IT+0x4b0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d108      	bne.n	80035ca <HAL_DMA_Start_IT+0x442>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e012      	b.n	80035f0 <HAL_DMA_Start_IT+0x468>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e009      	b.n	80035f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40020010 	.word	0x40020010
 8003600:	40020028 	.word	0x40020028
 8003604:	40020040 	.word	0x40020040
 8003608:	40020058 	.word	0x40020058
 800360c:	40020070 	.word	0x40020070
 8003610:	40020088 	.word	0x40020088
 8003614:	400200a0 	.word	0x400200a0
 8003618:	400200b8 	.word	0x400200b8
 800361c:	40020410 	.word	0x40020410
 8003620:	40020428 	.word	0x40020428
 8003624:	40020440 	.word	0x40020440
 8003628:	40020458 	.word	0x40020458
 800362c:	40020470 	.word	0x40020470
 8003630:	40020488 	.word	0x40020488
 8003634:	400204a0 	.word	0x400204a0
 8003638:	400204b8 	.word	0x400204b8
 800363c:	58025408 	.word	0x58025408
 8003640:	5802541c 	.word	0x5802541c
 8003644:	58025430 	.word	0x58025430
 8003648:	58025444 	.word	0x58025444
 800364c:	58025458 	.word	0x58025458
 8003650:	5802546c 	.word	0x5802546c
 8003654:	58025480 	.word	0x58025480
 8003658:	58025494 	.word	0x58025494

0800365c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003664:	f7fe fda6 	bl	80021b4 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e2dc      	b.n	8003c2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d008      	beq.n	8003692 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e2cd      	b.n	8003c2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a76      	ldr	r2, [pc, #472]	; (8003870 <HAL_DMA_Abort+0x214>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d04a      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a74      	ldr	r2, [pc, #464]	; (8003874 <HAL_DMA_Abort+0x218>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d045      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a73      	ldr	r2, [pc, #460]	; (8003878 <HAL_DMA_Abort+0x21c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d040      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a71      	ldr	r2, [pc, #452]	; (800387c <HAL_DMA_Abort+0x220>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d03b      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a70      	ldr	r2, [pc, #448]	; (8003880 <HAL_DMA_Abort+0x224>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d036      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	; (8003884 <HAL_DMA_Abort+0x228>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6d      	ldr	r2, [pc, #436]	; (8003888 <HAL_DMA_Abort+0x22c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d02c      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a6b      	ldr	r2, [pc, #428]	; (800388c <HAL_DMA_Abort+0x230>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d027      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6a      	ldr	r2, [pc, #424]	; (8003890 <HAL_DMA_Abort+0x234>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a68      	ldr	r2, [pc, #416]	; (8003894 <HAL_DMA_Abort+0x238>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01d      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a67      	ldr	r2, [pc, #412]	; (8003898 <HAL_DMA_Abort+0x23c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a65      	ldr	r2, [pc, #404]	; (800389c <HAL_DMA_Abort+0x240>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a64      	ldr	r2, [pc, #400]	; (80038a0 <HAL_DMA_Abort+0x244>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a62      	ldr	r2, [pc, #392]	; (80038a4 <HAL_DMA_Abort+0x248>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a61      	ldr	r2, [pc, #388]	; (80038a8 <HAL_DMA_Abort+0x24c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_DMA_Abort+0xd6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5f      	ldr	r2, [pc, #380]	; (80038ac <HAL_DMA_Abort+0x250>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_DMA_Abort+0xda>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_DMA_Abort+0xdc>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 021e 	bic.w	r2, r2, #30
 800374a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800375a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e00a      	b.n	800377a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 020e 	bic.w	r2, r2, #14
 8003772:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3c      	ldr	r2, [pc, #240]	; (8003870 <HAL_DMA_Abort+0x214>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d072      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_DMA_Abort+0x218>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d06d      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a39      	ldr	r2, [pc, #228]	; (8003878 <HAL_DMA_Abort+0x21c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d068      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a37      	ldr	r2, [pc, #220]	; (800387c <HAL_DMA_Abort+0x220>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d063      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a36      	ldr	r2, [pc, #216]	; (8003880 <HAL_DMA_Abort+0x224>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d05e      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_DMA_Abort+0x228>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d059      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a33      	ldr	r2, [pc, #204]	; (8003888 <HAL_DMA_Abort+0x22c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d054      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_DMA_Abort+0x230>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04f      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_DMA_Abort+0x234>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d04a      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <HAL_DMA_Abort+0x238>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d045      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <HAL_DMA_Abort+0x23c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d040      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	; (800389c <HAL_DMA_Abort+0x240>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d03b      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2a      	ldr	r2, [pc, #168]	; (80038a0 <HAL_DMA_Abort+0x244>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d036      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <HAL_DMA_Abort+0x248>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d031      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <HAL_DMA_Abort+0x24c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d02c      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a25      	ldr	r2, [pc, #148]	; (80038ac <HAL_DMA_Abort+0x250>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d027      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <HAL_DMA_Abort+0x254>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <HAL_DMA_Abort+0x258>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01d      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <HAL_DMA_Abort+0x25c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <HAL_DMA_Abort+0x260>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <HAL_DMA_Abort+0x264>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <HAL_DMA_Abort+0x268>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <HAL_DMA_Abort+0x26c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_DMA_Abort+0x20e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a19      	ldr	r2, [pc, #100]	; (80038cc <HAL_DMA_Abort+0x270>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d132      	bne.n	80038d0 <HAL_DMA_Abort+0x274>
 800386a:	2301      	movs	r3, #1
 800386c:	e031      	b.n	80038d2 <HAL_DMA_Abort+0x276>
 800386e:	bf00      	nop
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	58025408 	.word	0x58025408
 80038b4:	5802541c 	.word	0x5802541c
 80038b8:	58025430 	.word	0x58025430
 80038bc:	58025444 	.word	0x58025444
 80038c0:	58025458 	.word	0x58025458
 80038c4:	5802546c 	.word	0x5802546c
 80038c8:	58025480 	.word	0x58025480
 80038cc:	58025494 	.word	0x58025494
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6d      	ldr	r2, [pc, #436]	; (8003aa0 <HAL_DMA_Abort+0x444>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d04a      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6b      	ldr	r2, [pc, #428]	; (8003aa4 <HAL_DMA_Abort+0x448>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d045      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6a      	ldr	r2, [pc, #424]	; (8003aa8 <HAL_DMA_Abort+0x44c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d040      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a68      	ldr	r2, [pc, #416]	; (8003aac <HAL_DMA_Abort+0x450>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d03b      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a67      	ldr	r2, [pc, #412]	; (8003ab0 <HAL_DMA_Abort+0x454>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d036      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_DMA_Abort+0x458>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d031      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <HAL_DMA_Abort+0x45c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d02c      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a62      	ldr	r2, [pc, #392]	; (8003abc <HAL_DMA_Abort+0x460>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d027      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a61      	ldr	r2, [pc, #388]	; (8003ac0 <HAL_DMA_Abort+0x464>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5f      	ldr	r2, [pc, #380]	; (8003ac4 <HAL_DMA_Abort+0x468>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01d      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5e      	ldr	r2, [pc, #376]	; (8003ac8 <HAL_DMA_Abort+0x46c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d018      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5c      	ldr	r2, [pc, #368]	; (8003acc <HAL_DMA_Abort+0x470>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5b      	ldr	r2, [pc, #364]	; (8003ad0 <HAL_DMA_Abort+0x474>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a59      	ldr	r2, [pc, #356]	; (8003ad4 <HAL_DMA_Abort+0x478>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_DMA_Abort+0x47c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_DMA_Abort+0x32a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a56      	ldr	r2, [pc, #344]	; (8003adc <HAL_DMA_Abort+0x480>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <HAL_DMA_Abort+0x33c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e007      	b.n	80039a8 <HAL_DMA_Abort+0x34c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039a8:	e013      	b.n	80039d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039aa:	f7fe fc03 	bl	80021b4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d90c      	bls.n	80039d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e12d      	b.n	8003c2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <HAL_DMA_Abort+0x444>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04a      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <HAL_DMA_Abort+0x448>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d045      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <HAL_DMA_Abort+0x44c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d040      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2a      	ldr	r2, [pc, #168]	; (8003aac <HAL_DMA_Abort+0x450>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d03b      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <HAL_DMA_Abort+0x454>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d036      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a27      	ldr	r2, [pc, #156]	; (8003ab4 <HAL_DMA_Abort+0x458>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d031      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a26      	ldr	r2, [pc, #152]	; (8003ab8 <HAL_DMA_Abort+0x45c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d02c      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a24      	ldr	r2, [pc, #144]	; (8003abc <HAL_DMA_Abort+0x460>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d027      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_DMA_Abort+0x464>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <HAL_DMA_Abort+0x468>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01d      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a20      	ldr	r2, [pc, #128]	; (8003ac8 <HAL_DMA_Abort+0x46c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_DMA_Abort+0x470>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_DMA_Abort+0x474>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <HAL_DMA_Abort+0x478>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <HAL_DMA_Abort+0x47c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_DMA_Abort+0x422>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_DMA_Abort+0x480>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Abort+0x426>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_DMA_Abort+0x428>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02b      	beq.n	8003ae0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	223f      	movs	r2, #63	; 0x3f
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	e02a      	b.n	8003af6 <HAL_DMA_Abort+0x49a>
 8003aa0:	40020010 	.word	0x40020010
 8003aa4:	40020028 	.word	0x40020028
 8003aa8:	40020040 	.word	0x40020040
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	40020070 	.word	0x40020070
 8003ab4:	40020088 	.word	0x40020088
 8003ab8:	400200a0 	.word	0x400200a0
 8003abc:	400200b8 	.word	0x400200b8
 8003ac0:	40020410 	.word	0x40020410
 8003ac4:	40020428 	.word	0x40020428
 8003ac8:	40020440 	.word	0x40020440
 8003acc:	40020458 	.word	0x40020458
 8003ad0:	40020470 	.word	0x40020470
 8003ad4:	40020488 	.word	0x40020488
 8003ad8:	400204a0 	.word	0x400204a0
 8003adc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2201      	movs	r2, #1
 8003af0:	409a      	lsls	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4f      	ldr	r2, [pc, #316]	; (8003c38 <HAL_DMA_Abort+0x5dc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d072      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a4d      	ldr	r2, [pc, #308]	; (8003c3c <HAL_DMA_Abort+0x5e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d06d      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4c      	ldr	r2, [pc, #304]	; (8003c40 <HAL_DMA_Abort+0x5e4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d068      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <HAL_DMA_Abort+0x5e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d063      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <HAL_DMA_Abort+0x5ec>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d05e      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a47      	ldr	r2, [pc, #284]	; (8003c4c <HAL_DMA_Abort+0x5f0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d059      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a46      	ldr	r2, [pc, #280]	; (8003c50 <HAL_DMA_Abort+0x5f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d054      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <HAL_DMA_Abort+0x5f8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04f      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a43      	ldr	r2, [pc, #268]	; (8003c58 <HAL_DMA_Abort+0x5fc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <HAL_DMA_Abort+0x600>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <HAL_DMA_Abort+0x604>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <HAL_DMA_Abort+0x608>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <HAL_DMA_Abort+0x60c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <HAL_DMA_Abort+0x610>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <HAL_DMA_Abort+0x614>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <HAL_DMA_Abort+0x618>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <HAL_DMA_Abort+0x61c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a35      	ldr	r2, [pc, #212]	; (8003c7c <HAL_DMA_Abort+0x620>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <HAL_DMA_Abort+0x624>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a32      	ldr	r2, [pc, #200]	; (8003c84 <HAL_DMA_Abort+0x628>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_DMA_Abort+0x62c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <HAL_DMA_Abort+0x630>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <HAL_DMA_Abort+0x634>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_Abort+0x58a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <HAL_DMA_Abort+0x638>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_Abort+0x58e>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_DMA_Abort+0x590>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bf8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40020010 	.word	0x40020010
 8003c3c:	40020028 	.word	0x40020028
 8003c40:	40020040 	.word	0x40020040
 8003c44:	40020058 	.word	0x40020058
 8003c48:	40020070 	.word	0x40020070
 8003c4c:	40020088 	.word	0x40020088
 8003c50:	400200a0 	.word	0x400200a0
 8003c54:	400200b8 	.word	0x400200b8
 8003c58:	40020410 	.word	0x40020410
 8003c5c:	40020428 	.word	0x40020428
 8003c60:	40020440 	.word	0x40020440
 8003c64:	40020458 	.word	0x40020458
 8003c68:	40020470 	.word	0x40020470
 8003c6c:	40020488 	.word	0x40020488
 8003c70:	400204a0 	.word	0x400204a0
 8003c74:	400204b8 	.word	0x400204b8
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	5802541c 	.word	0x5802541c
 8003c80:	58025430 	.word	0x58025430
 8003c84:	58025444 	.word	0x58025444
 8003c88:	58025458 	.word	0x58025458
 8003c8c:	5802546c 	.word	0x5802546c
 8003c90:	58025480 	.word	0x58025480
 8003c94:	58025494 	.word	0x58025494

08003c98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e205      	b.n	80040b6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e1fa      	b.n	80040b6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a8c      	ldr	r2, [pc, #560]	; (8003ef8 <HAL_DMA_Abort_IT+0x260>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d04a      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a8b      	ldr	r2, [pc, #556]	; (8003efc <HAL_DMA_Abort_IT+0x264>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d045      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a89      	ldr	r2, [pc, #548]	; (8003f00 <HAL_DMA_Abort_IT+0x268>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d040      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a88      	ldr	r2, [pc, #544]	; (8003f04 <HAL_DMA_Abort_IT+0x26c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d03b      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a86      	ldr	r2, [pc, #536]	; (8003f08 <HAL_DMA_Abort_IT+0x270>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d036      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a85      	ldr	r2, [pc, #532]	; (8003f0c <HAL_DMA_Abort_IT+0x274>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d031      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a83      	ldr	r2, [pc, #524]	; (8003f10 <HAL_DMA_Abort_IT+0x278>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02c      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a82      	ldr	r2, [pc, #520]	; (8003f14 <HAL_DMA_Abort_IT+0x27c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d027      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a80      	ldr	r2, [pc, #512]	; (8003f18 <HAL_DMA_Abort_IT+0x280>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7f      	ldr	r2, [pc, #508]	; (8003f1c <HAL_DMA_Abort_IT+0x284>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01d      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a7d      	ldr	r2, [pc, #500]	; (8003f20 <HAL_DMA_Abort_IT+0x288>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7c      	ldr	r2, [pc, #496]	; (8003f24 <HAL_DMA_Abort_IT+0x28c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7a      	ldr	r2, [pc, #488]	; (8003f28 <HAL_DMA_Abort_IT+0x290>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a79      	ldr	r2, [pc, #484]	; (8003f2c <HAL_DMA_Abort_IT+0x294>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a77      	ldr	r2, [pc, #476]	; (8003f30 <HAL_DMA_Abort_IT+0x298>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_DMA_Abort_IT+0xc8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a76      	ldr	r2, [pc, #472]	; (8003f34 <HAL_DMA_Abort_IT+0x29c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_DMA_Abort_IT+0xcc>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_DMA_Abort_IT+0xce>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d065      	beq.n	8003e36 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a60      	ldr	r2, [pc, #384]	; (8003ef8 <HAL_DMA_Abort_IT+0x260>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5e      	ldr	r2, [pc, #376]	; (8003efc <HAL_DMA_Abort_IT+0x264>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5d      	ldr	r2, [pc, #372]	; (8003f00 <HAL_DMA_Abort_IT+0x268>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5b      	ldr	r2, [pc, #364]	; (8003f04 <HAL_DMA_Abort_IT+0x26c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5a      	ldr	r2, [pc, #360]	; (8003f08 <HAL_DMA_Abort_IT+0x270>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_DMA_Abort_IT+0x274>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a57      	ldr	r2, [pc, #348]	; (8003f10 <HAL_DMA_Abort_IT+0x278>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_DMA_Abort_IT+0x27c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a54      	ldr	r2, [pc, #336]	; (8003f18 <HAL_DMA_Abort_IT+0x280>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_DMA_Abort_IT+0x284>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a51      	ldr	r2, [pc, #324]	; (8003f20 <HAL_DMA_Abort_IT+0x288>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_DMA_Abort_IT+0x28c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_DMA_Abort_IT+0x290>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a4c      	ldr	r2, [pc, #304]	; (8003f2c <HAL_DMA_Abort_IT+0x294>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4b      	ldr	r2, [pc, #300]	; (8003f30 <HAL_DMA_Abort_IT+0x298>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_Abort_IT+0x17a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a49      	ldr	r2, [pc, #292]	; (8003f34 <HAL_DMA_Abort_IT+0x29c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d108      	bne.n	8003e24 <HAL_DMA_Abort_IT+0x18c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e147      	b.n	80040b4 <HAL_DMA_Abort_IT+0x41c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e13e      	b.n	80040b4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 020e 	bic.w	r2, r2, #14
 8003e44:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <HAL_DMA_Abort_IT+0x260>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04a      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a29      	ldr	r2, [pc, #164]	; (8003efc <HAL_DMA_Abort_IT+0x264>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d045      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <HAL_DMA_Abort_IT+0x268>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d040      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <HAL_DMA_Abort_IT+0x26c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <HAL_DMA_Abort_IT+0x270>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d036      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	; (8003f0c <HAL_DMA_Abort_IT+0x274>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <HAL_DMA_Abort_IT+0x278>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <HAL_DMA_Abort_IT+0x27c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_DMA_Abort_IT+0x280>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_DMA_Abort_IT+0x284>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_DMA_Abort_IT+0x288>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_DMA_Abort_IT+0x28c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <HAL_DMA_Abort_IT+0x290>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <HAL_DMA_Abort_IT+0x294>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_DMA_Abort_IT+0x298>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0x24e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <HAL_DMA_Abort_IT+0x29c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d128      	bne.n	8003f38 <HAL_DMA_Abort_IT+0x2a0>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e027      	b.n	8003f48 <HAL_DMA_Abort_IT+0x2b0>
 8003ef8:	40020010 	.word	0x40020010
 8003efc:	40020028 	.word	0x40020028
 8003f00:	40020040 	.word	0x40020040
 8003f04:	40020058 	.word	0x40020058
 8003f08:	40020070 	.word	0x40020070
 8003f0c:	40020088 	.word	0x40020088
 8003f10:	400200a0 	.word	0x400200a0
 8003f14:	400200b8 	.word	0x400200b8
 8003f18:	40020410 	.word	0x40020410
 8003f1c:	40020428 	.word	0x40020428
 8003f20:	40020440 	.word	0x40020440
 8003f24:	40020458 	.word	0x40020458
 8003f28:	40020470 	.word	0x40020470
 8003f2c:	40020488 	.word	0x40020488
 8003f30:	400204a0 	.word	0x400204a0
 8003f34:	400204b8 	.word	0x400204b8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5c      	ldr	r2, [pc, #368]	; (80040c0 <HAL_DMA_Abort_IT+0x428>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d072      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5b      	ldr	r2, [pc, #364]	; (80040c4 <HAL_DMA_Abort_IT+0x42c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d06d      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a59      	ldr	r2, [pc, #356]	; (80040c8 <HAL_DMA_Abort_IT+0x430>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d068      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a58      	ldr	r2, [pc, #352]	; (80040cc <HAL_DMA_Abort_IT+0x434>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d063      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_DMA_Abort_IT+0x438>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d05e      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_DMA_Abort_IT+0x43c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d059      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a53      	ldr	r2, [pc, #332]	; (80040d8 <HAL_DMA_Abort_IT+0x440>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d054      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a52      	ldr	r2, [pc, #328]	; (80040dc <HAL_DMA_Abort_IT+0x444>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04f      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a50      	ldr	r2, [pc, #320]	; (80040e0 <HAL_DMA_Abort_IT+0x448>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a4f      	ldr	r2, [pc, #316]	; (80040e4 <HAL_DMA_Abort_IT+0x44c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a4d      	ldr	r2, [pc, #308]	; (80040e8 <HAL_DMA_Abort_IT+0x450>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4c      	ldr	r2, [pc, #304]	; (80040ec <HAL_DMA_Abort_IT+0x454>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_DMA_Abort_IT+0x458>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a49      	ldr	r2, [pc, #292]	; (80040f4 <HAL_DMA_Abort_IT+0x45c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a47      	ldr	r2, [pc, #284]	; (80040f8 <HAL_DMA_Abort_IT+0x460>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a46      	ldr	r2, [pc, #280]	; (80040fc <HAL_DMA_Abort_IT+0x464>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a44      	ldr	r2, [pc, #272]	; (8004100 <HAL_DMA_Abort_IT+0x468>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a43      	ldr	r2, [pc, #268]	; (8004104 <HAL_DMA_Abort_IT+0x46c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a41      	ldr	r2, [pc, #260]	; (8004108 <HAL_DMA_Abort_IT+0x470>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a40      	ldr	r2, [pc, #256]	; (800410c <HAL_DMA_Abort_IT+0x474>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3e      	ldr	r2, [pc, #248]	; (8004110 <HAL_DMA_Abort_IT+0x478>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <HAL_DMA_Abort_IT+0x47c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a3b      	ldr	r2, [pc, #236]	; (8004118 <HAL_DMA_Abort_IT+0x480>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_Abort_IT+0x3a0>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a3a      	ldr	r2, [pc, #232]	; (800411c <HAL_DMA_Abort_IT+0x484>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <HAL_DMA_Abort_IT+0x3a4>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_DMA_Abort_IT+0x3a6>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004050:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2201      	movs	r2, #1
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004070:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004088:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004092:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40020010 	.word	0x40020010
 80040c4:	40020028 	.word	0x40020028
 80040c8:	40020040 	.word	0x40020040
 80040cc:	40020058 	.word	0x40020058
 80040d0:	40020070 	.word	0x40020070
 80040d4:	40020088 	.word	0x40020088
 80040d8:	400200a0 	.word	0x400200a0
 80040dc:	400200b8 	.word	0x400200b8
 80040e0:	40020410 	.word	0x40020410
 80040e4:	40020428 	.word	0x40020428
 80040e8:	40020440 	.word	0x40020440
 80040ec:	40020458 	.word	0x40020458
 80040f0:	40020470 	.word	0x40020470
 80040f4:	40020488 	.word	0x40020488
 80040f8:	400204a0 	.word	0x400204a0
 80040fc:	400204b8 	.word	0x400204b8
 8004100:	58025408 	.word	0x58025408
 8004104:	5802541c 	.word	0x5802541c
 8004108:	58025430 	.word	0x58025430
 800410c:	58025444 	.word	0x58025444
 8004110:	58025458 	.word	0x58025458
 8004114:	5802546c 	.word	0x5802546c
 8004118:	58025480 	.word	0x58025480
 800411c:	58025494 	.word	0x58025494

08004120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800412c:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_DMA_IRQHandler+0x1ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_DMA_IRQHandler+0x1b0>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a5f      	ldr	r2, [pc, #380]	; (80042d4 <HAL_DMA_IRQHandler+0x1b4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04a      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d045      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <HAL_DMA_IRQHandler+0x1bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d040      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5a      	ldr	r2, [pc, #360]	; (80042e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d03b      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a59      	ldr	r2, [pc, #356]	; (80042e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d036      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_DMA_IRQHandler+0x1c8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d031      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a56      	ldr	r2, [pc, #344]	; (80042ec <HAL_DMA_IRQHandler+0x1cc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d02c      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a54      	ldr	r2, [pc, #336]	; (80042f0 <HAL_DMA_IRQHandler+0x1d0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d027      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a53      	ldr	r2, [pc, #332]	; (80042f4 <HAL_DMA_IRQHandler+0x1d4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <HAL_DMA_IRQHandler+0x1d8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a50      	ldr	r2, [pc, #320]	; (80042fc <HAL_DMA_IRQHandler+0x1dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <HAL_DMA_IRQHandler+0x1e0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4d      	ldr	r2, [pc, #308]	; (8004304 <HAL_DMA_IRQHandler+0x1e4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_DMA_IRQHandler+0x1e8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_DMA_IRQHandler+0x1ec>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a48      	ldr	r2, [pc, #288]	; (8004310 <HAL_DMA_IRQHandler+0x1f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_IRQHandler+0xd6>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_DMA_IRQHandler+0xd8>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 842b 	beq.w	8004a54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2208      	movs	r2, #8
 8004208:	409a      	lsls	r2, r3
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a2 	beq.w	8004358 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_DMA_IRQHandler+0x1b4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d04a      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d045      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <HAL_DMA_IRQHandler+0x1bc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d040      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d03b      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a28      	ldr	r2, [pc, #160]	; (80042e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d036      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <HAL_DMA_IRQHandler+0x1c8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d031      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <HAL_DMA_IRQHandler+0x1cc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02c      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <HAL_DMA_IRQHandler+0x1d0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d027      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <HAL_DMA_IRQHandler+0x1d4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d022      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_DMA_IRQHandler+0x1d8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d01d      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <HAL_DMA_IRQHandler+0x1dc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d018      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <HAL_DMA_IRQHandler+0x1e0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <HAL_DMA_IRQHandler+0x1e4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00e      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_DMA_IRQHandler+0x1e8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_DMA_IRQHandler+0x1ec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_DMA_IRQHandler+0x1f0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d12f      	bne.n	8004314 <HAL_DMA_IRQHandler+0x1f4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf14      	ite	ne
 80042c2:	2301      	movne	r3, #1
 80042c4:	2300      	moveq	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	e02e      	b.n	8004328 <HAL_DMA_IRQHandler+0x208>
 80042ca:	bf00      	nop
 80042cc:	24000000 	.word	0x24000000
 80042d0:	1b4e81b5 	.word	0x1b4e81b5
 80042d4:	40020010 	.word	0x40020010
 80042d8:	40020028 	.word	0x40020028
 80042dc:	40020040 	.word	0x40020040
 80042e0:	40020058 	.word	0x40020058
 80042e4:	40020070 	.word	0x40020070
 80042e8:	40020088 	.word	0x40020088
 80042ec:	400200a0 	.word	0x400200a0
 80042f0:	400200b8 	.word	0x400200b8
 80042f4:	40020410 	.word	0x40020410
 80042f8:	40020428 	.word	0x40020428
 80042fc:	40020440 	.word	0x40020440
 8004300:	40020458 	.word	0x40020458
 8004304:	40020470 	.word	0x40020470
 8004308:	40020488 	.word	0x40020488
 800430c:	400204a0 	.word	0x400204a0
 8004310:	400204b8 	.word	0x400204b8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2208      	movs	r2, #8
 8004346:	409a      	lsls	r2, r3
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d06e      	beq.n	800444c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a69      	ldr	r2, [pc, #420]	; (8004518 <HAL_DMA_IRQHandler+0x3f8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d04a      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a67      	ldr	r2, [pc, #412]	; (800451c <HAL_DMA_IRQHandler+0x3fc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d045      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a66      	ldr	r2, [pc, #408]	; (8004520 <HAL_DMA_IRQHandler+0x400>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d040      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a64      	ldr	r2, [pc, #400]	; (8004524 <HAL_DMA_IRQHandler+0x404>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d03b      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a63      	ldr	r2, [pc, #396]	; (8004528 <HAL_DMA_IRQHandler+0x408>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d036      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a61      	ldr	r2, [pc, #388]	; (800452c <HAL_DMA_IRQHandler+0x40c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d031      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a60      	ldr	r2, [pc, #384]	; (8004530 <HAL_DMA_IRQHandler+0x410>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d02c      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a5e      	ldr	r2, [pc, #376]	; (8004534 <HAL_DMA_IRQHandler+0x414>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d027      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <HAL_DMA_IRQHandler+0x418>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5b      	ldr	r2, [pc, #364]	; (800453c <HAL_DMA_IRQHandler+0x41c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5a      	ldr	r2, [pc, #360]	; (8004540 <HAL_DMA_IRQHandler+0x420>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a58      	ldr	r2, [pc, #352]	; (8004544 <HAL_DMA_IRQHandler+0x424>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a57      	ldr	r2, [pc, #348]	; (8004548 <HAL_DMA_IRQHandler+0x428>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a55      	ldr	r2, [pc, #340]	; (800454c <HAL_DMA_IRQHandler+0x42c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a54      	ldr	r2, [pc, #336]	; (8004550 <HAL_DMA_IRQHandler+0x430>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_DMA_IRQHandler+0x434>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10a      	bne.n	8004424 <HAL_DMA_IRQHandler+0x304>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e003      	b.n	800442c <HAL_DMA_IRQHandler+0x30c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0202 	orr.w	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2204      	movs	r2, #4
 8004456:	409a      	lsls	r2, r3
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 808f 	beq.w	8004580 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <HAL_DMA_IRQHandler+0x3f8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d04a      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <HAL_DMA_IRQHandler+0x3fc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d045      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_DMA_IRQHandler+0x400>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d040      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <HAL_DMA_IRQHandler+0x404>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d03b      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_DMA_IRQHandler+0x408>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d036      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a24      	ldr	r2, [pc, #144]	; (800452c <HAL_DMA_IRQHandler+0x40c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d031      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <HAL_DMA_IRQHandler+0x410>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d02c      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <HAL_DMA_IRQHandler+0x414>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d027      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a20      	ldr	r2, [pc, #128]	; (8004538 <HAL_DMA_IRQHandler+0x418>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1e      	ldr	r2, [pc, #120]	; (800453c <HAL_DMA_IRQHandler+0x41c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01d      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_DMA_IRQHandler+0x420>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_DMA_IRQHandler+0x424>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_DMA_IRQHandler+0x428>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_DMA_IRQHandler+0x42c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_DMA_IRQHandler+0x430>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_DMA_IRQHandler+0x434>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d12a      	bne.n	8004558 <HAL_DMA_IRQHandler+0x438>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e023      	b.n	8004560 <HAL_DMA_IRQHandler+0x440>
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2204      	movs	r2, #4
 800456e:	409a      	lsls	r2, r3
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2210      	movs	r2, #16
 800458a:	409a      	lsls	r2, r3
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a6 	beq.w	80046e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_DMA_IRQHandler+0x690>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a83      	ldr	r2, [pc, #524]	; (80047b4 <HAL_DMA_IRQHandler+0x694>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a82      	ldr	r2, [pc, #520]	; (80047b8 <HAL_DMA_IRQHandler+0x698>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a80      	ldr	r2, [pc, #512]	; (80047bc <HAL_DMA_IRQHandler+0x69c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7f      	ldr	r2, [pc, #508]	; (80047c0 <HAL_DMA_IRQHandler+0x6a0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7d      	ldr	r2, [pc, #500]	; (80047c4 <HAL_DMA_IRQHandler+0x6a4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_DMA_IRQHandler+0x6a8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7a      	ldr	r2, [pc, #488]	; (80047cc <HAL_DMA_IRQHandler+0x6ac>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <HAL_DMA_IRQHandler+0x6b0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a77      	ldr	r2, [pc, #476]	; (80047d4 <HAL_DMA_IRQHandler+0x6b4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a76      	ldr	r2, [pc, #472]	; (80047d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a74      	ldr	r2, [pc, #464]	; (80047dc <HAL_DMA_IRQHandler+0x6bc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a73      	ldr	r2, [pc, #460]	; (80047e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a71      	ldr	r2, [pc, #452]	; (80047e4 <HAL_DMA_IRQHandler+0x6c4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a70      	ldr	r2, [pc, #448]	; (80047e8 <HAL_DMA_IRQHandler+0x6c8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_DMA_IRQHandler+0x6cc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10a      	bne.n	800464c <HAL_DMA_IRQHandler+0x52c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e009      	b.n	8004660 <HAL_DMA_IRQHandler+0x540>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2210      	movs	r2, #16
 800466e:	409a      	lsls	r2, r3
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d024      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
 80046a0:	e01f      	b.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
 80046b2:	e016      	b.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0208 	bic.w	r2, r2, #8
 80046d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2220      	movs	r2, #32
 80046ec:	409a      	lsls	r2, r3
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8110 	beq.w	8004918 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <HAL_DMA_IRQHandler+0x690>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <HAL_DMA_IRQHandler+0x694>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HAL_DMA_IRQHandler+0x698>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a28      	ldr	r2, [pc, #160]	; (80047bc <HAL_DMA_IRQHandler+0x69c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <HAL_DMA_IRQHandler+0x6a0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <HAL_DMA_IRQHandler+0x6a4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <HAL_DMA_IRQHandler+0x6a8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a22      	ldr	r2, [pc, #136]	; (80047cc <HAL_DMA_IRQHandler+0x6ac>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <HAL_DMA_IRQHandler+0x6b0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_DMA_IRQHandler+0x6b4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_DMA_IRQHandler+0x6bc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_DMA_IRQHandler+0x6c4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_DMA_IRQHandler+0x6c8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_DMA_IRQHandler+0x6cc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d12b      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x6d0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e02a      	b.n	8004804 <HAL_DMA_IRQHandler+0x6e4>
 80047ae:	bf00      	nop
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8087 	beq.w	8004918 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2220      	movs	r2, #32
 8004814:	409a      	lsls	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b04      	cmp	r3, #4
 8004824:	d139      	bne.n	800489a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0216 	bic.w	r2, r2, #22
 8004834:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004844:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <HAL_DMA_IRQHandler+0x736>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0208 	bic.w	r2, r2, #8
 8004864:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	223f      	movs	r2, #63	; 0x3f
 8004870:	409a      	lsls	r2, r3
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 834a 	beq.w	8004f24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
          }
          return;
 8004898:	e344      	b.n	8004f24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d018      	beq.n	80048da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e027      	b.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d023      	beq.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e01e      	b.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0210 	bic.w	r2, r2, #16
 80048f6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8306 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8088 	beq.w	8004a40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_DMA_IRQHandler+0xa08>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d04a      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_DMA_IRQHandler+0xa0c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d045      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a77      	ldr	r2, [pc, #476]	; (8004b30 <HAL_DMA_IRQHandler+0xa10>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d040      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a76      	ldr	r2, [pc, #472]	; (8004b34 <HAL_DMA_IRQHandler+0xa14>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d03b      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a74      	ldr	r2, [pc, #464]	; (8004b38 <HAL_DMA_IRQHandler+0xa18>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d036      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a73      	ldr	r2, [pc, #460]	; (8004b3c <HAL_DMA_IRQHandler+0xa1c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d031      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a71      	ldr	r2, [pc, #452]	; (8004b40 <HAL_DMA_IRQHandler+0xa20>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02c      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a70      	ldr	r2, [pc, #448]	; (8004b44 <HAL_DMA_IRQHandler+0xa24>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d027      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_DMA_IRQHandler+0xa28>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d022      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6d      	ldr	r2, [pc, #436]	; (8004b4c <HAL_DMA_IRQHandler+0xa2c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d01d      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6b      	ldr	r2, [pc, #428]	; (8004b50 <HAL_DMA_IRQHandler+0xa30>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_DMA_IRQHandler+0xa34>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a68      	ldr	r2, [pc, #416]	; (8004b58 <HAL_DMA_IRQHandler+0xa38>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a67      	ldr	r2, [pc, #412]	; (8004b5c <HAL_DMA_IRQHandler+0xa3c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a65      	ldr	r2, [pc, #404]	; (8004b60 <HAL_DMA_IRQHandler+0xa40>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a64      	ldr	r2, [pc, #400]	; (8004b64 <HAL_DMA_IRQHandler+0xa44>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <HAL_DMA_IRQHandler+0x8ca>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e007      	b.n	80049fa <HAL_DMA_IRQHandler+0x8da>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d307      	bcc.n	8004a16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f2      	bne.n	80049fa <HAL_DMA_IRQHandler+0x8da>
 8004a14:	e000      	b.n	8004a18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a16:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2203      	movs	r2, #3
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a36:	e003      	b.n	8004a40 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8272 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
 8004a52:	e26c      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a43      	ldr	r2, [pc, #268]	; (8004b68 <HAL_DMA_IRQHandler+0xa48>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d022      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a42      	ldr	r2, [pc, #264]	; (8004b6c <HAL_DMA_IRQHandler+0xa4c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d01d      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a40      	ldr	r2, [pc, #256]	; (8004b70 <HAL_DMA_IRQHandler+0xa50>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <HAL_DMA_IRQHandler+0xa54>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <HAL_DMA_IRQHandler+0xa58>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <HAL_DMA_IRQHandler+0xa5c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <HAL_DMA_IRQHandler+0xa60>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a39      	ldr	r2, [pc, #228]	; (8004b84 <HAL_DMA_IRQHandler+0xa64>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x988>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_DMA_IRQHandler+0x98a>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 823f 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80cd 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xb48>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80c7 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d049      	beq.n	8004b88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8210 	beq.w	8004f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b10:	e20a      	b.n	8004f28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8206 	beq.w	8004f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b24:	e200      	b.n	8004f28 <HAL_DMA_IRQHandler+0xe08>
 8004b26:	bf00      	nop
 8004b28:	40020010 	.word	0x40020010
 8004b2c:	40020028 	.word	0x40020028
 8004b30:	40020040 	.word	0x40020040
 8004b34:	40020058 	.word	0x40020058
 8004b38:	40020070 	.word	0x40020070
 8004b3c:	40020088 	.word	0x40020088
 8004b40:	400200a0 	.word	0x400200a0
 8004b44:	400200b8 	.word	0x400200b8
 8004b48:	40020410 	.word	0x40020410
 8004b4c:	40020428 	.word	0x40020428
 8004b50:	40020440 	.word	0x40020440
 8004b54:	40020458 	.word	0x40020458
 8004b58:	40020470 	.word	0x40020470
 8004b5c:	40020488 	.word	0x40020488
 8004b60:	400204a0 	.word	0x400204a0
 8004b64:	400204b8 	.word	0x400204b8
 8004b68:	58025408 	.word	0x58025408
 8004b6c:	5802541c 	.word	0x5802541c
 8004b70:	58025430 	.word	0x58025430
 8004b74:	58025444 	.word	0x58025444
 8004b78:	58025458 	.word	0x58025458
 8004b7c:	5802546c 	.word	0x5802546c
 8004b80:	58025480 	.word	0x58025480
 8004b84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d160      	bne.n	8004c54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a8c      	ldr	r2, [pc, #560]	; (8004dc8 <HAL_DMA_IRQHandler+0xca8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d04a      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a8a      	ldr	r2, [pc, #552]	; (8004dcc <HAL_DMA_IRQHandler+0xcac>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d045      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a89      	ldr	r2, [pc, #548]	; (8004dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d040      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a87      	ldr	r2, [pc, #540]	; (8004dd4 <HAL_DMA_IRQHandler+0xcb4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d03b      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a86      	ldr	r2, [pc, #536]	; (8004dd8 <HAL_DMA_IRQHandler+0xcb8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d036      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a84      	ldr	r2, [pc, #528]	; (8004ddc <HAL_DMA_IRQHandler+0xcbc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d031      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a83      	ldr	r2, [pc, #524]	; (8004de0 <HAL_DMA_IRQHandler+0xcc0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d02c      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a81      	ldr	r2, [pc, #516]	; (8004de4 <HAL_DMA_IRQHandler+0xcc4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d027      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a80      	ldr	r2, [pc, #512]	; (8004de8 <HAL_DMA_IRQHandler+0xcc8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a7e      	ldr	r2, [pc, #504]	; (8004dec <HAL_DMA_IRQHandler+0xccc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01d      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a7d      	ldr	r2, [pc, #500]	; (8004df0 <HAL_DMA_IRQHandler+0xcd0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a7b      	ldr	r2, [pc, #492]	; (8004df4 <HAL_DMA_IRQHandler+0xcd4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a7a      	ldr	r2, [pc, #488]	; (8004df8 <HAL_DMA_IRQHandler+0xcd8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a78      	ldr	r2, [pc, #480]	; (8004dfc <HAL_DMA_IRQHandler+0xcdc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a77      	ldr	r2, [pc, #476]	; (8004e00 <HAL_DMA_IRQHandler+0xce0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a75      	ldr	r2, [pc, #468]	; (8004e04 <HAL_DMA_IRQHandler+0xce4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <HAL_DMA_IRQHandler+0xb24>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0208 	bic.w	r2, r2, #8
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e007      	b.n	8004c54 <HAL_DMA_IRQHandler+0xb34>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8165 	beq.w	8004f28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c66:	e15f      	b.n	8004f28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2202      	movs	r2, #2
 8004c72:	409a      	lsls	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80c5 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xce8>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80bf 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2202      	movs	r2, #2
 8004c94:	409a      	lsls	r2, r3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 813a 	beq.w	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc0:	e134      	b.n	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8130 	beq.w	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd4:	e12a      	b.n	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d168      	bne.n	8004db2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <HAL_DMA_IRQHandler+0xca8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a37      	ldr	r2, [pc, #220]	; (8004dcc <HAL_DMA_IRQHandler+0xcac>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <HAL_DMA_IRQHandler+0xcb4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <HAL_DMA_IRQHandler+0xcb8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <HAL_DMA_IRQHandler+0xcbc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <HAL_DMA_IRQHandler+0xcc0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2e      	ldr	r2, [pc, #184]	; (8004de4 <HAL_DMA_IRQHandler+0xcc4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <HAL_DMA_IRQHandler+0xcc8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2b      	ldr	r2, [pc, #172]	; (8004dec <HAL_DMA_IRQHandler+0xccc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <HAL_DMA_IRQHandler+0xcd0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a28      	ldr	r2, [pc, #160]	; (8004df4 <HAL_DMA_IRQHandler+0xcd4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <HAL_DMA_IRQHandler+0xcd8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <HAL_DMA_IRQHandler+0xcdc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <HAL_DMA_IRQHandler+0xce0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_IRQHandler+0xc60>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <HAL_DMA_IRQHandler+0xce4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <HAL_DMA_IRQHandler+0xc72>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0214 	bic.w	r2, r2, #20
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e007      	b.n	8004da2 <HAL_DMA_IRQHandler+0xc82>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 020a 	bic.w	r2, r2, #10
 8004da0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80b8 	beq.w	8004f2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dc4:	e0b2      	b.n	8004f2c <HAL_DMA_IRQHandler+0xe0c>
 8004dc6:	bf00      	nop
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2208      	movs	r2, #8
 8004e12:	409a      	lsls	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8088 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8082 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a41      	ldr	r2, [pc, #260]	; (8004f34 <HAL_DMA_IRQHandler+0xe14>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d04a      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3f      	ldr	r2, [pc, #252]	; (8004f38 <HAL_DMA_IRQHandler+0xe18>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d045      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3e      	ldr	r2, [pc, #248]	; (8004f3c <HAL_DMA_IRQHandler+0xe1c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d040      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <HAL_DMA_IRQHandler+0xe20>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d03b      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <HAL_DMA_IRQHandler+0xe24>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d036      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a39      	ldr	r2, [pc, #228]	; (8004f48 <HAL_DMA_IRQHandler+0xe28>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d031      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_DMA_IRQHandler+0xe2c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02c      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a36      	ldr	r2, [pc, #216]	; (8004f50 <HAL_DMA_IRQHandler+0xe30>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d027      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a35      	ldr	r2, [pc, #212]	; (8004f54 <HAL_DMA_IRQHandler+0xe34>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a33      	ldr	r2, [pc, #204]	; (8004f58 <HAL_DMA_IRQHandler+0xe38>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a32      	ldr	r2, [pc, #200]	; (8004f5c <HAL_DMA_IRQHandler+0xe3c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a30      	ldr	r2, [pc, #192]	; (8004f60 <HAL_DMA_IRQHandler+0xe40>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_DMA_IRQHandler+0xe44>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <HAL_DMA_IRQHandler+0xe48>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <HAL_DMA_IRQHandler+0xe4c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_DMA_IRQHandler+0xe50>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <HAL_DMA_IRQHandler+0xdbc>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 021c 	bic.w	r2, r2, #28
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e007      	b.n	8004eec <HAL_DMA_IRQHandler+0xdcc>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 020e 	bic.w	r2, r2, #14
 8004eea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
 8004f22:	e004      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f2e:	3728      	adds	r7, #40	; 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40020010 	.word	0x40020010
 8004f38:	40020028 	.word	0x40020028
 8004f3c:	40020040 	.word	0x40020040
 8004f40:	40020058 	.word	0x40020058
 8004f44:	40020070 	.word	0x40020070
 8004f48:	40020088 	.word	0x40020088
 8004f4c:	400200a0 	.word	0x400200a0
 8004f50:	400200b8 	.word	0x400200b8
 8004f54:	40020410 	.word	0x40020410
 8004f58:	40020428 	.word	0x40020428
 8004f5c:	40020440 	.word	0x40020440
 8004f60:	40020458 	.word	0x40020458
 8004f64:	40020470 	.word	0x40020470
 8004f68:	40020488 	.word	0x40020488
 8004f6c:	400204a0 	.word	0x400204a0
 8004f70:	400204b8 	.word	0x400204b8

08004f74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a84      	ldr	r2, [pc, #528]	; (80051a4 <DMA_SetConfig+0x230>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d072      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a82      	ldr	r2, [pc, #520]	; (80051a8 <DMA_SetConfig+0x234>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d06d      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a81      	ldr	r2, [pc, #516]	; (80051ac <DMA_SetConfig+0x238>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d068      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7f      	ldr	r2, [pc, #508]	; (80051b0 <DMA_SetConfig+0x23c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d063      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7e      	ldr	r2, [pc, #504]	; (80051b4 <DMA_SetConfig+0x240>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d05e      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7c      	ldr	r2, [pc, #496]	; (80051b8 <DMA_SetConfig+0x244>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d059      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a7b      	ldr	r2, [pc, #492]	; (80051bc <DMA_SetConfig+0x248>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d054      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a79      	ldr	r2, [pc, #484]	; (80051c0 <DMA_SetConfig+0x24c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d04f      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a78      	ldr	r2, [pc, #480]	; (80051c4 <DMA_SetConfig+0x250>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d04a      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a76      	ldr	r2, [pc, #472]	; (80051c8 <DMA_SetConfig+0x254>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d045      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a75      	ldr	r2, [pc, #468]	; (80051cc <DMA_SetConfig+0x258>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d040      	beq.n	800507e <DMA_SetConfig+0x10a>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a73      	ldr	r2, [pc, #460]	; (80051d0 <DMA_SetConfig+0x25c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d03b      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a72      	ldr	r2, [pc, #456]	; (80051d4 <DMA_SetConfig+0x260>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d036      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a70      	ldr	r2, [pc, #448]	; (80051d8 <DMA_SetConfig+0x264>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d031      	beq.n	800507e <DMA_SetConfig+0x10a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6f      	ldr	r2, [pc, #444]	; (80051dc <DMA_SetConfig+0x268>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d02c      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6d      	ldr	r2, [pc, #436]	; (80051e0 <DMA_SetConfig+0x26c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d027      	beq.n	800507e <DMA_SetConfig+0x10a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6c      	ldr	r2, [pc, #432]	; (80051e4 <DMA_SetConfig+0x270>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d022      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a6a      	ldr	r2, [pc, #424]	; (80051e8 <DMA_SetConfig+0x274>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01d      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a69      	ldr	r2, [pc, #420]	; (80051ec <DMA_SetConfig+0x278>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d018      	beq.n	800507e <DMA_SetConfig+0x10a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a67      	ldr	r2, [pc, #412]	; (80051f0 <DMA_SetConfig+0x27c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a66      	ldr	r2, [pc, #408]	; (80051f4 <DMA_SetConfig+0x280>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <DMA_SetConfig+0x284>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <DMA_SetConfig+0x10a>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a63      	ldr	r2, [pc, #396]	; (80051fc <DMA_SetConfig+0x288>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <DMA_SetConfig+0x10a>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a61      	ldr	r2, [pc, #388]	; (8005200 <DMA_SetConfig+0x28c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <DMA_SetConfig+0x10e>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <DMA_SetConfig+0x110>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005090:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3e      	ldr	r2, [pc, #248]	; (80051a4 <DMA_SetConfig+0x230>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d04a      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3d      	ldr	r2, [pc, #244]	; (80051a8 <DMA_SetConfig+0x234>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d045      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <DMA_SetConfig+0x238>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d040      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a3a      	ldr	r2, [pc, #232]	; (80051b0 <DMA_SetConfig+0x23c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d03b      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a38      	ldr	r2, [pc, #224]	; (80051b4 <DMA_SetConfig+0x240>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d036      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <DMA_SetConfig+0x244>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d031      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a35      	ldr	r2, [pc, #212]	; (80051bc <DMA_SetConfig+0x248>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d02c      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <DMA_SetConfig+0x24c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d027      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <DMA_SetConfig+0x250>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d022      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <DMA_SetConfig+0x254>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d01d      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <DMA_SetConfig+0x258>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2e      	ldr	r2, [pc, #184]	; (80051d0 <DMA_SetConfig+0x25c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <DMA_SetConfig+0x260>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <DMA_SetConfig+0x264>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a29      	ldr	r2, [pc, #164]	; (80051dc <DMA_SetConfig+0x268>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <DMA_SetConfig+0x1d0>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a28      	ldr	r2, [pc, #160]	; (80051e0 <DMA_SetConfig+0x26c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <DMA_SetConfig+0x1d4>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <DMA_SetConfig+0x1d6>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d05a      	beq.n	8005204 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	223f      	movs	r2, #63	; 0x3f
 8005158:	409a      	lsls	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800516c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d108      	bne.n	8005190 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800518e:	e087      	b.n	80052a0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
}
 80051a0:	e07e      	b.n	80052a0 <DMA_SetConfig+0x32c>
 80051a2:	bf00      	nop
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
 80051e4:	58025408 	.word	0x58025408
 80051e8:	5802541c 	.word	0x5802541c
 80051ec:	58025430 	.word	0x58025430
 80051f0:	58025444 	.word	0x58025444
 80051f4:	58025458 	.word	0x58025458
 80051f8:	5802546c 	.word	0x5802546c
 80051fc:	58025480 	.word	0x58025480
 8005200:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a28      	ldr	r2, [pc, #160]	; (80052ac <DMA_SetConfig+0x338>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <DMA_SetConfig+0x33c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d01d      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <DMA_SetConfig+0x340>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <DMA_SetConfig+0x344>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <DMA_SetConfig+0x348>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <DMA_SetConfig+0x34c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <DMA_SetConfig+0x350>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <DMA_SetConfig+0x2e0>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <DMA_SetConfig+0x354>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <DMA_SetConfig+0x2e4>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <DMA_SetConfig+0x2e6>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d020      	beq.n	80052a0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	2201      	movs	r2, #1
 8005268:	409a      	lsls	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d108      	bne.n	8005290 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	60da      	str	r2, [r3, #12]
}
 800528e:	e007      	b.n	80052a0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	58025408 	.word	0x58025408
 80052b0:	5802541c 	.word	0x5802541c
 80052b4:	58025430 	.word	0x58025430
 80052b8:	58025444 	.word	0x58025444
 80052bc:	58025458 	.word	0x58025458
 80052c0:	5802546c 	.word	0x5802546c
 80052c4:	58025480 	.word	0x58025480
 80052c8:	58025494 	.word	0x58025494

080052cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a42      	ldr	r2, [pc, #264]	; (80053e4 <DMA_CalcBaseAndBitshift+0x118>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d04a      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a41      	ldr	r2, [pc, #260]	; (80053e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d045      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3f      	ldr	r2, [pc, #252]	; (80053ec <DMA_CalcBaseAndBitshift+0x120>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d040      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a3e      	ldr	r2, [pc, #248]	; (80053f0 <DMA_CalcBaseAndBitshift+0x124>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d03b      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3c      	ldr	r2, [pc, #240]	; (80053f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d036      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3b      	ldr	r2, [pc, #236]	; (80053f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d031      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a39      	ldr	r2, [pc, #228]	; (80053fc <DMA_CalcBaseAndBitshift+0x130>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d02c      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a38      	ldr	r2, [pc, #224]	; (8005400 <DMA_CalcBaseAndBitshift+0x134>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d027      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a36      	ldr	r2, [pc, #216]	; (8005404 <DMA_CalcBaseAndBitshift+0x138>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d022      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a35      	ldr	r2, [pc, #212]	; (8005408 <DMA_CalcBaseAndBitshift+0x13c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d01d      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a33      	ldr	r2, [pc, #204]	; (800540c <DMA_CalcBaseAndBitshift+0x140>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d018      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a32      	ldr	r2, [pc, #200]	; (8005410 <DMA_CalcBaseAndBitshift+0x144>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a30      	ldr	r2, [pc, #192]	; (8005414 <DMA_CalcBaseAndBitshift+0x148>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2f      	ldr	r2, [pc, #188]	; (8005418 <DMA_CalcBaseAndBitshift+0x14c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2d      	ldr	r2, [pc, #180]	; (800541c <DMA_CalcBaseAndBitshift+0x150>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <DMA_CalcBaseAndBitshift+0xa8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2c      	ldr	r2, [pc, #176]	; (8005420 <DMA_CalcBaseAndBitshift+0x154>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d101      	bne.n	8005378 <DMA_CalcBaseAndBitshift+0xac>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <DMA_CalcBaseAndBitshift+0xae>
 8005378:	2300      	movs	r3, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d024      	beq.n	80053c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	3b10      	subs	r3, #16
 8005386:	4a27      	ldr	r2, [pc, #156]	; (8005424 <DMA_CalcBaseAndBitshift+0x158>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	4a24      	ldr	r2, [pc, #144]	; (8005428 <DMA_CalcBaseAndBitshift+0x15c>)
 8005398:	5cd3      	ldrb	r3, [r2, r3]
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d908      	bls.n	80053b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	4b1f      	ldr	r3, [pc, #124]	; (800542c <DMA_CalcBaseAndBitshift+0x160>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	659a      	str	r2, [r3, #88]	; 0x58
 80053b6:	e00d      	b.n	80053d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	4b1b      	ldr	r3, [pc, #108]	; (800542c <DMA_CalcBaseAndBitshift+0x160>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6593      	str	r3, [r2, #88]	; 0x58
 80053c6:	e005      	b.n	80053d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40020010 	.word	0x40020010
 80053e8:	40020028 	.word	0x40020028
 80053ec:	40020040 	.word	0x40020040
 80053f0:	40020058 	.word	0x40020058
 80053f4:	40020070 	.word	0x40020070
 80053f8:	40020088 	.word	0x40020088
 80053fc:	400200a0 	.word	0x400200a0
 8005400:	400200b8 	.word	0x400200b8
 8005404:	40020410 	.word	0x40020410
 8005408:	40020428 	.word	0x40020428
 800540c:	40020440 	.word	0x40020440
 8005410:	40020458 	.word	0x40020458
 8005414:	40020470 	.word	0x40020470
 8005418:	40020488 	.word	0x40020488
 800541c:	400204a0 	.word	0x400204a0
 8005420:	400204b8 	.word	0x400204b8
 8005424:	aaaaaaab 	.word	0xaaaaaaab
 8005428:	0800c23c 	.word	0x0800c23c
 800542c:	fffffc00 	.word	0xfffffc00

08005430 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d120      	bne.n	8005486 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	2b03      	cmp	r3, #3
 800544a:	d858      	bhi.n	80054fe <DMA_CheckFifoParam+0xce>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <DMA_CheckFifoParam+0x24>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005465 	.word	0x08005465
 8005458:	08005477 	.word	0x08005477
 800545c:	08005465 	.word	0x08005465
 8005460:	080054ff 	.word	0x080054ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d048      	beq.n	8005502 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005474:	e045      	b.n	8005502 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800547e:	d142      	bne.n	8005506 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005484:	e03f      	b.n	8005506 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	d123      	bne.n	80054d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	2b03      	cmp	r3, #3
 8005496:	d838      	bhi.n	800550a <DMA_CheckFifoParam+0xda>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <DMA_CheckFifoParam+0x70>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054b1 	.word	0x080054b1
 80054a4:	080054b7 	.word	0x080054b7
 80054a8:	080054b1 	.word	0x080054b1
 80054ac:	080054c9 	.word	0x080054c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
        break;
 80054b4:	e030      	b.n	8005518 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d025      	beq.n	800550e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054c6:	e022      	b.n	800550e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d0:	d11f      	bne.n	8005512 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054d6:	e01c      	b.n	8005512 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d902      	bls.n	80054e6 <DMA_CheckFifoParam+0xb6>
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d003      	beq.n	80054ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80054e4:	e018      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
        break;
 80054ea:	e015      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
    break;
 80054fc:	e00b      	b.n	8005516 <DMA_CheckFifoParam+0xe6>
        break;
 80054fe:	bf00      	nop
 8005500:	e00a      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        break;
 8005502:	bf00      	nop
 8005504:	e008      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        break;
 8005506:	bf00      	nop
 8005508:	e006      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        break;
 800550a:	bf00      	nop
 800550c:	e004      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        break;
 800550e:	bf00      	nop
 8005510:	e002      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
        break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <DMA_CheckFifoParam+0xe8>
    break;
 8005516:	bf00      	nop
    }
  }

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a38      	ldr	r2, [pc, #224]	; (800561c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a36      	ldr	r2, [pc, #216]	; (8005620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a35      	ldr	r2, [pc, #212]	; (8005624 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a33      	ldr	r2, [pc, #204]	; (8005628 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a32      	ldr	r2, [pc, #200]	; (800562c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a30      	ldr	r2, [pc, #192]	; (8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01a      	beq.n	80055c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	3b08      	subs	r3, #8
 8005598:	4a28      	ldr	r2, [pc, #160]	; (800563c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4b26      	ldr	r3, [pc, #152]	; (8005640 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a24      	ldr	r2, [pc, #144]	; (8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80055b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2201      	movs	r2, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80055c4:	e024      	b.n	8005610 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	3b10      	subs	r3, #16
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d806      	bhi.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d902      	bls.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3308      	adds	r3, #8
 80055ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4b18      	ldr	r3, [pc, #96]	; (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a16      	ldr	r2, [pc, #88]	; (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005600:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2201      	movs	r2, #1
 800560a:	409a      	lsls	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	58025408 	.word	0x58025408
 8005620:	5802541c 	.word	0x5802541c
 8005624:	58025430 	.word	0x58025430
 8005628:	58025444 	.word	0x58025444
 800562c:	58025458 	.word	0x58025458
 8005630:	5802546c 	.word	0x5802546c
 8005634:	58025480 	.word	0x58025480
 8005638:	58025494 	.word	0x58025494
 800563c:	cccccccd 	.word	0xcccccccd
 8005640:	16009600 	.word	0x16009600
 8005644:	58025880 	.word	0x58025880
 8005648:	aaaaaaab 	.word	0xaaaaaaab
 800564c:	400204b8 	.word	0x400204b8
 8005650:	4002040f 	.word	0x4002040f
 8005654:	10008200 	.word	0x10008200
 8005658:	40020880 	.word	0x40020880

0800565c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04a      	beq.n	8005708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d847      	bhi.n	8005708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d022      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d01d      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d018      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d009      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4b17      	ldr	r3, [pc, #92]	; (8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a15      	ldr	r2, [pc, #84]	; (8005738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80056e4:	671a      	str	r2, [r3, #112]	; 0x70
 80056e6:	e009      	b.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a11      	ldr	r2, [pc, #68]	; (8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80056fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	2201      	movs	r2, #1
 8005702:	409a      	lsls	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	58025408 	.word	0x58025408
 8005718:	5802541c 	.word	0x5802541c
 800571c:	58025430 	.word	0x58025430
 8005720:	58025444 	.word	0x58025444
 8005724:	58025458 	.word	0x58025458
 8005728:	5802546c 	.word	0x5802546c
 800572c:	58025480 	.word	0x58025480
 8005730:	58025494 	.word	0x58025494
 8005734:	1600963f 	.word	0x1600963f
 8005738:	58025940 	.word	0x58025940
 800573c:	1000823f 	.word	0x1000823f
 8005740:	40020940 	.word	0x40020940

08005744 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d105      	bne.n	800576a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e325      	b.n	8005db6 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005774:	2302      	movs	r3, #2
 8005776:	e31e      	b.n	8005db6 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	f040 830d 	bne.w	8005da8 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a82      	ldr	r2, [pc, #520]	; (80059ac <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d04a      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a81      	ldr	r2, [pc, #516]	; (80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d045      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7f      	ldr	r2, [pc, #508]	; (80059b4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d040      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7e      	ldr	r2, [pc, #504]	; (80059b8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d03b      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7c      	ldr	r2, [pc, #496]	; (80059bc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d036      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7b      	ldr	r2, [pc, #492]	; (80059c0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d031      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a79      	ldr	r2, [pc, #484]	; (80059c4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02c      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a78      	ldr	r2, [pc, #480]	; (80059c8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d027      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a76      	ldr	r2, [pc, #472]	; (80059cc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a75      	ldr	r2, [pc, #468]	; (80059d0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01d      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a73      	ldr	r2, [pc, #460]	; (80059d4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a72      	ldr	r2, [pc, #456]	; (80059d8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a70      	ldr	r2, [pc, #448]	; (80059dc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6f      	ldr	r2, [pc, #444]	; (80059e0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6d      	ldr	r2, [pc, #436]	; (80059e4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6c      	ldr	r2, [pc, #432]	; (80059e8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d101      	bne.n	8005840 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005854:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	3308      	adds	r3, #8
 8005864:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	223f      	movs	r2, #63	; 0x3f
 8005870:	409a      	lsls	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e018      	b.n	80058aa <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6819      	ldr	r1, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	f248 0320 	movw	r3, #32800	; 0x8020
 8005886:	430b      	orrs	r3, r1
 8005888:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	3304      	adds	r3, #4
 8005898:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2201      	movs	r2, #1
 80058a4:	409a      	lsls	r2, r3
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fb41 	bl	8005f38 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3c      	ldr	r2, [pc, #240]	; (80059ac <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d072      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a3a      	ldr	r2, [pc, #232]	; (80059b0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d06d      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a39      	ldr	r2, [pc, #228]	; (80059b4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d068      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a37      	ldr	r2, [pc, #220]	; (80059b8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d063      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a36      	ldr	r2, [pc, #216]	; (80059bc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d05e      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a34      	ldr	r2, [pc, #208]	; (80059c0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d059      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a33      	ldr	r2, [pc, #204]	; (80059c4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d054      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a31      	ldr	r2, [pc, #196]	; (80059c8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d04f      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a30      	ldr	r2, [pc, #192]	; (80059cc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d04a      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d045      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d040      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d03b      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2a      	ldr	r2, [pc, #168]	; (80059dc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d036      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d031      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d02c      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d027      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a24      	ldr	r2, [pc, #144]	; (80059ec <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d022      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01d      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d018      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d132      	bne.n	8005a0c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e031      	b.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80059aa:	bf00      	nop
 80059ac:	40020010 	.word	0x40020010
 80059b0:	40020028 	.word	0x40020028
 80059b4:	40020040 	.word	0x40020040
 80059b8:	40020058 	.word	0x40020058
 80059bc:	40020070 	.word	0x40020070
 80059c0:	40020088 	.word	0x40020088
 80059c4:	400200a0 	.word	0x400200a0
 80059c8:	400200b8 	.word	0x400200b8
 80059cc:	40020410 	.word	0x40020410
 80059d0:	40020428 	.word	0x40020428
 80059d4:	40020440 	.word	0x40020440
 80059d8:	40020458 	.word	0x40020458
 80059dc:	40020470 	.word	0x40020470
 80059e0:	40020488 	.word	0x40020488
 80059e4:	400204a0 	.word	0x400204a0
 80059e8:	400204b8 	.word	0x400204b8
 80059ec:	58025408 	.word	0x58025408
 80059f0:	5802541c 	.word	0x5802541c
 80059f4:	58025430 	.word	0x58025430
 80059f8:	58025444 	.word	0x58025444
 80059fc:	58025458 	.word	0x58025458
 8005a00:	5802546c 	.word	0x5802546c
 8005a04:	58025480 	.word	0x58025480
 8005a08:	58025494 	.word	0x58025494
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a1a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a2c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a85      	ldr	r2, [pc, #532]	; (8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04a      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a83      	ldr	r2, [pc, #524]	; (8005c4c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d045      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a82      	ldr	r2, [pc, #520]	; (8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d040      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a80      	ldr	r2, [pc, #512]	; (8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d03b      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7f      	ldr	r2, [pc, #508]	; (8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d036      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a7d      	ldr	r2, [pc, #500]	; (8005c5c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d031      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a7c      	ldr	r2, [pc, #496]	; (8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d02c      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a7a      	ldr	r2, [pc, #488]	; (8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d027      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a79      	ldr	r2, [pc, #484]	; (8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a77      	ldr	r2, [pc, #476]	; (8005c6c <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01d      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a76      	ldr	r2, [pc, #472]	; (8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a74      	ldr	r2, [pc, #464]	; (8005c74 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a73      	ldr	r2, [pc, #460]	; (8005c78 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a70      	ldr	r2, [pc, #448]	; (8005c80 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6e      	ldr	r2, [pc, #440]	; (8005c84 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d022      	beq.n	8005b1e <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 021e 	bic.w	r2, r3, #30
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0216 	orr.w	r2, r2, #22
 8005aea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005afa:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d022      	beq.n	8005b52 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e019      	b.n	8005b52 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 020e 	bic.w	r2, r3, #14
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 020a 	orr.w	r2, r2, #10
 8005b30:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0204 	orr.w	r2, r2, #4
 8005b50:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a3c      	ldr	r2, [pc, #240]	; (8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d072      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a3a      	ldr	r2, [pc, #232]	; (8005c4c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d06d      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a39      	ldr	r2, [pc, #228]	; (8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d068      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a37      	ldr	r2, [pc, #220]	; (8005c54 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d063      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a36      	ldr	r2, [pc, #216]	; (8005c58 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d05e      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a34      	ldr	r2, [pc, #208]	; (8005c5c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d059      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a33      	ldr	r2, [pc, #204]	; (8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d054      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a31      	ldr	r2, [pc, #196]	; (8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d04f      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a30      	ldr	r2, [pc, #192]	; (8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d04a      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2e      	ldr	r2, [pc, #184]	; (8005c6c <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d045      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2d      	ldr	r2, [pc, #180]	; (8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d040      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a2b      	ldr	r2, [pc, #172]	; (8005c74 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03b      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2a      	ldr	r2, [pc, #168]	; (8005c78 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d036      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d02c      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a25      	ldr	r2, [pc, #148]	; (8005c84 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a24      	ldr	r2, [pc, #144]	; (8005c88 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a22      	ldr	r2, [pc, #136]	; (8005c8c <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a21      	ldr	r2, [pc, #132]	; (8005c90 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d132      	bne.n	8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e031      	b.n	8005caa <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8005c46:	bf00      	nop
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
 8005c88:	58025408 	.word	0x58025408
 8005c8c:	5802541c 	.word	0x5802541c
 8005c90:	58025430 	.word	0x58025430
 8005c94:	58025444 	.word	0x58025444
 8005c98:	58025458 	.word	0x58025458
 8005c9c:	5802546c 	.word	0x5802546c
 8005ca0:	58025480 	.word	0x58025480
 8005ca4:	58025494 	.word	0x58025494
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01a      	beq.n	8005ce4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ce2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a35      	ldr	r2, [pc, #212]	; (8005dc0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04a      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d045      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a32      	ldr	r2, [pc, #200]	; (8005dc8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d040      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a31      	ldr	r2, [pc, #196]	; (8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d03b      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	; (8005dd0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d036      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2e      	ldr	r2, [pc, #184]	; (8005dd4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d031      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2c      	ldr	r2, [pc, #176]	; (8005dd8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02c      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d027      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d022      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a25      	ldr	r2, [pc, #148]	; (8005dec <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a23      	ldr	r2, [pc, #140]	; (8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a20      	ldr	r2, [pc, #128]	; (8005df8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e00e      	b.n	8005db4 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e005      	b.n	8005db4 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40020010 	.word	0x40020010
 8005dc4:	40020028 	.word	0x40020028
 8005dc8:	40020040 	.word	0x40020040
 8005dcc:	40020058 	.word	0x40020058
 8005dd0:	40020070 	.word	0x40020070
 8005dd4:	40020088 	.word	0x40020088
 8005dd8:	400200a0 	.word	0x400200a0
 8005ddc:	400200b8 	.word	0x400200b8
 8005de0:	40020410 	.word	0x40020410
 8005de4:	40020428 	.word	0x40020428
 8005de8:	40020440 	.word	0x40020440
 8005dec:	40020458 	.word	0x40020458
 8005df0:	40020470 	.word	0x40020470
 8005df4:	40020488 	.word	0x40020488
 8005df8:	400204a0 	.word	0x400204a0
 8005dfc:	400204b8 	.word	0x400204b8

08005e00 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a39      	ldr	r2, [pc, #228]	; (8005ef8 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d04a      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a37      	ldr	r2, [pc, #220]	; (8005efc <HAL_DMAEx_ChangeMemory+0xfc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d045      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a36      	ldr	r2, [pc, #216]	; (8005f00 <HAL_DMAEx_ChangeMemory+0x100>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d040      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a34      	ldr	r2, [pc, #208]	; (8005f04 <HAL_DMAEx_ChangeMemory+0x104>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d03b      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a33      	ldr	r2, [pc, #204]	; (8005f08 <HAL_DMAEx_ChangeMemory+0x108>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d036      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a31      	ldr	r2, [pc, #196]	; (8005f0c <HAL_DMAEx_ChangeMemory+0x10c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d031      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a30      	ldr	r2, [pc, #192]	; (8005f10 <HAL_DMAEx_ChangeMemory+0x110>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d02c      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <HAL_DMAEx_ChangeMemory+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d027      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <HAL_DMAEx_ChangeMemory+0x118>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d022      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2b      	ldr	r2, [pc, #172]	; (8005f1c <HAL_DMAEx_ChangeMemory+0x11c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01d      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_DMAEx_ChangeMemory+0x120>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d018      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a28      	ldr	r2, [pc, #160]	; (8005f24 <HAL_DMAEx_ChangeMemory+0x124>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a27      	ldr	r2, [pc, #156]	; (8005f28 <HAL_DMAEx_ChangeMemory+0x128>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <HAL_DMAEx_ChangeMemory+0x12c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <HAL_DMAEx_ChangeMemory+0x130>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_DMAEx_ChangeMemory+0xae>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <HAL_DMAEx_ChangeMemory+0x134>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <HAL_DMAEx_ChangeMemory+0xb2>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <HAL_DMAEx_ChangeMemory+0xb4>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	e010      	b.n	8005eea <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	611a      	str	r2, [r3, #16]
 8005ed0:	e00b      	b.n	8005eea <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e003      	b.n	8005eea <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40020010 	.word	0x40020010
 8005efc:	40020028 	.word	0x40020028
 8005f00:	40020040 	.word	0x40020040
 8005f04:	40020058 	.word	0x40020058
 8005f08:	40020070 	.word	0x40020070
 8005f0c:	40020088 	.word	0x40020088
 8005f10:	400200a0 	.word	0x400200a0
 8005f14:	400200b8 	.word	0x400200b8
 8005f18:	40020410 	.word	0x40020410
 8005f1c:	40020428 	.word	0x40020428
 8005f20:	40020440 	.word	0x40020440
 8005f24:	40020458 	.word	0x40020458
 8005f28:	40020470 	.word	0x40020470
 8005f2c:	40020488 	.word	0x40020488
 8005f30:	400204a0 	.word	0x400204a0
 8005f34:	400204b8 	.word	0x400204b8

08005f38 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a46      	ldr	r2, [pc, #280]	; (8006064 <DMA_MultiBufferSetConfig+0x12c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d04a      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a44      	ldr	r2, [pc, #272]	; (8006068 <DMA_MultiBufferSetConfig+0x130>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d045      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a43      	ldr	r2, [pc, #268]	; (800606c <DMA_MultiBufferSetConfig+0x134>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d040      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <DMA_MultiBufferSetConfig+0x138>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d03b      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a40      	ldr	r2, [pc, #256]	; (8006074 <DMA_MultiBufferSetConfig+0x13c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d036      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3e      	ldr	r2, [pc, #248]	; (8006078 <DMA_MultiBufferSetConfig+0x140>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a3d      	ldr	r2, [pc, #244]	; (800607c <DMA_MultiBufferSetConfig+0x144>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d02c      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3b      	ldr	r2, [pc, #236]	; (8006080 <DMA_MultiBufferSetConfig+0x148>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d027      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3a      	ldr	r2, [pc, #232]	; (8006084 <DMA_MultiBufferSetConfig+0x14c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a38      	ldr	r2, [pc, #224]	; (8006088 <DMA_MultiBufferSetConfig+0x150>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01d      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a37      	ldr	r2, [pc, #220]	; (800608c <DMA_MultiBufferSetConfig+0x154>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d018      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a35      	ldr	r2, [pc, #212]	; (8006090 <DMA_MultiBufferSetConfig+0x158>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a34      	ldr	r2, [pc, #208]	; (8006094 <DMA_MultiBufferSetConfig+0x15c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a32      	ldr	r2, [pc, #200]	; (8006098 <DMA_MultiBufferSetConfig+0x160>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a31      	ldr	r2, [pc, #196]	; (800609c <DMA_MultiBufferSetConfig+0x164>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <DMA_MultiBufferSetConfig+0xae>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <DMA_MultiBufferSetConfig+0x168>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <DMA_MultiBufferSetConfig+0xb2>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <DMA_MultiBufferSetConfig+0xb4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d019      	beq.n	8006024 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d108      	bne.n	8006012 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006010:	e021      	b.n	8006056 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]
}
 8006022:	e018      	b.n	8006056 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d108      	bne.n	8006046 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	60da      	str	r2, [r3, #12]
}
 8006044:	e007      	b.n	8006056 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40020010 	.word	0x40020010
 8006068:	40020028 	.word	0x40020028
 800606c:	40020040 	.word	0x40020040
 8006070:	40020058 	.word	0x40020058
 8006074:	40020070 	.word	0x40020070
 8006078:	40020088 	.word	0x40020088
 800607c:	400200a0 	.word	0x400200a0
 8006080:	400200b8 	.word	0x400200b8
 8006084:	40020410 	.word	0x40020410
 8006088:	40020428 	.word	0x40020428
 800608c:	40020440 	.word	0x40020440
 8006090:	40020458 	.word	0x40020458
 8006094:	40020470 	.word	0x40020470
 8006098:	40020488 	.word	0x40020488
 800609c:	400204a0 	.word	0x400204a0
 80060a0:	400204b8 	.word	0x400204b8

080060a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b089      	sub	sp, #36	; 0x24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80060b2:	4b89      	ldr	r3, [pc, #548]	; (80062d8 <HAL_GPIO_Init+0x234>)
 80060b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060b6:	e194      	b.n	80063e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8186 	beq.w	80063dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d00b      	beq.n	80060f0 <HAL_GPIO_Init+0x4c>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d007      	beq.n	80060f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060e4:	2b11      	cmp	r3, #17
 80060e6:	d003      	beq.n	80060f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b12      	cmp	r3, #18
 80060ee:	d130      	bne.n	8006152 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	2203      	movs	r2, #3
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43db      	mvns	r3, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4013      	ands	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4313      	orrs	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006126:	2201      	movs	r2, #1
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	f003 0201 	and.w	r2, r3, #1
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	2203      	movs	r2, #3
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0xee>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b12      	cmp	r3, #18
 8006190:	d123      	bne.n	80061da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	08da      	lsrs	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3208      	adds	r2, #8
 800619a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	220f      	movs	r2, #15
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4013      	ands	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	08da      	lsrs	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3208      	adds	r2, #8
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	2203      	movs	r2, #3
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f003 0203 	and.w	r2, r3, #3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80e0 	beq.w	80063dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621c:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <HAL_GPIO_Init+0x238>)
 800621e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006222:	4a2e      	ldr	r2, [pc, #184]	; (80062dc <HAL_GPIO_Init+0x238>)
 8006224:	f043 0302 	orr.w	r3, r3, #2
 8006228:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800622c:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_GPIO_Init+0x238>)
 800622e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800623a:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <HAL_GPIO_Init+0x23c>)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	3302      	adds	r3, #2
 8006242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	220f      	movs	r2, #15
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <HAL_GPIO_Init+0x240>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d052      	beq.n	800630c <HAL_GPIO_Init+0x268>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <HAL_GPIO_Init+0x244>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d031      	beq.n	80062d2 <HAL_GPIO_Init+0x22e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_GPIO_Init+0x248>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02b      	beq.n	80062ce <HAL_GPIO_Init+0x22a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <HAL_GPIO_Init+0x24c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d025      	beq.n	80062ca <HAL_GPIO_Init+0x226>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <HAL_GPIO_Init+0x250>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01f      	beq.n	80062c6 <HAL_GPIO_Init+0x222>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <HAL_GPIO_Init+0x254>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d019      	beq.n	80062c2 <HAL_GPIO_Init+0x21e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <HAL_GPIO_Init+0x258>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_GPIO_Init+0x21a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a19      	ldr	r2, [pc, #100]	; (8006300 <HAL_GPIO_Init+0x25c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00d      	beq.n	80062ba <HAL_GPIO_Init+0x216>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a18      	ldr	r2, [pc, #96]	; (8006304 <HAL_GPIO_Init+0x260>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <HAL_GPIO_Init+0x212>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a17      	ldr	r2, [pc, #92]	; (8006308 <HAL_GPIO_Init+0x264>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_GPIO_Init+0x20e>
 80062ae:	2309      	movs	r3, #9
 80062b0:	e02d      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062b2:	230a      	movs	r3, #10
 80062b4:	e02b      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062b6:	2308      	movs	r3, #8
 80062b8:	e029      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062ba:	2307      	movs	r3, #7
 80062bc:	e027      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062be:	2306      	movs	r3, #6
 80062c0:	e025      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062c2:	2305      	movs	r3, #5
 80062c4:	e023      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062c6:	2304      	movs	r3, #4
 80062c8:	e021      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062ca:	2303      	movs	r3, #3
 80062cc:	e01f      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e01d      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e01b      	b.n	800630e <HAL_GPIO_Init+0x26a>
 80062d6:	bf00      	nop
 80062d8:	58000080 	.word	0x58000080
 80062dc:	58024400 	.word	0x58024400
 80062e0:	58000400 	.word	0x58000400
 80062e4:	58020000 	.word	0x58020000
 80062e8:	58020400 	.word	0x58020400
 80062ec:	58020800 	.word	0x58020800
 80062f0:	58020c00 	.word	0x58020c00
 80062f4:	58021000 	.word	0x58021000
 80062f8:	58021400 	.word	0x58021400
 80062fc:	58021800 	.word	0x58021800
 8006300:	58021c00 	.word	0x58021c00
 8006304:	58022000 	.word	0x58022000
 8006308:	58022400 	.word	0x58022400
 800630c:	2300      	movs	r3, #0
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	f002 0203 	and.w	r2, r2, #3
 8006314:	0092      	lsls	r2, r2, #2
 8006316:	4093      	lsls	r3, r2
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4313      	orrs	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800631e:	4938      	ldr	r1, [pc, #224]	; (8006400 <HAL_GPIO_Init+0x35c>)
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	3302      	adds	r3, #2
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	43db      	mvns	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	43db      	mvns	r3, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4013      	ands	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4013      	ands	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	3301      	adds	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f47f ae63 	bne.w	80060b8 <HAL_GPIO_Init+0x14>
  }
}
 80063f2:	bf00      	nop
 80063f4:	3724      	adds	r7, #36	; 0x24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	58000400 	.word	0x58000400

08006404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006414:	787b      	ldrb	r3, [r7, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006420:	e003      	b.n	800642a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	041a      	lsls	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	619a      	str	r2, [r3, #24]
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	401a      	ands	r2, r3
 800644a:	887b      	ldrh	r3, [r7, #2]
 800644c:	429a      	cmp	r2, r3
 800644e:	d104      	bne.n	800645a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006450:	887b      	ldrh	r3, [r7, #2]
 8006452:	041a      	lsls	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006458:	e002      	b.n	8006460 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800645a:	887a      	ldrh	r2, [r7, #2]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	619a      	str	r2, [r3, #24]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e07f      	b.n	800657e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fa fb84 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2224      	movs	r2, #36	; 0x24
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d107      	bne.n	80064e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064e2:	609a      	str	r2, [r3, #8]
 80064e4:	e006      	b.n	80064f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d104      	bne.n	8006506 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b1d      	ldr	r3, [pc, #116]	; (8006588 <HAL_I2C_Init+0x11c>)
 8006512:	430b      	orrs	r3, r1
 8006514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	ea42 0103 	orr.w	r1, r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69d9      	ldr	r1, [r3, #28]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1a      	ldr	r2, [r3, #32]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	02008000 	.word	0x02008000

0800658c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	817b      	strh	r3, [r7, #10]
 800659e:	460b      	mov	r3, r1
 80065a0:	813b      	strh	r3, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 80fd 	bne.w	80067ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_I2C_Mem_Read+0x34>
 80065ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0f1      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_I2C_Mem_Read+0x4e>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0ea      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065e2:	f7fb fde7 	bl	80021b4 <HAL_GetTick>
 80065e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2319      	movs	r3, #25
 80065ee:	2201      	movs	r2, #1
 80065f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f95b 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0d5      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2222      	movs	r2, #34	; 0x22
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2240      	movs	r2, #64	; 0x40
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800662c:	88f8      	ldrh	r0, [r7, #6]
 800662e:	893a      	ldrh	r2, [r7, #8]
 8006630:	8979      	ldrh	r1, [r7, #10]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	4603      	mov	r3, r0
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f8bf 	bl	80067c0 <I2C_RequestMemoryRead>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0ad      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2bff      	cmp	r3, #255	; 0xff
 800665c:	d90e      	bls.n	800667c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	b2da      	uxtb	r2, r3
 800666a:	8979      	ldrh	r1, [r7, #10]
 800666c:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <HAL_I2C_Mem_Read+0x22c>)
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fa3d 	bl	8006af4 <I2C_TransferConfig>
 800667a:	e00f      	b.n	800669c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	b2da      	uxtb	r2, r3
 800668c:	8979      	ldrh	r1, [r7, #10]
 800668e:	4b4a      	ldr	r3, [pc, #296]	; (80067b8 <HAL_I2C_Mem_Read+0x22c>)
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fa2c 	bl	8006af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	2200      	movs	r2, #0
 80066a4:	2104      	movs	r1, #4
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f902 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e07c      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d034      	beq.n	800675c <HAL_I2C_Mem_Read+0x1d0>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d130      	bne.n	800675c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	2200      	movs	r2, #0
 8006702:	2180      	movs	r1, #128	; 0x80
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f8d3 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e04d      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	2bff      	cmp	r3, #255	; 0xff
 800671c:	d90e      	bls.n	800673c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	22ff      	movs	r2, #255	; 0xff
 8006722:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006728:	b2da      	uxtb	r2, r3
 800672a:	8979      	ldrh	r1, [r7, #10]
 800672c:	2300      	movs	r3, #0
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f9dd 	bl	8006af4 <I2C_TransferConfig>
 800673a:	e00f      	b.n	800675c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674a:	b2da      	uxtb	r2, r3
 800674c:	8979      	ldrh	r1, [r7, #10]
 800674e:	2300      	movs	r3, #0
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f9cc 	bl	8006af4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d19a      	bne.n	800669c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f920 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e01a      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2220      	movs	r2, #32
 8006780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6859      	ldr	r1, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_I2C_Mem_Read+0x230>)
 800678e:	400b      	ands	r3, r1
 8006790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e000      	b.n	80067b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80067ae:	2302      	movs	r3, #2
  }
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	80002400 	.word	0x80002400
 80067bc:	fe00e800 	.word	0xfe00e800

080067c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	817b      	strh	r3, [r7, #10]
 80067d2:	460b      	mov	r3, r1
 80067d4:	813b      	strh	r3, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	8979      	ldrh	r1, [r7, #10]
 80067e0:	4b20      	ldr	r3, [pc, #128]	; (8006864 <I2C_RequestMemoryRead+0xa4>)
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f984 	bl	8006af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f89d 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e02c      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d105      	bne.n	8006812 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28
 8006810:	e015      	b.n	800683e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	b29b      	uxth	r3, r3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f883 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e012      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2200      	movs	r2, #0
 8006846:	2140      	movs	r1, #64	; 0x40
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f831 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	80002000 	.word	0x80002000

08006868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d103      	bne.n	8006886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d007      	beq.n	80068a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	619a      	str	r2, [r3, #24]
  }
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c0:	e022      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d01e      	beq.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fb fc73 	bl	80021b4 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d113      	bne.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e00f      	b.n	8006928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	429a      	cmp	r2, r3
 8006924:	d0cd      	beq.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800693c:	e02c      	b.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f870 	bl	8006a28 <I2C_IsAcknowledgeFailed>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e02a      	b.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d01e      	beq.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fb fc2b 	bl	80021b4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e007      	b.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d1cb      	bne.n	800693e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069bc:	e028      	b.n	8006a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f830 	bl	8006a28 <I2C_IsAcknowledgeFailed>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e026      	b.n	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fb fbef 	bl	80021b4 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d113      	bne.n	8006a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e007      	b.n	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d1cf      	bne.n	80069be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d151      	bne.n	8006ae6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a42:	e022      	b.n	8006a8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d01e      	beq.n	8006a8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4c:	f7fb fbb2 	bl	80021b4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d302      	bcc.n	8006a62 <I2C_IsAcknowledgeFailed+0x3a>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d113      	bne.n	8006a8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	f043 0220 	orr.w	r2, r3, #32
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e02e      	b.n	8006ae8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d1d5      	bne.n	8006a44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff fedd 	bl	8006868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <I2C_IsAcknowledgeFailed+0xc8>)
 8006aba:	400b      	ands	r3, r1
 8006abc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	fe00e800 	.word	0xfe00e800

08006af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	817b      	strh	r3, [r7, #10]
 8006b02:	4613      	mov	r3, r2
 8006b04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	0d5b      	lsrs	r3, r3, #21
 8006b10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <I2C_TransferConfig+0x58>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	ea02 0103 	and.w	r1, r2, r3
 8006b1e:	897b      	ldrh	r3, [r7, #10]
 8006b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b24:	7a7b      	ldrb	r3, [r7, #9]
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	431a      	orrs	r2, r3
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	03ff63ff 	.word	0x03ff63ff

08006b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d138      	bne.n	8006bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e032      	b.n	8006bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2224      	movs	r2, #36	; 0x24
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d139      	bne.n	8006c70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e033      	b.n	8006c72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2224      	movs	r2, #36	; 0x24
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d00a      	beq.n	8006caa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c94:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d001      	beq.n	8006ca6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e01f      	b.n	8006ce6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e01d      	b.n	8006ce6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <HAL_PWREx_ConfigSupply+0x70>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f023 0207 	bic.w	r2, r3, #7
 8006cb2:	490f      	ldr	r1, [pc, #60]	; (8006cf0 <HAL_PWREx_ConfigSupply+0x70>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cba:	f7fb fa7b 	bl	80021b4 <HAL_GetTick>
 8006cbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cc0:	e009      	b.n	8006cd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cc2:	f7fb fa77 	bl	80021b4 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cd0:	d901      	bls.n	8006cd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e007      	b.n	8006ce6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <HAL_PWREx_ConfigSupply+0x70>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d1ee      	bne.n	8006cc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	58024800 	.word	0x58024800

08006cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e3ff      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8087 	beq.w	8006e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d14:	4b99      	ldr	r3, [pc, #612]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d1e:	4b97      	ldr	r3, [pc, #604]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d007      	beq.n	8006d3a <HAL_RCC_OscConfig+0x46>
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	2b18      	cmp	r3, #24
 8006d2e:	d110      	bne.n	8006d52 <HAL_RCC_OscConfig+0x5e>
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d10b      	bne.n	8006d52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d3a:	4b90      	ldr	r3, [pc, #576]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d06c      	beq.n	8006e20 <HAL_RCC_OscConfig+0x12c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d168      	bne.n	8006e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e3d9      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d5a:	d106      	bne.n	8006d6a <HAL_RCC_OscConfig+0x76>
 8006d5c:	4b87      	ldr	r3, [pc, #540]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a86      	ldr	r2, [pc, #536]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	e02e      	b.n	8006dc8 <HAL_RCC_OscConfig+0xd4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10c      	bne.n	8006d8c <HAL_RCC_OscConfig+0x98>
 8006d72:	4b82      	ldr	r3, [pc, #520]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a81      	ldr	r2, [pc, #516]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	4b7f      	ldr	r3, [pc, #508]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a7e      	ldr	r2, [pc, #504]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e01d      	b.n	8006dc8 <HAL_RCC_OscConfig+0xd4>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCC_OscConfig+0xbc>
 8006d96:	4b79      	ldr	r3, [pc, #484]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a78      	ldr	r2, [pc, #480]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	4b76      	ldr	r3, [pc, #472]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a75      	ldr	r2, [pc, #468]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e00b      	b.n	8006dc8 <HAL_RCC_OscConfig+0xd4>
 8006db0:	4b72      	ldr	r3, [pc, #456]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a71      	ldr	r2, [pc, #452]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b6f      	ldr	r3, [pc, #444]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a6e      	ldr	r2, [pc, #440]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d013      	beq.n	8006df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd0:	f7fb f9f0 	bl	80021b4 <HAL_GetTick>
 8006dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd8:	f7fb f9ec 	bl	80021b4 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	; 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e38d      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dea:	4b64      	ldr	r3, [pc, #400]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xe4>
 8006df6:	e014      	b.n	8006e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df8:	f7fb f9dc 	bl	80021b4 <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e00:	f7fb f9d8 	bl	80021b4 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b64      	cmp	r3, #100	; 0x64
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e379      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e12:	4b5a      	ldr	r3, [pc, #360]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1f0      	bne.n	8006e00 <HAL_RCC_OscConfig+0x10c>
 8006e1e:	e000      	b.n	8006e22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 80ae 	beq.w	8006f8c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e30:	4b52      	ldr	r3, [pc, #328]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e3a:	4b50      	ldr	r3, [pc, #320]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <HAL_RCC_OscConfig+0x162>
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	2b18      	cmp	r3, #24
 8006e4a:	d13a      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x1ce>
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d135      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e56:	4b49      	ldr	r3, [pc, #292]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_RCC_OscConfig+0x17a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e34b      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e6e:	f7fb f9cf 	bl	8002210 <HAL_GetREVID>
 8006e72:	4602      	mov	r2, r0
 8006e74:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d817      	bhi.n	8006eac <HAL_RCC_OscConfig+0x1b8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d108      	bne.n	8006e96 <HAL_RCC_OscConfig+0x1a2>
 8006e84:	4b3d      	ldr	r3, [pc, #244]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e8c:	4a3b      	ldr	r2, [pc, #236]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e92:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e94:	e07a      	b.n	8006f8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e96:	4b39      	ldr	r3, [pc, #228]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	031b      	lsls	r3, r3, #12
 8006ea4:	4935      	ldr	r1, [pc, #212]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eaa:	e06f      	b.n	8006f8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eac:	4b33      	ldr	r3, [pc, #204]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	061b      	lsls	r3, r3, #24
 8006eba:	4930      	ldr	r1, [pc, #192]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ec0:	e064      	b.n	8006f8c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d045      	beq.n	8006f56 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006eca:	4b2c      	ldr	r3, [pc, #176]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f023 0219 	bic.w	r2, r3, #25
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	4929      	ldr	r1, [pc, #164]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006edc:	f7fb f96a 	bl	80021b4 <HAL_GetTick>
 8006ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ee4:	f7fb f966 	bl	80021b4 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e307      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ef6:	4b21      	ldr	r3, [pc, #132]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f0      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f02:	f7fb f985 	bl	8002210 <HAL_GetREVID>
 8006f06:	4602      	mov	r2, r0
 8006f08:	f241 0303 	movw	r3, #4099	; 0x1003
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d817      	bhi.n	8006f40 <HAL_RCC_OscConfig+0x24c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b40      	cmp	r3, #64	; 0x40
 8006f16:	d108      	bne.n	8006f2a <HAL_RCC_OscConfig+0x236>
 8006f18:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f20:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	6053      	str	r3, [r2, #4]
 8006f28:	e030      	b.n	8006f8c <HAL_RCC_OscConfig+0x298>
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	031b      	lsls	r3, r3, #12
 8006f38:	4910      	ldr	r1, [pc, #64]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	604b      	str	r3, [r1, #4]
 8006f3e:	e025      	b.n	8006f8c <HAL_RCC_OscConfig+0x298>
 8006f40:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	061b      	lsls	r3, r3, #24
 8006f4e:	490b      	ldr	r1, [pc, #44]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	604b      	str	r3, [r1, #4]
 8006f54:	e01a      	b.n	8006f8c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <HAL_RCC_OscConfig+0x288>)
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f62:	f7fb f927 	bl	80021b4 <HAL_GetTick>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f68:	e00a      	b.n	8006f80 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f6a:	f7fb f923 	bl	80021b4 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d903      	bls.n	8006f80 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e2c4      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
 8006f7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f80:	4ba4      	ldr	r3, [pc, #656]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ee      	bne.n	8006f6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80a9 	beq.w	80070ec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f9a:	4b9e      	ldr	r3, [pc, #632]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fa4:	4b9b      	ldr	r3, [pc, #620]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x2cc>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b18      	cmp	r3, #24
 8006fb4:	d13a      	bne.n	800702c <HAL_RCC_OscConfig+0x338>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d135      	bne.n	800702c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fc0:	4b94      	ldr	r3, [pc, #592]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x2e4>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	2b80      	cmp	r3, #128	; 0x80
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e296      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fd8:	f7fb f91a 	bl	8002210 <HAL_GetREVID>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f241 0303 	movw	r3, #4099	; 0x1003
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d817      	bhi.n	8007016 <HAL_RCC_OscConfig+0x322>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d108      	bne.n	8007000 <HAL_RCC_OscConfig+0x30c>
 8006fee:	4b89      	ldr	r3, [pc, #548]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ff6:	4a87      	ldr	r2, [pc, #540]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8006ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ffc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ffe:	e075      	b.n	80070ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007000:	4b84      	ldr	r3, [pc, #528]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	069b      	lsls	r3, r3, #26
 800700e:	4981      	ldr	r1, [pc, #516]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007010:	4313      	orrs	r3, r2
 8007012:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007014:	e06a      	b.n	80070ec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007016:	4b7f      	ldr	r3, [pc, #508]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	061b      	lsls	r3, r3, #24
 8007024:	497b      	ldr	r1, [pc, #492]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007026:	4313      	orrs	r3, r2
 8007028:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800702a:	e05f      	b.n	80070ec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d042      	beq.n	80070ba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007034:	4b77      	ldr	r3, [pc, #476]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a76      	ldr	r2, [pc, #472]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fb f8b8 	bl	80021b4 <HAL_GetTick>
 8007044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007048:	f7fb f8b4 	bl	80021b4 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e255      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800705a:	4b6e      	ldr	r3, [pc, #440]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007066:	f7fb f8d3 	bl	8002210 <HAL_GetREVID>
 800706a:	4602      	mov	r2, r0
 800706c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007070:	429a      	cmp	r2, r3
 8007072:	d817      	bhi.n	80070a4 <HAL_RCC_OscConfig+0x3b0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	2b20      	cmp	r3, #32
 800707a:	d108      	bne.n	800708e <HAL_RCC_OscConfig+0x39a>
 800707c:	4b65      	ldr	r3, [pc, #404]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007084:	4a63      	ldr	r2, [pc, #396]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007086:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800708a:	6053      	str	r3, [r2, #4]
 800708c:	e02e      	b.n	80070ec <HAL_RCC_OscConfig+0x3f8>
 800708e:	4b61      	ldr	r3, [pc, #388]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	069b      	lsls	r3, r3, #26
 800709c:	495d      	ldr	r1, [pc, #372]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	604b      	str	r3, [r1, #4]
 80070a2:	e023      	b.n	80070ec <HAL_RCC_OscConfig+0x3f8>
 80070a4:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	061b      	lsls	r3, r3, #24
 80070b2:	4958      	ldr	r1, [pc, #352]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60cb      	str	r3, [r1, #12]
 80070b8:	e018      	b.n	80070ec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070ba:	4b56      	ldr	r3, [pc, #344]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a55      	ldr	r2, [pc, #340]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80070c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c6:	f7fb f875 	bl	80021b4 <HAL_GetTick>
 80070ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80070ce:	f7fb f871 	bl	80021b4 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e212      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070e0:	4b4c      	ldr	r3, [pc, #304]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f0      	bne.n	80070ce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d036      	beq.n	8007166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d019      	beq.n	8007134 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007100:	4b44      	ldr	r3, [pc, #272]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007104:	4a43      	ldr	r2, [pc, #268]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710c:	f7fb f852 	bl	80021b4 <HAL_GetTick>
 8007110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007114:	f7fb f84e 	bl	80021b4 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e1ef      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007126:	4b3b      	ldr	r3, [pc, #236]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f0      	beq.n	8007114 <HAL_RCC_OscConfig+0x420>
 8007132:	e018      	b.n	8007166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007134:	4b37      	ldr	r3, [pc, #220]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007138:	4a36      	ldr	r2, [pc, #216]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800713a:	f023 0301 	bic.w	r3, r3, #1
 800713e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007140:	f7fb f838 	bl	80021b4 <HAL_GetTick>
 8007144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007148:	f7fb f834 	bl	80021b4 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e1d5      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800715a:	4b2e      	ldr	r3, [pc, #184]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800715c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d036      	beq.n	80071e0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d019      	beq.n	80071ae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800717a:	4b26      	ldr	r3, [pc, #152]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a25      	ldr	r2, [pc, #148]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 8007180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007186:	f7fb f815 	bl	80021b4 <HAL_GetTick>
 800718a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800718e:	f7fb f811 	bl	80021b4 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e1b2      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x49a>
 80071ac:	e018      	b.n	80071e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80071b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071ba:	f7fa fffb 	bl	80021b4 <HAL_GetTick>
 80071be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071c2:	f7fa fff7 	bl	80021b4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e198      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <HAL_RCC_OscConfig+0x520>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f0      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8085 	beq.w	80072f8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071ee:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <HAL_RCC_OscConfig+0x524>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a09      	ldr	r2, [pc, #36]	; (8007218 <HAL_RCC_OscConfig+0x524>)
 80071f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071fa:	f7fa ffdb 	bl	80021b4 <HAL_GetTick>
 80071fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007200:	e00c      	b.n	800721c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007202:	f7fa ffd7 	bl	80021b4 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b64      	cmp	r3, #100	; 0x64
 800720e:	d905      	bls.n	800721c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e178      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
 8007214:	58024400 	.word	0x58024400
 8007218:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800721c:	4b96      	ldr	r3, [pc, #600]	; (8007478 <HAL_RCC_OscConfig+0x784>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0ec      	beq.n	8007202 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d106      	bne.n	800723e <HAL_RCC_OscConfig+0x54a>
 8007230:	4b92      	ldr	r3, [pc, #584]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	4a91      	ldr	r2, [pc, #580]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007236:	f043 0301 	orr.w	r3, r3, #1
 800723a:	6713      	str	r3, [r2, #112]	; 0x70
 800723c:	e02d      	b.n	800729a <HAL_RCC_OscConfig+0x5a6>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <HAL_RCC_OscConfig+0x56c>
 8007246:	4b8d      	ldr	r3, [pc, #564]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	4a8c      	ldr	r2, [pc, #560]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	6713      	str	r3, [r2, #112]	; 0x70
 8007252:	4b8a      	ldr	r3, [pc, #552]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	4a89      	ldr	r2, [pc, #548]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007258:	f023 0304 	bic.w	r3, r3, #4
 800725c:	6713      	str	r3, [r2, #112]	; 0x70
 800725e:	e01c      	b.n	800729a <HAL_RCC_OscConfig+0x5a6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b05      	cmp	r3, #5
 8007266:	d10c      	bne.n	8007282 <HAL_RCC_OscConfig+0x58e>
 8007268:	4b84      	ldr	r3, [pc, #528]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	4a83      	ldr	r2, [pc, #524]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800726e:	f043 0304 	orr.w	r3, r3, #4
 8007272:	6713      	str	r3, [r2, #112]	; 0x70
 8007274:	4b81      	ldr	r3, [pc, #516]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007278:	4a80      	ldr	r2, [pc, #512]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800727a:	f043 0301 	orr.w	r3, r3, #1
 800727e:	6713      	str	r3, [r2, #112]	; 0x70
 8007280:	e00b      	b.n	800729a <HAL_RCC_OscConfig+0x5a6>
 8007282:	4b7e      	ldr	r3, [pc, #504]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4a7d      	ldr	r2, [pc, #500]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	6713      	str	r3, [r2, #112]	; 0x70
 800728e:	4b7b      	ldr	r3, [pc, #492]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	4a7a      	ldr	r2, [pc, #488]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007294:	f023 0304 	bic.w	r3, r3, #4
 8007298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d015      	beq.n	80072ce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a2:	f7fa ff87 	bl	80021b4 <HAL_GetTick>
 80072a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a8:	e00a      	b.n	80072c0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072aa:	f7fa ff83 	bl	80021b4 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e122      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072c0:	4b6e      	ldr	r3, [pc, #440]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80072c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0ee      	beq.n	80072aa <HAL_RCC_OscConfig+0x5b6>
 80072cc:	e014      	b.n	80072f8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ce:	f7fa ff71 	bl	80021b4 <HAL_GetTick>
 80072d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072d4:	e00a      	b.n	80072ec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072d6:	f7fa ff6d 	bl	80021b4 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e10c      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072ec:	4b63      	ldr	r3, [pc, #396]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1ee      	bne.n	80072d6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8101 	beq.w	8007504 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007302:	4b5e      	ldr	r3, [pc, #376]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800730a:	2b18      	cmp	r3, #24
 800730c:	f000 80bc 	beq.w	8007488 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b02      	cmp	r3, #2
 8007316:	f040 8095 	bne.w	8007444 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800731a:	4b58      	ldr	r3, [pc, #352]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a57      	ldr	r2, [pc, #348]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007326:	f7fa ff45 	bl	80021b4 <HAL_GetTick>
 800732a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800732e:	f7fa ff41 	bl	80021b4 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e0e2      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007340:	4b4e      	ldr	r3, [pc, #312]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800734c:	4b4b      	ldr	r3, [pc, #300]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800734e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007350:	4b4b      	ldr	r3, [pc, #300]	; (8007480 <HAL_RCC_OscConfig+0x78c>)
 8007352:	4013      	ands	r3, r2
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800735c:	0112      	lsls	r2, r2, #4
 800735e:	430a      	orrs	r2, r1
 8007360:	4946      	ldr	r1, [pc, #280]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007362:	4313      	orrs	r3, r2
 8007364:	628b      	str	r3, [r1, #40]	; 0x28
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	3b01      	subs	r3, #1
 800736c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	3b01      	subs	r3, #1
 8007376:	025b      	lsls	r3, r3, #9
 8007378:	b29b      	uxth	r3, r3
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	3b01      	subs	r3, #1
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	3b01      	subs	r3, #1
 8007390:	061b      	lsls	r3, r3, #24
 8007392:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007396:	4939      	ldr	r1, [pc, #228]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007398:	4313      	orrs	r3, r2
 800739a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800739c:	4b37      	ldr	r3, [pc, #220]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	4a36      	ldr	r2, [pc, #216]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073a8:	4b34      	ldr	r3, [pc, #208]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ac:	4b35      	ldr	r3, [pc, #212]	; (8007484 <HAL_RCC_OscConfig+0x790>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073b4:	00d2      	lsls	r2, r2, #3
 80073b6:	4931      	ldr	r1, [pc, #196]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073bc:	4b2f      	ldr	r3, [pc, #188]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	f023 020c 	bic.w	r2, r3, #12
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	492c      	ldr	r1, [pc, #176]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073ce:	4b2b      	ldr	r3, [pc, #172]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	f023 0202 	bic.w	r2, r3, #2
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	4928      	ldr	r1, [pc, #160]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073e0:	4b26      	ldr	r3, [pc, #152]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	4a25      	ldr	r2, [pc, #148]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ec:	4b23      	ldr	r3, [pc, #140]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a22      	ldr	r2, [pc, #136]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073f8:	4b20      	ldr	r3, [pc, #128]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a1f      	ldr	r2, [pc, #124]	; (800747c <HAL_RCC_OscConfig+0x788>)
 80073fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	4a1c      	ldr	r2, [pc, #112]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007410:	4b1a      	ldr	r3, [pc, #104]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a19      	ldr	r2, [pc, #100]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800741a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fa feca 	bl	80021b4 <HAL_GetTick>
 8007420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007424:	f7fa fec6 	bl	80021b4 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e067      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0f0      	beq.n	8007424 <HAL_RCC_OscConfig+0x730>
 8007442:	e05f      	b.n	8007504 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007444:	4b0d      	ldr	r3, [pc, #52]	; (800747c <HAL_RCC_OscConfig+0x788>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a0c      	ldr	r2, [pc, #48]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800744a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fa feb0 	bl	80021b4 <HAL_GetTick>
 8007454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007458:	f7fa feac 	bl	80021b4 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e04d      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800746a:	4b04      	ldr	r3, [pc, #16]	; (800747c <HAL_RCC_OscConfig+0x788>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f0      	bne.n	8007458 <HAL_RCC_OscConfig+0x764>
 8007476:	e045      	b.n	8007504 <HAL_RCC_OscConfig+0x810>
 8007478:	58024800 	.word	0x58024800
 800747c:	58024400 	.word	0x58024400
 8007480:	fffffc0c 	.word	0xfffffc0c
 8007484:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <HAL_RCC_OscConfig+0x81c>)
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800748e:	4b20      	ldr	r3, [pc, #128]	; (8007510 <HAL_RCC_OscConfig+0x81c>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b01      	cmp	r3, #1
 800749a:	d031      	beq.n	8007500 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f003 0203 	and.w	r2, r3, #3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d12a      	bne.n	8007500 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d122      	bne.n	8007500 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d11a      	bne.n	8007500 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	0a5b      	lsrs	r3, r3, #9
 80074ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074d8:	429a      	cmp	r2, r3
 80074da:	d111      	bne.n	8007500 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	0c1b      	lsrs	r3, r3, #16
 80074e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d108      	bne.n	8007500 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	0e1b      	lsrs	r3, r3, #24
 80074f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d001      	beq.n	8007504 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e000      	b.n	8007506 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3730      	adds	r7, #48	; 0x30
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	58024400 	.word	0x58024400

08007514 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e19c      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007528:	4b8a      	ldr	r3, [pc, #552]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d910      	bls.n	8007558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007536:	4b87      	ldr	r3, [pc, #540]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f023 020f 	bic.w	r2, r3, #15
 800753e:	4985      	ldr	r1, [pc, #532]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b83      	ldr	r3, [pc, #524]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e184      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d010      	beq.n	8007586 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	4b7b      	ldr	r3, [pc, #492]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007570:	429a      	cmp	r2, r3
 8007572:	d908      	bls.n	8007586 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007574:	4b78      	ldr	r3, [pc, #480]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	4975      	ldr	r1, [pc, #468]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007582:	4313      	orrs	r3, r2
 8007584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d010      	beq.n	80075b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695a      	ldr	r2, [r3, #20]
 8007596:	4b70      	ldr	r3, [pc, #448]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800759e:	429a      	cmp	r2, r3
 80075a0:	d908      	bls.n	80075b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075a2:	4b6d      	ldr	r3, [pc, #436]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	496a      	ldr	r1, [pc, #424]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d010      	beq.n	80075e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699a      	ldr	r2, [r3, #24]
 80075c4:	4b64      	ldr	r3, [pc, #400]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d908      	bls.n	80075e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075d0:	4b61      	ldr	r3, [pc, #388]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	495e      	ldr	r1, [pc, #376]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69da      	ldr	r2, [r3, #28]
 80075f2:	4b59      	ldr	r3, [pc, #356]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d908      	bls.n	8007610 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	4953      	ldr	r1, [pc, #332]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 800760c:	4313      	orrs	r3, r2
 800760e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	4b4d      	ldr	r3, [pc, #308]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	429a      	cmp	r2, r3
 800762a:	d908      	bls.n	800763e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800762c:	4b4a      	ldr	r3, [pc, #296]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f023 020f 	bic.w	r2, r3, #15
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4947      	ldr	r1, [pc, #284]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 800763a:	4313      	orrs	r3, r2
 800763c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d055      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800764a:	4b43      	ldr	r3, [pc, #268]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	4940      	ldr	r1, [pc, #256]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007658:	4313      	orrs	r3, r2
 800765a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d107      	bne.n	8007674 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007664:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d121      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0f6      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b03      	cmp	r3, #3
 800767a:	d107      	bne.n	800768c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800767c:	4b36      	ldr	r3, [pc, #216]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d115      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0ea      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d107      	bne.n	80076a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007694:	4b30      	ldr	r3, [pc, #192]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d109      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0de      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076a4:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0d6      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076b4:	4b28      	ldr	r3, [pc, #160]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f023 0207 	bic.w	r2, r3, #7
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4925      	ldr	r1, [pc, #148]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c6:	f7fa fd75 	bl	80021b4 <HAL_GetTick>
 80076ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076cc:	e00a      	b.n	80076e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ce:	f7fa fd71 	bl	80021b4 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076dc:	4293      	cmp	r3, r2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e0be      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e4:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d1eb      	bne.n	80076ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d010      	beq.n	8007724 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	4b14      	ldr	r3, [pc, #80]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	429a      	cmp	r2, r3
 8007710:	d208      	bcs.n	8007724 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007712:	4b11      	ldr	r3, [pc, #68]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f023 020f 	bic.w	r2, r3, #15
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	490e      	ldr	r1, [pc, #56]	; (8007758 <HAL_RCC_ClockConfig+0x244>)
 8007720:	4313      	orrs	r3, r2
 8007722:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d214      	bcs.n	800775c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f023 020f 	bic.w	r2, r3, #15
 800773a:	4906      	ldr	r1, [pc, #24]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	4313      	orrs	r3, r2
 8007740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	4b04      	ldr	r3, [pc, #16]	; (8007754 <HAL_RCC_ClockConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e086      	b.n	8007862 <HAL_RCC_ClockConfig+0x34e>
 8007754:	52002000 	.word	0x52002000
 8007758:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	4b3f      	ldr	r3, [pc, #252]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007774:	429a      	cmp	r2, r3
 8007776:	d208      	bcs.n	800778a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007778:	4b3c      	ldr	r3, [pc, #240]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	4939      	ldr	r1, [pc, #228]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 8007786:	4313      	orrs	r3, r2
 8007788:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	4b34      	ldr	r3, [pc, #208]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d208      	bcs.n	80077b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077a6:	4b31      	ldr	r3, [pc, #196]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	492e      	ldr	r1, [pc, #184]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	4b28      	ldr	r3, [pc, #160]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d208      	bcs.n	80077e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	4922      	ldr	r1, [pc, #136]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d010      	beq.n	8007814 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	4b1d      	ldr	r3, [pc, #116]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077fe:	429a      	cmp	r2, r3
 8007800:	d208      	bcs.n	8007814 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007802:	4b1a      	ldr	r3, [pc, #104]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	4917      	ldr	r1, [pc, #92]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 8007810:	4313      	orrs	r3, r2
 8007812:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007814:	f000 f89e 	bl	8007954 <HAL_RCC_GetSysClockFreq>
 8007818:	4601      	mov	r1, r0
 800781a:	4b14      	ldr	r3, [pc, #80]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	4a12      	ldr	r2, [pc, #72]	; (8007870 <HAL_RCC_ClockConfig+0x35c>)
 8007826:	5cd3      	ldrb	r3, [r2, r3]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	fa21 f303 	lsr.w	r3, r1, r3
 8007830:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007832:	4b0e      	ldr	r3, [pc, #56]	; (800786c <HAL_RCC_ClockConfig+0x358>)
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	4a0d      	ldr	r2, [pc, #52]	; (8007870 <HAL_RCC_ClockConfig+0x35c>)
 800783c:	5cd3      	ldrb	r3, [r2, r3]
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
 8007848:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <HAL_RCC_ClockConfig+0x360>)
 800784a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800784c:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <HAL_RCC_ClockConfig+0x364>)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <HAL_RCC_ClockConfig+0x368>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f7fa fc62 	bl	8002120 <HAL_InitTick>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	0800c22c 	.word	0x0800c22c
 8007874:	24000004 	.word	0x24000004
 8007878:	24000000 	.word	0x24000000
 800787c:	24000060 	.word	0x24000060

08007880 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08c      	sub	sp, #48	; 0x30
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d12a      	bne.n	80078e8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007892:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 8007894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007898:	4a2b      	ldr	r2, [pc, #172]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078a2:	4b29      	ldr	r3, [pc, #164]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 80078a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80078b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b6:	2302      	movs	r3, #2
 80078b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ba:	2303      	movs	r3, #3
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80078c2:	2300      	movs	r3, #0
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80078c6:	f107 031c 	add.w	r3, r7, #28
 80078ca:	4619      	mov	r1, r3
 80078cc:	481f      	ldr	r0, [pc, #124]	; (800794c <HAL_RCC_MCOConfig+0xcc>)
 80078ce:	f7fe fbe9 	bl	80060a4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	430b      	orrs	r3, r1
 80078e0:	4919      	ldr	r1, [pc, #100]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80078e6:	e02a      	b.n	800793e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80078e8:	4b17      	ldr	r3, [pc, #92]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 80078ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078ee:	4a16      	ldr	r2, [pc, #88]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 80078f0:	f043 0304 	orr.w	r3, r3, #4
 80078f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078f8:	4b13      	ldr	r3, [pc, #76]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 80078fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800790c:	2302      	movs	r3, #2
 800790e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007910:	2303      	movs	r3, #3
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007914:	2300      	movs	r3, #0
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007918:	2300      	movs	r3, #0
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800791c:	f107 031c 	add.w	r3, r7, #28
 8007920:	4619      	mov	r1, r3
 8007922:	480b      	ldr	r0, [pc, #44]	; (8007950 <HAL_RCC_MCOConfig+0xd0>)
 8007924:	f7fe fbbe 	bl	80060a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007928:	4b07      	ldr	r3, [pc, #28]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	01d9      	lsls	r1, r3, #7
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	430b      	orrs	r3, r1
 8007938:	4903      	ldr	r1, [pc, #12]	; (8007948 <HAL_RCC_MCOConfig+0xc8>)
 800793a:	4313      	orrs	r3, r2
 800793c:	610b      	str	r3, [r1, #16]
}
 800793e:	bf00      	nop
 8007940:	3730      	adds	r7, #48	; 0x30
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	58020000 	.word	0x58020000
 8007950:	58020800 	.word	0x58020800

08007954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007954:	b480      	push	{r7}
 8007956:	b089      	sub	sp, #36	; 0x24
 8007958:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800795a:	4baf      	ldr	r3, [pc, #700]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007962:	2b18      	cmp	r3, #24
 8007964:	f200 814e 	bhi.w	8007c04 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <HAL_RCC_GetSysClockFreq+0x1c>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079d5 	.word	0x080079d5
 8007974:	08007c05 	.word	0x08007c05
 8007978:	08007c05 	.word	0x08007c05
 800797c:	08007c05 	.word	0x08007c05
 8007980:	08007c05 	.word	0x08007c05
 8007984:	08007c05 	.word	0x08007c05
 8007988:	08007c05 	.word	0x08007c05
 800798c:	08007c05 	.word	0x08007c05
 8007990:	080079fb 	.word	0x080079fb
 8007994:	08007c05 	.word	0x08007c05
 8007998:	08007c05 	.word	0x08007c05
 800799c:	08007c05 	.word	0x08007c05
 80079a0:	08007c05 	.word	0x08007c05
 80079a4:	08007c05 	.word	0x08007c05
 80079a8:	08007c05 	.word	0x08007c05
 80079ac:	08007c05 	.word	0x08007c05
 80079b0:	08007a01 	.word	0x08007a01
 80079b4:	08007c05 	.word	0x08007c05
 80079b8:	08007c05 	.word	0x08007c05
 80079bc:	08007c05 	.word	0x08007c05
 80079c0:	08007c05 	.word	0x08007c05
 80079c4:	08007c05 	.word	0x08007c05
 80079c8:	08007c05 	.word	0x08007c05
 80079cc:	08007c05 	.word	0x08007c05
 80079d0:	08007a07 	.word	0x08007a07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d4:	4b90      	ldr	r3, [pc, #576]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079e0:	4b8d      	ldr	r3, [pc, #564]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	08db      	lsrs	r3, r3, #3
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	4a8c      	ldr	r2, [pc, #560]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80079f2:	e10a      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079f4:	4b89      	ldr	r3, [pc, #548]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80079f6:	61bb      	str	r3, [r7, #24]
    break;
 80079f8:	e107      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80079fa:	4b89      	ldr	r3, [pc, #548]	; (8007c20 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80079fc:	61bb      	str	r3, [r7, #24]
    break;
 80079fe:	e104      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007a02:	61bb      	str	r3, [r7, #24]
    break;
 8007a04:	e101      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a06:	4b84      	ldr	r3, [pc, #528]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a10:	4b81      	ldr	r3, [pc, #516]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	091b      	lsrs	r3, r3, #4
 8007a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a1c:	4b7e      	ldr	r3, [pc, #504]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a26:	4b7c      	ldr	r3, [pc, #496]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2a:	08db      	lsrs	r3, r3, #3
 8007a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 80da 	beq.w	8007bfe <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d05a      	beq.n	8007b06 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d302      	bcc.n	8007a5a <HAL_RCC_GetSysClockFreq+0x106>
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d078      	beq.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007a58:	e099      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a5a:	4b6f      	ldr	r3, [pc, #444]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02d      	beq.n	8007ac2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a66:	4b6c      	ldr	r3, [pc, #432]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	4a6a      	ldr	r2, [pc, #424]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007a72:	fa22 f303 	lsr.w	r3, r2, r3
 8007a76:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a90:	4b61      	ldr	r3, [pc, #388]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aa4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ac0:	e087      	b.n	8007bd2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007acc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007c2c <HAL_RCC_GetSysClockFreq+0x2d8>
 8007ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad4:	4b50      	ldr	r3, [pc, #320]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ae8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b04:	e065      	b.n	8007bd2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b10:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007c30 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b18:	4b3f      	ldr	r3, [pc, #252]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b2c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b48:	e043      	b.n	8007bd2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007c34 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5c:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b70:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b8c:	e021      	b.n	8007bd2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	ee07 3a90 	vmov	s15, r3
 8007b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b98:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007c30 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bb4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007c28 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bd0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	0a5b      	lsrs	r3, r3, #9
 8007bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bdc:	3301      	adds	r3, #1
 8007bde:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf6:	ee17 3a90 	vmov	r3, s15
 8007bfa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007bfc:	e005      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
    break;
 8007c02:	e002      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007c06:	61bb      	str	r3, [r7, #24]
    break;
 8007c08:	bf00      	nop
  }

  return sysclockfreq;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3724      	adds	r7, #36	; 0x24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	03d09000 	.word	0x03d09000
 8007c20:	003d0900 	.word	0x003d0900
 8007c24:	01e84800 	.word	0x01e84800
 8007c28:	46000000 	.word	0x46000000
 8007c2c:	4c742400 	.word	0x4c742400
 8007c30:	4a742400 	.word	0x4a742400
 8007c34:	4bf42400 	.word	0x4bf42400

08007c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c3e:	f7ff fe89 	bl	8007954 <HAL_RCC_GetSysClockFreq>
 8007c42:	4601      	mov	r1, r0
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	0a1b      	lsrs	r3, r3, #8
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	4a0f      	ldr	r2, [pc, #60]	; (8007c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8007c50:	5cd3      	ldrb	r3, [r2, r3]
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	fa21 f303 	lsr.w	r3, r1, r3
 8007c5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8007c66:	5cd3      	ldrb	r3, [r2, r3]
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c76:	4a07      	ldr	r2, [pc, #28]	; (8007c94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	0800c22c 	.word	0x0800c22c
 8007c90:	24000004 	.word	0x24000004
 8007c94:	24000000 	.word	0x24000000

08007c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c9c:	f7ff ffcc 	bl	8007c38 <HAL_RCC_GetHCLKFreq>
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	091b      	lsrs	r3, r3, #4
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	4a04      	ldr	r2, [pc, #16]	; (8007cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cae:	5cd3      	ldrb	r3, [r2, r3]
 8007cb0:	f003 031f 	and.w	r3, r3, #31
 8007cb4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	0800c22c 	.word	0x0800c22c

08007cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cc8:	f7ff ffb6 	bl	8007c38 <HAL_RCC_GetHCLKFreq>
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	4a04      	ldr	r2, [pc, #16]	; (8007cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	0800c22c 	.word	0x0800c22c

08007cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d03d      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d14:	d013      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1a:	d802      	bhi.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007d20:	e01f      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d26:	d013      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007d28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d2c:	d01c      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007d2e:	e018      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d30:	4baf      	ldr	r3, [pc, #700]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4aae      	ldr	r2, [pc, #696]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d3c:	e015      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2102      	movs	r1, #2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f96f 	bl	8009028 <RCCEx_PLL2_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d4e:	e00c      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3324      	adds	r3, #36	; 0x24
 8007d54:	2102      	movs	r1, #2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 fa18 	bl	800918c <RCCEx_PLL3_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d60:	e003      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	75fb      	strb	r3, [r7, #23]
      break;
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d70:	4b9f      	ldr	r3, [pc, #636]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7c:	499c      	ldr	r1, [pc, #624]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	650b      	str	r3, [r1, #80]	; 0x50
 8007d82:	e001      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d03d      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d826      	bhi.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007db9 	.word	0x08007db9
 8007da8:	08007dc7 	.word	0x08007dc7
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007df1 	.word	0x08007df1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db8:	4b8d      	ldr	r3, [pc, #564]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4a8c      	ldr	r2, [pc, #560]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dc4:	e015      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f92b 	bl	8009028 <RCCEx_PLL2_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dd6:	e00c      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 f9d4 	bl	800918c <RCCEx_PLL3_Config>
 8007de4:	4603      	mov	r3, r0
 8007de6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007de8:	e003      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]
      break;
 8007dee:	e000      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007df8:	4b7d      	ldr	r3, [pc, #500]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	f023 0207 	bic.w	r2, r3, #7
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e04:	497a      	ldr	r1, [pc, #488]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	650b      	str	r3, [r1, #80]	; 0x50
 8007e0a:	e001      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d03e      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d01c      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d804      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d008      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	d00d      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007e30:	e01e      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007e32:	2bc0      	cmp	r3, #192	; 0xc0
 8007e34:	d01f      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3a:	d01e      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e3c:	e018      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e3e:	4b6c      	ldr	r3, [pc, #432]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	4a6b      	ldr	r2, [pc, #428]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e4a:	e017      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	2100      	movs	r1, #0
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 f8e8 	bl	8009028 <RCCEx_PLL2_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e5c:	e00e      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3324      	adds	r3, #36	; 0x24
 8007e62:	2100      	movs	r1, #0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f991 	bl	800918c <RCCEx_PLL3_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e6e:	e005      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
      break;
 8007e74:	e002      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007e76:	bf00      	nop
 8007e78:	e000      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e82:	4b5b      	ldr	r3, [pc, #364]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8e:	4958      	ldr	r1, [pc, #352]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	650b      	str	r3, [r1, #80]	; 0x50
 8007e94:	e001      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d044      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb0:	d01f      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb6:	d805      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec0:	d00e      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007ec2:	e01f      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007ec4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ec8:	d01f      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ece:	d01e      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007ed0:	e018      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed2:	4b47      	ldr	r3, [pc, #284]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	4a46      	ldr	r2, [pc, #280]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ede:	e017      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 f89e 	bl	8009028 <RCCEx_PLL2_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ef0:	e00e      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3324      	adds	r3, #36	; 0x24
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f947 	bl	800918c <RCCEx_PLL3_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f02:	e005      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	75fb      	strb	r3, [r7, #23]
      break;
 8007f08:	e002      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f16:	4b36      	ldr	r3, [pc, #216]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f24:	4932      	ldr	r1, [pc, #200]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	658b      	str	r3, [r1, #88]	; 0x58
 8007f2a:	e001      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d044      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f46:	d01f      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4c:	d805      	bhi.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f56:	d00e      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007f58:	e01f      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f5e:	d01f      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f64:	d01e      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007f66:	e018      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f68:	4b21      	ldr	r3, [pc, #132]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	4a20      	ldr	r2, [pc, #128]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f74:	e017      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f853 	bl	8009028 <RCCEx_PLL2_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f86:	e00e      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 f8fc 	bl	800918c <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f98:	e005      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9e:	e002      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007fa0:	bf00      	nop
 8007fa2:	e000      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fac:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fba:	490d      	ldr	r1, [pc, #52]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	658b      	str	r3, [r1, #88]	; 0x58
 8007fc0:	e001      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d035      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d00c      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007fda:	2b10      	cmp	r3, #16
 8007fdc:	d802      	bhi.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d01b      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007fe2:	e017      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d00c      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	d018      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007fec:	e012      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007fee:	bf00      	nop
 8007ff0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff4:	4baf      	ldr	r3, [pc, #700]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	4aae      	ldr	r2, [pc, #696]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008000:	e00e      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3304      	adds	r3, #4
 8008006:	2102      	movs	r1, #2
 8008008:	4618      	mov	r0, r3
 800800a:	f001 f80d 	bl	8009028 <RCCEx_PLL2_Config>
 800800e:	4603      	mov	r3, r0
 8008010:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008012:	e005      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]
      break;
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800801e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008026:	4ba3      	ldr	r3, [pc, #652]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008032:	49a0      	ldr	r1, [pc, #640]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008034:	4313      	orrs	r3, r2
 8008036:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008038:	e001      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d042      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008052:	d01f      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008058:	d805      	bhi.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008062:	d00e      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008064:	e01f      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800806a:	d01f      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800806c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008070:	d01e      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008072:	e018      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4b8f      	ldr	r3, [pc, #572]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	4a8e      	ldr	r2, [pc, #568]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800807e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008080:	e017      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3304      	adds	r3, #4
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f000 ffcd 	bl	8009028 <RCCEx_PLL2_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008092:	e00e      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3324      	adds	r3, #36	; 0x24
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f001 f876 	bl	800918c <RCCEx_PLL3_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080a4:	e005      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	75fb      	strb	r3, [r7, #23]
      break;
 80080aa:	e002      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80080b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d109      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080b8:	4b7e      	ldr	r3, [pc, #504]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c4:	497b      	ldr	r1, [pc, #492]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	650b      	str	r3, [r1, #80]	; 0x50
 80080ca:	e001      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d042      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080e4:	d01b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80080e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ea:	d805      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d022      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f4:	d00a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80080f6:	e01b      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80080f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080fc:	d01d      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80080fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008102:	d01c      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008108:	d01b      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800810a:	e011      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	2101      	movs	r1, #1
 8008112:	4618      	mov	r0, r3
 8008114:	f000 ff88 	bl	8009028 <RCCEx_PLL2_Config>
 8008118:	4603      	mov	r3, r0
 800811a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800811c:	e012      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3324      	adds	r3, #36	; 0x24
 8008122:	2101      	movs	r1, #1
 8008124:	4618      	mov	r0, r3
 8008126:	f001 f831 	bl	800918c <RCCEx_PLL3_Config>
 800812a:	4603      	mov	r3, r0
 800812c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800812e:	e009      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
      break;
 8008134:	e006      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008136:	bf00      	nop
 8008138:	e004      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800813a:	bf00      	nop
 800813c:	e002      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800813e:	bf00      	nop
 8008140:	e000      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800814a:	4b5a      	ldr	r3, [pc, #360]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800814c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008156:	4957      	ldr	r1, [pc, #348]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008158:	4313      	orrs	r3, r2
 800815a:	650b      	str	r3, [r1, #80]	; 0x50
 800815c:	e001      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d044      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008178:	d01b      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800817a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800817e:	d805      	bhi.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d022      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008188:	d00a      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800818a:	e01b      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008190:	d01d      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008196:	d01c      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800819c:	d01b      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800819e:	e011      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3304      	adds	r3, #4
 80081a4:	2101      	movs	r1, #1
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 ff3e 	bl	8009028 <RCCEx_PLL2_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80081b0:	e012      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3324      	adds	r3, #36	; 0x24
 80081b6:	2101      	movs	r1, #1
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 ffe7 	bl	800918c <RCCEx_PLL3_Config>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80081c2:	e009      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	75fb      	strb	r3, [r7, #23]
      break;
 80081c8:	e006      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80081ca:	bf00      	nop
 80081cc:	e004      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80081ce:	bf00      	nop
 80081d0:	e002      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80081d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10a      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081de:	4b35      	ldr	r3, [pc, #212]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081ec:	4931      	ldr	r1, [pc, #196]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	658b      	str	r3, [r1, #88]	; 0x58
 80081f2:	e001      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02d      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800820c:	d005      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800820e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008212:	d009      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d013      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008218:	e00f      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800821a:	4b26      	ldr	r3, [pc, #152]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	4a25      	ldr	r2, [pc, #148]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008226:	e00c      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	2101      	movs	r1, #1
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fefa 	bl	8009028 <RCCEx_PLL2_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008238:	e003      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
      break;
 800823e:	e000      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d109      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008248:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008254:	4917      	ldr	r1, [pc, #92]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008256:	4313      	orrs	r3, r2
 8008258:	650b      	str	r3, [r1, #80]	; 0x50
 800825a:	e001      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d035      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008270:	2b03      	cmp	r3, #3
 8008272:	d81b      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082b9 	.word	0x080082b9
 8008280:	0800828d 	.word	0x0800828d
 8008284:	0800829b 	.word	0x0800829b
 8008288:	080082b9 	.word	0x080082b9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008298:	e00f      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3304      	adds	r3, #4
 800829e:	2102      	movs	r1, #2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fec1 	bl	8009028 <RCCEx_PLL2_Config>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	75fb      	strb	r3, [r7, #23]
      break;
 80082b0:	e003      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
      break;
 80082b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d109      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082c0:	4bba      	ldr	r3, [pc, #744]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c4:	f023 0203 	bic.w	r2, r3, #3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082cc:	49b7      	ldr	r1, [pc, #732]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082d2:	e001      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8086 	beq.w	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082e6:	4bb2      	ldr	r3, [pc, #712]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4ab1      	ldr	r2, [pc, #708]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80082ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082f2:	f7f9 ff5f 	bl	80021b4 <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082f8:	e009      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082fa:	f7f9 ff5b 	bl	80021b4 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b64      	cmp	r3, #100	; 0x64
 8008306:	d902      	bls.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	75fb      	strb	r3, [r7, #23]
        break;
 800830c:	e005      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800830e:	4ba8      	ldr	r3, [pc, #672]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0ef      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d166      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008320:	4ba2      	ldr	r3, [pc, #648]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800832a:	4053      	eors	r3, r2
 800832c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008330:	2b00      	cmp	r3, #0
 8008332:	d013      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008334:	4b9d      	ldr	r3, [pc, #628]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800833c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800833e:	4b9b      	ldr	r3, [pc, #620]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008342:	4a9a      	ldr	r2, [pc, #616]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008348:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800834a:	4b98      	ldr	r3, [pc, #608]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	4a97      	ldr	r2, [pc, #604]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008354:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008356:	4a95      	ldr	r2, [pc, #596]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008366:	d115      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008368:	f7f9 ff24 	bl	80021b4 <HAL_GetTick>
 800836c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800836e:	e00b      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008370:	f7f9 ff20 	bl	80021b4 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	f241 3288 	movw	r2, #5000	; 0x1388
 800837e:	4293      	cmp	r3, r2
 8008380:	d902      	bls.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	75fb      	strb	r3, [r7, #23]
            break;
 8008386:	e005      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0ed      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d126      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083a8:	d10d      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80083aa:	4b80      	ldr	r3, [pc, #512]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083b8:	0919      	lsrs	r1, r3, #4
 80083ba:	4b7e      	ldr	r3, [pc, #504]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80083bc:	400b      	ands	r3, r1
 80083be:	497b      	ldr	r1, [pc, #492]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	610b      	str	r3, [r1, #16]
 80083c4:	e005      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80083c6:	4b79      	ldr	r3, [pc, #484]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	4a78      	ldr	r2, [pc, #480]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80083d0:	6113      	str	r3, [r2, #16]
 80083d2:	4b76      	ldr	r3, [pc, #472]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083e0:	4972      	ldr	r1, [pc, #456]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	670b      	str	r3, [r1, #112]	; 0x70
 80083e6:	e004      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	75bb      	strb	r3, [r7, #22]
 80083ec:	e001      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d07d      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008402:	2b28      	cmp	r3, #40	; 0x28
 8008404:	d866      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	080084db 	.word	0x080084db
 8008410:	080084d5 	.word	0x080084d5
 8008414:	080084d5 	.word	0x080084d5
 8008418:	080084d5 	.word	0x080084d5
 800841c:	080084d5 	.word	0x080084d5
 8008420:	080084d5 	.word	0x080084d5
 8008424:	080084d5 	.word	0x080084d5
 8008428:	080084d5 	.word	0x080084d5
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084d5 	.word	0x080084d5
 8008434:	080084d5 	.word	0x080084d5
 8008438:	080084d5 	.word	0x080084d5
 800843c:	080084d5 	.word	0x080084d5
 8008440:	080084d5 	.word	0x080084d5
 8008444:	080084d5 	.word	0x080084d5
 8008448:	080084d5 	.word	0x080084d5
 800844c:	080084c3 	.word	0x080084c3
 8008450:	080084d5 	.word	0x080084d5
 8008454:	080084d5 	.word	0x080084d5
 8008458:	080084d5 	.word	0x080084d5
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	080084d5 	.word	0x080084d5
 800846c:	080084db 	.word	0x080084db
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084d5 	.word	0x080084d5
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084d5 	.word	0x080084d5
 8008488:	080084d5 	.word	0x080084d5
 800848c:	080084db 	.word	0x080084db
 8008490:	080084d5 	.word	0x080084d5
 8008494:	080084d5 	.word	0x080084d5
 8008498:	080084d5 	.word	0x080084d5
 800849c:	080084d5 	.word	0x080084d5
 80084a0:	080084d5 	.word	0x080084d5
 80084a4:	080084d5 	.word	0x080084d5
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084db 	.word	0x080084db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	2101      	movs	r1, #1
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fdb6 	bl	8009028 <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084c0:	e00c      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3324      	adds	r3, #36	; 0x24
 80084c6:	2101      	movs	r1, #1
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fe5f 	bl	800918c <RCCEx_PLL3_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80084d2:	e003      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
      break;
 80084d8:	e000      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80084da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084e2:	4b32      	ldr	r3, [pc, #200]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ee:	492f      	ldr	r1, [pc, #188]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	654b      	str	r3, [r1, #84]	; 0x54
 80084f4:	e001      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d037      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800850a:	2b05      	cmp	r3, #5
 800850c:	d820      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008557 	.word	0x08008557
 8008518:	0800852d 	.word	0x0800852d
 800851c:	0800853f 	.word	0x0800853f
 8008520:	08008557 	.word	0x08008557
 8008524:	08008557 	.word	0x08008557
 8008528:	08008557 	.word	0x08008557
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	2101      	movs	r1, #1
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fd78 	bl	8009028 <RCCEx_PLL2_Config>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800853c:	e00c      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3324      	adds	r3, #36	; 0x24
 8008542:	2101      	movs	r1, #1
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fe21 	bl	800918c <RCCEx_PLL3_Config>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800854e:	e003      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	75fb      	strb	r3, [r7, #23]
      break;
 8008554:	e000      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008562:	f023 0207 	bic.w	r2, r3, #7
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856a:	4910      	ldr	r1, [pc, #64]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800856c:	4313      	orrs	r3, r2
 800856e:	654b      	str	r3, [r1, #84]	; 0x54
 8008570:	e001      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d040      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008588:	2b05      	cmp	r3, #5
 800858a:	d827      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800858c:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	080085e3 	.word	0x080085e3
 8008598:	080085b9 	.word	0x080085b9
 800859c:	080085cb 	.word	0x080085cb
 80085a0:	080085e3 	.word	0x080085e3
 80085a4:	080085e3 	.word	0x080085e3
 80085a8:	080085e3 	.word	0x080085e3
 80085ac:	58024400 	.word	0x58024400
 80085b0:	58024800 	.word	0x58024800
 80085b4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3304      	adds	r3, #4
 80085bc:	2101      	movs	r1, #1
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fd32 	bl	8009028 <RCCEx_PLL2_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085c8:	e00c      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3324      	adds	r3, #36	; 0x24
 80085ce:	2101      	movs	r1, #1
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fddb 	bl	800918c <RCCEx_PLL3_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085da:	e003      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
      break;
 80085e0:	e000      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80085e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085ea:	4bb2      	ldr	r3, [pc, #712]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	f023 0207 	bic.w	r2, r3, #7
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	49ae      	ldr	r1, [pc, #696]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	658b      	str	r3, [r1, #88]	; 0x58
 80085fe:	e001      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d044      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861a:	d01b      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800861c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008620:	d805      	bhi.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800862c:	e01b      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800862e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008632:	d01d      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008638:	d01c      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800863a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800863e:	d01b      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008640:	e011      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3304      	adds	r3, #4
 8008646:	2100      	movs	r1, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fced 	bl	8009028 <RCCEx_PLL2_Config>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008652:	e012      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	2102      	movs	r1, #2
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fd96 	bl	800918c <RCCEx_PLL3_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008664:	e009      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	75fb      	strb	r3, [r7, #23]
      break;
 800866a:	e006      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800866c:	bf00      	nop
 800866e:	e004      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008680:	4b8c      	ldr	r3, [pc, #560]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008684:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800868e:	4989      	ldr	r1, [pc, #548]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008690:	4313      	orrs	r3, r2
 8008692:	654b      	str	r3, [r1, #84]	; 0x54
 8008694:	e001      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
 8008698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d044      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b0:	d01b      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b6:	d805      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d022      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80086bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c0:	d00a      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80086c2:	e01b      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80086c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c8:	d01d      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80086ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80086ce:	d01c      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80086d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086d4:	d01b      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80086d6:	e011      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fca2 	bl	8009028 <RCCEx_PLL2_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086e8:	e012      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	2102      	movs	r1, #2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fd4b 	bl	800918c <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086fa:	e009      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e006      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008702:	bf00      	nop
 8008704:	e004      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008706:	bf00      	nop
 8008708:	e002      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800870a:	bf00      	nop
 800870c:	e000      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800870e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008716:	4b67      	ldr	r3, [pc, #412]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008724:	4963      	ldr	r1, [pc, #396]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008726:	4313      	orrs	r3, r2
 8008728:	658b      	str	r3, [r1, #88]	; 0x58
 800872a:	e001      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008738:	2b00      	cmp	r3, #0
 800873a:	d044      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008746:	d01b      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874c:	d805      	bhi.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d022      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008756:	d00a      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008758:	e01b      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800875a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800875e:	d01d      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008760:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008764:	d01c      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008766:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800876a:	d01b      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800876c:	e011      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fc57 	bl	8009028 <RCCEx_PLL2_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800877e:	e012      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3324      	adds	r3, #36	; 0x24
 8008784:	2102      	movs	r1, #2
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fd00 	bl	800918c <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008790:	e009      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
      break;
 8008796:	e006      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008798:	bf00      	nop
 800879a:	e004      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800879c:	bf00      	nop
 800879e:	e002      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80087a0:	bf00      	nop
 80087a2:	e000      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80087a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80087ac:	4b41      	ldr	r3, [pc, #260]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087ba:	493e      	ldr	r1, [pc, #248]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	658b      	str	r3, [r1, #88]	; 0x58
 80087c0:	e001      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01a      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087dc:	d10a      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3324      	adds	r3, #36	; 0x24
 80087e2:	2102      	movs	r1, #2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fcd1 	bl	800918c <RCCEx_PLL3_Config>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087f4:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008802:	492c      	ldr	r1, [pc, #176]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008804:	4313      	orrs	r3, r2
 8008806:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01a      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800881a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881e:	d10a      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3324      	adds	r3, #36	; 0x24
 8008824:	2102      	movs	r1, #2
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fcb0 	bl	800918c <RCCEx_PLL3_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008836:	4b1f      	ldr	r3, [pc, #124]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008844:	491b      	ldr	r1, [pc, #108]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008846:	4313      	orrs	r3, r2
 8008848:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d032      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008860:	d00d      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008866:	d016      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d111      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	2100      	movs	r1, #0
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fbd8 	bl	8009028 <RCCEx_PLL2_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800887c:	e00c      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3324      	adds	r3, #36	; 0x24
 8008882:	2102      	movs	r1, #2
 8008884:	4618      	mov	r0, r3
 8008886:	f000 fc81 	bl	800918c <RCCEx_PLL3_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800888e:	e003      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
      break;
 8008894:	e000      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10c      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088ac:	4901      	ldr	r1, [pc, #4]	; (80088b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	658b      	str	r3, [r1, #88]	; 0x58
 80088b2:	e003      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80088b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d02f      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088d2:	d00c      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80088d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088d8:	d015      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80088da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088de:	d10f      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e0:	4b79      	ldr	r3, [pc, #484]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	4a78      	ldr	r2, [pc, #480]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80088ec:	e00c      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3324      	adds	r3, #36	; 0x24
 80088f2:	2101      	movs	r1, #1
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fc49 	bl	800918c <RCCEx_PLL3_Config>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	75fb      	strb	r3, [r7, #23]
      break;
 8008904:	e000      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800890e:	4b6e      	ldr	r3, [pc, #440]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	496a      	ldr	r1, [pc, #424]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800891e:	4313      	orrs	r3, r2
 8008920:	654b      	str	r3, [r1, #84]	; 0x54
 8008922:	e001      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d029      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800893c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008940:	d007      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008942:	e00f      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008944:	4b60      	ldr	r3, [pc, #384]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	4a5f      	ldr	r2, [pc, #380]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800894a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008950:	e00b      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3304      	adds	r3, #4
 8008956:	2102      	movs	r1, #2
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fb65 	bl	8009028 <RCCEx_PLL2_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008962:	e002      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
      break;
 8008968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008970:	4b55      	ldr	r3, [pc, #340]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897c:	4952      	ldr	r1, [pc, #328]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800897e:	4313      	orrs	r3, r2
 8008980:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008982:	e001      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3324      	adds	r3, #36	; 0x24
 8008998:	2102      	movs	r1, #2
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fbf6 	bl	800918c <RCCEx_PLL3_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d02f      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089be:	d00c      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80089c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c4:	d802      	bhi.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d011      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80089ca:	e00d      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80089cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d0:	d00f      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80089d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d6:	d00e      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80089d8:	e006      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089da:	4b3b      	ldr	r3, [pc, #236]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a3a      	ldr	r2, [pc, #232]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089e6:	e007      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]
      break;
 80089ec:	e004      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80089ee:	bf00      	nop
 80089f0:	e002      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80089f2:	bf00      	nop
 80089f4:	e000      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80089f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089fe:	4b32      	ldr	r3, [pc, #200]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a0a:	492f      	ldr	r1, [pc, #188]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a10:	e001      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d008      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a22:	4b29      	ldr	r3, [pc, #164]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2e:	4926      	ldr	r1, [pc, #152]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a40:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a4e:	491e      	ldr	r1, [pc, #120]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a6c:	4916      	ldr	r1, [pc, #88]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a7e:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	4a11      	ldr	r2, [pc, #68]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a88:	6113      	str	r3, [r2, #16]
 8008a8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a94:	490c      	ldr	r1, [pc, #48]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da08      	bge.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aae:	4906      	ldr	r1, [pc, #24]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008ab4:	7dbb      	ldrb	r3, [r7, #22]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	58024400 	.word	0x58024400

08008acc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ad0:	f7ff f8b2 	bl	8007c38 <HAL_RCC_GetHCLKFreq>
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	091b      	lsrs	r3, r3, #4
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ae2:	5cd3      	ldrb	r3, [r2, r3]
 8008ae4:	f003 031f 	and.w	r3, r3, #31
 8008ae8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	58024400 	.word	0x58024400
 8008af4:	0800c22c 	.word	0x0800c22c

08008af8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	; 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b00:	4b9d      	ldr	r3, [pc, #628]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b0a:	4b9b      	ldr	r3, [pc, #620]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	0b1b      	lsrs	r3, r3, #12
 8008b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b16:	4b98      	ldr	r3, [pc, #608]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b22:	4b95      	ldr	r3, [pc, #596]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	08db      	lsrs	r3, r3, #3
 8008b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 810a 	beq.w	8008d5a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d05a      	beq.n	8008c02 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d302      	bcc.n	8008b56 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d078      	beq.n	8008c46 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008b54:	e099      	b.n	8008c8a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b56:	4b88      	ldr	r3, [pc, #544]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d02d      	beq.n	8008bbe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b62:	4b85      	ldr	r3, [pc, #532]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	4a83      	ldr	r2, [pc, #524]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8c:	4b7a      	ldr	r3, [pc, #488]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bbc:	e087      	b.n	8008cce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd0:	4b69      	ldr	r3, [pc, #420]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c00:	e065      	b.n	8008cce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c14:	4b58      	ldr	r3, [pc, #352]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c28:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c44:	e043      	b.n	8008cce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	ee07 3a90 	vmov	s15, r3
 8008c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c58:	4b47      	ldr	r3, [pc, #284]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c88:	e021      	b.n	8008cce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c94:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9c:	4b36      	ldr	r3, [pc, #216]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ccc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008cce:	4b2a      	ldr	r3, [pc, #168]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	0a5b      	lsrs	r3, r3, #9
 8008cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd8:	ee07 3a90 	vmov	s15, r3
 8008cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf4:	ee17 2a90 	vmov	r2, s15
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008cfc:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	0c1b      	lsrs	r3, r3, #16
 8008d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d22:	ee17 2a90 	vmov	r2, s15
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	0e1b      	lsrs	r3, r3, #24
 8008d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d50:	ee17 2a90 	vmov	r2, s15
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d58:	e008      	b.n	8008d6c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	609a      	str	r2, [r3, #8]
}
 8008d6c:	bf00      	nop
 8008d6e:	3724      	adds	r7, #36	; 0x24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	58024400 	.word	0x58024400
 8008d7c:	03d09000 	.word	0x03d09000
 8008d80:	46000000 	.word	0x46000000
 8008d84:	4c742400 	.word	0x4c742400
 8008d88:	4a742400 	.word	0x4a742400
 8008d8c:	4bf42400 	.word	0x4bf42400

08008d90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b089      	sub	sp, #36	; 0x24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d98:	4b9d      	ldr	r3, [pc, #628]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008da2:	4b9b      	ldr	r3, [pc, #620]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	0d1b      	lsrs	r3, r3, #20
 8008da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008dae:	4b98      	ldr	r3, [pc, #608]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008dba:	4b95      	ldr	r3, [pc, #596]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	08db      	lsrs	r3, r3, #3
 8008dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	fb02 f303 	mul.w	r3, r2, r3
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 810a 	beq.w	8008ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d05a      	beq.n	8008e9a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d302      	bcc.n	8008dee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d078      	beq.n	8008ede <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008dec:	e099      	b.n	8008f22 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dee:	4b88      	ldr	r3, [pc, #544]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d02d      	beq.n	8008e56 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dfa:	4b85      	ldr	r3, [pc, #532]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	08db      	lsrs	r3, r3, #3
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	4a83      	ldr	r2, [pc, #524]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008e06:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e24:	4b7a      	ldr	r3, [pc, #488]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e54:	e087      	b.n	8008f66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	ee07 3a90 	vmov	s15, r3
 8008e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e68:	4b69      	ldr	r3, [pc, #420]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e70:	ee07 3a90 	vmov	s15, r3
 8008e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e98:	e065      	b.n	8008f66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	ee07 3a90 	vmov	s15, r3
 8008ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eac:	4b58      	ldr	r3, [pc, #352]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008edc:	e043      	b.n	8008f66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	ee07 3a90 	vmov	s15, r3
 8008ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef0:	4b47      	ldr	r3, [pc, #284]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef8:	ee07 3a90 	vmov	s15, r3
 8008efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f00:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f20:	e021      	b.n	8008f66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f34:	4b36      	ldr	r3, [pc, #216]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f64:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f66:	4b2a      	ldr	r3, [pc, #168]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	0a5b      	lsrs	r3, r3, #9
 8008f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8c:	ee17 2a90 	vmov	r2, s15
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f94:	4b1e      	ldr	r3, [pc, #120]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	0c1b      	lsrs	r3, r3, #16
 8008f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fba:	ee17 2a90 	vmov	r2, s15
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008fc2:	4b13      	ldr	r3, [pc, #76]	; (8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	0e1b      	lsrs	r3, r3, #24
 8008fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe8:	ee17 2a90 	vmov	r2, s15
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008ff0:	e008      	b.n	8009004 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	609a      	str	r2, [r3, #8]
}
 8009004:	bf00      	nop
 8009006:	3724      	adds	r7, #36	; 0x24
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	58024400 	.word	0x58024400
 8009014:	03d09000 	.word	0x03d09000
 8009018:	46000000 	.word	0x46000000
 800901c:	4c742400 	.word	0x4c742400
 8009020:	4a742400 	.word	0x4a742400
 8009024:	4bf42400 	.word	0x4bf42400

08009028 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009036:	4b53      	ldr	r3, [pc, #332]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	2b03      	cmp	r3, #3
 8009040:	d101      	bne.n	8009046 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e099      	b.n	800917a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009046:	4b4f      	ldr	r3, [pc, #316]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a4e      	ldr	r2, [pc, #312]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800904c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009052:	f7f9 f8af 	bl	80021b4 <HAL_GetTick>
 8009056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009058:	e008      	b.n	800906c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800905a:	f7f9 f8ab 	bl	80021b4 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e086      	b.n	800917a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800906c:	4b45      	ldr	r3, [pc, #276]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f0      	bne.n	800905a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009078:	4b42      	ldr	r3, [pc, #264]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	031b      	lsls	r3, r3, #12
 8009086:	493f      	ldr	r1, [pc, #252]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009088:	4313      	orrs	r3, r2
 800908a:	628b      	str	r3, [r1, #40]	; 0x28
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	3b01      	subs	r3, #1
 8009092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	3b01      	subs	r3, #1
 800909c:	025b      	lsls	r3, r3, #9
 800909e:	b29b      	uxth	r3, r3
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	061b      	lsls	r3, r3, #24
 80090b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090bc:	4931      	ldr	r1, [pc, #196]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090c2:	4b30      	ldr	r3, [pc, #192]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	492d      	ldr	r1, [pc, #180]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80090d4:	4b2b      	ldr	r3, [pc, #172]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	f023 0220 	bic.w	r2, r3, #32
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	4928      	ldr	r1, [pc, #160]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80090e6:	4b27      	ldr	r3, [pc, #156]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	4a26      	ldr	r2, [pc, #152]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090ec:	f023 0310 	bic.w	r3, r3, #16
 80090f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090f2:	4b24      	ldr	r3, [pc, #144]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 80090f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <RCCEx_PLL2_Config+0x160>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	69d2      	ldr	r2, [r2, #28]
 80090fe:	00d2      	lsls	r2, r2, #3
 8009100:	4920      	ldr	r1, [pc, #128]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009102:	4313      	orrs	r3, r2
 8009104:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009106:	4b1f      	ldr	r3, [pc, #124]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	4a1e      	ldr	r2, [pc, #120]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800910c:	f043 0310 	orr.w	r3, r3, #16
 8009110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009118:	4b1a      	ldr	r3, [pc, #104]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a19      	ldr	r2, [pc, #100]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800911e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009124:	e00f      	b.n	8009146 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d106      	bne.n	800913a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800912c:	4b15      	ldr	r3, [pc, #84]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	4a14      	ldr	r2, [pc, #80]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009136:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009138:	e005      	b.n	8009146 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800913a:	4b12      	ldr	r3, [pc, #72]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	4a11      	ldr	r2, [pc, #68]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009146:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a0e      	ldr	r2, [pc, #56]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800914c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009152:	f7f9 f82f 	bl	80021b4 <HAL_GetTick>
 8009156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009158:	e008      	b.n	800916c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800915a:	f7f9 f82b 	bl	80021b4 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e006      	b.n	800917a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <RCCEx_PLL2_Config+0x15c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0f0      	beq.n	800915a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	58024400 	.word	0x58024400
 8009188:	ffff0007 	.word	0xffff0007

0800918c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800919a:	4b53      	ldr	r3, [pc, #332]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d101      	bne.n	80091aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e099      	b.n	80092de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091aa:	4b4f      	ldr	r3, [pc, #316]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a4e      	ldr	r2, [pc, #312]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80091b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091b6:	f7f8 fffd 	bl	80021b4 <HAL_GetTick>
 80091ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091bc:	e008      	b.n	80091d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091be:	f7f8 fff9 	bl	80021b4 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e086      	b.n	80092de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091d0:	4b45      	ldr	r3, [pc, #276]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091dc:	4b42      	ldr	r3, [pc, #264]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	493f      	ldr	r1, [pc, #252]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	628b      	str	r3, [r1, #40]	; 0x28
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	3b01      	subs	r3, #1
 8009200:	025b      	lsls	r3, r3, #9
 8009202:	b29b      	uxth	r3, r3
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	3b01      	subs	r3, #1
 800920c:	041b      	lsls	r3, r3, #16
 800920e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	3b01      	subs	r3, #1
 800921a:	061b      	lsls	r3, r3, #24
 800921c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009220:	4931      	ldr	r1, [pc, #196]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009222:	4313      	orrs	r3, r2
 8009224:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009226:	4b30      	ldr	r3, [pc, #192]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	492d      	ldr	r1, [pc, #180]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009234:	4313      	orrs	r3, r2
 8009236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009238:	4b2b      	ldr	r3, [pc, #172]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	4928      	ldr	r1, [pc, #160]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009246:	4313      	orrs	r3, r2
 8009248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800924a:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	4a26      	ldr	r2, [pc, #152]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009256:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800925a:	4b24      	ldr	r3, [pc, #144]	; (80092ec <RCCEx_PLL3_Config+0x160>)
 800925c:	4013      	ands	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	69d2      	ldr	r2, [r2, #28]
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	4920      	ldr	r1, [pc, #128]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009266:	4313      	orrs	r3, r2
 8009268:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800926a:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	4a1e      	ldr	r2, [pc, #120]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800927c:	4b1a      	ldr	r3, [pc, #104]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4a19      	ldr	r2, [pc, #100]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009288:	e00f      	b.n	80092aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d106      	bne.n	800929e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009290:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a14      	ldr	r2, [pc, #80]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 8009296:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800929a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800929c:	e005      	b.n	80092aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800929e:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4a11      	ldr	r2, [pc, #68]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80092a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a0e      	ldr	r2, [pc, #56]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80092b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b6:	f7f8 ff7d 	bl	80021b4 <HAL_GetTick>
 80092ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092bc:	e008      	b.n	80092d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092be:	f7f8 ff79 	bl	80021b4 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e006      	b.n	80092de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092d0:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <RCCEx_PLL3_Config+0x15c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0f0      	beq.n	80092be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	58024400 	.word	0x58024400
 80092ec:	ffff0007 	.word	0xffff0007

080092f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0e2      	b.n	80094cc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a70      	ldr	r2, [pc, #448]	; (80094d4 <HAL_SPI_Init+0x1e4>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d00f      	beq.n	8009336 <HAL_SPI_Init+0x46>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a6f      	ldr	r2, [pc, #444]	; (80094d8 <HAL_SPI_Init+0x1e8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00a      	beq.n	8009336 <HAL_SPI_Init+0x46>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a6d      	ldr	r2, [pc, #436]	; (80094dc <HAL_SPI_Init+0x1ec>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d005      	beq.n	8009336 <HAL_SPI_Init+0x46>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	2b0f      	cmp	r3, #15
 8009330:	d901      	bls.n	8009336 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e0ca      	b.n	80094cc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f8d2 	bl	80094e0 <SPI_GetPacketSize>
 800933c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a64      	ldr	r2, [pc, #400]	; (80094d4 <HAL_SPI_Init+0x1e4>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00c      	beq.n	8009362 <HAL_SPI_Init+0x72>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a62      	ldr	r2, [pc, #392]	; (80094d8 <HAL_SPI_Init+0x1e8>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d007      	beq.n	8009362 <HAL_SPI_Init+0x72>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a61      	ldr	r2, [pc, #388]	; (80094dc <HAL_SPI_Init+0x1ec>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d002      	beq.n	8009362 <HAL_SPI_Init+0x72>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b08      	cmp	r3, #8
 8009360:	d811      	bhi.n	8009386 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009366:	4a5b      	ldr	r2, [pc, #364]	; (80094d4 <HAL_SPI_Init+0x1e4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d009      	beq.n	8009380 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a59      	ldr	r2, [pc, #356]	; (80094d8 <HAL_SPI_Init+0x1e8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d004      	beq.n	8009380 <HAL_SPI_Init+0x90>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a58      	ldr	r2, [pc, #352]	; (80094dc <HAL_SPI_Init+0x1ec>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d104      	bne.n	800938a <HAL_SPI_Init+0x9a>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b10      	cmp	r3, #16
 8009384:	d901      	bls.n	800938a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e0a0      	b.n	80094cc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7f7 fdc6 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0201 	bic.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093c4:	d110      	bne.n	80093e8 <HAL_SPI_Init+0xf8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ce:	d10b      	bne.n	80093e8 <HAL_SPI_Init+0xf8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d107      	bne.n	80093e8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093e6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f0:	431a      	orrs	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	431a      	orrs	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fa:	ea42 0103 	orr.w	r1, r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	431a      	orrs	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009448:	ea42 0103 	orr.w	r1, r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d113      	bne.n	8009488 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009472:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009486:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0201 	bic.w	r2, r2, #1
 8009496:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	40013000 	.word	0x40013000
 80094d8:	40003800 	.word	0x40003800
 80094dc:	40003c00 	.word	0x40003c00

080094e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	3307      	adds	r3, #7
 80094fe:	08db      	lsrs	r3, r3, #3
 8009500:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	fb02 f303 	mul.w	r3, r2, r3
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e049      	b.n	80095bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7f8 f827 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2202      	movs	r2, #2
 8009546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f000 fcc7 	bl	8009ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d001      	beq.n	80095dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e021      	b.n	8009620 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f042 0201 	orr.w	r2, r2, #1
 80095f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	4b0c      	ldr	r3, [pc, #48]	; (800962c <HAL_TIM_Base_Start_IT+0x68>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b06      	cmp	r3, #6
 8009604:	d00b      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x5a>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800960c:	d007      	beq.n	800961e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f042 0201 	orr.w	r2, r2, #1
 800961c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	00010007 	.word	0x00010007

08009630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e049      	b.n	80096d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f841 	bl	80096de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f000 fc3a 	bl	8009ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <HAL_TIM_PWM_Start+0x24>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b01      	cmp	r3, #1
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	e03c      	b.n	8009792 <HAL_TIM_PWM_Start+0x9e>
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b04      	cmp	r3, #4
 800971c:	d109      	bne.n	8009732 <HAL_TIM_PWM_Start+0x3e>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b01      	cmp	r3, #1
 8009728:	bf14      	ite	ne
 800972a:	2301      	movne	r3, #1
 800972c:	2300      	moveq	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	e02f      	b.n	8009792 <HAL_TIM_PWM_Start+0x9e>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b08      	cmp	r3, #8
 8009736:	d109      	bne.n	800974c <HAL_TIM_PWM_Start+0x58>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b01      	cmp	r3, #1
 8009742:	bf14      	ite	ne
 8009744:	2301      	movne	r3, #1
 8009746:	2300      	moveq	r3, #0
 8009748:	b2db      	uxtb	r3, r3
 800974a:	e022      	b.n	8009792 <HAL_TIM_PWM_Start+0x9e>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b0c      	cmp	r3, #12
 8009750:	d109      	bne.n	8009766 <HAL_TIM_PWM_Start+0x72>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b01      	cmp	r3, #1
 800975c:	bf14      	ite	ne
 800975e:	2301      	movne	r3, #1
 8009760:	2300      	moveq	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	e015      	b.n	8009792 <HAL_TIM_PWM_Start+0x9e>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b10      	cmp	r3, #16
 800976a:	d109      	bne.n	8009780 <HAL_TIM_PWM_Start+0x8c>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b01      	cmp	r3, #1
 8009776:	bf14      	ite	ne
 8009778:	2301      	movne	r3, #1
 800977a:	2300      	moveq	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	e008      	b.n	8009792 <HAL_TIM_PWM_Start+0x9e>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b01      	cmp	r3, #1
 800978a:	bf14      	ite	ne
 800978c:	2301      	movne	r3, #1
 800978e:	2300      	moveq	r3, #0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e06e      	b.n	8009878 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_TIM_PWM_Start+0xb6>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097a8:	e023      	b.n	80097f2 <HAL_TIM_PWM_Start+0xfe>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d104      	bne.n	80097ba <HAL_TIM_PWM_Start+0xc6>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097b8:	e01b      	b.n	80097f2 <HAL_TIM_PWM_Start+0xfe>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d104      	bne.n	80097ca <HAL_TIM_PWM_Start+0xd6>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097c8:	e013      	b.n	80097f2 <HAL_TIM_PWM_Start+0xfe>
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2b0c      	cmp	r3, #12
 80097ce:	d104      	bne.n	80097da <HAL_TIM_PWM_Start+0xe6>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097d8:	e00b      	b.n	80097f2 <HAL_TIM_PWM_Start+0xfe>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d104      	bne.n	80097ea <HAL_TIM_PWM_Start+0xf6>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097e8:	e003      	b.n	80097f2 <HAL_TIM_PWM_Start+0xfe>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2201      	movs	r2, #1
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 ff7a 	bl	800a6f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <HAL_TIM_PWM_Start+0x18c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d013      	beq.n	8009832 <HAL_TIM_PWM_Start+0x13e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a1d      	ldr	r2, [pc, #116]	; (8009884 <HAL_TIM_PWM_Start+0x190>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00e      	beq.n	8009832 <HAL_TIM_PWM_Start+0x13e>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a1b      	ldr	r2, [pc, #108]	; (8009888 <HAL_TIM_PWM_Start+0x194>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d009      	beq.n	8009832 <HAL_TIM_PWM_Start+0x13e>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a1a      	ldr	r2, [pc, #104]	; (800988c <HAL_TIM_PWM_Start+0x198>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d004      	beq.n	8009832 <HAL_TIM_PWM_Start+0x13e>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a18      	ldr	r2, [pc, #96]	; (8009890 <HAL_TIM_PWM_Start+0x19c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d101      	bne.n	8009836 <HAL_TIM_PWM_Start+0x142>
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <HAL_TIM_PWM_Start+0x144>
 8009836:	2300      	movs	r3, #0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800984a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	4b10      	ldr	r3, [pc, #64]	; (8009894 <HAL_TIM_PWM_Start+0x1a0>)
 8009854:	4013      	ands	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d00b      	beq.n	8009876 <HAL_TIM_PWM_Start+0x182>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d007      	beq.n	8009876 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	40010000 	.word	0x40010000
 8009884:	40010400 	.word	0x40010400
 8009888:	40014000 	.word	0x40014000
 800988c:	40014400 	.word	0x40014400
 8009890:	40014800 	.word	0x40014800
 8009894:	00010007 	.word	0x00010007

08009898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d122      	bne.n	80098f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d11b      	bne.n	80098f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f06f 0202 	mvn.w	r2, #2
 80098c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fae6 	bl	8009eac <HAL_TIM_IC_CaptureCallback>
 80098e0:	e005      	b.n	80098ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fad8 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fae9 	bl	8009ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d122      	bne.n	8009948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b04      	cmp	r3, #4
 800990e:	d11b      	bne.n	8009948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f06f 0204 	mvn.w	r2, #4
 8009918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fabc 	bl	8009eac <HAL_TIM_IC_CaptureCallback>
 8009934:	e005      	b.n	8009942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 faae 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fabf 	bl	8009ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	f003 0308 	and.w	r3, r3, #8
 8009952:	2b08      	cmp	r3, #8
 8009954:	d122      	bne.n	800999c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b08      	cmp	r3, #8
 8009962:	d11b      	bne.n	800999c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f06f 0208 	mvn.w	r2, #8
 800996c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2204      	movs	r2, #4
 8009972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa92 	bl	8009eac <HAL_TIM_IC_CaptureCallback>
 8009988:	e005      	b.n	8009996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa84 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fa95 	bl	8009ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f003 0310 	and.w	r3, r3, #16
 80099a6:	2b10      	cmp	r3, #16
 80099a8:	d122      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d11b      	bne.n	80099f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0210 	mvn.w	r2, #16
 80099c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2208      	movs	r2, #8
 80099c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa68 	bl	8009eac <HAL_TIM_IC_CaptureCallback>
 80099dc:	e005      	b.n	80099ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa5a 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fa6b 	bl	8009ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d10e      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d107      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f06f 0201 	mvn.w	r2, #1
 8009a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f7 ffd0 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a26:	2b80      	cmp	r3, #128	; 0x80
 8009a28:	d10e      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a34:	2b80      	cmp	r3, #128	; 0x80
 8009a36:	d107      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 ff8c 	bl	800a960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a56:	d10e      	bne.n	8009a76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b80      	cmp	r3, #128	; 0x80
 8009a64:	d107      	bne.n	8009a76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 ff7f 	bl	800a974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a80:	2b40      	cmp	r3, #64	; 0x40
 8009a82:	d10e      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d107      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fa19 	bl	8009ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	d10e      	bne.n	8009ace <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d107      	bne.n	8009ace <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f06f 0220 	mvn.w	r2, #32
 8009ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 ff3f 	bl	800a94c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e0fd      	b.n	8009cee <HAL_TIM_PWM_ConfigChannel+0x216>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b14      	cmp	r3, #20
 8009afe:	f200 80f0 	bhi.w	8009ce2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009ce3 	.word	0x08009ce3
 8009b10:	08009ce3 	.word	0x08009ce3
 8009b14:	08009ce3 	.word	0x08009ce3
 8009b18:	08009b9d 	.word	0x08009b9d
 8009b1c:	08009ce3 	.word	0x08009ce3
 8009b20:	08009ce3 	.word	0x08009ce3
 8009b24:	08009ce3 	.word	0x08009ce3
 8009b28:	08009bdf 	.word	0x08009bdf
 8009b2c:	08009ce3 	.word	0x08009ce3
 8009b30:	08009ce3 	.word	0x08009ce3
 8009b34:	08009ce3 	.word	0x08009ce3
 8009b38:	08009c1f 	.word	0x08009c1f
 8009b3c:	08009ce3 	.word	0x08009ce3
 8009b40:	08009ce3 	.word	0x08009ce3
 8009b44:	08009ce3 	.word	0x08009ce3
 8009b48:	08009c61 	.word	0x08009c61
 8009b4c:	08009ce3 	.word	0x08009ce3
 8009b50:	08009ce3 	.word	0x08009ce3
 8009b54:	08009ce3 	.word	0x08009ce3
 8009b58:	08009ca1 	.word	0x08009ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 fa5a 	bl	800a01c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0208 	orr.w	r2, r2, #8
 8009b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f022 0204 	bic.w	r2, r2, #4
 8009b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6999      	ldr	r1, [r3, #24]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	691a      	ldr	r2, [r3, #16]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	619a      	str	r2, [r3, #24]
      break;
 8009b9a:	e0a3      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 faca 	bl	800a13c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699a      	ldr	r2, [r3, #24]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6999      	ldr	r1, [r3, #24]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	021a      	lsls	r2, r3, #8
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	619a      	str	r2, [r3, #24]
      break;
 8009bdc:	e082      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fb33 	bl	800a250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69da      	ldr	r2, [r3, #28]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0208 	orr.w	r2, r2, #8
 8009bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69da      	ldr	r2, [r3, #28]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0204 	bic.w	r2, r2, #4
 8009c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69d9      	ldr	r1, [r3, #28]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	61da      	str	r2, [r3, #28]
      break;
 8009c1c:	e062      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68b9      	ldr	r1, [r7, #8]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fb99 	bl	800a35c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69da      	ldr	r2, [r3, #28]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69da      	ldr	r2, [r3, #28]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69d9      	ldr	r1, [r3, #28]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	021a      	lsls	r2, r3, #8
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	61da      	str	r2, [r3, #28]
      break;
 8009c5e:	e041      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fbe0 	bl	800a42c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0208 	orr.w	r2, r2, #8
 8009c7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0204 	bic.w	r2, r2, #4
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c9e:	e021      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68b9      	ldr	r1, [r7, #8]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fc22 	bl	800a4f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	021a      	lsls	r2, r3, #8
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ce0:	e000      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009ce2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop

08009cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d101      	bne.n	8009d10 <HAL_TIM_ConfigClockSource+0x18>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e0b7      	b.n	8009e80 <HAL_TIM_ConfigClockSource+0x188>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4b57      	ldr	r3, [pc, #348]	; (8009e88 <HAL_TIM_ConfigClockSource+0x190>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b70      	cmp	r3, #112	; 0x70
 8009d46:	d02e      	beq.n	8009da6 <HAL_TIM_ConfigClockSource+0xae>
 8009d48:	2b70      	cmp	r3, #112	; 0x70
 8009d4a:	d812      	bhi.n	8009d72 <HAL_TIM_ConfigClockSource+0x7a>
 8009d4c:	2b30      	cmp	r3, #48	; 0x30
 8009d4e:	f000 8084 	beq.w	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d52:	2b30      	cmp	r3, #48	; 0x30
 8009d54:	d806      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x6c>
 8009d56:	2b10      	cmp	r3, #16
 8009d58:	d07f      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	d07d      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d07b      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009d62:	e084      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009d64:	2b50      	cmp	r3, #80	; 0x50
 8009d66:	d048      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x102>
 8009d68:	2b60      	cmp	r3, #96	; 0x60
 8009d6a:	d056      	beq.n	8009e1a <HAL_TIM_ConfigClockSource+0x122>
 8009d6c:	2b40      	cmp	r3, #64	; 0x40
 8009d6e:	d064      	beq.n	8009e3a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8009d70:	e07d      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009d72:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d76:	d070      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d7c:	d809      	bhi.n	8009d92 <HAL_TIM_ConfigClockSource+0x9a>
 8009d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d82:	d027      	beq.n	8009dd4 <HAL_TIM_ConfigClockSource+0xdc>
 8009d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d88:	d067      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	d06d      	beq.n	8009e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d90:	e06d      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009d92:	4a3e      	ldr	r2, [pc, #248]	; (8009e8c <HAL_TIM_ConfigClockSource+0x194>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d060      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d98:	4a3d      	ldr	r2, [pc, #244]	; (8009e90 <HAL_TIM_ConfigClockSource+0x198>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d05d      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
 8009d9e:	4a3d      	ldr	r2, [pc, #244]	; (8009e94 <HAL_TIM_ConfigClockSource+0x19c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d05a      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009da4:	e063      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	6899      	ldr	r1, [r3, #8]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f000 fc7d 	bl	800a6b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009dc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	609a      	str	r2, [r3, #8]
      break;
 8009dd2:	e04c      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	6899      	ldr	r1, [r3, #8]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f000 fc66 	bl	800a6b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009df6:	609a      	str	r2, [r3, #8]
      break;
 8009df8:	e039      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	6859      	ldr	r1, [r3, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f000 fbd6 	bl	800a5b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2150      	movs	r1, #80	; 0x50
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fc30 	bl	800a678 <TIM_ITRx_SetConfig>
      break;
 8009e18:	e029      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6859      	ldr	r1, [r3, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f000 fbf5 	bl	800a616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2160      	movs	r1, #96	; 0x60
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fc20 	bl	800a678 <TIM_ITRx_SetConfig>
      break;
 8009e38:	e019      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6859      	ldr	r1, [r3, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	461a      	mov	r2, r3
 8009e48:	f000 fbb6 	bl	800a5b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2140      	movs	r1, #64	; 0x40
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fc10 	bl	800a678 <TIM_ITRx_SetConfig>
      break;
 8009e58:	e009      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f000 fc07 	bl	800a678 <TIM_ITRx_SetConfig>
      break;
 8009e6a:	e000      	b.n	8009e6e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009e6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	ffceff88 	.word	0xffceff88
 8009e8c:	00100030 	.word	0x00100030
 8009e90:	00100040 	.word	0x00100040
 8009e94:	00100020 	.word	0x00100020

08009e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a40      	ldr	r2, [pc, #256]	; (8009ffc <TIM_Base_SetConfig+0x114>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d013      	beq.n	8009f28 <TIM_Base_SetConfig+0x40>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f06:	d00f      	beq.n	8009f28 <TIM_Base_SetConfig+0x40>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a3d      	ldr	r2, [pc, #244]	; (800a000 <TIM_Base_SetConfig+0x118>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00b      	beq.n	8009f28 <TIM_Base_SetConfig+0x40>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a3c      	ldr	r2, [pc, #240]	; (800a004 <TIM_Base_SetConfig+0x11c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d007      	beq.n	8009f28 <TIM_Base_SetConfig+0x40>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a3b      	ldr	r2, [pc, #236]	; (800a008 <TIM_Base_SetConfig+0x120>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <TIM_Base_SetConfig+0x40>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a3a      	ldr	r2, [pc, #232]	; (800a00c <TIM_Base_SetConfig+0x124>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d108      	bne.n	8009f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a2f      	ldr	r2, [pc, #188]	; (8009ffc <TIM_Base_SetConfig+0x114>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d01f      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f48:	d01b      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a2c      	ldr	r2, [pc, #176]	; (800a000 <TIM_Base_SetConfig+0x118>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d017      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a2b      	ldr	r2, [pc, #172]	; (800a004 <TIM_Base_SetConfig+0x11c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d013      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a2a      	ldr	r2, [pc, #168]	; (800a008 <TIM_Base_SetConfig+0x120>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d00f      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a29      	ldr	r2, [pc, #164]	; (800a00c <TIM_Base_SetConfig+0x124>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00b      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a28      	ldr	r2, [pc, #160]	; (800a010 <TIM_Base_SetConfig+0x128>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d007      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a27      	ldr	r2, [pc, #156]	; (800a014 <TIM_Base_SetConfig+0x12c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d003      	beq.n	8009f82 <TIM_Base_SetConfig+0x9a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a26      	ldr	r2, [pc, #152]	; (800a018 <TIM_Base_SetConfig+0x130>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d108      	bne.n	8009f94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a10      	ldr	r2, [pc, #64]	; (8009ffc <TIM_Base_SetConfig+0x114>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00f      	beq.n	8009fe0 <TIM_Base_SetConfig+0xf8>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a12      	ldr	r2, [pc, #72]	; (800a00c <TIM_Base_SetConfig+0x124>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d00b      	beq.n	8009fe0 <TIM_Base_SetConfig+0xf8>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a11      	ldr	r2, [pc, #68]	; (800a010 <TIM_Base_SetConfig+0x128>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d007      	beq.n	8009fe0 <TIM_Base_SetConfig+0xf8>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a10      	ldr	r2, [pc, #64]	; (800a014 <TIM_Base_SetConfig+0x12c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d003      	beq.n	8009fe0 <TIM_Base_SetConfig+0xf8>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a0f      	ldr	r2, [pc, #60]	; (800a018 <TIM_Base_SetConfig+0x130>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d103      	bne.n	8009fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	615a      	str	r2, [r3, #20]
}
 8009fee:	bf00      	nop
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40010000 	.word	0x40010000
 800a000:	40000400 	.word	0x40000400
 800a004:	40000800 	.word	0x40000800
 800a008:	40000c00 	.word	0x40000c00
 800a00c:	40010400 	.word	0x40010400
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f023 0201 	bic.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4b37      	ldr	r3, [pc, #220]	; (800a124 <TIM_OC1_SetConfig+0x108>)
 800a048:	4013      	ands	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f023 0302 	bic.w	r3, r3, #2
 800a064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a2d      	ldr	r2, [pc, #180]	; (800a128 <TIM_OC1_SetConfig+0x10c>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d00f      	beq.n	800a098 <TIM_OC1_SetConfig+0x7c>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a2c      	ldr	r2, [pc, #176]	; (800a12c <TIM_OC1_SetConfig+0x110>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d00b      	beq.n	800a098 <TIM_OC1_SetConfig+0x7c>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a2b      	ldr	r2, [pc, #172]	; (800a130 <TIM_OC1_SetConfig+0x114>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d007      	beq.n	800a098 <TIM_OC1_SetConfig+0x7c>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <TIM_OC1_SetConfig+0x118>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_OC1_SetConfig+0x7c>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a29      	ldr	r2, [pc, #164]	; (800a138 <TIM_OC1_SetConfig+0x11c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d10c      	bne.n	800a0b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f023 0308 	bic.w	r3, r3, #8
 800a09e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f023 0304 	bic.w	r3, r3, #4
 800a0b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a1c      	ldr	r2, [pc, #112]	; (800a128 <TIM_OC1_SetConfig+0x10c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00f      	beq.n	800a0da <TIM_OC1_SetConfig+0xbe>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a1b      	ldr	r2, [pc, #108]	; (800a12c <TIM_OC1_SetConfig+0x110>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00b      	beq.n	800a0da <TIM_OC1_SetConfig+0xbe>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a1a      	ldr	r2, [pc, #104]	; (800a130 <TIM_OC1_SetConfig+0x114>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d007      	beq.n	800a0da <TIM_OC1_SetConfig+0xbe>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a19      	ldr	r2, [pc, #100]	; (800a134 <TIM_OC1_SetConfig+0x118>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d003      	beq.n	800a0da <TIM_OC1_SetConfig+0xbe>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a18      	ldr	r2, [pc, #96]	; (800a138 <TIM_OC1_SetConfig+0x11c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d111      	bne.n	800a0fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	621a      	str	r2, [r3, #32]
}
 800a118:	bf00      	nop
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	fffeff8f 	.word	0xfffeff8f
 800a128:	40010000 	.word	0x40010000
 800a12c:	40010400 	.word	0x40010400
 800a130:	40014000 	.word	0x40014000
 800a134:	40014400 	.word	0x40014400
 800a138:	40014800 	.word	0x40014800

0800a13c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f023 0210 	bic.w	r2, r3, #16
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4b34      	ldr	r3, [pc, #208]	; (800a238 <TIM_OC2_SetConfig+0xfc>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0320 	bic.w	r3, r3, #32
 800a186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a29      	ldr	r2, [pc, #164]	; (800a23c <TIM_OC2_SetConfig+0x100>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_OC2_SetConfig+0x68>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a28      	ldr	r2, [pc, #160]	; (800a240 <TIM_OC2_SetConfig+0x104>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d10d      	bne.n	800a1c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a1e      	ldr	r2, [pc, #120]	; (800a23c <TIM_OC2_SetConfig+0x100>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00f      	beq.n	800a1e8 <TIM_OC2_SetConfig+0xac>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a1d      	ldr	r2, [pc, #116]	; (800a240 <TIM_OC2_SetConfig+0x104>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00b      	beq.n	800a1e8 <TIM_OC2_SetConfig+0xac>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a1c      	ldr	r2, [pc, #112]	; (800a244 <TIM_OC2_SetConfig+0x108>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d007      	beq.n	800a1e8 <TIM_OC2_SetConfig+0xac>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a1b      	ldr	r2, [pc, #108]	; (800a248 <TIM_OC2_SetConfig+0x10c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d003      	beq.n	800a1e8 <TIM_OC2_SetConfig+0xac>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a1a      	ldr	r2, [pc, #104]	; (800a24c <TIM_OC2_SetConfig+0x110>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d113      	bne.n	800a210 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	4313      	orrs	r3, r2
 800a202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	621a      	str	r2, [r3, #32]
}
 800a22a:	bf00      	nop
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	feff8fff 	.word	0xfeff8fff
 800a23c:	40010000 	.word	0x40010000
 800a240:	40010400 	.word	0x40010400
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800

0800a250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a27      	ldr	r2, [pc, #156]	; (800a348 <TIM_OC3_SetConfig+0xf8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d003      	beq.n	800a2b6 <TIM_OC3_SetConfig+0x66>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a26      	ldr	r2, [pc, #152]	; (800a34c <TIM_OC3_SetConfig+0xfc>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d10d      	bne.n	800a2d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a1c      	ldr	r2, [pc, #112]	; (800a348 <TIM_OC3_SetConfig+0xf8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00f      	beq.n	800a2fa <TIM_OC3_SetConfig+0xaa>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a1b      	ldr	r2, [pc, #108]	; (800a34c <TIM_OC3_SetConfig+0xfc>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d00b      	beq.n	800a2fa <TIM_OC3_SetConfig+0xaa>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a1a      	ldr	r2, [pc, #104]	; (800a350 <TIM_OC3_SetConfig+0x100>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d007      	beq.n	800a2fa <TIM_OC3_SetConfig+0xaa>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a19      	ldr	r2, [pc, #100]	; (800a354 <TIM_OC3_SetConfig+0x104>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d003      	beq.n	800a2fa <TIM_OC3_SetConfig+0xaa>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a18      	ldr	r2, [pc, #96]	; (800a358 <TIM_OC3_SetConfig+0x108>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d113      	bne.n	800a322 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4313      	orrs	r3, r2
 800a314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	621a      	str	r2, [r3, #32]
}
 800a33c:	bf00      	nop
 800a33e:	371c      	adds	r7, #28
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	40010000 	.word	0x40010000
 800a34c:	40010400 	.word	0x40010400
 800a350:	40014000 	.word	0x40014000
 800a354:	40014400 	.word	0x40014400
 800a358:	40014800 	.word	0x40014800

0800a35c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	031b      	lsls	r3, r3, #12
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a18      	ldr	r2, [pc, #96]	; (800a418 <TIM_OC4_SetConfig+0xbc>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d00f      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a17      	ldr	r2, [pc, #92]	; (800a41c <TIM_OC4_SetConfig+0xc0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d00b      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a16      	ldr	r2, [pc, #88]	; (800a420 <TIM_OC4_SetConfig+0xc4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d007      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a15      	ldr	r2, [pc, #84]	; (800a424 <TIM_OC4_SetConfig+0xc8>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d003      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a14      	ldr	r2, [pc, #80]	; (800a428 <TIM_OC4_SetConfig+0xcc>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d109      	bne.n	800a3f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	019b      	lsls	r3, r3, #6
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40010000 	.word	0x40010000
 800a41c:	40010400 	.word	0x40010400
 800a420:	40014000 	.word	0x40014000
 800a424:	40014400 	.word	0x40014400
 800a428:	40014800 	.word	0x40014800

0800a42c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	4313      	orrs	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a46c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	041b      	lsls	r3, r3, #16
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4313      	orrs	r3, r2
 800a478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a17      	ldr	r2, [pc, #92]	; (800a4dc <TIM_OC5_SetConfig+0xb0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00f      	beq.n	800a4a2 <TIM_OC5_SetConfig+0x76>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a16      	ldr	r2, [pc, #88]	; (800a4e0 <TIM_OC5_SetConfig+0xb4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00b      	beq.n	800a4a2 <TIM_OC5_SetConfig+0x76>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <TIM_OC5_SetConfig+0xb8>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d007      	beq.n	800a4a2 <TIM_OC5_SetConfig+0x76>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a14      	ldr	r2, [pc, #80]	; (800a4e8 <TIM_OC5_SetConfig+0xbc>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d003      	beq.n	800a4a2 <TIM_OC5_SetConfig+0x76>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a13      	ldr	r2, [pc, #76]	; (800a4ec <TIM_OC5_SetConfig+0xc0>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d109      	bne.n	800a4b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	021b      	lsls	r3, r3, #8
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	621a      	str	r2, [r3, #32]
}
 800a4d0:	bf00      	nop
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40010400 	.word	0x40010400
 800a4e4:	40014000 	.word	0x40014000
 800a4e8:	40014400 	.word	0x40014400
 800a4ec:	40014800 	.word	0x40014800

0800a4f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	021b      	lsls	r3, r3, #8
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	051b      	lsls	r3, r3, #20
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a18      	ldr	r2, [pc, #96]	; (800a5a4 <TIM_OC6_SetConfig+0xb4>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d00f      	beq.n	800a568 <TIM_OC6_SetConfig+0x78>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a17      	ldr	r2, [pc, #92]	; (800a5a8 <TIM_OC6_SetConfig+0xb8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00b      	beq.n	800a568 <TIM_OC6_SetConfig+0x78>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a16      	ldr	r2, [pc, #88]	; (800a5ac <TIM_OC6_SetConfig+0xbc>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d007      	beq.n	800a568 <TIM_OC6_SetConfig+0x78>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <TIM_OC6_SetConfig+0xc0>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <TIM_OC6_SetConfig+0x78>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a14      	ldr	r2, [pc, #80]	; (800a5b4 <TIM_OC6_SetConfig+0xc4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d109      	bne.n	800a57c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a56e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	029b      	lsls	r3, r3, #10
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	621a      	str	r2, [r3, #32]
}
 800a596:	bf00      	nop
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	40010000 	.word	0x40010000
 800a5a8:	40010400 	.word	0x40010400
 800a5ac:	40014000 	.word	0x40014000
 800a5b0:	40014400 	.word	0x40014400
 800a5b4:	40014800 	.word	0x40014800

0800a5b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	f023 0201 	bic.w	r2, r3, #1
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f023 030a 	bic.w	r3, r3, #10
 800a5f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	621a      	str	r2, [r3, #32]
}
 800a60a:	bf00      	nop
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a616:	b480      	push	{r7}
 800a618:	b087      	sub	sp, #28
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	f023 0210 	bic.w	r2, r3, #16
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	031b      	lsls	r3, r3, #12
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4313      	orrs	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	011b      	lsls	r3, r3, #4
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	621a      	str	r2, [r3, #32]
}
 800a66a:	bf00      	nop
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <TIM_ITRx_SetConfig+0x38>)
 800a68c:	4013      	ands	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	f043 0307 	orr.w	r3, r3, #7
 800a69a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	609a      	str	r2, [r3, #8]
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	ffcfff8f 	.word	0xffcfff8f

0800a6b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
 800a6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	021a      	lsls	r2, r3, #8
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	609a      	str	r2, [r3, #8]
}
 800a6e8:	bf00      	nop
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	2201      	movs	r2, #1
 800a708:	fa02 f303 	lsl.w	r3, r2, r3
 800a70c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1a      	ldr	r2, [r3, #32]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	43db      	mvns	r3, r3
 800a716:	401a      	ands	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1a      	ldr	r2, [r3, #32]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f003 031f 	and.w	r3, r3, #31
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	fa01 f303 	lsl.w	r3, r1, r3
 800a72c:	431a      	orrs	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	621a      	str	r2, [r3, #32]
}
 800a732:	bf00      	nop
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
	...

0800a740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a754:	2302      	movs	r3, #2
 800a756:	e068      	b.n	800a82a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a2e      	ldr	r2, [pc, #184]	; (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d004      	beq.n	800a78c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a2d      	ldr	r2, [pc, #180]	; (800a83c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d108      	bne.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1e      	ldr	r2, [pc, #120]	; (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d01d      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ca:	d018      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a1b      	ldr	r2, [pc, #108]	; (800a840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d013      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a1a      	ldr	r2, [pc, #104]	; (800a844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00e      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a18      	ldr	r2, [pc, #96]	; (800a848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d009      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a13      	ldr	r2, [pc, #76]	; (800a83c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d004      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a14      	ldr	r2, [pc, #80]	; (800a84c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d10c      	bne.n	800a818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40010000 	.word	0x40010000
 800a83c:	40010400 	.word	0x40010400
 800a840:	40000400 	.word	0x40000400
 800a844:	40000800 	.word	0x40000800
 800a848:	40000c00 	.word	0x40000c00
 800a84c:	40001800 	.word	0x40001800

0800a850 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a868:	2302      	movs	r3, #2
 800a86a:	e065      	b.n	800a938 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	041b      	lsls	r3, r3, #16
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a16      	ldr	r2, [pc, #88]	; (800a944 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d004      	beq.n	800a8fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a14      	ldr	r2, [pc, #80]	; (800a948 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d115      	bne.n	800a926 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	051b      	lsls	r3, r3, #20
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	4313      	orrs	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	40010000 	.word	0x40010000
 800a948:	40010400 	.word	0x40010400

0800a94c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e042      	b.n	800aa20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d106      	bne.n	800a9b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7f6 ff37 	bl	8001820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2224      	movs	r2, #36	; 0x24
 800a9b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 0201 	bic.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa56 	bl	800ae7c <UART_SetConfig>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e022      	b.n	800aa20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fffa 	bl	800b9dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0201 	orr.w	r2, r2, #1
 800aa16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f881 	bl	800bb20 <UART_CheckIdleState>
 800aa1e:	4603      	mov	r3, r0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	f040 8083 	bne.w	800ab4a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <HAL_UART_Transmit+0x28>
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e07b      	b.n	800ab4c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d101      	bne.n	800aa62 <HAL_UART_Transmit+0x3a>
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e074      	b.n	800ab4c <HAL_UART_Transmit+0x124>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2221      	movs	r2, #33	; 0x21
 800aa76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800aa7a:	f7f7 fb9b 	bl	80021b4 <HAL_GetTick>
 800aa7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	88fa      	ldrh	r2, [r7, #6]
 800aa8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa98:	d108      	bne.n	800aaac <HAL_UART_Transmit+0x84>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d104      	bne.n	800aaac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	61bb      	str	r3, [r7, #24]
 800aaaa:	e003      	b.n	800aab4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800aabc:	e02c      	b.n	800ab18 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2200      	movs	r2, #0
 800aac6:	2180      	movs	r1, #128	; 0x80
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f001 f871 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e039      	b.n	800ab4c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10b      	bne.n	800aaf6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	61bb      	str	r3, [r7, #24]
 800aaf4:	e007      	b.n	800ab06 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	3301      	adds	r3, #1
 800ab04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1cc      	bne.n	800aabe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2140      	movs	r1, #64	; 0x40
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f001 f83e 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e006      	b.n	800ab4c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e000      	b.n	800ab4c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ab4a:	2302      	movs	r3, #2
  }
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3720      	adds	r7, #32
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d118      	bne.n	800abb6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	f003 0320 	and.w	r3, r3, #32
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d013      	beq.n	800abb6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 8145 	beq.w	800ae36 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
      }
      return;
 800abb4:	e13f      	b.n	800ae36 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 80e8 	beq.w	800ad8e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4ba1      	ldr	r3, [pc, #644]	; (800ae48 <HAL_UART_IRQHandler+0x2f4>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d105      	bne.n	800abd4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	4ba0      	ldr	r3, [pc, #640]	; (800ae4c <HAL_UART_IRQHandler+0x2f8>)
 800abcc:	4013      	ands	r3, r2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 80dd 	beq.w	800ad8e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d010      	beq.n	800ac00 <HAL_UART_IRQHandler+0xac>
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2201      	movs	r2, #1
 800abee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf6:	f043 0201 	orr.w	r2, r3, #1
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d010      	beq.n	800ac2c <HAL_UART_IRQHandler+0xd8>
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f003 0301 	and.w	r3, r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00b      	beq.n	800ac2c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2202      	movs	r2, #2
 800ac1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac22:	f043 0204 	orr.w	r2, r3, #4
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	f003 0304 	and.w	r3, r3, #4
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d010      	beq.n	800ac58 <HAL_UART_IRQHandler+0x104>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2204      	movs	r2, #4
 800ac46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	f043 0202 	orr.w	r2, r3, #2
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	f003 0308 	and.w	r3, r3, #8
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d015      	beq.n	800ac8e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	f003 0320 	and.w	r3, r3, #32
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d104      	bne.n	800ac76 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	4b76      	ldr	r3, [pc, #472]	; (800ae48 <HAL_UART_IRQHandler+0x2f4>)
 800ac70:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00b      	beq.n	800ac8e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac84:	f043 0208 	orr.w	r2, r3, #8
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d011      	beq.n	800acbc <HAL_UART_IRQHandler+0x168>
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00c      	beq.n	800acbc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb2:	f043 0220 	orr.w	r2, r3, #32
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 80b9 	beq.w	800ae3a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	f003 0320 	and.w	r3, r3, #32
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d011      	beq.n	800acf6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	f003 0320 	and.w	r3, r3, #32
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d104      	bne.n	800ace6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acfc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad08:	2b40      	cmp	r3, #64	; 0x40
 800ad0a:	d004      	beq.n	800ad16 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d031      	beq.n	800ad7a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 ffca 	bl	800bcb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad26:	2b40      	cmp	r3, #64	; 0x40
 800ad28:	d123      	bne.n	800ad72 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d013      	beq.n	800ad6a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad46:	4a42      	ldr	r2, [pc, #264]	; (800ae50 <HAL_UART_IRQHandler+0x2fc>)
 800ad48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7f8 ffa2 	bl	8003c98 <HAL_DMA_Abort_IT>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d017      	beq.n	800ad8a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800ad64:	4610      	mov	r0, r2
 800ad66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad68:	e00f      	b.n	800ad8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f87c 	bl	800ae68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad70:	e00b      	b.n	800ad8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f878 	bl	800ae68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad78:	e007      	b.n	800ad8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f874 	bl	800ae68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800ad88:	e057      	b.n	800ae3a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8a:	bf00      	nop
    return;
 800ad8c:	e055      	b.n	800ae3a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00d      	beq.n	800adb4 <HAL_UART_IRQHandler+0x260>
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d008      	beq.n	800adb4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800adaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 ffd3 	bl	800bd58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adb2:	e045      	b.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d012      	beq.n	800ade4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d008      	beq.n	800ade4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add6:	2b00      	cmp	r3, #0
 800add8:	d031      	beq.n	800ae3e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	4798      	blx	r3
    }
    return;
 800ade2:	e02c      	b.n	800ae3e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <HAL_UART_IRQHandler+0x2ac>
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d003      	beq.n	800ae00 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 ff93 	bl	800bd24 <UART_EndTransmit_IT>
    return;
 800adfe:	e01f      	b.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d008      	beq.n	800ae1c <HAL_UART_IRQHandler+0x2c8>
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 ffb3 	bl	800bd80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae1a:	e011      	b.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00c      	beq.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	da09      	bge.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 ff9d 	bl	800bd6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae32:	bf00      	nop
 800ae34:	e004      	b.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
      return;
 800ae36:	bf00      	nop
 800ae38:	e002      	b.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
    return;
 800ae3a:	bf00      	nop
 800ae3c:	e000      	b.n	800ae40 <HAL_UART_IRQHandler+0x2ec>
    return;
 800ae3e:	bf00      	nop
  }
}
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	10000001 	.word	0x10000001
 800ae4c:	04000120 	.word	0x04000120
 800ae50:	0800bcf9 	.word	0x0800bcf9

0800ae54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ae80:	b08e      	sub	sp, #56	; 0x38
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	431a      	orrs	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	4bc1      	ldr	r3, [pc, #772]	; (800b1bc <UART_SetConfig+0x340>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6812      	ldr	r2, [r2, #0]
 800aebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aebe:	430b      	orrs	r3, r1
 800aec0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	430a      	orrs	r2, r1
 800aed6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4ab7      	ldr	r2, [pc, #732]	; (800b1c0 <UART_SetConfig+0x344>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d004      	beq.n	800aef2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeee:	4313      	orrs	r3, r2
 800aef0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	4bb2      	ldr	r3, [pc, #712]	; (800b1c4 <UART_SetConfig+0x348>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af02:	430b      	orrs	r3, r1
 800af04:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	f023 010f 	bic.w	r1, r3, #15
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	430a      	orrs	r2, r1
 800af1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4aa9      	ldr	r2, [pc, #676]	; (800b1c8 <UART_SetConfig+0x34c>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d177      	bne.n	800b016 <UART_SetConfig+0x19a>
 800af26:	4ba9      	ldr	r3, [pc, #676]	; (800b1cc <UART_SetConfig+0x350>)
 800af28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af2e:	2b28      	cmp	r3, #40	; 0x28
 800af30:	d86c      	bhi.n	800b00c <UART_SetConfig+0x190>
 800af32:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <UART_SetConfig+0xbc>)
 800af34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af38:	0800afdd 	.word	0x0800afdd
 800af3c:	0800b00d 	.word	0x0800b00d
 800af40:	0800b00d 	.word	0x0800b00d
 800af44:	0800b00d 	.word	0x0800b00d
 800af48:	0800b00d 	.word	0x0800b00d
 800af4c:	0800b00d 	.word	0x0800b00d
 800af50:	0800b00d 	.word	0x0800b00d
 800af54:	0800b00d 	.word	0x0800b00d
 800af58:	0800afe5 	.word	0x0800afe5
 800af5c:	0800b00d 	.word	0x0800b00d
 800af60:	0800b00d 	.word	0x0800b00d
 800af64:	0800b00d 	.word	0x0800b00d
 800af68:	0800b00d 	.word	0x0800b00d
 800af6c:	0800b00d 	.word	0x0800b00d
 800af70:	0800b00d 	.word	0x0800b00d
 800af74:	0800b00d 	.word	0x0800b00d
 800af78:	0800afed 	.word	0x0800afed
 800af7c:	0800b00d 	.word	0x0800b00d
 800af80:	0800b00d 	.word	0x0800b00d
 800af84:	0800b00d 	.word	0x0800b00d
 800af88:	0800b00d 	.word	0x0800b00d
 800af8c:	0800b00d 	.word	0x0800b00d
 800af90:	0800b00d 	.word	0x0800b00d
 800af94:	0800b00d 	.word	0x0800b00d
 800af98:	0800aff5 	.word	0x0800aff5
 800af9c:	0800b00d 	.word	0x0800b00d
 800afa0:	0800b00d 	.word	0x0800b00d
 800afa4:	0800b00d 	.word	0x0800b00d
 800afa8:	0800b00d 	.word	0x0800b00d
 800afac:	0800b00d 	.word	0x0800b00d
 800afb0:	0800b00d 	.word	0x0800b00d
 800afb4:	0800b00d 	.word	0x0800b00d
 800afb8:	0800affd 	.word	0x0800affd
 800afbc:	0800b00d 	.word	0x0800b00d
 800afc0:	0800b00d 	.word	0x0800b00d
 800afc4:	0800b00d 	.word	0x0800b00d
 800afc8:	0800b00d 	.word	0x0800b00d
 800afcc:	0800b00d 	.word	0x0800b00d
 800afd0:	0800b00d 	.word	0x0800b00d
 800afd4:	0800b00d 	.word	0x0800b00d
 800afd8:	0800b005 	.word	0x0800b005
 800afdc:	2301      	movs	r3, #1
 800afde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe2:	e233      	b.n	800b44c <UART_SetConfig+0x5d0>
 800afe4:	2304      	movs	r3, #4
 800afe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afea:	e22f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800afec:	2308      	movs	r3, #8
 800afee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff2:	e22b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800aff4:	2310      	movs	r3, #16
 800aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affa:	e227      	b.n	800b44c <UART_SetConfig+0x5d0>
 800affc:	2320      	movs	r3, #32
 800affe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b002:	e223      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b004:	2340      	movs	r3, #64	; 0x40
 800b006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00a:	e21f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b00c:	2380      	movs	r3, #128	; 0x80
 800b00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b012:	bf00      	nop
 800b014:	e21a      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a6d      	ldr	r2, [pc, #436]	; (800b1d0 <UART_SetConfig+0x354>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d132      	bne.n	800b086 <UART_SetConfig+0x20a>
 800b020:	4b6a      	ldr	r3, [pc, #424]	; (800b1cc <UART_SetConfig+0x350>)
 800b022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b024:	f003 0307 	and.w	r3, r3, #7
 800b028:	2b05      	cmp	r3, #5
 800b02a:	d827      	bhi.n	800b07c <UART_SetConfig+0x200>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <UART_SetConfig+0x1b8>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b04d 	.word	0x0800b04d
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b05d 	.word	0x0800b05d
 800b040:	0800b065 	.word	0x0800b065
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b075 	.word	0x0800b075
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e1fb      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e1f7      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e1f3      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e1ef      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b06c:	2320      	movs	r3, #32
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e1eb      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b074:	2340      	movs	r3, #64	; 0x40
 800b076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07a:	e1e7      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b07c:	2380      	movs	r3, #128	; 0x80
 800b07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b082:	bf00      	nop
 800b084:	e1e2      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a52      	ldr	r2, [pc, #328]	; (800b1d4 <UART_SetConfig+0x358>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d132      	bne.n	800b0f6 <UART_SetConfig+0x27a>
 800b090:	4b4e      	ldr	r3, [pc, #312]	; (800b1cc <UART_SetConfig+0x350>)
 800b092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	2b05      	cmp	r3, #5
 800b09a:	d827      	bhi.n	800b0ec <UART_SetConfig+0x270>
 800b09c:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <UART_SetConfig+0x228>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b0bd 	.word	0x0800b0bd
 800b0a8:	0800b0c5 	.word	0x0800b0c5
 800b0ac:	0800b0cd 	.word	0x0800b0cd
 800b0b0:	0800b0d5 	.word	0x0800b0d5
 800b0b4:	0800b0dd 	.word	0x0800b0dd
 800b0b8:	0800b0e5 	.word	0x0800b0e5
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c2:	e1c3      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0c4:	2304      	movs	r3, #4
 800b0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ca:	e1bf      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d2:	e1bb      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0da:	e1b7      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0dc:	2320      	movs	r3, #32
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e2:	e1b3      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0e4:	2340      	movs	r3, #64	; 0x40
 800b0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ea:	e1af      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0ec:	2380      	movs	r3, #128	; 0x80
 800b0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0f2:	bf00      	nop
 800b0f4:	e1aa      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a37      	ldr	r2, [pc, #220]	; (800b1d8 <UART_SetConfig+0x35c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d132      	bne.n	800b166 <UART_SetConfig+0x2ea>
 800b100:	4b32      	ldr	r3, [pc, #200]	; (800b1cc <UART_SetConfig+0x350>)
 800b102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b104:	f003 0307 	and.w	r3, r3, #7
 800b108:	2b05      	cmp	r3, #5
 800b10a:	d827      	bhi.n	800b15c <UART_SetConfig+0x2e0>
 800b10c:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <UART_SetConfig+0x298>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b12d 	.word	0x0800b12d
 800b118:	0800b135 	.word	0x0800b135
 800b11c:	0800b13d 	.word	0x0800b13d
 800b120:	0800b145 	.word	0x0800b145
 800b124:	0800b14d 	.word	0x0800b14d
 800b128:	0800b155 	.word	0x0800b155
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e18b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b134:	2304      	movs	r3, #4
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e187      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b13c:	2308      	movs	r3, #8
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e183      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b144:	2310      	movs	r3, #16
 800b146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14a:	e17f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b14c:	2320      	movs	r3, #32
 800b14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b152:	e17b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b154:	2340      	movs	r3, #64	; 0x40
 800b156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15a:	e177      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b15c:	2380      	movs	r3, #128	; 0x80
 800b15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b162:	bf00      	nop
 800b164:	e172      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a1c      	ldr	r2, [pc, #112]	; (800b1dc <UART_SetConfig+0x360>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d144      	bne.n	800b1fa <UART_SetConfig+0x37e>
 800b170:	4b16      	ldr	r3, [pc, #88]	; (800b1cc <UART_SetConfig+0x350>)
 800b172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	2b05      	cmp	r3, #5
 800b17a:	d839      	bhi.n	800b1f0 <UART_SetConfig+0x374>
 800b17c:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <UART_SetConfig+0x308>)
 800b17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800b19d 	.word	0x0800b19d
 800b188:	0800b1a5 	.word	0x0800b1a5
 800b18c:	0800b1ad 	.word	0x0800b1ad
 800b190:	0800b1b5 	.word	0x0800b1b5
 800b194:	0800b1e1 	.word	0x0800b1e1
 800b198:	0800b1e9 	.word	0x0800b1e9
 800b19c:	2300      	movs	r3, #0
 800b19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a2:	e153      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1a4:	2304      	movs	r3, #4
 800b1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1aa:	e14f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1ac:	2308      	movs	r3, #8
 800b1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b2:	e14b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1b4:	2310      	movs	r3, #16
 800b1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ba:	e147      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1bc:	cfff69f3 	.word	0xcfff69f3
 800b1c0:	58000c00 	.word	0x58000c00
 800b1c4:	11fff4ff 	.word	0x11fff4ff
 800b1c8:	40011000 	.word	0x40011000
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	40004400 	.word	0x40004400
 800b1d4:	40004800 	.word	0x40004800
 800b1d8:	40004c00 	.word	0x40004c00
 800b1dc:	40005000 	.word	0x40005000
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	e131      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1e8:	2340      	movs	r3, #64	; 0x40
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e12d      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1f0:	2380      	movs	r3, #128	; 0x80
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	bf00      	nop
 800b1f8:	e128      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4ab6      	ldr	r2, [pc, #728]	; (800b4d8 <UART_SetConfig+0x65c>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d178      	bne.n	800b2f6 <UART_SetConfig+0x47a>
 800b204:	4bb5      	ldr	r3, [pc, #724]	; (800b4dc <UART_SetConfig+0x660>)
 800b206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b20c:	2b28      	cmp	r3, #40	; 0x28
 800b20e:	d86d      	bhi.n	800b2ec <UART_SetConfig+0x470>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <UART_SetConfig+0x39c>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b2bd 	.word	0x0800b2bd
 800b21c:	0800b2ed 	.word	0x0800b2ed
 800b220:	0800b2ed 	.word	0x0800b2ed
 800b224:	0800b2ed 	.word	0x0800b2ed
 800b228:	0800b2ed 	.word	0x0800b2ed
 800b22c:	0800b2ed 	.word	0x0800b2ed
 800b230:	0800b2ed 	.word	0x0800b2ed
 800b234:	0800b2ed 	.word	0x0800b2ed
 800b238:	0800b2c5 	.word	0x0800b2c5
 800b23c:	0800b2ed 	.word	0x0800b2ed
 800b240:	0800b2ed 	.word	0x0800b2ed
 800b244:	0800b2ed 	.word	0x0800b2ed
 800b248:	0800b2ed 	.word	0x0800b2ed
 800b24c:	0800b2ed 	.word	0x0800b2ed
 800b250:	0800b2ed 	.word	0x0800b2ed
 800b254:	0800b2ed 	.word	0x0800b2ed
 800b258:	0800b2cd 	.word	0x0800b2cd
 800b25c:	0800b2ed 	.word	0x0800b2ed
 800b260:	0800b2ed 	.word	0x0800b2ed
 800b264:	0800b2ed 	.word	0x0800b2ed
 800b268:	0800b2ed 	.word	0x0800b2ed
 800b26c:	0800b2ed 	.word	0x0800b2ed
 800b270:	0800b2ed 	.word	0x0800b2ed
 800b274:	0800b2ed 	.word	0x0800b2ed
 800b278:	0800b2d5 	.word	0x0800b2d5
 800b27c:	0800b2ed 	.word	0x0800b2ed
 800b280:	0800b2ed 	.word	0x0800b2ed
 800b284:	0800b2ed 	.word	0x0800b2ed
 800b288:	0800b2ed 	.word	0x0800b2ed
 800b28c:	0800b2ed 	.word	0x0800b2ed
 800b290:	0800b2ed 	.word	0x0800b2ed
 800b294:	0800b2ed 	.word	0x0800b2ed
 800b298:	0800b2dd 	.word	0x0800b2dd
 800b29c:	0800b2ed 	.word	0x0800b2ed
 800b2a0:	0800b2ed 	.word	0x0800b2ed
 800b2a4:	0800b2ed 	.word	0x0800b2ed
 800b2a8:	0800b2ed 	.word	0x0800b2ed
 800b2ac:	0800b2ed 	.word	0x0800b2ed
 800b2b0:	0800b2ed 	.word	0x0800b2ed
 800b2b4:	0800b2ed 	.word	0x0800b2ed
 800b2b8:	0800b2e5 	.word	0x0800b2e5
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c2:	e0c3      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ca:	e0bf      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d2:	e0bb      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2da:	e0b7      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2dc:	2320      	movs	r3, #32
 800b2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2e2:	e0b3      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2e4:	2340      	movs	r3, #64	; 0x40
 800b2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ea:	e0af      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2ec:	2380      	movs	r3, #128	; 0x80
 800b2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f2:	bf00      	nop
 800b2f4:	e0aa      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a79      	ldr	r2, [pc, #484]	; (800b4e0 <UART_SetConfig+0x664>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d132      	bne.n	800b366 <UART_SetConfig+0x4ea>
 800b300:	4b76      	ldr	r3, [pc, #472]	; (800b4dc <UART_SetConfig+0x660>)
 800b302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d827      	bhi.n	800b35c <UART_SetConfig+0x4e0>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <UART_SetConfig+0x498>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b32d 	.word	0x0800b32d
 800b318:	0800b335 	.word	0x0800b335
 800b31c:	0800b33d 	.word	0x0800b33d
 800b320:	0800b345 	.word	0x0800b345
 800b324:	0800b34d 	.word	0x0800b34d
 800b328:	0800b355 	.word	0x0800b355
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b332:	e08b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b334:	2304      	movs	r3, #4
 800b336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33a:	e087      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b33c:	2308      	movs	r3, #8
 800b33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b342:	e083      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b344:	2310      	movs	r3, #16
 800b346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34a:	e07f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b34c:	2320      	movs	r3, #32
 800b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b352:	e07b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35a:	e077      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b35c:	2380      	movs	r3, #128	; 0x80
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	bf00      	nop
 800b364:	e072      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a5e      	ldr	r2, [pc, #376]	; (800b4e4 <UART_SetConfig+0x668>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d132      	bne.n	800b3d6 <UART_SetConfig+0x55a>
 800b370:	4b5a      	ldr	r3, [pc, #360]	; (800b4dc <UART_SetConfig+0x660>)
 800b372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b374:	f003 0307 	and.w	r3, r3, #7
 800b378:	2b05      	cmp	r3, #5
 800b37a:	d827      	bhi.n	800b3cc <UART_SetConfig+0x550>
 800b37c:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <UART_SetConfig+0x508>)
 800b37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b382:	bf00      	nop
 800b384:	0800b39d 	.word	0x0800b39d
 800b388:	0800b3a5 	.word	0x0800b3a5
 800b38c:	0800b3ad 	.word	0x0800b3ad
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3bd 	.word	0x0800b3bd
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	2300      	movs	r3, #0
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e053      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e04f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3ac:	2308      	movs	r3, #8
 800b3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b2:	e04b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3b4:	2310      	movs	r3, #16
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ba:	e047      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c2:	e043      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3c4:	2340      	movs	r3, #64	; 0x40
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e03f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3cc:	2380      	movs	r3, #128	; 0x80
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	bf00      	nop
 800b3d4:	e03a      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a43      	ldr	r2, [pc, #268]	; (800b4e8 <UART_SetConfig+0x66c>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d132      	bne.n	800b446 <UART_SetConfig+0x5ca>
 800b3e0:	4b3e      	ldr	r3, [pc, #248]	; (800b4dc <UART_SetConfig+0x660>)
 800b3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e4:	f003 0307 	and.w	r3, r3, #7
 800b3e8:	2b05      	cmp	r3, #5
 800b3ea:	d827      	bhi.n	800b43c <UART_SetConfig+0x5c0>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x578>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b40d 	.word	0x0800b40d
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	0800b41d 	.word	0x0800b41d
 800b400:	0800b425 	.word	0x0800b425
 800b404:	0800b42d 	.word	0x0800b42d
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	2302      	movs	r3, #2
 800b40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b412:	e01b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b414:	2304      	movs	r3, #4
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41a:	e017      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b41c:	2308      	movs	r3, #8
 800b41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b422:	e013      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b424:	2310      	movs	r3, #16
 800b426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b42a:	e00f      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b42c:	2320      	movs	r3, #32
 800b42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b432:	e00b      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b434:	2340      	movs	r3, #64	; 0x40
 800b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43a:	e007      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b43c:	2380      	movs	r3, #128	; 0x80
 800b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b442:	bf00      	nop
 800b444:	e002      	b.n	800b44c <UART_SetConfig+0x5d0>
 800b446:	2380      	movs	r3, #128	; 0x80
 800b448:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a25      	ldr	r2, [pc, #148]	; (800b4e8 <UART_SetConfig+0x66c>)
 800b452:	4293      	cmp	r3, r2
 800b454:	f040 80b8 	bne.w	800b5c8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b45c:	2b08      	cmp	r3, #8
 800b45e:	d019      	beq.n	800b494 <UART_SetConfig+0x618>
 800b460:	2b08      	cmp	r3, #8
 800b462:	dc04      	bgt.n	800b46e <UART_SetConfig+0x5f2>
 800b464:	2b02      	cmp	r3, #2
 800b466:	d009      	beq.n	800b47c <UART_SetConfig+0x600>
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d00b      	beq.n	800b484 <UART_SetConfig+0x608>
 800b46c:	e042      	b.n	800b4f4 <UART_SetConfig+0x678>
 800b46e:	2b20      	cmp	r3, #32
 800b470:	d02b      	beq.n	800b4ca <UART_SetConfig+0x64e>
 800b472:	2b40      	cmp	r3, #64	; 0x40
 800b474:	d02c      	beq.n	800b4d0 <UART_SetConfig+0x654>
 800b476:	2b10      	cmp	r3, #16
 800b478:	d014      	beq.n	800b4a4 <UART_SetConfig+0x628>
 800b47a:	e03b      	b.n	800b4f4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b47c:	f7fd fb26 	bl	8008acc <HAL_RCCEx_GetD3PCLK1Freq>
 800b480:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b482:	e03d      	b.n	800b500 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b484:	f107 0314 	add.w	r3, r7, #20
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fd fb35 	bl	8008af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b492:	e035      	b.n	800b500 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b494:	f107 0308 	add.w	r3, r7, #8
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fd fc79 	bl	8008d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4a2:	e02d      	b.n	800b500 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a4:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <UART_SetConfig+0x660>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d009      	beq.n	800b4c4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4b0:	4b0a      	ldr	r3, [pc, #40]	; (800b4dc <UART_SetConfig+0x660>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	08db      	lsrs	r3, r3, #3
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	4a0c      	ldr	r2, [pc, #48]	; (800b4ec <UART_SetConfig+0x670>)
 800b4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4c2:	e01d      	b.n	800b500 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <UART_SetConfig+0x670>)
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4c8:	e01a      	b.n	800b500 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4ca:	4b09      	ldr	r3, [pc, #36]	; (800b4f0 <UART_SetConfig+0x674>)
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ce:	e017      	b.n	800b500 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4d6:	e013      	b.n	800b500 <UART_SetConfig+0x684>
 800b4d8:	40011400 	.word	0x40011400
 800b4dc:	58024400 	.word	0x58024400
 800b4e0:	40007800 	.word	0x40007800
 800b4e4:	40007c00 	.word	0x40007c00
 800b4e8:	58000c00 	.word	0x58000c00
 800b4ec:	03d09000 	.word	0x03d09000
 800b4f0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 824d 	beq.w	800b9a2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	4aad      	ldr	r2, [pc, #692]	; (800b7c4 <UART_SetConfig+0x948>)
 800b50e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b512:	461a      	mov	r2, r3
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	fbb3 f3f2 	udiv	r3, r3, r2
 800b51a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	4613      	mov	r3, r2
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	4413      	add	r3, r2
 800b526:	6a3a      	ldr	r2, [r7, #32]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d305      	bcc.n	800b538 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b532:	6a3a      	ldr	r2, [r7, #32]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b53e:	e230      	b.n	800b9a2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	4618      	mov	r0, r3
 800b544:	f04f 0100 	mov.w	r1, #0
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	4a9d      	ldr	r2, [pc, #628]	; (800b7c4 <UART_SetConfig+0x948>)
 800b54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b552:	b29b      	uxth	r3, r3
 800b554:	f04f 0400 	mov.w	r4, #0
 800b558:	461a      	mov	r2, r3
 800b55a:	4623      	mov	r3, r4
 800b55c:	f7f4 febc 	bl	80002d8 <__aeabi_uldivmod>
 800b560:	4603      	mov	r3, r0
 800b562:	460c      	mov	r4, r1
 800b564:	4619      	mov	r1, r3
 800b566:	4622      	mov	r2, r4
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	f04f 0400 	mov.w	r4, #0
 800b570:	0214      	lsls	r4, r2, #8
 800b572:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b576:	020b      	lsls	r3, r1, #8
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	6852      	ldr	r2, [r2, #4]
 800b57c:	0852      	lsrs	r2, r2, #1
 800b57e:	4611      	mov	r1, r2
 800b580:	f04f 0200 	mov.w	r2, #0
 800b584:	eb13 0b01 	adds.w	fp, r3, r1
 800b588:	eb44 0c02 	adc.w	ip, r4, r2
 800b58c:	4658      	mov	r0, fp
 800b58e:	4661      	mov	r1, ip
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	f04f 0400 	mov.w	r4, #0
 800b598:	461a      	mov	r2, r3
 800b59a:	4623      	mov	r3, r4
 800b59c:	f7f4 fe9c 	bl	80002d8 <__aeabi_uldivmod>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ac:	d308      	bcc.n	800b5c0 <UART_SetConfig+0x744>
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5b4:	d204      	bcs.n	800b5c0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5bc:	60da      	str	r2, [r3, #12]
 800b5be:	e1f0      	b.n	800b9a2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b5c6:	e1ec      	b.n	800b9a2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5d0:	f040 8100 	bne.w	800b7d4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b5d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5d8:	2b40      	cmp	r3, #64	; 0x40
 800b5da:	f200 80b7 	bhi.w	800b74c <UART_SetConfig+0x8d0>
 800b5de:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <UART_SetConfig+0x768>)
 800b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e4:	0800b6e9 	.word	0x0800b6e9
 800b5e8:	0800b6f1 	.word	0x0800b6f1
 800b5ec:	0800b74d 	.word	0x0800b74d
 800b5f0:	0800b74d 	.word	0x0800b74d
 800b5f4:	0800b6f9 	.word	0x0800b6f9
 800b5f8:	0800b74d 	.word	0x0800b74d
 800b5fc:	0800b74d 	.word	0x0800b74d
 800b600:	0800b74d 	.word	0x0800b74d
 800b604:	0800b709 	.word	0x0800b709
 800b608:	0800b74d 	.word	0x0800b74d
 800b60c:	0800b74d 	.word	0x0800b74d
 800b610:	0800b74d 	.word	0x0800b74d
 800b614:	0800b74d 	.word	0x0800b74d
 800b618:	0800b74d 	.word	0x0800b74d
 800b61c:	0800b74d 	.word	0x0800b74d
 800b620:	0800b74d 	.word	0x0800b74d
 800b624:	0800b719 	.word	0x0800b719
 800b628:	0800b74d 	.word	0x0800b74d
 800b62c:	0800b74d 	.word	0x0800b74d
 800b630:	0800b74d 	.word	0x0800b74d
 800b634:	0800b74d 	.word	0x0800b74d
 800b638:	0800b74d 	.word	0x0800b74d
 800b63c:	0800b74d 	.word	0x0800b74d
 800b640:	0800b74d 	.word	0x0800b74d
 800b644:	0800b74d 	.word	0x0800b74d
 800b648:	0800b74d 	.word	0x0800b74d
 800b64c:	0800b74d 	.word	0x0800b74d
 800b650:	0800b74d 	.word	0x0800b74d
 800b654:	0800b74d 	.word	0x0800b74d
 800b658:	0800b74d 	.word	0x0800b74d
 800b65c:	0800b74d 	.word	0x0800b74d
 800b660:	0800b74d 	.word	0x0800b74d
 800b664:	0800b73f 	.word	0x0800b73f
 800b668:	0800b74d 	.word	0x0800b74d
 800b66c:	0800b74d 	.word	0x0800b74d
 800b670:	0800b74d 	.word	0x0800b74d
 800b674:	0800b74d 	.word	0x0800b74d
 800b678:	0800b74d 	.word	0x0800b74d
 800b67c:	0800b74d 	.word	0x0800b74d
 800b680:	0800b74d 	.word	0x0800b74d
 800b684:	0800b74d 	.word	0x0800b74d
 800b688:	0800b74d 	.word	0x0800b74d
 800b68c:	0800b74d 	.word	0x0800b74d
 800b690:	0800b74d 	.word	0x0800b74d
 800b694:	0800b74d 	.word	0x0800b74d
 800b698:	0800b74d 	.word	0x0800b74d
 800b69c:	0800b74d 	.word	0x0800b74d
 800b6a0:	0800b74d 	.word	0x0800b74d
 800b6a4:	0800b74d 	.word	0x0800b74d
 800b6a8:	0800b74d 	.word	0x0800b74d
 800b6ac:	0800b74d 	.word	0x0800b74d
 800b6b0:	0800b74d 	.word	0x0800b74d
 800b6b4:	0800b74d 	.word	0x0800b74d
 800b6b8:	0800b74d 	.word	0x0800b74d
 800b6bc:	0800b74d 	.word	0x0800b74d
 800b6c0:	0800b74d 	.word	0x0800b74d
 800b6c4:	0800b74d 	.word	0x0800b74d
 800b6c8:	0800b74d 	.word	0x0800b74d
 800b6cc:	0800b74d 	.word	0x0800b74d
 800b6d0:	0800b74d 	.word	0x0800b74d
 800b6d4:	0800b74d 	.word	0x0800b74d
 800b6d8:	0800b74d 	.word	0x0800b74d
 800b6dc:	0800b74d 	.word	0x0800b74d
 800b6e0:	0800b74d 	.word	0x0800b74d
 800b6e4:	0800b745 	.word	0x0800b745
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6e8:	f7fc fad6 	bl	8007c98 <HAL_RCC_GetPCLK1Freq>
 800b6ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b6ee:	e033      	b.n	800b758 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6f0:	f7fc fae8 	bl	8007cc4 <HAL_RCC_GetPCLK2Freq>
 800b6f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b6f6:	e02f      	b.n	800b758 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f8:	f107 0314 	add.w	r3, r7, #20
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fd f9fb 	bl	8008af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b706:	e027      	b.n	800b758 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b708:	f107 0308 	add.w	r3, r7, #8
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fd fb3f 	bl	8008d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b716:	e01f      	b.n	800b758 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b718:	4b2b      	ldr	r3, [pc, #172]	; (800b7c8 <UART_SetConfig+0x94c>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d009      	beq.n	800b738 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b724:	4b28      	ldr	r3, [pc, #160]	; (800b7c8 <UART_SetConfig+0x94c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	4a27      	ldr	r2, [pc, #156]	; (800b7cc <UART_SetConfig+0x950>)
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
 800b734:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b736:	e00f      	b.n	800b758 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b738:	4b24      	ldr	r3, [pc, #144]	; (800b7cc <UART_SetConfig+0x950>)
 800b73a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b73c:	e00c      	b.n	800b758 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b73e:	4b24      	ldr	r3, [pc, #144]	; (800b7d0 <UART_SetConfig+0x954>)
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b742:	e009      	b.n	800b758 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b74a:	e005      	b.n	800b758 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f000 8121 	beq.w	800b9a2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	4a17      	ldr	r2, [pc, #92]	; (800b7c4 <UART_SetConfig+0x948>)
 800b766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b76a:	461a      	mov	r2, r3
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b772:	005a      	lsls	r2, r3, #1
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	085b      	lsrs	r3, r3, #1
 800b77a:	441a      	add	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	fbb2 f3f3 	udiv	r3, r2, r3
 800b784:	b29b      	uxth	r3, r3
 800b786:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78a:	2b0f      	cmp	r3, #15
 800b78c:	d916      	bls.n	800b7bc <UART_SetConfig+0x940>
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b794:	d212      	bcs.n	800b7bc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	b29b      	uxth	r3, r3
 800b79a:	f023 030f 	bic.w	r3, r3, #15
 800b79e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	085b      	lsrs	r3, r3, #1
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b7b8:	60da      	str	r2, [r3, #12]
 800b7ba:	e0f2      	b.n	800b9a2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b7c2:	e0ee      	b.n	800b9a2 <UART_SetConfig+0xb26>
 800b7c4:	0800c244 	.word	0x0800c244
 800b7c8:	58024400 	.word	0x58024400
 800b7cc:	03d09000 	.word	0x03d09000
 800b7d0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7d8:	2b40      	cmp	r3, #64	; 0x40
 800b7da:	f200 80b7 	bhi.w	800b94c <UART_SetConfig+0xad0>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <UART_SetConfig+0x968>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b8e9 	.word	0x0800b8e9
 800b7e8:	0800b8f1 	.word	0x0800b8f1
 800b7ec:	0800b94d 	.word	0x0800b94d
 800b7f0:	0800b94d 	.word	0x0800b94d
 800b7f4:	0800b8f9 	.word	0x0800b8f9
 800b7f8:	0800b94d 	.word	0x0800b94d
 800b7fc:	0800b94d 	.word	0x0800b94d
 800b800:	0800b94d 	.word	0x0800b94d
 800b804:	0800b909 	.word	0x0800b909
 800b808:	0800b94d 	.word	0x0800b94d
 800b80c:	0800b94d 	.word	0x0800b94d
 800b810:	0800b94d 	.word	0x0800b94d
 800b814:	0800b94d 	.word	0x0800b94d
 800b818:	0800b94d 	.word	0x0800b94d
 800b81c:	0800b94d 	.word	0x0800b94d
 800b820:	0800b94d 	.word	0x0800b94d
 800b824:	0800b919 	.word	0x0800b919
 800b828:	0800b94d 	.word	0x0800b94d
 800b82c:	0800b94d 	.word	0x0800b94d
 800b830:	0800b94d 	.word	0x0800b94d
 800b834:	0800b94d 	.word	0x0800b94d
 800b838:	0800b94d 	.word	0x0800b94d
 800b83c:	0800b94d 	.word	0x0800b94d
 800b840:	0800b94d 	.word	0x0800b94d
 800b844:	0800b94d 	.word	0x0800b94d
 800b848:	0800b94d 	.word	0x0800b94d
 800b84c:	0800b94d 	.word	0x0800b94d
 800b850:	0800b94d 	.word	0x0800b94d
 800b854:	0800b94d 	.word	0x0800b94d
 800b858:	0800b94d 	.word	0x0800b94d
 800b85c:	0800b94d 	.word	0x0800b94d
 800b860:	0800b94d 	.word	0x0800b94d
 800b864:	0800b93f 	.word	0x0800b93f
 800b868:	0800b94d 	.word	0x0800b94d
 800b86c:	0800b94d 	.word	0x0800b94d
 800b870:	0800b94d 	.word	0x0800b94d
 800b874:	0800b94d 	.word	0x0800b94d
 800b878:	0800b94d 	.word	0x0800b94d
 800b87c:	0800b94d 	.word	0x0800b94d
 800b880:	0800b94d 	.word	0x0800b94d
 800b884:	0800b94d 	.word	0x0800b94d
 800b888:	0800b94d 	.word	0x0800b94d
 800b88c:	0800b94d 	.word	0x0800b94d
 800b890:	0800b94d 	.word	0x0800b94d
 800b894:	0800b94d 	.word	0x0800b94d
 800b898:	0800b94d 	.word	0x0800b94d
 800b89c:	0800b94d 	.word	0x0800b94d
 800b8a0:	0800b94d 	.word	0x0800b94d
 800b8a4:	0800b94d 	.word	0x0800b94d
 800b8a8:	0800b94d 	.word	0x0800b94d
 800b8ac:	0800b94d 	.word	0x0800b94d
 800b8b0:	0800b94d 	.word	0x0800b94d
 800b8b4:	0800b94d 	.word	0x0800b94d
 800b8b8:	0800b94d 	.word	0x0800b94d
 800b8bc:	0800b94d 	.word	0x0800b94d
 800b8c0:	0800b94d 	.word	0x0800b94d
 800b8c4:	0800b94d 	.word	0x0800b94d
 800b8c8:	0800b94d 	.word	0x0800b94d
 800b8cc:	0800b94d 	.word	0x0800b94d
 800b8d0:	0800b94d 	.word	0x0800b94d
 800b8d4:	0800b94d 	.word	0x0800b94d
 800b8d8:	0800b94d 	.word	0x0800b94d
 800b8dc:	0800b94d 	.word	0x0800b94d
 800b8e0:	0800b94d 	.word	0x0800b94d
 800b8e4:	0800b945 	.word	0x0800b945
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e8:	f7fc f9d6 	bl	8007c98 <HAL_RCC_GetPCLK1Freq>
 800b8ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8ee:	e033      	b.n	800b958 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8f0:	f7fc f9e8 	bl	8007cc4 <HAL_RCC_GetPCLK2Freq>
 800b8f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8f6:	e02f      	b.n	800b958 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f8:	f107 0314 	add.w	r3, r7, #20
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fd f8fb 	bl	8008af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b906:	e027      	b.n	800b958 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b908:	f107 0308 	add.w	r3, r7, #8
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fd fa3f 	bl	8008d90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b916:	e01f      	b.n	800b958 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b918:	4b2c      	ldr	r3, [pc, #176]	; (800b9cc <UART_SetConfig+0xb50>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	2b00      	cmp	r3, #0
 800b922:	d009      	beq.n	800b938 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b924:	4b29      	ldr	r3, [pc, #164]	; (800b9cc <UART_SetConfig+0xb50>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	08db      	lsrs	r3, r3, #3
 800b92a:	f003 0303 	and.w	r3, r3, #3
 800b92e:	4a28      	ldr	r2, [pc, #160]	; (800b9d0 <UART_SetConfig+0xb54>)
 800b930:	fa22 f303 	lsr.w	r3, r2, r3
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b936:	e00f      	b.n	800b958 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b938:	4b25      	ldr	r3, [pc, #148]	; (800b9d0 <UART_SetConfig+0xb54>)
 800b93a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b93c:	e00c      	b.n	800b958 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b93e:	4b25      	ldr	r3, [pc, #148]	; (800b9d4 <UART_SetConfig+0xb58>)
 800b940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b942:	e009      	b.n	800b958 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b94a:	e005      	b.n	800b958 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b956:	bf00      	nop
    }

    if (pclk != 0U)
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d021      	beq.n	800b9a2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	4a1d      	ldr	r2, [pc, #116]	; (800b9d8 <UART_SetConfig+0xb5c>)
 800b964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b968:	461a      	mov	r2, r3
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	085b      	lsrs	r3, r3, #1
 800b976:	441a      	add	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b980:	b29b      	uxth	r3, r3
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	2b0f      	cmp	r3, #15
 800b988:	d908      	bls.n	800b99c <UART_SetConfig+0xb20>
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b990:	d204      	bcs.n	800b99c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b998:	60da      	str	r2, [r3, #12]
 800b99a:	e002      	b.n	800b9a2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b9be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3738      	adds	r7, #56	; 0x38
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	03d09000 	.word	0x03d09000
 800b9d4:	003d0900 	.word	0x003d0900
 800b9d8:	0800c244 	.word	0x0800c244

0800b9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00a      	beq.n	800ba06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0a:	f003 0302 	and.w	r3, r3, #2
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	430a      	orrs	r2, r1
 800ba26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00a      	beq.n	800ba4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	f003 0308 	and.w	r3, r3, #8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01a      	beq.n	800baf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bada:	d10a      	bne.n	800baf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	605a      	str	r2, [r3, #4]
  }
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bb30:	f7f6 fb40 	bl	80021b4 <HAL_GetTick>
 800bb34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0308 	and.w	r3, r3, #8
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d10e      	bne.n	800bb62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f82c 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e022      	b.n	800bba8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d10e      	bne.n	800bb8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f816 	bl	800bbb0 <UART_WaitOnFlagUntilTimeout>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e00c      	b.n	800bba8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2220      	movs	r2, #32
 800bb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbc0:	e062      	b.n	800bc88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d05e      	beq.n	800bc88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbca:	f7f6 faf3 	bl	80021b4 <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d302      	bcc.n	800bbe0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11d      	bne.n	800bc1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bbee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0201 	bic.w	r2, r2, #1
 800bbfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e045      	b.n	800bca8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 0304 	and.w	r3, r3, #4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d02e      	beq.n	800bc88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc38:	d126      	bne.n	800bc88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689a      	ldr	r2, [r3, #8]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2220      	movs	r2, #32
 800bc68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e00f      	b.n	800bca8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69da      	ldr	r2, [r3, #28]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	4013      	ands	r3, r2
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	bf0c      	ite	eq
 800bc98:	2301      	moveq	r3, #1
 800bc9a:	2300      	movne	r3, #0
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	461a      	mov	r2, r3
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d08d      	beq.n	800bbc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bcc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6899      	ldr	r1, [r3, #8]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	4b08      	ldr	r3, [pc, #32]	; (800bcf4 <UART_EndRxTransfer+0x44>)
 800bcd4:	400b      	ands	r3, r1
 800bcd6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2220      	movs	r2, #32
 800bcdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	effffffe 	.word	0xeffffffe

0800bcf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff f8a6 	bl	800ae68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd1c:	bf00      	nop
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd3a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff f882 	bl	800ae54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d101      	bne.n	800bdaa <HAL_UARTEx_DisableFifoMode+0x16>
 800bda6:	2302      	movs	r3, #2
 800bda8:	e027      	b.n	800bdfa <HAL_UARTEx_DisableFifoMode+0x66>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2224      	movs	r2, #36	; 0x24
 800bdb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 0201 	bic.w	r2, r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bdd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2220      	movs	r2, #32
 800bdec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be16:	2b01      	cmp	r3, #1
 800be18:	d101      	bne.n	800be1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be1a:	2302      	movs	r3, #2
 800be1c:	e02d      	b.n	800be7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2224      	movs	r2, #36	; 0x24
 800be2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0201 	bic.w	r2, r2, #1
 800be44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	430a      	orrs	r2, r1
 800be58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f850 	bl	800bf00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be92:	2b01      	cmp	r3, #1
 800be94:	d101      	bne.n	800be9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be96:	2302      	movs	r3, #2
 800be98:	e02d      	b.n	800bef6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2224      	movs	r2, #36	; 0x24
 800bea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f022 0201 	bic.w	r2, r2, #1
 800bec0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f812 	bl	800bf00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2220      	movs	r2, #32
 800bee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	; 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bf08:	4a2f      	ldr	r2, [pc, #188]	; (800bfc8 <UARTEx_SetNbDataToProcess+0xc8>)
 800bf0a:	f107 0314 	add.w	r3, r7, #20
 800bf0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf12:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bf16:	4a2d      	ldr	r2, [pc, #180]	; (800bfcc <UARTEx_SetNbDataToProcess+0xcc>)
 800bf18:	f107 030c 	add.w	r3, r7, #12
 800bf1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf20:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d108      	bne.n	800bf3e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf3c:	e03d      	b.n	800bfba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf3e:	2310      	movs	r3, #16
 800bf40:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf42:	2310      	movs	r3, #16
 800bf44:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	0e5b      	lsrs	r3, r3, #25
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	f003 0307 	and.w	r3, r3, #7
 800bf54:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	0f5b      	lsrs	r3, r3, #29
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 0307 	and.w	r3, r3, #7
 800bf64:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bf66:	7fbb      	ldrb	r3, [r7, #30]
 800bf68:	7f3a      	ldrb	r2, [r7, #28]
 800bf6a:	f107 0120 	add.w	r1, r7, #32
 800bf6e:	440a      	add	r2, r1
 800bf70:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
 800bf78:	7f3a      	ldrb	r2, [r7, #28]
 800bf7a:	f107 0120 	add.w	r1, r7, #32
 800bf7e:	440a      	add	r2, r1
 800bf80:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bf84:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bf90:	7ffb      	ldrb	r3, [r7, #31]
 800bf92:	7f7a      	ldrb	r2, [r7, #29]
 800bf94:	f107 0120 	add.w	r1, r7, #32
 800bf98:	440a      	add	r2, r1
 800bf9a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bf9e:	fb02 f303 	mul.w	r3, r2, r3
 800bfa2:	7f7a      	ldrb	r2, [r7, #29]
 800bfa4:	f107 0120 	add.w	r1, r7, #32
 800bfa8:	440a      	add	r2, r1
 800bfaa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bfae:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bfba:	bf00      	nop
 800bfbc:	3724      	adds	r7, #36	; 0x24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	0800c21c 	.word	0x0800c21c
 800bfcc:	0800c224 	.word	0x0800c224

0800bfd0 <initJY61P>:
  * @brief  初始JY61P.
  * @param  hi2c: I2C_HandleTypeDef结构体，表示JY61P使用的I2C端口
  * @retval None
  */
void initJY61P(I2C_HandleTypeDef *hi2c)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  mHi2c = hi2c;
 800bfd8:	4a04      	ldr	r2, [pc, #16]	; (800bfec <initJY61P+0x1c>)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6013      	str	r3, [r2, #0]
}
 800bfde:	bf00      	nop
 800bfe0:	370c      	adds	r7, #12
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	2400a4e4 	.word	0x2400a4e4

0800bff0 <readAngle>:
  * @brief  读取一个轴的角度值.
  * @param  axis: 表示希望读取的轴向，如：ROLL
  * @retval 角度值
  */
float readAngle(uint8_t axis)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af04      	add	r7, sp, #16
 800bff6:	4603      	mov	r3, r0
 800bff8:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2] = {0, 0};
 800bffa:	2300      	movs	r3, #0
 800bffc:	733b      	strb	r3, [r7, #12]
 800bffe:	2300      	movs	r3, #0
 800c000:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(mHi2c, JY_ADDR << 1, axis, 1, data, 2, 10000);
 800c002:	4b12      	ldr	r3, [pc, #72]	; (800c04c <readAngle+0x5c>)
 800c004:	6818      	ldr	r0, [r3, #0]
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	b29a      	uxth	r2, r3
 800c00a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c00e:	9302      	str	r3, [sp, #8]
 800c010:	2302      	movs	r3, #2
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	2301      	movs	r3, #1
 800c01c:	21a0      	movs	r1, #160	; 0xa0
 800c01e:	f7fa fab5 	bl	800658c <HAL_I2C_Mem_Read>
  return ((data[1] << 8) | data[0]) / 32768.0f * 180;
 800c022:	7b7b      	ldrb	r3, [r7, #13]
 800c024:	021b      	lsls	r3, r3, #8
 800c026:	7b3a      	ldrb	r2, [r7, #12]
 800c028:	4313      	orrs	r3, r2
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c032:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c050 <readAngle+0x60>
 800c036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c03a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800c054 <readAngle+0x64>
 800c03e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c042:	eeb0 0a67 	vmov.f32	s0, s15
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	2400a4e4 	.word	0x2400a4e4
 800c050:	47000000 	.word	0x47000000
 800c054:	43340000 	.word	0x43340000

0800c058 <getAtti>:
/**
  * @brief  获取当前姿态.
  * @retval 当前姿态结构体.
  */
Atti getAtti()
{
 800c058:	b5b0      	push	{r4, r5, r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
	jy61p.atti.pitch = jy61p.ReadAngle(PITCH);
 800c060:	4b22      	ldr	r3, [pc, #136]	; (800c0ec <getAtti+0x94>)
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	203e      	movs	r0, #62	; 0x3e
 800c066:	4798      	blx	r3
 800c068:	eef0 7a40 	vmov.f32	s15, s0
 800c06c:	4b1f      	ldr	r3, [pc, #124]	; (800c0ec <getAtti+0x94>)
 800c06e:	edc3 7a05 	vstr	s15, [r3, #20]
	jy61p.atti.roll = jy61p.ReadAngle(ROLL);
 800c072:	4b1e      	ldr	r3, [pc, #120]	; (800c0ec <getAtti+0x94>)
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	203d      	movs	r0, #61	; 0x3d
 800c078:	4798      	blx	r3
 800c07a:	eef0 7a40 	vmov.f32	s15, s0
 800c07e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <getAtti+0x94>)
 800c080:	edc3 7a04 	vstr	s15, [r3, #16]
	jy61p.atti.yaw = jy61p.ReadAngle(YAW);
 800c084:	4b19      	ldr	r3, [pc, #100]	; (800c0ec <getAtti+0x94>)
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	203f      	movs	r0, #63	; 0x3f
 800c08a:	4798      	blx	r3
 800c08c:	eef0 7a40 	vmov.f32	s15, s0
 800c090:	4b16      	ldr	r3, [pc, #88]	; (800c0ec <getAtti+0x94>)
 800c092:	edc3 7a03 	vstr	s15, [r3, #12]
  jy61p.atti.gx = jy61p.ReadAngle(GX);
 800c096:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <getAtti+0x94>)
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	2037      	movs	r0, #55	; 0x37
 800c09c:	4798      	blx	r3
 800c09e:	eef0 7a40 	vmov.f32	s15, s0
 800c0a2:	4b12      	ldr	r3, [pc, #72]	; (800c0ec <getAtti+0x94>)
 800c0a4:	edc3 7a06 	vstr	s15, [r3, #24]
  jy61p.atti.gy = jy61p.ReadAngle(GY);
 800c0a8:	4b10      	ldr	r3, [pc, #64]	; (800c0ec <getAtti+0x94>)
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	2038      	movs	r0, #56	; 0x38
 800c0ae:	4798      	blx	r3
 800c0b0:	eef0 7a40 	vmov.f32	s15, s0
 800c0b4:	4b0d      	ldr	r3, [pc, #52]	; (800c0ec <getAtti+0x94>)
 800c0b6:	edc3 7a07 	vstr	s15, [r3, #28]
  jy61p.atti.gz = jy61p.ReadAngle(GZ);
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <getAtti+0x94>)
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	2039      	movs	r0, #57	; 0x39
 800c0c0:	4798      	blx	r3
 800c0c2:	eef0 7a40 	vmov.f32	s15, s0
 800c0c6:	4b09      	ldr	r3, [pc, #36]	; (800c0ec <getAtti+0x94>)
 800c0c8:	edc3 7a08 	vstr	s15, [r3, #32]
	return jy61p.atti;
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <getAtti+0x94>)
 800c0d0:	4615      	mov	r5, r2
 800c0d2:	f103 040c 	add.w	r4, r3, #12
 800c0d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c0da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c0de:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	24000068 	.word	0x24000068

0800c0f0 <StartOV2640>:
		}
	}
}

void StartOV2640()//拍照的线程
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <StartOV2640+0x38>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68da      	ldr	r2, [r3, #12]
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <StartOV2640+0x38>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0201 	orr.w	r2, r2, #1
 800c106:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800c108:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800c10c:	2100      	movs	r1, #0
 800c10e:	4807      	ldr	r0, [pc, #28]	; (800c12c <StartOV2640+0x3c>)
 800c110:	f000 f870 	bl	800c1f4 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <StartOV2640+0x38>)
 800c116:	6818      	ldr	r0, [r3, #0]
 800c118:	4a04      	ldr	r2, [pc, #16]	; (800c12c <StartOV2640+0x3c>)
 800c11a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c11e:	2102      	movs	r1, #2
 800c120:	f7f6 fa0c 	bl	800253c <HAL_DCMI_Start_DMA>

}
 800c124:	bf00      	nop
 800c126:	bd80      	pop	{r7, pc}
 800c128:	2400a4e8 	.word	0x2400a4e8
 800c12c:	240000ac 	.word	0x240000ac

0800c130 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800c138:	4b18      	ldr	r3, [pc, #96]	; (800c19c <HAL_DCMI_FrameEventCallback+0x6c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7f6 fb1f 	bl	8002780 <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800c142:	4b16      	ldr	r3, [pc, #88]	; (800c19c <HAL_DCMI_FrameEventCallback+0x6c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4618      	mov	r0, r3
 800c148:	f7f6 faba 	bl	80026c0 <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800c14c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c150:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800c152:	e009      	b.n	800c168 <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3b01      	subs	r3, #1
 800c158:	4a11      	ldr	r2, [pc, #68]	; (800c1a0 <HAL_DCMI_FrameEventCallback+0x70>)
 800c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3b01      	subs	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dcf2      	bgt.n	800c154 <HAL_DCMI_FrameEventCallback+0x24>
 800c16e:	e000      	b.n	800c172 <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800c170:	bf00      	nop
	}
	pictureLength*=4;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800c178:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <HAL_DCMI_FrameEventCallback+0x74>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800c180:	4b08      	ldr	r3, [pc, #32]	; (800c1a4 <HAL_DCMI_FrameEventCallback+0x74>)
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	b29a      	uxth	r2, r3
 800c188:	4b07      	ldr	r3, [pc, #28]	; (800c1a8 <HAL_DCMI_FrameEventCallback+0x78>)
 800c18a:	4905      	ldr	r1, [pc, #20]	; (800c1a0 <HAL_DCMI_FrameEventCallback+0x70>)
 800c18c:	f7fe fc4c 	bl	800aa28 <HAL_UART_Transmit>

	StartOV2640();
 800c190:	f7ff ffae 	bl	800c0f0 <StartOV2640>
}
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	2400a4e8 	.word	0x2400a4e8
 800c1a0:	240000ac 	.word	0x240000ac
 800c1a4:	2400a4ec 	.word	0x2400a4ec
 800c1a8:	000186a0 	.word	0x000186a0

0800c1ac <__libc_init_array>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	4e0d      	ldr	r6, [pc, #52]	; (800c1e4 <__libc_init_array+0x38>)
 800c1b0:	4c0d      	ldr	r4, [pc, #52]	; (800c1e8 <__libc_init_array+0x3c>)
 800c1b2:	1ba4      	subs	r4, r4, r6
 800c1b4:	10a4      	asrs	r4, r4, #2
 800c1b6:	2500      	movs	r5, #0
 800c1b8:	42a5      	cmp	r5, r4
 800c1ba:	d109      	bne.n	800c1d0 <__libc_init_array+0x24>
 800c1bc:	4e0b      	ldr	r6, [pc, #44]	; (800c1ec <__libc_init_array+0x40>)
 800c1be:	4c0c      	ldr	r4, [pc, #48]	; (800c1f0 <__libc_init_array+0x44>)
 800c1c0:	f000 f820 	bl	800c204 <_init>
 800c1c4:	1ba4      	subs	r4, r4, r6
 800c1c6:	10a4      	asrs	r4, r4, #2
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	42a5      	cmp	r5, r4
 800c1cc:	d105      	bne.n	800c1da <__libc_init_array+0x2e>
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1d4:	4798      	blx	r3
 800c1d6:	3501      	adds	r5, #1
 800c1d8:	e7ee      	b.n	800c1b8 <__libc_init_array+0xc>
 800c1da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1de:	4798      	blx	r3
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	e7f2      	b.n	800c1ca <__libc_init_array+0x1e>
 800c1e4:	0800c264 	.word	0x0800c264
 800c1e8:	0800c264 	.word	0x0800c264
 800c1ec:	0800c264 	.word	0x0800c264
 800c1f0:	0800c268 	.word	0x0800c268

0800c1f4 <memset>:
 800c1f4:	4402      	add	r2, r0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d100      	bne.n	800c1fe <memset+0xa>
 800c1fc:	4770      	bx	lr
 800c1fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c202:	e7f9      	b.n	800c1f8 <memset+0x4>

0800c204 <_init>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	bf00      	nop
 800c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20a:	bc08      	pop	{r3}
 800c20c:	469e      	mov	lr, r3
 800c20e:	4770      	bx	lr

0800c210 <_fini>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr
