
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbac  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800be44  0800be44  0001be44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be84  0800be84  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be8c  0800be8c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be8c  0800be8c  0001be8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  24000000  0800be94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a4f0  24000020  0800beb0  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2400a510  0800beb0  0002a510  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fd04  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b01  00000000  00000000  0004fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e0  00000000  00000000  00054850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f8  00000000  00000000  00056030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a20e  00000000  00000000  00057628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019cec  00000000  00000000  00091836  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001691ca  00000000  00000000  000ab522  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002146ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063cc  00000000  00000000  00214768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800be2c 	.word	0x0800be2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800be2c 	.word	0x0800be2c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_DCMI_Init+0x60>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_DCMI_Init+0x64>)
 80005f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_DCMI_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_DCMI_Init+0x60>)
 80005fa:	2220      	movs	r2, #32
 80005fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_DCMI_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_DCMI_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_DCMI_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DCMI_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DCMI_Init+0x60>)
 8000618:	2208      	movs	r2, #8
 800061a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_DCMI_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DCMI_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_DCMI_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_DCMI_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_DCMI_Init+0x60>)
 8000636:	f001 fa75 	bl	8001b24 <HAL_DCMI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 fc24 	bl	8000e8c <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2400a0bc 	.word	0x2400a0bc
 800064c:	48020000 	.word	0x48020000

08000650 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a7a      	ldr	r2, [pc, #488]	; (8000858 <HAL_DCMI_MspInit+0x208>)
 800066e:	4293      	cmp	r3, r2
 8000670:	f040 80ed 	bne.w	800084e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000674:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	4a78      	ldr	r2, [pc, #480]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000684:	4b75      	ldr	r3, [pc, #468]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	623b      	str	r3, [r7, #32]
 8000690:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b72      	ldr	r3, [pc, #456]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	4a70      	ldr	r2, [pc, #448]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a2:	4b6e      	ldr	r3, [pc, #440]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	4a69      	ldr	r2, [pc, #420]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c0:	4b66      	ldr	r3, [pc, #408]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a61      	ldr	r2, [pc, #388]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a5a      	ldr	r2, [pc, #360]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b57      	ldr	r3, [pc, #348]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a52      	ldr	r2, [pc, #328]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000728:	2370      	movs	r3, #112	; 0x70
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000738:	230d      	movs	r3, #13
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4847      	ldr	r0, [pc, #284]	; (8000860 <HAL_DCMI_MspInit+0x210>)
 8000744:	f005 f81c 	bl	8005780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000748:	2350      	movs	r3, #80	; 0x50
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000758:	230d      	movs	r3, #13
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4840      	ldr	r0, [pc, #256]	; (8000864 <HAL_DCMI_MspInit+0x214>)
 8000764:	f005 f80c 	bl	8005780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000768:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800077a:	230d      	movs	r3, #13
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	4838      	ldr	r0, [pc, #224]	; (8000868 <HAL_DCMI_MspInit+0x218>)
 8000786:	f004 fffb 	bl	8005780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800078a:	2308      	movs	r3, #8
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800079a:	230d      	movs	r3, #13
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	4831      	ldr	r0, [pc, #196]	; (800086c <HAL_DCMI_MspInit+0x21c>)
 80007a6:	f004 ffeb 	bl	8005780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007ba:	230d      	movs	r3, #13
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <HAL_DCMI_MspInit+0x220>)
 80007c6:	f004 ffdb 	bl	8005780 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007cc:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <HAL_DCMI_MspInit+0x228>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d2:	224b      	movs	r2, #75	; 0x4b
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000800:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000808:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800080c:	2204      	movs	r2, #4
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000812:	2203      	movs	r2, #3
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000824:	f001 fcc2 	bl	80021ac <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800082e:	f000 fb2d 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000836:	649a      	str	r2, [r3, #72]	; 0x48
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	204e      	movs	r0, #78	; 0x4e
 8000844:	f001 f939 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000848:	204e      	movs	r0, #78	; 0x4e
 800084a:	f001 f950 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3738      	adds	r7, #56	; 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	48020000 	.word	0x48020000
 800085c:	58024400 	.word	0x58024400
 8000860:	58021000 	.word	0x58021000
 8000864:	58020000 	.word	0x58020000
 8000868:	58020800 	.word	0x58020800
 800086c:	58020c00 	.word	0x58020c00
 8000870:	58020400 	.word	0x58020400
 8000874:	2400a044 	.word	0x2400a044
 8000878:	40020010 	.word	0x40020010

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DMA_Init+0x4c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MX_DMA_Init+0x4c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_DMA_Init+0x4c>)
 8000894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 f908 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008aa:	200b      	movs	r0, #11
 80008ac:	f001 f91f 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	200c      	movs	r0, #12
 80008b6:	f001 f900 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008ba:	200c      	movs	r0, #12
 80008bc:	f001 f917 	bl	8001aee <HAL_NVIC_EnableIRQ>

}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400

080008cc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a6c      	ldr	r2, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	4a65      	ldr	r2, [pc, #404]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a5d      	ldr	r2, [pc, #372]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4a56      	ldr	r2, [pc, #344]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2104      	movs	r1, #4
 800099a:	4841      	ldr	r0, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 800099c:	f005 f8a0 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <MX_GPIO_Init+0x1d8>)
 80009a6:	f005 f89b 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2103      	movs	r1, #3
 80009ae:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 80009b0:	f005 f896 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009ba:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 80009bc:	f005 f890 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4839      	ldr	r0, [pc, #228]	; (8000aac <MX_GPIO_Init+0x1e0>)
 80009c6:	f005 f88b 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009ca:	2304      	movs	r3, #4
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 80009e2:	f004 fecd 	bl	8005780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0x1d8>)
 80009fe:	f004 febf 	bl	8005780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 8000a02:	f247 0303 	movw	r3, #28675	; 0x7003
 8000a06:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4823      	ldr	r0, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a1c:	f004 feb0 	bl	8005780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a34:	f004 fea4 	bl	8005780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a52:	f004 fe95 	bl	8005780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 8000a74:	f004 fe84 	bl	8005780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_GPIO_Init+0x1e0>)
 8000a90:	f004 fe76 	bl	8005780 <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	58020800 	.word	0x58020800
 8000aa8:	58020400 	.word	0x58020400
 8000aac:	58020c00 	.word	0x58020c00

08000ab0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_I2C1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x7c>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000aec:	f005 f812 	bl	8005b14 <HAL_I2C_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af6:	f000 f9c9 	bl	8000e8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000afe:	f005 f899 	bl	8005c34 <HAL_I2CEx_ConfigAnalogFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f9c0 	bl	8000e8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000b10:	f005 f8db 	bl	8005cca <HAL_I2CEx_ConfigDigitalFilter>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f9b7 	bl	8000e8c <Error_Handler>
  }

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2400a10c 	.word	0x2400a10c
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	009034b6 	.word	0x009034b6

08000b30 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_I2C2_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_I2C2_Init+0x7c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b6c:	f004 ffd2 	bl	8005b14 <HAL_I2C_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b76:	f000 f989 	bl	8000e8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b7e:	f005 f859 	bl	8005c34 <HAL_I2CEx_ConfigAnalogFilter>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f980 	bl	8000e8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b90:	f005 f89b 	bl	8005cca <HAL_I2CEx_ConfigDigitalFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 f977 	bl	8000e8c <Error_Handler>
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2400a158 	.word	0x2400a158
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	10c0ecff 	.word	0x10c0ecff

08000bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <HAL_I2C_MspInit+0xf4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12f      	bne.n	8000c32 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bf0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4827      	ldr	r0, [pc, #156]	; (8000cac <HAL_I2C_MspInit+0xfc>)
 8000c0e:	f004 fdb7 	bl	8005780 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c30:	e033      	b.n	8000c9a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_I2C_MspInit+0x100>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d12e      	bne.n	8000c9a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <HAL_I2C_MspInit+0xfc>)
 8000c78:	f004 fd82 	bl	8005780 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	40005800 	.word	0x40005800

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fd86 	bl	80017c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f820 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fe04 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f7ff fdda 	bl	800087c <MX_DMA_Init>
  MX_DCMI_Init();
 8000cc8:	f7ff fc8e 	bl	80005e8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000ccc:	f7ff fef0 	bl	8000ab0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cd0:	f7ff ff2e 	bl	8000b30 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cd4:	f000 f8e2 	bl	8000e9c <MX_SPI1_Init>
  MX_UART4_Init();
 8000cd8:	f000 fc74 	bl	80015c4 <MX_UART4_Init>
  MX_TIM4_Init();
 8000cdc:	f000 fa98 	bl	8001210 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ce0:	f000 fb24 	bl	800132c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init(&huart4, NULL);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <main+0x44>)
 8000ce8:	f00a fa32 	bl	800b150 <GPS_Init>
  testGPS = get_GPS_INFO();
 8000cec:	f00a fa50 	bl	800b190 <get_GPS_INFO>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <main+0x48>)
 8000cf4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <main+0x42>
 8000cf8:	2400a340 	.word	0x2400a340
 8000cfc:	2400a1a4 	.word	0x2400a1a4

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0cc      	sub	sp, #304	; 0x130
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d0a:	224c      	movs	r2, #76	; 0x4c
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00b f86e 	bl	800bdf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d18:	2220      	movs	r2, #32
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00b f867 	bl	800bdf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4618      	mov	r0, r3
 8000d28:	23bc      	movs	r3, #188	; 0xbc
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f00b f85f 	bl	800bdf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f005 f816 	bl	8005d64 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <SystemClock_Config+0x184>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	4a50      	ldr	r2, [pc, #320]	; (8000e84 <SystemClock_Config+0x184>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <SystemClock_Config+0x184>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <SystemClock_Config+0x188>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a4b      	ldr	r2, [pc, #300]	; (8000e88 <SystemClock_Config+0x188>)
 8000d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <SystemClock_Config+0x188>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d72:	bf00      	nop
 8000d74:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <SystemClock_Config+0x188>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d80:	d1f8      	bne.n	8000d74 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da8:	2308      	movs	r3, #8
 8000daa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000dae:	23c8      	movs	r3, #200	; 0xc8
 8000db0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fffb 	bl	8005dd8 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000de8:	f000 f850 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	233f      	movs	r3, #63	; 0x3f
 8000dee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e0a:	2340      	movs	r3, #64	; 0x40
 8000e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e22:	2102      	movs	r1, #2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 fbe7 	bl	80065f8 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e30:	f000 f82c 	bl	8000e8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e3c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 ffb9 	bl	8006dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e68:	f000 f810 	bl	8000e8c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f005 fd76 	bl	8006964 <HAL_RCC_MCOConfig>
}
 8000e78:	bf00      	nop
 8000e7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58000400 	.word	0x58000400
 8000e88:	58024800 	.word	0x58024800

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ea2:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <MX_SPI1_Init+0xa8>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ea8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ecc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ed0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ed4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_SPI1_Init+0xa4>)
 8000f2e:	f007 fa51 	bl	80083d4 <HAL_SPI_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f38:	f7ff ffa8 	bl	8000e8c <Error_Handler>
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2400a1a8 	.word	0x2400a1a8
 8000f44:	40013000 	.word	0x40013000

08000f48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <HAL_SPI_MspInit+0xc8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d14d      	bne.n	8001006 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f70:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_SPI_MspInit+0xcc>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000fc4:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <HAL_SPI_MspInit+0xd0>)
 8000fe2:	f004 fbcd 	bl	8005780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <HAL_SPI_MspInit+0xd4>)
 8001002:	f004 fbbd 	bl	8005780 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40013000 	.word	0x40013000
 8001014:	58024400 	.word	0x58024400
 8001018:	58020000 	.word	0x58020000
 800101c:	58020400 	.word	0x58020400

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_MspInit+0x30>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_MspInit+0x30>)
 8001038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	58024400 	.word	0x58024400

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 fc04 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Stream0_IRQHandler+0x10>)
 80010ae:	f002 fba5 	bl	80037fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2400a044 	.word	0x2400a044

080010bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <DMA1_Stream1_IRQHandler+0x10>)
 80010c2:	f002 fb9b 	bl	80037fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2400a2c8 	.word	0x2400a2c8

080010d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <UART4_IRQHandler+0x10>)
 80010d6:	f008 fc4b 	bl	8009970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2400a340 	.word	0x2400a340

080010e4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <DCMI_IRQHandler+0x10>)
 80010ea:	f000 ff0f 	bl	8001f0c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400a0bc 	.word	0x2400a0bc

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010fc:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <SystemInit+0xec>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a38      	ldr	r2, [pc, #224]	; (80011e4 <SystemInit+0xec>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <SystemInit+0xf0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	2b06      	cmp	r3, #6
 8001116:	d807      	bhi.n	8001128 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <SystemInit+0xf0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 030f 	bic.w	r3, r3, #15
 8001120:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <SystemInit+0xf0>)
 8001122:	f043 0307 	orr.w	r3, r3, #7
 8001126:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <SystemInit+0xf4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <SystemInit+0xf4>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <SystemInit+0xf4>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <SystemInit+0xf4>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	492b      	ldr	r1, [pc, #172]	; (80011ec <SystemInit+0xf4>)
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <SystemInit+0xf8>)
 8001142:	4013      	ands	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <SystemInit+0xf0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	2b07      	cmp	r3, #7
 8001150:	d907      	bls.n	8001162 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <SystemInit+0xf0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 030f 	bic.w	r3, r3, #15
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <SystemInit+0xf0>)
 800115c:	f043 0307 	orr.w	r3, r3, #7
 8001160:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <SystemInit+0xf4>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <SystemInit+0xf4>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemInit+0xf4>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <SystemInit+0xf4>)
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <SystemInit+0xfc>)
 8001178:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <SystemInit+0xf4>)
 800117c:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <SystemInit+0x100>)
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <SystemInit+0xf4>)
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <SystemInit+0x104>)
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <SystemInit+0xf4>)
 8001188:	2200      	movs	r2, #0
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <SystemInit+0xf4>)
 800118e:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <SystemInit+0x104>)
 8001190:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <SystemInit+0xf4>)
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <SystemInit+0xf4>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <SystemInit+0x104>)
 800119c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <SystemInit+0xf4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <SystemInit+0xf4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <SystemInit+0xf4>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <SystemInit+0xf4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <SystemInit+0x108>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <SystemInit+0x10c>)
 80011bc:	4013      	ands	r3, r2
 80011be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011c2:	d202      	bcs.n	80011ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <SystemInit+0x110>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <SystemInit+0x114>)
 80011cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0xec>)
 80011d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	52002000 	.word	0x52002000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011f4:	02020200 	.word	0x02020200
 80011f8:	01ff0000 	.word	0x01ff0000
 80011fc:	01010280 	.word	0x01010280
 8001200:	5c001000 	.word	0x5c001000
 8001204:	ffff0000 	.word	0xffff0000
 8001208:	51008108 	.word	0x51008108
 800120c:	52004000 	.word	0x52004000

08001210 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <MX_TIM4_Init+0x114>)
 8001244:	4a38      	ldr	r2, [pc, #224]	; (8001328 <MX_TIM4_Init+0x118>)
 8001246:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001248:	4b36      	ldr	r3, [pc, #216]	; (8001324 <MX_TIM4_Init+0x114>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b35      	ldr	r3, [pc, #212]	; (8001324 <MX_TIM4_Init+0x114>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <MX_TIM4_Init+0x114>)
 8001256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <MX_TIM4_Init+0x114>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_TIM4_Init+0x114>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001268:	482e      	ldr	r0, [pc, #184]	; (8001324 <MX_TIM4_Init+0x114>)
 800126a:	f007 f9c6 	bl	80085fa <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001274:	f7ff fe0a 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	4619      	mov	r1, r3
 8001284:	4827      	ldr	r0, [pc, #156]	; (8001324 <MX_TIM4_Init+0x114>)
 8001286:	f007 fc57 	bl	8008b38 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001290:	f7ff fdfc 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001294:	4823      	ldr	r0, [pc, #140]	; (8001324 <MX_TIM4_Init+0x114>)
 8001296:	f007 fa68 	bl	800876a <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012a0:	f7ff fdf4 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	481c      	ldr	r0, [pc, #112]	; (8001324 <MX_TIM4_Init+0x114>)
 80012b4:	f008 f916 	bl	80094e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012be:	f7ff fde5 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <MX_TIM4_Init+0x114>)
 80012da:	f007 fb1d 	bl	8008918 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012e4:	f7ff fdd2 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2204      	movs	r2, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM4_Init+0x114>)
 80012f0:	f007 fb12 	bl	8008918 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80012fa:	f7ff fdc7 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM4_Init+0x114>)
 8001306:	f007 fb07 	bl	8008918 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001310:	f7ff fdbc 	bl	8000e8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM4_Init+0x114>)
 8001316:	f000 f8cf 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400a230 	.word	0x2400a230
 8001328:	40000800 	.word	0x40000800

0800132c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <MX_TIM5_Init+0x110>)
 8001360:	4a37      	ldr	r2, [pc, #220]	; (8001440 <MX_TIM5_Init+0x114>)
 8001362:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001364:	4b35      	ldr	r3, [pc, #212]	; (800143c <MX_TIM5_Init+0x110>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <MX_TIM5_Init+0x110>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <MX_TIM5_Init+0x110>)
 8001372:	f04f 32ff 	mov.w	r2, #4294967295
 8001376:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <MX_TIM5_Init+0x110>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b2f      	ldr	r3, [pc, #188]	; (800143c <MX_TIM5_Init+0x110>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001384:	482d      	ldr	r0, [pc, #180]	; (800143c <MX_TIM5_Init+0x110>)
 8001386:	f007 f938 	bl	80085fa <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001390:	f7ff fd7c 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4619      	mov	r1, r3
 80013a0:	4826      	ldr	r0, [pc, #152]	; (800143c <MX_TIM5_Init+0x110>)
 80013a2:	f007 fbc9 	bl	8008b38 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013ac:	f7ff fd6e 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80013b0:	4822      	ldr	r0, [pc, #136]	; (800143c <MX_TIM5_Init+0x110>)
 80013b2:	f007 f979 	bl	80086a8 <HAL_TIM_OC_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013bc:	f7ff fd66 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <MX_TIM5_Init+0x110>)
 80013c2:	f007 f9d2 	bl	800876a <HAL_TIM_PWM_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 80013cc:	f7ff fd5e 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <MX_TIM5_Init+0x110>)
 80013e0:	f008 f880 	bl	80094e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 80013ea:	f7ff fd4f 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	2208      	movs	r2, #8
 8001402:	4619      	mov	r1, r3
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_TIM5_Init+0x110>)
 8001406:	f007 fa11 	bl	800882c <HAL_TIM_OC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8001410:	f7ff fd3c 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	220c      	movs	r2, #12
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_TIM5_Init+0x110>)
 8001420:	f007 fa7a 	bl	8008918 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 800142a:	f7ff fd2f 	bl	8000e8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM5_Init+0x110>)
 8001430:	f000 f842 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2400a27c 	.word	0x2400a27c
 8001440:	40000c00 	.word	0x40000c00

08001444 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a16      	ldr	r2, [pc, #88]	; (80014ac <HAL_TIM_Base_MspInit+0x68>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10f      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_TIM_Base_MspInit+0x6c>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001474:	e013      	b.n	800149e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM5)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_TIM_Base_MspInit+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d10e      	bne.n	800149e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40000800 	.word	0x40000800
 80014b0:	58024400 	.word	0x58024400
 80014b4:	40000c00 	.word	0x40000c00

080014b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a35      	ldr	r2, [pc, #212]	; (80015ac <HAL_TIM_MspPostInit+0xf4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d140      	bne.n	800155c <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001516:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001528:	2302      	movs	r3, #2
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4820      	ldr	r0, [pc, #128]	; (80015b4 <HAL_TIM_MspPostInit+0xfc>)
 8001534:	f004 f924 	bl	8005780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800154a:	2302      	movs	r3, #2
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <HAL_TIM_MspPostInit+0x100>)
 8001556:	f004 f913 	bl	8005780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800155a:	e023      	b.n	80015a4 <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM5)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_TIM_MspPostInit+0x104>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11e      	bne.n	80015a4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_TIM_MspPostInit+0xf8>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001584:	2308      	movs	r3, #8
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001594:	2302      	movs	r3, #2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <HAL_TIM_MspPostInit+0x108>)
 80015a0:	f004 f8ee 	bl	8005780 <HAL_GPIO_Init>
}
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40000800 	.word	0x40000800
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58020c00 	.word	0x58020c00
 80015b8:	58020400 	.word	0x58020400
 80015bc:	40000c00 	.word	0x40000c00
 80015c0:	58020000 	.word	0x58020000

080015c4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <MX_UART4_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <MX_UART4_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_UART4_Init+0x90>)
 80015d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_UART4_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_UART4_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_UART4_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_UART4_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_UART4_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_UART4_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_UART4_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_UART4_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_UART4_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <MX_UART4_Init+0x90>)
 800160e:	f007 fff1 	bl	80095f4 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001618:	f7ff fc38 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_UART4_Init+0x90>)
 8001620:	f009 fcb1 	bl	800af86 <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800162a:	f7ff fc2f 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <MX_UART4_Init+0x90>)
 8001632:	f009 fce6 	bl	800b002 <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800163c:	f7ff fc26 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_UART4_Init+0x90>)
 8001642:	f009 fc67 	bl	800af14 <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800164c:	f7ff fc1e 	bl	8000e8c <Error_Handler>
  }

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2400a340 	.word	0x2400a340
 8001658:	40004c00 	.word	0x40004c00

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a39      	ldr	r2, [pc, #228]	; (8001760 <HAL_UART_MspInit+0x104>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d16c      	bne.n	8001758 <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_UART_MspInit+0x108>)
 8001680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001684:	4a37      	ldr	r2, [pc, #220]	; (8001764 <HAL_UART_MspInit+0x108>)
 8001686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800168a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_UART_MspInit+0x108>)
 8001690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <HAL_UART_MspInit+0x108>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	4a30      	ldr	r2, [pc, #192]	; (8001764 <HAL_UART_MspInit+0x108>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_UART_MspInit+0x108>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ba:	2303      	movs	r3, #3
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016ca:	2308      	movs	r3, #8
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4824      	ldr	r0, [pc, #144]	; (8001768 <HAL_UART_MspInit+0x10c>)
 80016d6:	f004 f853 	bl	8005780 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_UART_MspInit+0x110>)
 80016dc:	4a24      	ldr	r2, [pc, #144]	; (8001770 <HAL_UART_MspInit+0x114>)
 80016de:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_UART_MspInit+0x110>)
 80016e2:	223f      	movs	r2, #63	; 0x3f
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_UART_MspInit+0x110>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_UART_MspInit+0x110>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_UART_MspInit+0x110>)
 80016f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_UART_MspInit+0x110>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_UART_MspInit+0x110>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_UART_MspInit+0x110>)
 8001708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_UART_MspInit+0x110>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_UART_MspInit+0x110>)
 8001716:	2204      	movs	r2, #4
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_UART_MspInit+0x110>)
 800171c:	2203      	movs	r2, #3
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_UART_MspInit+0x110>)
 8001722:	2200      	movs	r2, #0
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_UART_MspInit+0x110>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <HAL_UART_MspInit+0x110>)
 800172e:	f000 fd3d 	bl	80021ac <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001738:	f7ff fba8 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_UART_MspInit+0x110>)
 8001740:	679a      	str	r2, [r3, #120]	; 0x78
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_UART_MspInit+0x110>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2034      	movs	r0, #52	; 0x34
 800174e:	f000 f9b4 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001752:	2034      	movs	r0, #52	; 0x34
 8001754:	f000 f9cb 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004c00 	.word	0x40004c00
 8001764:	58024400 	.word	0x58024400
 8001768:	58020000 	.word	0x58020000
 800176c:	2400a2c8 	.word	0x2400a2c8
 8001770:	40020028 	.word	0x40020028

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800177a:	e003      	b.n	8001784 <LoopCopyDataInit>

0800177c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800177e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001782:	3104      	adds	r1, #4

08001784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800178a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800178c:	d3f6      	bcc.n	800177c <CopyDataInit>
  ldr  r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001790:	e002      	b.n	8001798 <LoopFillZerobss>

08001792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001794:	f842 3b04 	str.w	r3, [r2], #4

08001798 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800179a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800179c:	d3f9      	bcc.n	8001792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800179e:	f7ff fcab 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f00a fb01 	bl	800bda8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fa85 	bl	8000cb4 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80017b0:	0800be94 	.word	0x0800be94
  ldr  r0, =_sdata
 80017b4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80017b8:	2400001c 	.word	0x2400001c
  ldr  r2, =_sbss
 80017bc:	24000020 	.word	0x24000020
  ldr  r3, = _ebss
 80017c0:	2400a510 	.word	0x2400a510

080017c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC3_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ce:	2003      	movs	r0, #3
 80017d0:	f000 f968 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017d4:	f005 f930 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 80017d8:	4601      	mov	r1, r0
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_Init+0x68>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_Init+0x6c>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	fa21 f303 	lsr.w	r3, r1, r3
 80017f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_Init+0x68>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_Init+0x6c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_Init+0x70>)
 800180a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_Init+0x74>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f814 	bl	8001840 <HAL_InitTick>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e002      	b.n	8001828 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001822:	f7ff fbfd 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58024400 	.word	0x58024400
 8001834:	0800be54 	.word	0x0800be54
 8001838:	24000004 	.word	0x24000004
 800183c:	24000000 	.word	0x24000000

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_InitTick+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e021      	b.n	8001898 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_InitTick+0x64>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_InitTick+0x60>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f94d 	bl	8001b0a <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f917 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x68>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2400000c 	.word	0x2400000c
 80018a4:	24000000 	.word	0x24000000
 80018a8:	24000008 	.word	0x24000008

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2400000c 	.word	0x2400000c
 80018d0:	2400a3cc 	.word	0x2400a3cc

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2400a3cc 	.word	0x2400a3cc

080018ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetREVID+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1b      	lsrs	r3, r3, #16
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	5c001000 	.word	0x5c001000

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	4313      	orrs	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	; (8001944 <__NVIC_SetPriorityGrouping+0x40>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	05fa0000 	.word	0x05fa0000

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff40 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff33 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa4 	bl	8001a60 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e069      	b.n	8001c0a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe fd84 	bl	8000650 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_DCMI_Init+0xf0>)
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001b82:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001b8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001b9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ba6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001bb2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d112      	bne.n	8001bea <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7f1b      	ldrb	r3, [r3, #28]
 8001bc8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7f5b      	ldrb	r3, [r3, #29]
 8001bce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001bd0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7f9b      	ldrb	r3, [r3, #30]
 8001bd6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001bd8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7fdb      	ldrb	r3, [r3, #31]
 8001be0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001be6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001be8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 021e 	orr.w	r2, r2, #30
 8001bf8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	ffe0f007 	.word	0xffe0f007

08001c18 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_DCMI_Start_DMA+0x1c>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0ab      	b.n	8001d8c <HAL_DCMI_Start_DMA+0x174>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c52:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0202 	bic.w	r2, r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c78:	4a46      	ldr	r2, [pc, #280]	; (8001d94 <HAL_DCMI_Start_DMA+0x17c>)
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c80:	4a45      	ldr	r2, [pc, #276]	; (8001d98 <HAL_DCMI_Start_DMA+0x180>)
 8001c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c88:	2200      	movs	r2, #0
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d219      	bcs.n	8001ce0 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3328      	adds	r3, #40	; 0x28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	f000 fdd2 	bl	8002864 <HAL_DMA_Start_IT>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d055      	beq.n	8001d72 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e055      	b.n	8001d8c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <HAL_DCMI_Start_DMA+0x17c>)
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001cfa:	e009      	b.n	8001d10 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	085a      	lsrs	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	005a      	lsls	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d2f0      	bcs.n	8001cfc <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	1e9a      	subs	r2, r3, #2
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3328      	adds	r3, #40	; 0x28
 8001d42:	4619      	mov	r1, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	f003 f867 	bl	8004e20 <HAL_DMAEx_MultiBufferStart_IT>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	0800204d 	.word	0x0800204d
 8001d98:	08002173 	.word	0x08002173

08001d9c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_DCMI_Stop+0xb8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DCMI_Stop+0xbc>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_DCMI_Stop+0x30>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e03f      	b.n	8001e4c <HAL_DCMI_Stop+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	72fb      	strb	r3, [r7, #11]
      break;
 8001e08:	e006      	b.n	8001e18 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e9      	bne.n	8001dec <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e26:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 ff83 	bl	8002d38 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	24000000 	.word	0x24000000
 8001e58:	10624dd3 	.word	0x10624dd3

08001e5c <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_DCMI_Suspend+0xa8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_DCMI_Suspend+0xac>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0a5b      	lsrs	r3, r3, #9
 8001e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_DCMI_Suspend+0x30>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e034      	b.n	8001ef6 <HAL_DCMI_Suspend+0x9a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d125      	bne.n	8001eec <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2205      	movs	r2, #5
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10c      	bne.n	8001ede <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	72fb      	strb	r3, [r7, #11]
        break;
 8001edc:	e006      	b.n	8001eec <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e5      	bne.n	8001eb8 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	24000000 	.word	0x24000000
 8001f08:	10624dd3 	.word	0x10624dd3

08001f0c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_DCMI_IRQHandler+0x100>)
 8001f48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fa10 	bl	8003374 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7e:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_DCMI_IRQHandler+0x100>)
 8001f80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f9f4 	bl	8003374 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f840 	bl	8002024 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f83e 	bl	8002038 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01d      	beq.n	8002002 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 021e 	bic.w	r2, r2, #30
 8001fe2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f009 fc09 	bl	800b814 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	08002173 	.word	0x08002173

08002010 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	2b00      	cmp	r3, #0
 8002060:	d043      	beq.n	80020ea <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206e:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d118      	bne.n	80020ae <DCMI_DMAXferCplt+0x62>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d015      	beq.n	80020ae <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	00da      	lsls	r2, r3, #3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4413      	add	r3, r2
 800209a:	2200      	movs	r2, #0
 800209c:	4619      	mov	r1, r3
 800209e:	f003 fa1d 	bl	80054dc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
 80020ac:	e044      	b.n	8002138 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d13c      	bne.n	8002138 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	00da      	lsls	r2, r3, #3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	2201      	movs	r2, #1
 80020d8:	4619      	mov	r1, r3
 80020da:	f003 f9ff 	bl	80054dc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
 80020e8:	e026      	b.n	8002138 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	e017      	b.n	8002138 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10f      	bne.n	8002138 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	0099      	lsls	r1, r3, #2
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	440a      	add	r2, r1
 800212e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	429a      	cmp	r2, r3
 8002142:	d112      	bne.n	800216a <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	2b02      	cmp	r3, #2
 8002188:	d009      	beq.n	800219e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff36 	bl	8002010 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff fb8e 	bl	80018d4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e316      	b.n	80027f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_DMA_Init+0x1b8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d04a      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_DMA_Init+0x1bc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d045      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a63      	ldr	r2, [pc, #396]	; (800236c <HAL_DMA_Init+0x1c0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d040      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a62      	ldr	r2, [pc, #392]	; (8002370 <HAL_DMA_Init+0x1c4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d03b      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a60      	ldr	r2, [pc, #384]	; (8002374 <HAL_DMA_Init+0x1c8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d036      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5f      	ldr	r2, [pc, #380]	; (8002378 <HAL_DMA_Init+0x1cc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d031      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5d      	ldr	r2, [pc, #372]	; (800237c <HAL_DMA_Init+0x1d0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02c      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a5c      	ldr	r2, [pc, #368]	; (8002380 <HAL_DMA_Init+0x1d4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d027      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <HAL_DMA_Init+0x1d8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d022      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a59      	ldr	r2, [pc, #356]	; (8002388 <HAL_DMA_Init+0x1dc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d01d      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_DMA_Init+0x1e0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d018      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_DMA_Init+0x1e4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d013      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_DMA_Init+0x1e8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00e      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a53      	ldr	r2, [pc, #332]	; (8002398 <HAL_DMA_Init+0x1ec>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a51      	ldr	r2, [pc, #324]	; (800239c <HAL_DMA_Init+0x1f0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_DMA_Init+0xb8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_DMA_Init+0x1f4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_DMA_Init+0xbc>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_DMA_Init+0xbe>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 813b 	beq.w	80024e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a37      	ldr	r2, [pc, #220]	; (8002364 <HAL_DMA_Init+0x1b8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d04a      	beq.n	8002320 <HAL_DMA_Init+0x174>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a36      	ldr	r2, [pc, #216]	; (8002368 <HAL_DMA_Init+0x1bc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d045      	beq.n	8002320 <HAL_DMA_Init+0x174>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a34      	ldr	r2, [pc, #208]	; (800236c <HAL_DMA_Init+0x1c0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d040      	beq.n	8002320 <HAL_DMA_Init+0x174>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a33      	ldr	r2, [pc, #204]	; (8002370 <HAL_DMA_Init+0x1c4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d03b      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a31      	ldr	r2, [pc, #196]	; (8002374 <HAL_DMA_Init+0x1c8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d036      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a30      	ldr	r2, [pc, #192]	; (8002378 <HAL_DMA_Init+0x1cc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d031      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2e      	ldr	r2, [pc, #184]	; (800237c <HAL_DMA_Init+0x1d0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02c      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2d      	ldr	r2, [pc, #180]	; (8002380 <HAL_DMA_Init+0x1d4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d027      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <HAL_DMA_Init+0x1d8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d022      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <HAL_DMA_Init+0x1dc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d01d      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a28      	ldr	r2, [pc, #160]	; (800238c <HAL_DMA_Init+0x1e0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d018      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a27      	ldr	r2, [pc, #156]	; (8002390 <HAL_DMA_Init+0x1e4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a25      	ldr	r2, [pc, #148]	; (8002394 <HAL_DMA_Init+0x1e8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00e      	beq.n	8002320 <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_DMA_Init+0x1ec>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_DMA_Init+0x174>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_DMA_Init+0x1f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_DMA_Init+0x174>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <HAL_DMA_Init+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <HAL_DMA_Init+0x186>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e007      	b.n	8002342 <HAL_DMA_Init+0x196>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002342:	e02f      	b.n	80023a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002344:	f7ff fac6 	bl	80018d4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b05      	cmp	r3, #5
 8002350:	d928      	bls.n	80023a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e246      	b.n	80027f2 <HAL_DMA_Init+0x646>
 8002364:	40020010 	.word	0x40020010
 8002368:	40020028 	.word	0x40020028
 800236c:	40020040 	.word	0x40020040
 8002370:	40020058 	.word	0x40020058
 8002374:	40020070 	.word	0x40020070
 8002378:	40020088 	.word	0x40020088
 800237c:	400200a0 	.word	0x400200a0
 8002380:	400200b8 	.word	0x400200b8
 8002384:	40020410 	.word	0x40020410
 8002388:	40020428 	.word	0x40020428
 800238c:	40020440 	.word	0x40020440
 8002390:	40020458 	.word	0x40020458
 8002394:	40020470 	.word	0x40020470
 8002398:	40020488 	.word	0x40020488
 800239c:	400204a0 	.word	0x400204a0
 80023a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1c8      	bne.n	8002344 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4b83      	ldr	r3, [pc, #524]	; (80025cc <HAL_DMA_Init+0x420>)
 80023be:	4013      	ands	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4313      	orrs	r3, r2
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002408:	4b71      	ldr	r3, [pc, #452]	; (80025d0 <HAL_DMA_Init+0x424>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b71      	ldr	r3, [pc, #452]	; (80025d4 <HAL_DMA_Init+0x428>)
 800240e:	4013      	ands	r3, r2
 8002410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002414:	d328      	bcc.n	8002468 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b28      	cmp	r3, #40	; 0x28
 800241c:	d903      	bls.n	8002426 <HAL_DMA_Init+0x27a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b2e      	cmp	r3, #46	; 0x2e
 8002424:	d917      	bls.n	8002456 <HAL_DMA_Init+0x2aa>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b3e      	cmp	r3, #62	; 0x3e
 800242c:	d903      	bls.n	8002436 <HAL_DMA_Init+0x28a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b42      	cmp	r3, #66	; 0x42
 8002434:	d90f      	bls.n	8002456 <HAL_DMA_Init+0x2aa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b46      	cmp	r3, #70	; 0x46
 800243c:	d903      	bls.n	8002446 <HAL_DMA_Init+0x29a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b48      	cmp	r3, #72	; 0x48
 8002444:	d907      	bls.n	8002456 <HAL_DMA_Init+0x2aa>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b4e      	cmp	r3, #78	; 0x4e
 800244c:	d905      	bls.n	800245a <HAL_DMA_Init+0x2ae>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b52      	cmp	r3, #82	; 0x52
 8002454:	d801      	bhi.n	800245a <HAL_DMA_Init+0x2ae>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_DMA_Init+0x2b0>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002466:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0307 	bic.w	r3, r3, #7
 800247e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b04      	cmp	r3, #4
 8002490:	d117      	bne.n	80024c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f002 fb31 	bl	8004b0c <DMA_CheckFifoParam>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2240      	movs	r2, #64	; 0x40
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e197      	b.n	80027f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f002 fa6c 	bl	80049a8 <DMA_CalcBaseAndBitshift>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e0cd      	b.n	8002682 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <HAL_DMA_Init+0x42c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a39      	ldr	r2, [pc, #228]	; (80025dc <HAL_DMA_Init+0x430>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01d      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a38      	ldr	r2, [pc, #224]	; (80025e0 <HAL_DMA_Init+0x434>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d018      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <HAL_DMA_Init+0x438>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a35      	ldr	r2, [pc, #212]	; (80025e8 <HAL_DMA_Init+0x43c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_DMA_Init+0x440>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_DMA_Init+0x444>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_DMA_Init+0x38a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <HAL_DMA_Init+0x448>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_DMA_Init+0x38e>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_DMA_Init+0x390>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8097 	beq.w	8002670 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_DMA_Init+0x42c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d021      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_DMA_Init+0x430>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01c      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_DMA_Init+0x434>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d017      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_DMA_Init+0x438>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d012      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_DMA_Init+0x43c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00d      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_DMA_Init+0x440>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d008      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_DMA_Init+0x444>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <HAL_DMA_Init+0x3e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <HAL_DMA_Init+0x448>)
 800258e:	4293      	cmp	r3, r2
 8002590:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_DMA_Init+0x44c>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d020      	beq.n	80025fc <HAL_DMA_Init+0x450>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d102      	bne.n	80025c8 <HAL_DMA_Init+0x41c>
 80025c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025c6:	e01a      	b.n	80025fe <HAL_DMA_Init+0x452>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e018      	b.n	80025fe <HAL_DMA_Init+0x452>
 80025cc:	fe10803f 	.word	0xfe10803f
 80025d0:	5c001000 	.word	0x5c001000
 80025d4:	ffff0000 	.word	0xffff0000
 80025d8:	58025408 	.word	0x58025408
 80025dc:	5802541c 	.word	0x5802541c
 80025e0:	58025430 	.word	0x58025430
 80025e4:	58025444 	.word	0x58025444
 80025e8:	58025458 	.word	0x58025458
 80025ec:	5802546c 	.word	0x5802546c
 80025f0:	58025480 	.word	0x58025480
 80025f4:	58025494 	.word	0x58025494
 80025f8:	fffe000f 	.word	0xfffe000f
 80025fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800260c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800261c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800262c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <HAL_DMA_Init+0x650>)
 8002644:	4413      	add	r3, r2
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_DMA_Init+0x654>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f002 f9a7 	bl	80049a8 <DMA_CalcBaseAndBitshift>
 800265a:	4603      	mov	r3, r0
 800265c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2201      	movs	r2, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e008      	b.n	8002682 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2203      	movs	r2, #3
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0b7      	b.n	80027f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5f      	ldr	r2, [pc, #380]	; (8002804 <HAL_DMA_Init+0x658>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d072      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_DMA_Init+0x65c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d06d      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_DMA_Init+0x660>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d068      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_DMA_Init+0x664>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d063      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_DMA_Init+0x668>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d05e      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_DMA_Init+0x66c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d059      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_DMA_Init+0x670>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d054      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a54      	ldr	r2, [pc, #336]	; (8002820 <HAL_DMA_Init+0x674>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04f      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a53      	ldr	r2, [pc, #332]	; (8002824 <HAL_DMA_Init+0x678>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d04a      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_DMA_Init+0x67c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d045      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a50      	ldr	r2, [pc, #320]	; (800282c <HAL_DMA_Init+0x680>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d040      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4e      	ldr	r2, [pc, #312]	; (8002830 <HAL_DMA_Init+0x684>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d03b      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_DMA_Init+0x688>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d036      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_DMA_Init+0x68c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d031      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_DMA_Init+0x690>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d02c      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a48      	ldr	r2, [pc, #288]	; (8002840 <HAL_DMA_Init+0x694>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d027      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a47      	ldr	r2, [pc, #284]	; (8002844 <HAL_DMA_Init+0x698>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d022      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a45      	ldr	r2, [pc, #276]	; (8002848 <HAL_DMA_Init+0x69c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01d      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a44      	ldr	r2, [pc, #272]	; (800284c <HAL_DMA_Init+0x6a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d018      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_DMA_Init+0x6a4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a41      	ldr	r2, [pc, #260]	; (8002854 <HAL_DMA_Init+0x6a8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_DMA_Init+0x6ac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d009      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <HAL_DMA_Init+0x6b0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_DMA_Init+0x5c6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_DMA_Init+0x6b4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_DMA_Init+0x5ca>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_DMA_Init+0x5cc>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d032      	beq.n	80027e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f002 fa41 	bl	8004c04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d102      	bne.n	8002790 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d010      	beq.n	80027d0 <HAL_DMA_Init+0x624>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d80c      	bhi.n	80027d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f002 fabe 	bl	8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	e008      	b.n	80027e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	a7fdabf8 	.word	0xa7fdabf8
 8002800:	cccccccd 	.word	0xcccccccd
 8002804:	40020010 	.word	0x40020010
 8002808:	40020028 	.word	0x40020028
 800280c:	40020040 	.word	0x40020040
 8002810:	40020058 	.word	0x40020058
 8002814:	40020070 	.word	0x40020070
 8002818:	40020088 	.word	0x40020088
 800281c:	400200a0 	.word	0x400200a0
 8002820:	400200b8 	.word	0x400200b8
 8002824:	40020410 	.word	0x40020410
 8002828:	40020428 	.word	0x40020428
 800282c:	40020440 	.word	0x40020440
 8002830:	40020458 	.word	0x40020458
 8002834:	40020470 	.word	0x40020470
 8002838:	40020488 	.word	0x40020488
 800283c:	400204a0 	.word	0x400204a0
 8002840:	400204b8 	.word	0x400204b8
 8002844:	58025408 	.word	0x58025408
 8002848:	5802541c 	.word	0x5802541c
 800284c:	58025430 	.word	0x58025430
 8002850:	58025444 	.word	0x58025444
 8002854:	58025458 	.word	0x58025458
 8002858:	5802546c 	.word	0x5802546c
 800285c:	58025480 	.word	0x58025480
 8002860:	58025494 	.word	0x58025494

08002864 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e226      	b.n	8002cce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_DMA_Start_IT+0x2a>
 800288a:	2302      	movs	r3, #2
 800288c:	e21f      	b.n	8002cce <HAL_DMA_Start_IT+0x46a>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 820a 	bne.w	8002cb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a68      	ldr	r2, [pc, #416]	; (8002a58 <HAL_DMA_Start_IT+0x1f4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d04a      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a66      	ldr	r2, [pc, #408]	; (8002a5c <HAL_DMA_Start_IT+0x1f8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d045      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_DMA_Start_IT+0x1fc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d040      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_DMA_Start_IT+0x200>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d03b      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a62      	ldr	r2, [pc, #392]	; (8002a68 <HAL_DMA_Start_IT+0x204>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d036      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a60      	ldr	r2, [pc, #384]	; (8002a6c <HAL_DMA_Start_IT+0x208>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5f      	ldr	r2, [pc, #380]	; (8002a70 <HAL_DMA_Start_IT+0x20c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d02c      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <HAL_DMA_Start_IT+0x210>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d027      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a5c      	ldr	r2, [pc, #368]	; (8002a78 <HAL_DMA_Start_IT+0x214>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5a      	ldr	r2, [pc, #360]	; (8002a7c <HAL_DMA_Start_IT+0x218>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01d      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a59      	ldr	r2, [pc, #356]	; (8002a80 <HAL_DMA_Start_IT+0x21c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d018      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_DMA_Start_IT+0x220>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_DMA_Start_IT+0x224>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_DMA_Start_IT+0x228>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a53      	ldr	r2, [pc, #332]	; (8002a90 <HAL_DMA_Start_IT+0x22c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_DMA_Start_IT+0xee>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_DMA_Start_IT+0x230>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <HAL_DMA_Start_IT+0x100>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e007      	b.n	8002974 <HAL_DMA_Start_IT+0x110>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f001 fe68 	bl	8004650 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <HAL_DMA_Start_IT+0x1f4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04a      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a33      	ldr	r2, [pc, #204]	; (8002a5c <HAL_DMA_Start_IT+0x1f8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d045      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <HAL_DMA_Start_IT+0x1fc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d040      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_DMA_Start_IT+0x200>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d03b      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <HAL_DMA_Start_IT+0x204>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d036      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <HAL_DMA_Start_IT+0x208>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d031      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2b      	ldr	r2, [pc, #172]	; (8002a70 <HAL_DMA_Start_IT+0x20c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02c      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_DMA_Start_IT+0x210>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d027      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <HAL_DMA_Start_IT+0x214>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d022      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_DMA_Start_IT+0x218>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d01d      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_DMA_Start_IT+0x21c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <HAL_DMA_Start_IT+0x220>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_DMA_Start_IT+0x224>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <HAL_DMA_Start_IT+0x228>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_DMA_Start_IT+0x22c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_Start_IT+0x1bc>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <HAL_DMA_Start_IT+0x230>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Start_IT+0x1c0>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_DMA_Start_IT+0x1c2>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d036      	beq.n	8002a98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 021e 	bic.w	r2, r3, #30
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0216 	orr.w	r2, r2, #22
 8002a3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03e      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0208 	orr.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e035      	b.n	8002ac4 <HAL_DMA_Start_IT+0x260>
 8002a58:	40020010 	.word	0x40020010
 8002a5c:	40020028 	.word	0x40020028
 8002a60:	40020040 	.word	0x40020040
 8002a64:	40020058 	.word	0x40020058
 8002a68:	40020070 	.word	0x40020070
 8002a6c:	40020088 	.word	0x40020088
 8002a70:	400200a0 	.word	0x400200a0
 8002a74:	400200b8 	.word	0x400200b8
 8002a78:	40020410 	.word	0x40020410
 8002a7c:	40020428 	.word	0x40020428
 8002a80:	40020440 	.word	0x40020440
 8002a84:	40020458 	.word	0x40020458
 8002a88:	40020470 	.word	0x40020470
 8002a8c:	40020488 	.word	0x40020488
 8002a90:	400204a0 	.word	0x400204a0
 8002a94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 020e 	bic.w	r2, r3, #14
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 020a 	orr.w	r2, r2, #10
 8002aaa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0204 	orr.w	r2, r2, #4
 8002ac2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a83      	ldr	r2, [pc, #524]	; (8002cd8 <HAL_DMA_Start_IT+0x474>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d072      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a82      	ldr	r2, [pc, #520]	; (8002cdc <HAL_DMA_Start_IT+0x478>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d06d      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_DMA_Start_IT+0x47c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d068      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7f      	ldr	r2, [pc, #508]	; (8002ce4 <HAL_DMA_Start_IT+0x480>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d063      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7d      	ldr	r2, [pc, #500]	; (8002ce8 <HAL_DMA_Start_IT+0x484>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d05e      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7c      	ldr	r2, [pc, #496]	; (8002cec <HAL_DMA_Start_IT+0x488>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d059      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_DMA_Start_IT+0x48c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d054      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a79      	ldr	r2, [pc, #484]	; (8002cf4 <HAL_DMA_Start_IT+0x490>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d04f      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a77      	ldr	r2, [pc, #476]	; (8002cf8 <HAL_DMA_Start_IT+0x494>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d04a      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a76      	ldr	r2, [pc, #472]	; (8002cfc <HAL_DMA_Start_IT+0x498>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d045      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a74      	ldr	r2, [pc, #464]	; (8002d00 <HAL_DMA_Start_IT+0x49c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d040      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a73      	ldr	r2, [pc, #460]	; (8002d04 <HAL_DMA_Start_IT+0x4a0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d03b      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a71      	ldr	r2, [pc, #452]	; (8002d08 <HAL_DMA_Start_IT+0x4a4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d036      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a70      	ldr	r2, [pc, #448]	; (8002d0c <HAL_DMA_Start_IT+0x4a8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d031      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_DMA_Start_IT+0x4ac>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02c      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6d      	ldr	r2, [pc, #436]	; (8002d14 <HAL_DMA_Start_IT+0x4b0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d027      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6b      	ldr	r2, [pc, #428]	; (8002d18 <HAL_DMA_Start_IT+0x4b4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6a      	ldr	r2, [pc, #424]	; (8002d1c <HAL_DMA_Start_IT+0x4b8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01d      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a68      	ldr	r2, [pc, #416]	; (8002d20 <HAL_DMA_Start_IT+0x4bc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_DMA_Start_IT+0x4c0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_DMA_Start_IT+0x4c4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a64      	ldr	r2, [pc, #400]	; (8002d2c <HAL_DMA_Start_IT+0x4c8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a62      	ldr	r2, [pc, #392]	; (8002d30 <HAL_DMA_Start_IT+0x4cc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x350>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a61      	ldr	r2, [pc, #388]	; (8002d34 <HAL_DMA_Start_IT+0x4d0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA_Start_IT+0x354>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_DMA_Start_IT+0x356>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_DMA_Start_IT+0x474>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d04a      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a36      	ldr	r2, [pc, #216]	; (8002cdc <HAL_DMA_Start_IT+0x478>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d045      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_DMA_Start_IT+0x47c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d040      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a33      	ldr	r2, [pc, #204]	; (8002ce4 <HAL_DMA_Start_IT+0x480>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d03b      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a31      	ldr	r2, [pc, #196]	; (8002ce8 <HAL_DMA_Start_IT+0x484>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d036      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a30      	ldr	r2, [pc, #192]	; (8002cec <HAL_DMA_Start_IT+0x488>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d031      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <HAL_DMA_Start_IT+0x48c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02c      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2d      	ldr	r2, [pc, #180]	; (8002cf4 <HAL_DMA_Start_IT+0x490>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d027      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2b      	ldr	r2, [pc, #172]	; (8002cf8 <HAL_DMA_Start_IT+0x494>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d022      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_DMA_Start_IT+0x498>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d01d      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_DMA_Start_IT+0x49c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d018      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <HAL_DMA_Start_IT+0x4a0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_DMA_Start_IT+0x4a4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <HAL_DMA_Start_IT+0x4a8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <HAL_DMA_Start_IT+0x4ac>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_DMA_Start_IT+0x430>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <HAL_DMA_Start_IT+0x4b0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d108      	bne.n	8002ca6 <HAL_DMA_Start_IT+0x442>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e012      	b.n	8002ccc <HAL_DMA_Start_IT+0x468>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e009      	b.n	8002ccc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020010 	.word	0x40020010
 8002cdc:	40020028 	.word	0x40020028
 8002ce0:	40020040 	.word	0x40020040
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	40020070 	.word	0x40020070
 8002cec:	40020088 	.word	0x40020088
 8002cf0:	400200a0 	.word	0x400200a0
 8002cf4:	400200b8 	.word	0x400200b8
 8002cf8:	40020410 	.word	0x40020410
 8002cfc:	40020428 	.word	0x40020428
 8002d00:	40020440 	.word	0x40020440
 8002d04:	40020458 	.word	0x40020458
 8002d08:	40020470 	.word	0x40020470
 8002d0c:	40020488 	.word	0x40020488
 8002d10:	400204a0 	.word	0x400204a0
 8002d14:	400204b8 	.word	0x400204b8
 8002d18:	58025408 	.word	0x58025408
 8002d1c:	5802541c 	.word	0x5802541c
 8002d20:	58025430 	.word	0x58025430
 8002d24:	58025444 	.word	0x58025444
 8002d28:	58025458 	.word	0x58025458
 8002d2c:	5802546c 	.word	0x5802546c
 8002d30:	58025480 	.word	0x58025480
 8002d34:	58025494 	.word	0x58025494

08002d38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7fe fdc8 	bl	80018d4 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e2dc      	b.n	800330a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d008      	beq.n	8002d6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e2cd      	b.n	800330a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a76      	ldr	r2, [pc, #472]	; (8002f4c <HAL_DMA_Abort+0x214>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_DMA_Abort+0x218>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a73      	ldr	r2, [pc, #460]	; (8002f54 <HAL_DMA_Abort+0x21c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_DMA_Abort+0x220>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a70      	ldr	r2, [pc, #448]	; (8002f5c <HAL_DMA_Abort+0x224>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_DMA_Abort+0x228>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6d      	ldr	r2, [pc, #436]	; (8002f64 <HAL_DMA_Abort+0x22c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6b      	ldr	r2, [pc, #428]	; (8002f68 <HAL_DMA_Abort+0x230>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6a      	ldr	r2, [pc, #424]	; (8002f6c <HAL_DMA_Abort+0x234>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_DMA_Abort+0x238>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_DMA_Abort+0x23c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_DMA_Abort+0x240>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a64      	ldr	r2, [pc, #400]	; (8002f7c <HAL_DMA_Abort+0x244>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a62      	ldr	r2, [pc, #392]	; (8002f80 <HAL_DMA_Abort+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a61      	ldr	r2, [pc, #388]	; (8002f84 <HAL_DMA_Abort+0x24c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Abort+0xd6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5f      	ldr	r2, [pc, #380]	; (8002f88 <HAL_DMA_Abort+0x250>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Abort+0xda>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_Abort+0xdc>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 021e 	bic.w	r2, r2, #30
 8002e26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e00a      	b.n	8002e56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 020e 	bic.w	r2, r2, #14
 8002e4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <HAL_DMA_Abort+0x214>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d072      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3a      	ldr	r2, [pc, #232]	; (8002f50 <HAL_DMA_Abort+0x218>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d06d      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a39      	ldr	r2, [pc, #228]	; (8002f54 <HAL_DMA_Abort+0x21c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d068      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a37      	ldr	r2, [pc, #220]	; (8002f58 <HAL_DMA_Abort+0x220>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d063      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a36      	ldr	r2, [pc, #216]	; (8002f5c <HAL_DMA_Abort+0x224>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d05e      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a34      	ldr	r2, [pc, #208]	; (8002f60 <HAL_DMA_Abort+0x228>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d059      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a33      	ldr	r2, [pc, #204]	; (8002f64 <HAL_DMA_Abort+0x22c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d054      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	; (8002f68 <HAL_DMA_Abort+0x230>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d04f      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a30      	ldr	r2, [pc, #192]	; (8002f6c <HAL_DMA_Abort+0x234>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d04a      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2e      	ldr	r2, [pc, #184]	; (8002f70 <HAL_DMA_Abort+0x238>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d045      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <HAL_DMA_Abort+0x23c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d040      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <HAL_DMA_Abort+0x240>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d03b      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_DMA_Abort+0x244>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d036      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <HAL_DMA_Abort+0x248>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d031      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <HAL_DMA_Abort+0x24c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d02c      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <HAL_DMA_Abort+0x250>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d027      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <HAL_DMA_Abort+0x254>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_DMA_Abort+0x258>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01d      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <HAL_DMA_Abort+0x25c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_DMA_Abort+0x260>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_DMA_Abort+0x264>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_DMA_Abort+0x268>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_DMA_Abort+0x26c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_DMA_Abort+0x20e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_DMA_Abort+0x270>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d132      	bne.n	8002fac <HAL_DMA_Abort+0x274>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e031      	b.n	8002fae <HAL_DMA_Abort+0x276>
 8002f4a:	bf00      	nop
 8002f4c:	40020010 	.word	0x40020010
 8002f50:	40020028 	.word	0x40020028
 8002f54:	40020040 	.word	0x40020040
 8002f58:	40020058 	.word	0x40020058
 8002f5c:	40020070 	.word	0x40020070
 8002f60:	40020088 	.word	0x40020088
 8002f64:	400200a0 	.word	0x400200a0
 8002f68:	400200b8 	.word	0x400200b8
 8002f6c:	40020410 	.word	0x40020410
 8002f70:	40020428 	.word	0x40020428
 8002f74:	40020440 	.word	0x40020440
 8002f78:	40020458 	.word	0x40020458
 8002f7c:	40020470 	.word	0x40020470
 8002f80:	40020488 	.word	0x40020488
 8002f84:	400204a0 	.word	0x400204a0
 8002f88:	400204b8 	.word	0x400204b8
 8002f8c:	58025408 	.word	0x58025408
 8002f90:	5802541c 	.word	0x5802541c
 8002f94:	58025430 	.word	0x58025430
 8002f98:	58025444 	.word	0x58025444
 8002f9c:	58025458 	.word	0x58025458
 8002fa0:	5802546c 	.word	0x5802546c
 8002fa4:	58025480 	.word	0x58025480
 8002fa8:	58025494 	.word	0x58025494
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6d      	ldr	r2, [pc, #436]	; (800317c <HAL_DMA_Abort+0x444>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d04a      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6b      	ldr	r2, [pc, #428]	; (8003180 <HAL_DMA_Abort+0x448>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d045      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_DMA_Abort+0x44c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d040      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_DMA_Abort+0x450>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d03b      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a67      	ldr	r2, [pc, #412]	; (800318c <HAL_DMA_Abort+0x454>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d036      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_DMA_Abort+0x458>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a64      	ldr	r2, [pc, #400]	; (8003194 <HAL_DMA_Abort+0x45c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d02c      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a62      	ldr	r2, [pc, #392]	; (8003198 <HAL_DMA_Abort+0x460>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d027      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a61      	ldr	r2, [pc, #388]	; (800319c <HAL_DMA_Abort+0x464>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_DMA_Abort+0x468>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5e      	ldr	r2, [pc, #376]	; (80031a4 <HAL_DMA_Abort+0x46c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_DMA_Abort+0x470>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5b      	ldr	r2, [pc, #364]	; (80031ac <HAL_DMA_Abort+0x474>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a59      	ldr	r2, [pc, #356]	; (80031b0 <HAL_DMA_Abort+0x478>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_DMA_Abort+0x47c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_DMA_Abort+0x32a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_DMA_Abort+0x480>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d108      	bne.n	8003074 <HAL_DMA_Abort+0x33c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e007      	b.n	8003084 <HAL_DMA_Abort+0x34c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003084:	e013      	b.n	80030ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003086:	f7fe fc25 	bl	80018d4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b05      	cmp	r3, #5
 8003092:	d90c      	bls.n	80030ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2203      	movs	r2, #3
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e12d      	b.n	800330a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2f      	ldr	r2, [pc, #188]	; (800317c <HAL_DMA_Abort+0x444>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04a      	beq.n	800315a <HAL_DMA_Abort+0x422>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <HAL_DMA_Abort+0x448>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d045      	beq.n	800315a <HAL_DMA_Abort+0x422>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <HAL_DMA_Abort+0x44c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_DMA_Abort+0x422>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <HAL_DMA_Abort+0x450>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d03b      	beq.n	800315a <HAL_DMA_Abort+0x422>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_DMA_Abort+0x454>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d036      	beq.n	800315a <HAL_DMA_Abort+0x422>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <HAL_DMA_Abort+0x458>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_DMA_Abort+0x422>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <HAL_DMA_Abort+0x45c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02c      	beq.n	800315a <HAL_DMA_Abort+0x422>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <HAL_DMA_Abort+0x460>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <HAL_DMA_Abort+0x422>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_DMA_Abort+0x464>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_Abort+0x422>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <HAL_DMA_Abort+0x468>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_DMA_Abort+0x422>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_DMA_Abort+0x46c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_DMA_Abort+0x422>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <HAL_DMA_Abort+0x470>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_DMA_Abort+0x422>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_DMA_Abort+0x474>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_DMA_Abort+0x422>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_DMA_Abort+0x478>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_DMA_Abort+0x422>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_DMA_Abort+0x47c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_DMA_Abort+0x422>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_DMA_Abort+0x480>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_DMA_Abort+0x426>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_DMA_Abort+0x428>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02b      	beq.n	80031bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	223f      	movs	r2, #63	; 0x3f
 8003174:	409a      	lsls	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	e02a      	b.n	80031d2 <HAL_DMA_Abort+0x49a>
 800317c:	40020010 	.word	0x40020010
 8003180:	40020028 	.word	0x40020028
 8003184:	40020040 	.word	0x40020040
 8003188:	40020058 	.word	0x40020058
 800318c:	40020070 	.word	0x40020070
 8003190:	40020088 	.word	0x40020088
 8003194:	400200a0 	.word	0x400200a0
 8003198:	400200b8 	.word	0x400200b8
 800319c:	40020410 	.word	0x40020410
 80031a0:	40020428 	.word	0x40020428
 80031a4:	40020440 	.word	0x40020440
 80031a8:	40020458 	.word	0x40020458
 80031ac:	40020470 	.word	0x40020470
 80031b0:	40020488 	.word	0x40020488
 80031b4:	400204a0 	.word	0x400204a0
 80031b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2201      	movs	r2, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4f      	ldr	r2, [pc, #316]	; (8003314 <HAL_DMA_Abort+0x5dc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d072      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4d      	ldr	r2, [pc, #308]	; (8003318 <HAL_DMA_Abort+0x5e0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d06d      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a4c      	ldr	r2, [pc, #304]	; (800331c <HAL_DMA_Abort+0x5e4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d068      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_DMA_Abort+0x5e8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d063      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a49      	ldr	r2, [pc, #292]	; (8003324 <HAL_DMA_Abort+0x5ec>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d05e      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a47      	ldr	r2, [pc, #284]	; (8003328 <HAL_DMA_Abort+0x5f0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d059      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a46      	ldr	r2, [pc, #280]	; (800332c <HAL_DMA_Abort+0x5f4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d054      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a44      	ldr	r2, [pc, #272]	; (8003330 <HAL_DMA_Abort+0x5f8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04f      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a43      	ldr	r2, [pc, #268]	; (8003334 <HAL_DMA_Abort+0x5fc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d04a      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a41      	ldr	r2, [pc, #260]	; (8003338 <HAL_DMA_Abort+0x600>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d045      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a40      	ldr	r2, [pc, #256]	; (800333c <HAL_DMA_Abort+0x604>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d040      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3e      	ldr	r2, [pc, #248]	; (8003340 <HAL_DMA_Abort+0x608>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d03b      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <HAL_DMA_Abort+0x60c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d036      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <HAL_DMA_Abort+0x610>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <HAL_DMA_Abort+0x614>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d02c      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_DMA_Abort+0x618>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d027      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a37      	ldr	r2, [pc, #220]	; (8003354 <HAL_DMA_Abort+0x61c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <HAL_DMA_Abort+0x620>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01d      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a34      	ldr	r2, [pc, #208]	; (800335c <HAL_DMA_Abort+0x624>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_DMA_Abort+0x628>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_DMA_Abort+0x62c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <HAL_DMA_Abort+0x630>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2e      	ldr	r2, [pc, #184]	; (800336c <HAL_DMA_Abort+0x634>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_DMA_Abort+0x58a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <HAL_DMA_Abort+0x638>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Abort+0x58e>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_DMA_Abort+0x590>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d015      	beq.n	80032f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40020010 	.word	0x40020010
 8003318:	40020028 	.word	0x40020028
 800331c:	40020040 	.word	0x40020040
 8003320:	40020058 	.word	0x40020058
 8003324:	40020070 	.word	0x40020070
 8003328:	40020088 	.word	0x40020088
 800332c:	400200a0 	.word	0x400200a0
 8003330:	400200b8 	.word	0x400200b8
 8003334:	40020410 	.word	0x40020410
 8003338:	40020428 	.word	0x40020428
 800333c:	40020440 	.word	0x40020440
 8003340:	40020458 	.word	0x40020458
 8003344:	40020470 	.word	0x40020470
 8003348:	40020488 	.word	0x40020488
 800334c:	400204a0 	.word	0x400204a0
 8003350:	400204b8 	.word	0x400204b8
 8003354:	58025408 	.word	0x58025408
 8003358:	5802541c 	.word	0x5802541c
 800335c:	58025430 	.word	0x58025430
 8003360:	58025444 	.word	0x58025444
 8003364:	58025458 	.word	0x58025458
 8003368:	5802546c 	.word	0x5802546c
 800336c:	58025480 	.word	0x58025480
 8003370:	58025494 	.word	0x58025494

08003374 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e205      	b.n	8003792 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d004      	beq.n	800339c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e1fa      	b.n	8003792 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a8c      	ldr	r2, [pc, #560]	; (80035d4 <HAL_DMA_Abort_IT+0x260>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04a      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a8b      	ldr	r2, [pc, #556]	; (80035d8 <HAL_DMA_Abort_IT+0x264>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d045      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a89      	ldr	r2, [pc, #548]	; (80035dc <HAL_DMA_Abort_IT+0x268>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d040      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a88      	ldr	r2, [pc, #544]	; (80035e0 <HAL_DMA_Abort_IT+0x26c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d03b      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a86      	ldr	r2, [pc, #536]	; (80035e4 <HAL_DMA_Abort_IT+0x270>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d036      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a85      	ldr	r2, [pc, #532]	; (80035e8 <HAL_DMA_Abort_IT+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d031      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a83      	ldr	r2, [pc, #524]	; (80035ec <HAL_DMA_Abort_IT+0x278>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02c      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a82      	ldr	r2, [pc, #520]	; (80035f0 <HAL_DMA_Abort_IT+0x27c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d027      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_DMA_Abort_IT+0x280>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7f      	ldr	r2, [pc, #508]	; (80035f8 <HAL_DMA_Abort_IT+0x284>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01d      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7d      	ldr	r2, [pc, #500]	; (80035fc <HAL_DMA_Abort_IT+0x288>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7c      	ldr	r2, [pc, #496]	; (8003600 <HAL_DMA_Abort_IT+0x28c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_DMA_Abort_IT+0x290>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a79      	ldr	r2, [pc, #484]	; (8003608 <HAL_DMA_Abort_IT+0x294>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a77      	ldr	r2, [pc, #476]	; (800360c <HAL_DMA_Abort_IT+0x298>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_DMA_Abort_IT+0xc8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a76      	ldr	r2, [pc, #472]	; (8003610 <HAL_DMA_Abort_IT+0x29c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_DMA_Abort_IT+0xcc>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_DMA_Abort_IT+0xce>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d065      	beq.n	8003512 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2204      	movs	r2, #4
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a60      	ldr	r2, [pc, #384]	; (80035d4 <HAL_DMA_Abort_IT+0x260>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a5e      	ldr	r2, [pc, #376]	; (80035d8 <HAL_DMA_Abort_IT+0x264>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5d      	ldr	r2, [pc, #372]	; (80035dc <HAL_DMA_Abort_IT+0x268>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5b      	ldr	r2, [pc, #364]	; (80035e0 <HAL_DMA_Abort_IT+0x26c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5a      	ldr	r2, [pc, #360]	; (80035e4 <HAL_DMA_Abort_IT+0x270>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_DMA_Abort_IT+0x274>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_DMA_Abort_IT+0x278>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a55      	ldr	r2, [pc, #340]	; (80035f0 <HAL_DMA_Abort_IT+0x27c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a54      	ldr	r2, [pc, #336]	; (80035f4 <HAL_DMA_Abort_IT+0x280>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_DMA_Abort_IT+0x284>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a51      	ldr	r2, [pc, #324]	; (80035fc <HAL_DMA_Abort_IT+0x288>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <HAL_DMA_Abort_IT+0x28c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a4e      	ldr	r2, [pc, #312]	; (8003604 <HAL_DMA_Abort_IT+0x290>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_DMA_Abort_IT+0x294>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_DMA_Abort_IT+0x298>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_Abort_IT+0x17a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a49      	ldr	r2, [pc, #292]	; (8003610 <HAL_DMA_Abort_IT+0x29c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <HAL_DMA_Abort_IT+0x18c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e147      	b.n	8003790 <HAL_DMA_Abort_IT+0x41c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e13e      	b.n	8003790 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 020e 	bic.w	r2, r2, #14
 8003520:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2b      	ldr	r2, [pc, #172]	; (80035d4 <HAL_DMA_Abort_IT+0x260>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d04a      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <HAL_DMA_Abort_IT+0x264>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d045      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a28      	ldr	r2, [pc, #160]	; (80035dc <HAL_DMA_Abort_IT+0x268>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d040      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <HAL_DMA_Abort_IT+0x26c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d03b      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <HAL_DMA_Abort_IT+0x270>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d036      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <HAL_DMA_Abort_IT+0x274>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d031      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_DMA_Abort_IT+0x278>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d02c      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a20      	ldr	r2, [pc, #128]	; (80035f0 <HAL_DMA_Abort_IT+0x27c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d027      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_DMA_Abort_IT+0x280>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_DMA_Abort_IT+0x284>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01d      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <HAL_DMA_Abort_IT+0x288>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_DMA_Abort_IT+0x28c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <HAL_DMA_Abort_IT+0x290>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_DMA_Abort_IT+0x294>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_DMA_Abort_IT+0x298>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x24e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <HAL_DMA_Abort_IT+0x29c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d128      	bne.n	8003614 <HAL_DMA_Abort_IT+0x2a0>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e027      	b.n	8003624 <HAL_DMA_Abort_IT+0x2b0>
 80035d4:	40020010 	.word	0x40020010
 80035d8:	40020028 	.word	0x40020028
 80035dc:	40020040 	.word	0x40020040
 80035e0:	40020058 	.word	0x40020058
 80035e4:	40020070 	.word	0x40020070
 80035e8:	40020088 	.word	0x40020088
 80035ec:	400200a0 	.word	0x400200a0
 80035f0:	400200b8 	.word	0x400200b8
 80035f4:	40020410 	.word	0x40020410
 80035f8:	40020428 	.word	0x40020428
 80035fc:	40020440 	.word	0x40020440
 8003600:	40020458 	.word	0x40020458
 8003604:	40020470 	.word	0x40020470
 8003608:	40020488 	.word	0x40020488
 800360c:	400204a0 	.word	0x400204a0
 8003610:	400204b8 	.word	0x400204b8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5c      	ldr	r2, [pc, #368]	; (800379c <HAL_DMA_Abort_IT+0x428>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d072      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a5b      	ldr	r2, [pc, #364]	; (80037a0 <HAL_DMA_Abort_IT+0x42c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d06d      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a59      	ldr	r2, [pc, #356]	; (80037a4 <HAL_DMA_Abort_IT+0x430>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d068      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_DMA_Abort_IT+0x434>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d063      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a56      	ldr	r2, [pc, #344]	; (80037ac <HAL_DMA_Abort_IT+0x438>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d05e      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a55      	ldr	r2, [pc, #340]	; (80037b0 <HAL_DMA_Abort_IT+0x43c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d059      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a53      	ldr	r2, [pc, #332]	; (80037b4 <HAL_DMA_Abort_IT+0x440>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d054      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_DMA_Abort_IT+0x444>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04f      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a50      	ldr	r2, [pc, #320]	; (80037bc <HAL_DMA_Abort_IT+0x448>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d04a      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4f      	ldr	r2, [pc, #316]	; (80037c0 <HAL_DMA_Abort_IT+0x44c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d045      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a4d      	ldr	r2, [pc, #308]	; (80037c4 <HAL_DMA_Abort_IT+0x450>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d040      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a4c      	ldr	r2, [pc, #304]	; (80037c8 <HAL_DMA_Abort_IT+0x454>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03b      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4a      	ldr	r2, [pc, #296]	; (80037cc <HAL_DMA_Abort_IT+0x458>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a49      	ldr	r2, [pc, #292]	; (80037d0 <HAL_DMA_Abort_IT+0x45c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a47      	ldr	r2, [pc, #284]	; (80037d4 <HAL_DMA_Abort_IT+0x460>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a46      	ldr	r2, [pc, #280]	; (80037d8 <HAL_DMA_Abort_IT+0x464>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a44      	ldr	r2, [pc, #272]	; (80037dc <HAL_DMA_Abort_IT+0x468>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d022      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <HAL_DMA_Abort_IT+0x46c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a41      	ldr	r2, [pc, #260]	; (80037e4 <HAL_DMA_Abort_IT+0x470>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <HAL_DMA_Abort_IT+0x474>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3e      	ldr	r2, [pc, #248]	; (80037ec <HAL_DMA_Abort_IT+0x478>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3d      	ldr	r2, [pc, #244]	; (80037f0 <HAL_DMA_Abort_IT+0x47c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <HAL_DMA_Abort_IT+0x480>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_Abort_IT+0x3a0>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <HAL_DMA_Abort_IT+0x484>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Abort_IT+0x3a4>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_DMA_Abort_IT+0x3a6>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2201      	movs	r2, #1
 800373e:	409a      	lsls	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800374c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003764:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800376e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40020010 	.word	0x40020010
 80037a0:	40020028 	.word	0x40020028
 80037a4:	40020040 	.word	0x40020040
 80037a8:	40020058 	.word	0x40020058
 80037ac:	40020070 	.word	0x40020070
 80037b0:	40020088 	.word	0x40020088
 80037b4:	400200a0 	.word	0x400200a0
 80037b8:	400200b8 	.word	0x400200b8
 80037bc:	40020410 	.word	0x40020410
 80037c0:	40020428 	.word	0x40020428
 80037c4:	40020440 	.word	0x40020440
 80037c8:	40020458 	.word	0x40020458
 80037cc:	40020470 	.word	0x40020470
 80037d0:	40020488 	.word	0x40020488
 80037d4:	400204a0 	.word	0x400204a0
 80037d8:	400204b8 	.word	0x400204b8
 80037dc:	58025408 	.word	0x58025408
 80037e0:	5802541c 	.word	0x5802541c
 80037e4:	58025430 	.word	0x58025430
 80037e8:	58025444 	.word	0x58025444
 80037ec:	58025458 	.word	0x58025458
 80037f0:	5802546c 	.word	0x5802546c
 80037f4:	58025480 	.word	0x58025480
 80037f8:	58025494 	.word	0x58025494

080037fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003808:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_DMA_IRQHandler+0x1ac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_DMA_IRQHandler+0x1b0>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5f      	ldr	r2, [pc, #380]	; (80039b0 <HAL_DMA_IRQHandler+0x1b4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04a      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5d      	ldr	r2, [pc, #372]	; (80039b4 <HAL_DMA_IRQHandler+0x1b8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d045      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <HAL_DMA_IRQHandler+0x1bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d040      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5a      	ldr	r2, [pc, #360]	; (80039bc <HAL_DMA_IRQHandler+0x1c0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03b      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <HAL_DMA_IRQHandler+0x1c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d036      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a57      	ldr	r2, [pc, #348]	; (80039c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a56      	ldr	r2, [pc, #344]	; (80039c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02c      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_DMA_IRQHandler+0x1d0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d027      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a53      	ldr	r2, [pc, #332]	; (80039d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a51      	ldr	r2, [pc, #324]	; (80039d4 <HAL_DMA_IRQHandler+0x1d8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a50      	ldr	r2, [pc, #320]	; (80039d8 <HAL_DMA_IRQHandler+0x1dc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_DMA_IRQHandler+0x1e0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a4d      	ldr	r2, [pc, #308]	; (80039e0 <HAL_DMA_IRQHandler+0x1e4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4b      	ldr	r2, [pc, #300]	; (80039e4 <HAL_DMA_IRQHandler+0x1e8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4a      	ldr	r2, [pc, #296]	; (80039e8 <HAL_DMA_IRQHandler+0x1ec>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a48      	ldr	r2, [pc, #288]	; (80039ec <HAL_DMA_IRQHandler+0x1f0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_DMA_IRQHandler+0xd6>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_DMA_IRQHandler+0xd8>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 842b 	beq.w	8004130 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2208      	movs	r2, #8
 80038e4:	409a      	lsls	r2, r3
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80a2 	beq.w	8003a34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <HAL_DMA_IRQHandler+0x1b4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04a      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <HAL_DMA_IRQHandler+0x1b8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d045      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <HAL_DMA_IRQHandler+0x1bc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d040      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <HAL_DMA_IRQHandler+0x1c0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d03b      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <HAL_DMA_IRQHandler+0x1c4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d036      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d031      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02c      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a24      	ldr	r2, [pc, #144]	; (80039cc <HAL_DMA_IRQHandler+0x1d0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d027      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a21      	ldr	r2, [pc, #132]	; (80039d4 <HAL_DMA_IRQHandler+0x1d8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d01d      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_DMA_IRQHandler+0x1dc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <HAL_DMA_IRQHandler+0x1e0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_DMA_IRQHandler+0x1e4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <HAL_DMA_IRQHandler+0x1e8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_DMA_IRQHandler+0x1ec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <HAL_DMA_IRQHandler+0x1f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d12f      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x1f4>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e02e      	b.n	8003a04 <HAL_DMA_IRQHandler+0x208>
 80039a6:	bf00      	nop
 80039a8:	24000000 	.word	0x24000000
 80039ac:	1b4e81b5 	.word	0x1b4e81b5
 80039b0:	40020010 	.word	0x40020010
 80039b4:	40020028 	.word	0x40020028
 80039b8:	40020040 	.word	0x40020040
 80039bc:	40020058 	.word	0x40020058
 80039c0:	40020070 	.word	0x40020070
 80039c4:	40020088 	.word	0x40020088
 80039c8:	400200a0 	.word	0x400200a0
 80039cc:	400200b8 	.word	0x400200b8
 80039d0:	40020410 	.word	0x40020410
 80039d4:	40020428 	.word	0x40020428
 80039d8:	40020440 	.word	0x40020440
 80039dc:	40020458 	.word	0x40020458
 80039e0:	40020470 	.word	0x40020470
 80039e4:	40020488 	.word	0x40020488
 80039e8:	400204a0 	.word	0x400204a0
 80039ec:	400204b8 	.word	0x400204b8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2208      	movs	r2, #8
 8003a22:	409a      	lsls	r2, r3
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d06e      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <HAL_DMA_IRQHandler+0x3f8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d04a      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a67      	ldr	r2, [pc, #412]	; (8003bf8 <HAL_DMA_IRQHandler+0x3fc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d045      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <HAL_DMA_IRQHandler+0x400>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d040      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a64      	ldr	r2, [pc, #400]	; (8003c00 <HAL_DMA_IRQHandler+0x404>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d03b      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_DMA_IRQHandler+0x408>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d036      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a61      	ldr	r2, [pc, #388]	; (8003c08 <HAL_DMA_IRQHandler+0x40c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d031      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a60      	ldr	r2, [pc, #384]	; (8003c0c <HAL_DMA_IRQHandler+0x410>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d02c      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5e      	ldr	r2, [pc, #376]	; (8003c10 <HAL_DMA_IRQHandler+0x414>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d027      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <HAL_DMA_IRQHandler+0x418>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_DMA_IRQHandler+0x41c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01d      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5a      	ldr	r2, [pc, #360]	; (8003c1c <HAL_DMA_IRQHandler+0x420>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_DMA_IRQHandler+0x424>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <HAL_DMA_IRQHandler+0x428>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a55      	ldr	r2, [pc, #340]	; (8003c28 <HAL_DMA_IRQHandler+0x42c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a54      	ldr	r2, [pc, #336]	; (8003c2c <HAL_DMA_IRQHandler+0x430>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	; (8003c30 <HAL_DMA_IRQHandler+0x434>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10a      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x304>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e003      	b.n	8003b08 <HAL_DMA_IRQHandler+0x30c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0202 	orr.w	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2204      	movs	r2, #4
 8003b32:	409a      	lsls	r2, r3
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 808f 	beq.w	8003c5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <HAL_DMA_IRQHandler+0x3f8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d04a      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <HAL_DMA_IRQHandler+0x3fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d045      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_DMA_IRQHandler+0x400>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d040      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <HAL_DMA_IRQHandler+0x404>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d03b      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <HAL_DMA_IRQHandler+0x408>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d036      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <HAL_DMA_IRQHandler+0x40c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d031      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_DMA_IRQHandler+0x410>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d02c      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_DMA_IRQHandler+0x414>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d027      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_DMA_IRQHandler+0x418>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_DMA_IRQHandler+0x41c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01d      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_DMA_IRQHandler+0x420>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_DMA_IRQHandler+0x424>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_DMA_IRQHandler+0x428>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_DMA_IRQHandler+0x42c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_DMA_IRQHandler+0x430>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_DMA_IRQHandler+0x434>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d12a      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x438>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e023      	b.n	8003c3c <HAL_DMA_IRQHandler+0x440>
 8003bf4:	40020010 	.word	0x40020010
 8003bf8:	40020028 	.word	0x40020028
 8003bfc:	40020040 	.word	0x40020040
 8003c00:	40020058 	.word	0x40020058
 8003c04:	40020070 	.word	0x40020070
 8003c08:	40020088 	.word	0x40020088
 8003c0c:	400200a0 	.word	0x400200a0
 8003c10:	400200b8 	.word	0x400200b8
 8003c14:	40020410 	.word	0x40020410
 8003c18:	40020428 	.word	0x40020428
 8003c1c:	40020440 	.word	0x40020440
 8003c20:	40020458 	.word	0x40020458
 8003c24:	40020470 	.word	0x40020470
 8003c28:	40020488 	.word	0x40020488
 8003c2c:	400204a0 	.word	0x400204a0
 8003c30:	400204b8 	.word	0x400204b8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2204      	movs	r2, #4
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2210      	movs	r2, #16
 8003c66:	409a      	lsls	r2, r3
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a6 	beq.w	8003dbe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a85      	ldr	r2, [pc, #532]	; (8003e8c <HAL_DMA_IRQHandler+0x690>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04a      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a83      	ldr	r2, [pc, #524]	; (8003e90 <HAL_DMA_IRQHandler+0x694>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d045      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a82      	ldr	r2, [pc, #520]	; (8003e94 <HAL_DMA_IRQHandler+0x698>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a80      	ldr	r2, [pc, #512]	; (8003e98 <HAL_DMA_IRQHandler+0x69c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7f      	ldr	r2, [pc, #508]	; (8003e9c <HAL_DMA_IRQHandler+0x6a0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d036      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7d      	ldr	r2, [pc, #500]	; (8003ea0 <HAL_DMA_IRQHandler+0x6a4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d031      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	; (8003ea4 <HAL_DMA_IRQHandler+0x6a8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d02c      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a7a      	ldr	r2, [pc, #488]	; (8003ea8 <HAL_DMA_IRQHandler+0x6ac>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d027      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a79      	ldr	r2, [pc, #484]	; (8003eac <HAL_DMA_IRQHandler+0x6b0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a77      	ldr	r2, [pc, #476]	; (8003eb0 <HAL_DMA_IRQHandler+0x6b4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a76      	ldr	r2, [pc, #472]	; (8003eb4 <HAL_DMA_IRQHandler+0x6b8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a74      	ldr	r2, [pc, #464]	; (8003eb8 <HAL_DMA_IRQHandler+0x6bc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a73      	ldr	r2, [pc, #460]	; (8003ebc <HAL_DMA_IRQHandler+0x6c0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a71      	ldr	r2, [pc, #452]	; (8003ec0 <HAL_DMA_IRQHandler+0x6c4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a70      	ldr	r2, [pc, #448]	; (8003ec4 <HAL_DMA_IRQHandler+0x6c8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <HAL_DMA_IRQHandler+0x6cc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10a      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x52c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e009      	b.n	8003d3c <HAL_DMA_IRQHandler+0x540>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d03e      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2210      	movs	r2, #16
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d024      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
 8003d7c:	e01f      	b.n	8003dbe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01b      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4798      	blx	r3
 8003d8e:	e016      	b.n	8003dbe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0208 	bic.w	r2, r2, #8
 8003dac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8110 	beq.w	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <HAL_DMA_IRQHandler+0x690>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d04a      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <HAL_DMA_IRQHandler+0x694>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d045      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <HAL_DMA_IRQHandler+0x698>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d040      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a28      	ldr	r2, [pc, #160]	; (8003e98 <HAL_DMA_IRQHandler+0x69c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d03b      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <HAL_DMA_IRQHandler+0x6a0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d036      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <HAL_DMA_IRQHandler+0x6a4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d031      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <HAL_DMA_IRQHandler+0x6a8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d02c      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_DMA_IRQHandler+0x6ac>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d027      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a20      	ldr	r2, [pc, #128]	; (8003eac <HAL_DMA_IRQHandler+0x6b0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d022      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_DMA_IRQHandler+0x6b4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d01d      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_DMA_IRQHandler+0x6b8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d018      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_DMA_IRQHandler+0x6bc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <HAL_DMA_IRQHandler+0x6c0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_DMA_IRQHandler+0x6c4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <HAL_DMA_IRQHandler+0x6c8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <HAL_DMA_IRQHandler+0x6cc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d12b      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x6d0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e02a      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x6e4>
 8003e8a:	bf00      	nop
 8003e8c:	40020010 	.word	0x40020010
 8003e90:	40020028 	.word	0x40020028
 8003e94:	40020040 	.word	0x40020040
 8003e98:	40020058 	.word	0x40020058
 8003e9c:	40020070 	.word	0x40020070
 8003ea0:	40020088 	.word	0x40020088
 8003ea4:	400200a0 	.word	0x400200a0
 8003ea8:	400200b8 	.word	0x400200b8
 8003eac:	40020410 	.word	0x40020410
 8003eb0:	40020428 	.word	0x40020428
 8003eb4:	40020440 	.word	0x40020440
 8003eb8:	40020458 	.word	0x40020458
 8003ebc:	40020470 	.word	0x40020470
 8003ec0:	40020488 	.word	0x40020488
 8003ec4:	400204a0 	.word	0x400204a0
 8003ec8:	400204b8 	.word	0x400204b8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8087 	beq.w	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	2220      	movs	r2, #32
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d139      	bne.n	8003f76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0216 	bic.w	r2, r2, #22
 8003f10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <HAL_DMA_IRQHandler+0x736>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0208 	bic.w	r2, r2, #8
 8003f40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	223f      	movs	r2, #63	; 0x3f
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 834a 	beq.w	8004600 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
          }
          return;
 8003f74:	e344      	b.n	8004600 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02c      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
 8003fa2:	e027      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d023      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
 8003fb4:	e01e      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0210 	bic.w	r2, r2, #16
 8003fd2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8306 	beq.w	800460a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8088 	beq.w	800411c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2204      	movs	r2, #4
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_DMA_IRQHandler+0xa08>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d04a      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a79      	ldr	r2, [pc, #484]	; (8004208 <HAL_DMA_IRQHandler+0xa0c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d045      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a77      	ldr	r2, [pc, #476]	; (800420c <HAL_DMA_IRQHandler+0xa10>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d040      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a76      	ldr	r2, [pc, #472]	; (8004210 <HAL_DMA_IRQHandler+0xa14>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d03b      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a74      	ldr	r2, [pc, #464]	; (8004214 <HAL_DMA_IRQHandler+0xa18>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d036      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a73      	ldr	r2, [pc, #460]	; (8004218 <HAL_DMA_IRQHandler+0xa1c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d031      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a71      	ldr	r2, [pc, #452]	; (800421c <HAL_DMA_IRQHandler+0xa20>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02c      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a70      	ldr	r2, [pc, #448]	; (8004220 <HAL_DMA_IRQHandler+0xa24>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d027      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a6e      	ldr	r2, [pc, #440]	; (8004224 <HAL_DMA_IRQHandler+0xa28>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6d      	ldr	r2, [pc, #436]	; (8004228 <HAL_DMA_IRQHandler+0xa2c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01d      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a6b      	ldr	r2, [pc, #428]	; (800422c <HAL_DMA_IRQHandler+0xa30>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6a      	ldr	r2, [pc, #424]	; (8004230 <HAL_DMA_IRQHandler+0xa34>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a68      	ldr	r2, [pc, #416]	; (8004234 <HAL_DMA_IRQHandler+0xa38>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a67      	ldr	r2, [pc, #412]	; (8004238 <HAL_DMA_IRQHandler+0xa3c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a65      	ldr	r2, [pc, #404]	; (800423c <HAL_DMA_IRQHandler+0xa40>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a64      	ldr	r2, [pc, #400]	; (8004240 <HAL_DMA_IRQHandler+0xa44>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d108      	bne.n	80040c6 <HAL_DMA_IRQHandler+0x8ca>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e007      	b.n	80040d6 <HAL_DMA_IRQHandler+0x8da>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	429a      	cmp	r2, r3
 80040e0:	d307      	bcc.n	80040f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f2      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x8da>
 80040f0:	e000      	b.n	80040f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2203      	movs	r2, #3
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004112:	e003      	b.n	800411c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8272 	beq.w	800460a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
 800412e:	e26c      	b.n	800460a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a43      	ldr	r2, [pc, #268]	; (8004244 <HAL_DMA_IRQHandler+0xa48>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_DMA_IRQHandler+0xa4c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a40      	ldr	r2, [pc, #256]	; (800424c <HAL_DMA_IRQHandler+0xa50>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a3f      	ldr	r2, [pc, #252]	; (8004250 <HAL_DMA_IRQHandler+0xa54>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a3d      	ldr	r2, [pc, #244]	; (8004254 <HAL_DMA_IRQHandler+0xa58>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <HAL_DMA_IRQHandler+0xa5c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_DMA_IRQHandler+0xa60>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_IRQHandler+0x984>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a39      	ldr	r2, [pc, #228]	; (8004260 <HAL_DMA_IRQHandler+0xa64>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_DMA_IRQHandler+0x988>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_DMA_IRQHandler+0x98a>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 823f 	beq.w	800460a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2204      	movs	r2, #4
 800419e:	409a      	lsls	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80cd 	beq.w	8004344 <HAL_DMA_IRQHandler+0xb48>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80c7 	beq.w	8004344 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2204      	movs	r2, #4
 80041c0:	409a      	lsls	r2, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d049      	beq.n	8004264 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8210 	beq.w	8004604 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ec:	e20a      	b.n	8004604 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8206 	beq.w	8004604 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004200:	e200      	b.n	8004604 <HAL_DMA_IRQHandler+0xe08>
 8004202:	bf00      	nop
 8004204:	40020010 	.word	0x40020010
 8004208:	40020028 	.word	0x40020028
 800420c:	40020040 	.word	0x40020040
 8004210:	40020058 	.word	0x40020058
 8004214:	40020070 	.word	0x40020070
 8004218:	40020088 	.word	0x40020088
 800421c:	400200a0 	.word	0x400200a0
 8004220:	400200b8 	.word	0x400200b8
 8004224:	40020410 	.word	0x40020410
 8004228:	40020428 	.word	0x40020428
 800422c:	40020440 	.word	0x40020440
 8004230:	40020458 	.word	0x40020458
 8004234:	40020470 	.word	0x40020470
 8004238:	40020488 	.word	0x40020488
 800423c:	400204a0 	.word	0x400204a0
 8004240:	400204b8 	.word	0x400204b8
 8004244:	58025408 	.word	0x58025408
 8004248:	5802541c 	.word	0x5802541c
 800424c:	58025430 	.word	0x58025430
 8004250:	58025444 	.word	0x58025444
 8004254:	58025458 	.word	0x58025458
 8004258:	5802546c 	.word	0x5802546c
 800425c:	58025480 	.word	0x58025480
 8004260:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d160      	bne.n	8004330 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a8c      	ldr	r2, [pc, #560]	; (80044a4 <HAL_DMA_IRQHandler+0xca8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d04a      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a8a      	ldr	r2, [pc, #552]	; (80044a8 <HAL_DMA_IRQHandler+0xcac>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d045      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a89      	ldr	r2, [pc, #548]	; (80044ac <HAL_DMA_IRQHandler+0xcb0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d040      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_DMA_IRQHandler+0xcb4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d03b      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a86      	ldr	r2, [pc, #536]	; (80044b4 <HAL_DMA_IRQHandler+0xcb8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d036      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a84      	ldr	r2, [pc, #528]	; (80044b8 <HAL_DMA_IRQHandler+0xcbc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a83      	ldr	r2, [pc, #524]	; (80044bc <HAL_DMA_IRQHandler+0xcc0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d02c      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a81      	ldr	r2, [pc, #516]	; (80044c0 <HAL_DMA_IRQHandler+0xcc4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d027      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a80      	ldr	r2, [pc, #512]	; (80044c4 <HAL_DMA_IRQHandler+0xcc8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7e      	ldr	r2, [pc, #504]	; (80044c8 <HAL_DMA_IRQHandler+0xccc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01d      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a7d      	ldr	r2, [pc, #500]	; (80044cc <HAL_DMA_IRQHandler+0xcd0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a7b      	ldr	r2, [pc, #492]	; (80044d0 <HAL_DMA_IRQHandler+0xcd4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a7a      	ldr	r2, [pc, #488]	; (80044d4 <HAL_DMA_IRQHandler+0xcd8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a78      	ldr	r2, [pc, #480]	; (80044d8 <HAL_DMA_IRQHandler+0xcdc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a77      	ldr	r2, [pc, #476]	; (80044dc <HAL_DMA_IRQHandler+0xce0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <HAL_DMA_IRQHandler+0xce4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d108      	bne.n	8004320 <HAL_DMA_IRQHandler+0xb24>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0208 	bic.w	r2, r2, #8
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e007      	b.n	8004330 <HAL_DMA_IRQHandler+0xb34>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8165 	beq.w	8004604 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004342:	e15f      	b.n	8004604 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2202      	movs	r2, #2
 800434e:	409a      	lsls	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80c5 	beq.w	80044e4 <HAL_DMA_IRQHandler+0xce8>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80bf 	beq.w	80044e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2202      	movs	r2, #2
 8004370:	409a      	lsls	r2, r3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d018      	beq.n	80043b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 813a 	beq.w	8004608 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800439c:	e134      	b.n	8004608 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8130 	beq.w	8004608 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b0:	e12a      	b.n	8004608 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d168      	bne.n	800448e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a38      	ldr	r2, [pc, #224]	; (80044a4 <HAL_DMA_IRQHandler+0xca8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d04a      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a37      	ldr	r2, [pc, #220]	; (80044a8 <HAL_DMA_IRQHandler+0xcac>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d045      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a35      	ldr	r2, [pc, #212]	; (80044ac <HAL_DMA_IRQHandler+0xcb0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d040      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a34      	ldr	r2, [pc, #208]	; (80044b0 <HAL_DMA_IRQHandler+0xcb4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d03b      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a32      	ldr	r2, [pc, #200]	; (80044b4 <HAL_DMA_IRQHandler+0xcb8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d036      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a31      	ldr	r2, [pc, #196]	; (80044b8 <HAL_DMA_IRQHandler+0xcbc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d031      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2f      	ldr	r2, [pc, #188]	; (80044bc <HAL_DMA_IRQHandler+0xcc0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02c      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <HAL_DMA_IRQHandler+0xcc4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d027      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2c      	ldr	r2, [pc, #176]	; (80044c4 <HAL_DMA_IRQHandler+0xcc8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2b      	ldr	r2, [pc, #172]	; (80044c8 <HAL_DMA_IRQHandler+0xccc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a29      	ldr	r2, [pc, #164]	; (80044cc <HAL_DMA_IRQHandler+0xcd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <HAL_DMA_IRQHandler+0xcd4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <HAL_DMA_IRQHandler+0xcd8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <HAL_DMA_IRQHandler+0xcdc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_DMA_IRQHandler+0xce0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0xc60>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <HAL_DMA_IRQHandler+0xce4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <HAL_DMA_IRQHandler+0xc72>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0214 	bic.w	r2, r2, #20
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e007      	b.n	800447e <HAL_DMA_IRQHandler+0xc82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 020a 	bic.w	r2, r2, #10
 800447c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80b8 	beq.w	8004608 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a0:	e0b2      	b.n	8004608 <HAL_DMA_IRQHandler+0xe0c>
 80044a2:	bf00      	nop
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2208      	movs	r2, #8
 80044ee:	409a      	lsls	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8088 	beq.w	800460a <HAL_DMA_IRQHandler+0xe0e>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8082 	beq.w	800460a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a41      	ldr	r2, [pc, #260]	; (8004610 <HAL_DMA_IRQHandler+0xe14>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d04a      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3f      	ldr	r2, [pc, #252]	; (8004614 <HAL_DMA_IRQHandler+0xe18>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d045      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a3e      	ldr	r2, [pc, #248]	; (8004618 <HAL_DMA_IRQHandler+0xe1c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d040      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3c      	ldr	r2, [pc, #240]	; (800461c <HAL_DMA_IRQHandler+0xe20>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d03b      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <HAL_DMA_IRQHandler+0xe24>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d036      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a39      	ldr	r2, [pc, #228]	; (8004624 <HAL_DMA_IRQHandler+0xe28>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d031      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a38      	ldr	r2, [pc, #224]	; (8004628 <HAL_DMA_IRQHandler+0xe2c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d02c      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a36      	ldr	r2, [pc, #216]	; (800462c <HAL_DMA_IRQHandler+0xe30>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d027      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a35      	ldr	r2, [pc, #212]	; (8004630 <HAL_DMA_IRQHandler+0xe34>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a33      	ldr	r2, [pc, #204]	; (8004634 <HAL_DMA_IRQHandler+0xe38>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01d      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a32      	ldr	r2, [pc, #200]	; (8004638 <HAL_DMA_IRQHandler+0xe3c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a30      	ldr	r2, [pc, #192]	; (800463c <HAL_DMA_IRQHandler+0xe40>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <HAL_DMA_IRQHandler+0xe44>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <HAL_DMA_IRQHandler+0xe48>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <HAL_DMA_IRQHandler+0xe4c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <HAL_DMA_IRQHandler+0xe50>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <HAL_DMA_IRQHandler+0xdbc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 021c 	bic.w	r2, r2, #28
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e007      	b.n	80045c8 <HAL_DMA_IRQHandler+0xdcc>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 020e 	bic.w	r2, r2, #14
 80045c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	e004      	b.n	800460a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004600:	bf00      	nop
 8004602:	e002      	b.n	800460a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004604:	bf00      	nop
 8004606:	e000      	b.n	800460a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004608:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800460a:	3728      	adds	r7, #40	; 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40020010 	.word	0x40020010
 8004614:	40020028 	.word	0x40020028
 8004618:	40020040 	.word	0x40020040
 800461c:	40020058 	.word	0x40020058
 8004620:	40020070 	.word	0x40020070
 8004624:	40020088 	.word	0x40020088
 8004628:	400200a0 	.word	0x400200a0
 800462c:	400200b8 	.word	0x400200b8
 8004630:	40020410 	.word	0x40020410
 8004634:	40020428 	.word	0x40020428
 8004638:	40020440 	.word	0x40020440
 800463c:	40020458 	.word	0x40020458
 8004640:	40020470 	.word	0x40020470
 8004644:	40020488 	.word	0x40020488
 8004648:	400204a0 	.word	0x400204a0
 800464c:	400204b8 	.word	0x400204b8

08004650 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a84      	ldr	r2, [pc, #528]	; (8004880 <DMA_SetConfig+0x230>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d072      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a82      	ldr	r2, [pc, #520]	; (8004884 <DMA_SetConfig+0x234>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d06d      	beq.n	800475a <DMA_SetConfig+0x10a>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a81      	ldr	r2, [pc, #516]	; (8004888 <DMA_SetConfig+0x238>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d068      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7f      	ldr	r2, [pc, #508]	; (800488c <DMA_SetConfig+0x23c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d063      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7e      	ldr	r2, [pc, #504]	; (8004890 <DMA_SetConfig+0x240>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d05e      	beq.n	800475a <DMA_SetConfig+0x10a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7c      	ldr	r2, [pc, #496]	; (8004894 <DMA_SetConfig+0x244>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d059      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7b      	ldr	r2, [pc, #492]	; (8004898 <DMA_SetConfig+0x248>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d054      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a79      	ldr	r2, [pc, #484]	; (800489c <DMA_SetConfig+0x24c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d04f      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a78      	ldr	r2, [pc, #480]	; (80048a0 <DMA_SetConfig+0x250>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d04a      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a76      	ldr	r2, [pc, #472]	; (80048a4 <DMA_SetConfig+0x254>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d045      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a75      	ldr	r2, [pc, #468]	; (80048a8 <DMA_SetConfig+0x258>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d040      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a73      	ldr	r2, [pc, #460]	; (80048ac <DMA_SetConfig+0x25c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d03b      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a72      	ldr	r2, [pc, #456]	; (80048b0 <DMA_SetConfig+0x260>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d036      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a70      	ldr	r2, [pc, #448]	; (80048b4 <DMA_SetConfig+0x264>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <DMA_SetConfig+0x10a>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6f      	ldr	r2, [pc, #444]	; (80048b8 <DMA_SetConfig+0x268>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02c      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6d      	ldr	r2, [pc, #436]	; (80048bc <DMA_SetConfig+0x26c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d027      	beq.n	800475a <DMA_SetConfig+0x10a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6c      	ldr	r2, [pc, #432]	; (80048c0 <DMA_SetConfig+0x270>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6a      	ldr	r2, [pc, #424]	; (80048c4 <DMA_SetConfig+0x274>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <DMA_SetConfig+0x10a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a69      	ldr	r2, [pc, #420]	; (80048c8 <DMA_SetConfig+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a67      	ldr	r2, [pc, #412]	; (80048cc <DMA_SetConfig+0x27c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a66      	ldr	r2, [pc, #408]	; (80048d0 <DMA_SetConfig+0x280>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <DMA_SetConfig+0x10a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a64      	ldr	r2, [pc, #400]	; (80048d4 <DMA_SetConfig+0x284>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a63      	ldr	r2, [pc, #396]	; (80048d8 <DMA_SetConfig+0x288>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <DMA_SetConfig+0x10a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a61      	ldr	r2, [pc, #388]	; (80048dc <DMA_SetConfig+0x28c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <DMA_SetConfig+0x10e>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <DMA_SetConfig+0x110>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800476c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800477e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <DMA_SetConfig+0x230>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d04a      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3d      	ldr	r2, [pc, #244]	; (8004884 <DMA_SetConfig+0x234>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d045      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <DMA_SetConfig+0x238>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d040      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3a      	ldr	r2, [pc, #232]	; (800488c <DMA_SetConfig+0x23c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d03b      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a38      	ldr	r2, [pc, #224]	; (8004890 <DMA_SetConfig+0x240>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d036      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a37      	ldr	r2, [pc, #220]	; (8004894 <DMA_SetConfig+0x244>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d031      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a35      	ldr	r2, [pc, #212]	; (8004898 <DMA_SetConfig+0x248>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02c      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a34      	ldr	r2, [pc, #208]	; (800489c <DMA_SetConfig+0x24c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d027      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a32      	ldr	r2, [pc, #200]	; (80048a0 <DMA_SetConfig+0x250>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a31      	ldr	r2, [pc, #196]	; (80048a4 <DMA_SetConfig+0x254>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01d      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <DMA_SetConfig+0x258>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2e      	ldr	r2, [pc, #184]	; (80048ac <DMA_SetConfig+0x25c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2c      	ldr	r2, [pc, #176]	; (80048b0 <DMA_SetConfig+0x260>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2b      	ldr	r2, [pc, #172]	; (80048b4 <DMA_SetConfig+0x264>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <DMA_SetConfig+0x268>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <DMA_SetConfig+0x1d0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a28      	ldr	r2, [pc, #160]	; (80048bc <DMA_SetConfig+0x26c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <DMA_SetConfig+0x1d4>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <DMA_SetConfig+0x1d6>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d05a      	beq.n	80048e0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	223f      	movs	r2, #63	; 0x3f
 8004834:	409a      	lsls	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004848:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d108      	bne.n	800486c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800486a:	e087      	b.n	800497c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	e07e      	b.n	800497c <DMA_SetConfig+0x32c>
 800487e:	bf00      	nop
 8004880:	40020010 	.word	0x40020010
 8004884:	40020028 	.word	0x40020028
 8004888:	40020040 	.word	0x40020040
 800488c:	40020058 	.word	0x40020058
 8004890:	40020070 	.word	0x40020070
 8004894:	40020088 	.word	0x40020088
 8004898:	400200a0 	.word	0x400200a0
 800489c:	400200b8 	.word	0x400200b8
 80048a0:	40020410 	.word	0x40020410
 80048a4:	40020428 	.word	0x40020428
 80048a8:	40020440 	.word	0x40020440
 80048ac:	40020458 	.word	0x40020458
 80048b0:	40020470 	.word	0x40020470
 80048b4:	40020488 	.word	0x40020488
 80048b8:	400204a0 	.word	0x400204a0
 80048bc:	400204b8 	.word	0x400204b8
 80048c0:	58025408 	.word	0x58025408
 80048c4:	5802541c 	.word	0x5802541c
 80048c8:	58025430 	.word	0x58025430
 80048cc:	58025444 	.word	0x58025444
 80048d0:	58025458 	.word	0x58025458
 80048d4:	5802546c 	.word	0x5802546c
 80048d8:	58025480 	.word	0x58025480
 80048dc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a28      	ldr	r2, [pc, #160]	; (8004988 <DMA_SetConfig+0x338>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a27      	ldr	r2, [pc, #156]	; (800498c <DMA_SetConfig+0x33c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a25      	ldr	r2, [pc, #148]	; (8004990 <DMA_SetConfig+0x340>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <DMA_SetConfig+0x344>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <DMA_SetConfig+0x348>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a21      	ldr	r2, [pc, #132]	; (800499c <DMA_SetConfig+0x34c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <DMA_SetConfig+0x350>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <DMA_SetConfig+0x2e0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1e      	ldr	r2, [pc, #120]	; (80049a4 <DMA_SetConfig+0x354>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <DMA_SetConfig+0x2e4>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <DMA_SetConfig+0x2e6>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2201      	movs	r2, #1
 8004944:	409a      	lsls	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d108      	bne.n	800496c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	60da      	str	r2, [r3, #12]
}
 800496a:	e007      	b.n	800497c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	58025408 	.word	0x58025408
 800498c:	5802541c 	.word	0x5802541c
 8004990:	58025430 	.word	0x58025430
 8004994:	58025444 	.word	0x58025444
 8004998:	58025458 	.word	0x58025458
 800499c:	5802546c 	.word	0x5802546c
 80049a0:	58025480 	.word	0x58025480
 80049a4:	58025494 	.word	0x58025494

080049a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a42      	ldr	r2, [pc, #264]	; (8004ac0 <DMA_CalcBaseAndBitshift+0x118>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <DMA_CalcBaseAndBitshift+0x11c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d045      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a3f      	ldr	r2, [pc, #252]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d040      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a3e      	ldr	r2, [pc, #248]	; (8004acc <DMA_CalcBaseAndBitshift+0x124>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03b      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3c      	ldr	r2, [pc, #240]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x128>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d036      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x12c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d031      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a39      	ldr	r2, [pc, #228]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02c      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a38      	ldr	r2, [pc, #224]	; (8004adc <DMA_CalcBaseAndBitshift+0x134>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d027      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a36      	ldr	r2, [pc, #216]	; (8004ae0 <DMA_CalcBaseAndBitshift+0x138>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a35      	ldr	r2, [pc, #212]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01d      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x140>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a32      	ldr	r2, [pc, #200]	; (8004aec <DMA_CalcBaseAndBitshift+0x144>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a30      	ldr	r2, [pc, #192]	; (8004af0 <DMA_CalcBaseAndBitshift+0x148>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2d      	ldr	r2, [pc, #180]	; (8004af8 <DMA_CalcBaseAndBitshift+0x150>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <DMA_CalcBaseAndBitshift+0x154>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <DMA_CalcBaseAndBitshift+0xac>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <DMA_CalcBaseAndBitshift+0xae>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d024      	beq.n	8004aa4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	3b10      	subs	r3, #16
 8004a62:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <DMA_CalcBaseAndBitshift+0x158>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d908      	bls.n	8004a94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <DMA_CalcBaseAndBitshift+0x160>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	659a      	str	r2, [r3, #88]	; 0x58
 8004a92:	e00d      	b.n	8004ab0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <DMA_CalcBaseAndBitshift+0x160>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa2:	e005      	b.n	8004ab0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40020010 	.word	0x40020010
 8004ac4:	40020028 	.word	0x40020028
 8004ac8:	40020040 	.word	0x40020040
 8004acc:	40020058 	.word	0x40020058
 8004ad0:	40020070 	.word	0x40020070
 8004ad4:	40020088 	.word	0x40020088
 8004ad8:	400200a0 	.word	0x400200a0
 8004adc:	400200b8 	.word	0x400200b8
 8004ae0:	40020410 	.word	0x40020410
 8004ae4:	40020428 	.word	0x40020428
 8004ae8:	40020440 	.word	0x40020440
 8004aec:	40020458 	.word	0x40020458
 8004af0:	40020470 	.word	0x40020470
 8004af4:	40020488 	.word	0x40020488
 8004af8:	400204a0 	.word	0x400204a0
 8004afc:	400204b8 	.word	0x400204b8
 8004b00:	aaaaaaab 	.word	0xaaaaaaab
 8004b04:	0800be64 	.word	0x0800be64
 8004b08:	fffffc00 	.word	0xfffffc00

08004b0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d120      	bne.n	8004b62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d858      	bhi.n	8004bda <DMA_CheckFifoParam+0xce>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <DMA_CheckFifoParam+0x24>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b53 	.word	0x08004b53
 8004b38:	08004b41 	.word	0x08004b41
 8004b3c:	08004bdb 	.word	0x08004bdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d048      	beq.n	8004bde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b50:	e045      	b.n	8004bde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b5a:	d142      	bne.n	8004be2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b60:	e03f      	b.n	8004be2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	d123      	bne.n	8004bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d838      	bhi.n	8004be6 <DMA_CheckFifoParam+0xda>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <DMA_CheckFifoParam+0x70>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b93 	.word	0x08004b93
 8004b84:	08004b8d 	.word	0x08004b8d
 8004b88:	08004ba5 	.word	0x08004ba5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b90:	e030      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d025      	beq.n	8004bea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ba2:	e022      	b.n	8004bea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bac:	d11f      	bne.n	8004bee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bb2:	e01c      	b.n	8004bee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d902      	bls.n	8004bc2 <DMA_CheckFifoParam+0xb6>
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d003      	beq.n	8004bc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004bc0:	e018      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bc6:	e015      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8004bd8:	e00b      	b.n	8004bf2 <DMA_CheckFifoParam+0xe6>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e00a      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bde:	bf00      	nop
 8004be0:	e008      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8004be2:	bf00      	nop
 8004be4:	e006      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8004be6:	bf00      	nop
 8004be8:	e004      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bea:	bf00      	nop
 8004bec:	e002      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
    break;
 8004bf2:	bf00      	nop
    }
  }

  return status;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a38      	ldr	r2, [pc, #224]	; (8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a36      	ldr	r2, [pc, #216]	; (8004cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a33      	ldr	r2, [pc, #204]	; (8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a32      	ldr	r2, [pc, #200]	; (8004d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2d      	ldr	r2, [pc, #180]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	3b08      	subs	r3, #8
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	461a      	mov	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a24      	ldr	r2, [pc, #144]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2201      	movs	r2, #1
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ca0:	e024      	b.n	8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3b10      	subs	r3, #16
 8004caa:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d806      	bhi.n	8004cca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d902      	bls.n	8004cca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004cdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	58025408 	.word	0x58025408
 8004cfc:	5802541c 	.word	0x5802541c
 8004d00:	58025430 	.word	0x58025430
 8004d04:	58025444 	.word	0x58025444
 8004d08:	58025458 	.word	0x58025458
 8004d0c:	5802546c 	.word	0x5802546c
 8004d10:	58025480 	.word	0x58025480
 8004d14:	58025494 	.word	0x58025494
 8004d18:	cccccccd 	.word	0xcccccccd
 8004d1c:	16009600 	.word	0x16009600
 8004d20:	58025880 	.word	0x58025880
 8004d24:	aaaaaaab 	.word	0xaaaaaaab
 8004d28:	400204b8 	.word	0x400204b8
 8004d2c:	4002040f 	.word	0x4002040f
 8004d30:	10008200 	.word	0x10008200
 8004d34:	40020880 	.word	0x40020880

08004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04a      	beq.n	8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d847      	bhi.n	8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	; (8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a21      	ldr	r2, [pc, #132]	; (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	461a      	mov	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8004dc2:	e009      	b.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004dd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2201      	movs	r2, #1
 8004dde:	409a      	lsls	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	58025408 	.word	0x58025408
 8004df4:	5802541c 	.word	0x5802541c
 8004df8:	58025430 	.word	0x58025430
 8004dfc:	58025444 	.word	0x58025444
 8004e00:	58025458 	.word	0x58025458
 8004e04:	5802546c 	.word	0x5802546c
 8004e08:	58025480 	.word	0x58025480
 8004e0c:	58025494 	.word	0x58025494
 8004e10:	1600963f 	.word	0x1600963f
 8004e14:	58025940 	.word	0x58025940
 8004e18:	1000823f 	.word	0x1000823f
 8004e1c:	40020940 	.word	0x40020940

08004e20 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d105      	bne.n	8004e46 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e325      	b.n	8005492 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e31e      	b.n	8005492 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 830d 	bne.w	8005484 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a82      	ldr	r2, [pc, #520]	; (8005088 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d04a      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a81      	ldr	r2, [pc, #516]	; (800508c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d045      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a7f      	ldr	r2, [pc, #508]	; (8005090 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d040      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7e      	ldr	r2, [pc, #504]	; (8005094 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d03b      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d036      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a7b      	ldr	r2, [pc, #492]	; (800509c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d031      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a79      	ldr	r2, [pc, #484]	; (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02c      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a78      	ldr	r2, [pc, #480]	; (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d027      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a76      	ldr	r2, [pc, #472]	; (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a75      	ldr	r2, [pc, #468]	; (80050ac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01d      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a73      	ldr	r2, [pc, #460]	; (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a72      	ldr	r2, [pc, #456]	; (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a70      	ldr	r2, [pc, #448]	; (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6f      	ldr	r2, [pc, #444]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6d      	ldr	r2, [pc, #436]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6c      	ldr	r2, [pc, #432]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d018      	beq.n	8004f54 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f30:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	3308      	adds	r3, #8
 8004f40:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	223f      	movs	r2, #63	; 0x3f
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e018      	b.n	8004f86 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	f248 0320 	movw	r3, #32800	; 0x8020
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	3304      	adds	r3, #4
 8004f74:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	2201      	movs	r2, #1
 8004f80:	409a      	lsls	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fb41 	bl	8005614 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a3c      	ldr	r2, [pc, #240]	; (8005088 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d072      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a3a      	ldr	r2, [pc, #232]	; (800508c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d06d      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d068      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a37      	ldr	r2, [pc, #220]	; (8005094 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d063      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a36      	ldr	r2, [pc, #216]	; (8005098 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d05e      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a34      	ldr	r2, [pc, #208]	; (800509c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d059      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a33      	ldr	r2, [pc, #204]	; (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d054      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a31      	ldr	r2, [pc, #196]	; (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d04f      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a30      	ldr	r2, [pc, #192]	; (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d04a      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2e      	ldr	r2, [pc, #184]	; (80050ac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d045      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2d      	ldr	r2, [pc, #180]	; (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d040      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d03b      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d036      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a28      	ldr	r2, [pc, #160]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d031      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d02c      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d027      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d132      	bne.n	80050e8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005082:	2301      	movs	r3, #1
 8005084:	e031      	b.n	80050ea <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005086:	bf00      	nop
 8005088:	40020010 	.word	0x40020010
 800508c:	40020028 	.word	0x40020028
 8005090:	40020040 	.word	0x40020040
 8005094:	40020058 	.word	0x40020058
 8005098:	40020070 	.word	0x40020070
 800509c:	40020088 	.word	0x40020088
 80050a0:	400200a0 	.word	0x400200a0
 80050a4:	400200b8 	.word	0x400200b8
 80050a8:	40020410 	.word	0x40020410
 80050ac:	40020428 	.word	0x40020428
 80050b0:	40020440 	.word	0x40020440
 80050b4:	40020458 	.word	0x40020458
 80050b8:	40020470 	.word	0x40020470
 80050bc:	40020488 	.word	0x40020488
 80050c0:	400204a0 	.word	0x400204a0
 80050c4:	400204b8 	.word	0x400204b8
 80050c8:	58025408 	.word	0x58025408
 80050cc:	5802541c 	.word	0x5802541c
 80050d0:	58025430 	.word	0x58025430
 80050d4:	58025444 	.word	0x58025444
 80050d8:	58025458 	.word	0x58025458
 80050dc:	5802546c 	.word	0x5802546c
 80050e0:	58025480 	.word	0x58025480
 80050e4:	58025494 	.word	0x58025494
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050f6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005108:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a85      	ldr	r2, [pc, #532]	; (8005324 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d04a      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a83      	ldr	r2, [pc, #524]	; (8005328 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d045      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a82      	ldr	r2, [pc, #520]	; (800532c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d040      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a80      	ldr	r2, [pc, #512]	; (8005330 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d03b      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a7f      	ldr	r2, [pc, #508]	; (8005334 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d036      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a7d      	ldr	r2, [pc, #500]	; (8005338 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d031      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7c      	ldr	r2, [pc, #496]	; (800533c <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d02c      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7a      	ldr	r2, [pc, #488]	; (8005340 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d027      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a79      	ldr	r2, [pc, #484]	; (8005344 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d022      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a77      	ldr	r2, [pc, #476]	; (8005348 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01d      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a76      	ldr	r2, [pc, #472]	; (800534c <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a74      	ldr	r2, [pc, #464]	; (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a73      	ldr	r2, [pc, #460]	; (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a71      	ldr	r2, [pc, #452]	; (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a70      	ldr	r2, [pc, #448]	; (800535c <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6e      	ldr	r2, [pc, #440]	; (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d101      	bne.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d022      	beq.n	80051fa <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 021e 	bic.w	r2, r3, #30
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0216 	orr.w	r2, r2, #22
 80051c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d022      	beq.n	800522e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0208 	orr.w	r2, r2, #8
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e019      	b.n	800522e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f023 020e 	bic.w	r2, r3, #14
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 020a 	orr.w	r2, r2, #10
 800520c:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0204 	orr.w	r2, r2, #4
 800522c:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3c      	ldr	r2, [pc, #240]	; (8005324 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d072      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3a      	ldr	r2, [pc, #232]	; (8005328 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d06d      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a39      	ldr	r2, [pc, #228]	; (800532c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d068      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a37      	ldr	r2, [pc, #220]	; (8005330 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d063      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a36      	ldr	r2, [pc, #216]	; (8005334 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d05e      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a34      	ldr	r2, [pc, #208]	; (8005338 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d059      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a33      	ldr	r2, [pc, #204]	; (800533c <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d054      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d04f      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a30      	ldr	r2, [pc, #192]	; (8005344 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d04a      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2e      	ldr	r2, [pc, #184]	; (8005348 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d045      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a2d      	ldr	r2, [pc, #180]	; (800534c <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d040      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2b      	ldr	r2, [pc, #172]	; (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d03b      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d036      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a28      	ldr	r2, [pc, #160]	; (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d031      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d02c      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d027      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a24      	ldr	r2, [pc, #144]	; (8005364 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d022      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01d      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a21      	ldr	r2, [pc, #132]	; (800536c <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d018      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a19      	ldr	r2, [pc, #100]	; (8005380 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d132      	bne.n	8005384 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 800531e:	2301      	movs	r3, #1
 8005320:	e031      	b.n	8005386 <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8005322:	bf00      	nop
 8005324:	40020010 	.word	0x40020010
 8005328:	40020028 	.word	0x40020028
 800532c:	40020040 	.word	0x40020040
 8005330:	40020058 	.word	0x40020058
 8005334:	40020070 	.word	0x40020070
 8005338:	40020088 	.word	0x40020088
 800533c:	400200a0 	.word	0x400200a0
 8005340:	400200b8 	.word	0x400200b8
 8005344:	40020410 	.word	0x40020410
 8005348:	40020428 	.word	0x40020428
 800534c:	40020440 	.word	0x40020440
 8005350:	40020458 	.word	0x40020458
 8005354:	40020470 	.word	0x40020470
 8005358:	40020488 	.word	0x40020488
 800535c:	400204a0 	.word	0x400204a0
 8005360:	400204b8 	.word	0x400204b8
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	58025430 	.word	0x58025430
 8005370:	58025444 	.word	0x58025444
 8005374:	58025458 	.word	0x58025458
 8005378:	5802546c 	.word	0x5802546c
 800537c:	58025480 	.word	0x58025480
 8005380:	58025494 	.word	0x58025494
 8005384:	2300      	movs	r3, #0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01a      	beq.n	80053c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	; (800549c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d04a      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d045      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d040      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a31      	ldr	r2, [pc, #196]	; (80054a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d03b      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d036      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d031      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d02c      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d027      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a29      	ldr	r2, [pc, #164]	; (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d022      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a28      	ldr	r2, [pc, #160]	; (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01d      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a23      	ldr	r2, [pc, #140]	; (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d108      	bne.n	8005472 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e00e      	b.n	8005490 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e005      	b.n	8005490 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40020010 	.word	0x40020010
 80054a0:	40020028 	.word	0x40020028
 80054a4:	40020040 	.word	0x40020040
 80054a8:	40020058 	.word	0x40020058
 80054ac:	40020070 	.word	0x40020070
 80054b0:	40020088 	.word	0x40020088
 80054b4:	400200a0 	.word	0x400200a0
 80054b8:	400200b8 	.word	0x400200b8
 80054bc:	40020410 	.word	0x40020410
 80054c0:	40020428 	.word	0x40020428
 80054c4:	40020440 	.word	0x40020440
 80054c8:	40020458 	.word	0x40020458
 80054cc:	40020470 	.word	0x40020470
 80054d0:	40020488 	.word	0x40020488
 80054d4:	400204a0 	.word	0x400204a0
 80054d8:	400204b8 	.word	0x400204b8

080054dc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a39      	ldr	r2, [pc, #228]	; (80055d4 <HAL_DMAEx_ChangeMemory+0xf8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d04a      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a37      	ldr	r2, [pc, #220]	; (80055d8 <HAL_DMAEx_ChangeMemory+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d045      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a36      	ldr	r2, [pc, #216]	; (80055dc <HAL_DMAEx_ChangeMemory+0x100>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d040      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <HAL_DMAEx_ChangeMemory+0x104>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d03b      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <HAL_DMAEx_ChangeMemory+0x108>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d036      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a31      	ldr	r2, [pc, #196]	; (80055e8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d031      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a30      	ldr	r2, [pc, #192]	; (80055ec <HAL_DMAEx_ChangeMemory+0x110>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d02c      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2e      	ldr	r2, [pc, #184]	; (80055f0 <HAL_DMAEx_ChangeMemory+0x114>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d027      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <HAL_DMAEx_ChangeMemory+0x118>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d022      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <HAL_DMAEx_ChangeMemory+0x11c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01d      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <HAL_DMAEx_ChangeMemory+0x120>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d018      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a28      	ldr	r2, [pc, #160]	; (8005600 <HAL_DMAEx_ChangeMemory+0x124>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_DMAEx_ChangeMemory+0x128>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00e      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a25      	ldr	r2, [pc, #148]	; (8005608 <HAL_DMAEx_ChangeMemory+0x12c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a24      	ldr	r2, [pc, #144]	; (800560c <HAL_DMAEx_ChangeMemory+0x130>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_DMAEx_ChangeMemory+0xae>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_DMAEx_ChangeMemory+0x134>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d101      	bne.n	800558e <HAL_DMAEx_ChangeMemory+0xb2>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_DMAEx_ChangeMemory+0xb4>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e010      	b.n	80055c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	611a      	str	r2, [r3, #16]
 80055ac:	e00b      	b.n	80055c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e003      	b.n	80055c6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40020010 	.word	0x40020010
 80055d8:	40020028 	.word	0x40020028
 80055dc:	40020040 	.word	0x40020040
 80055e0:	40020058 	.word	0x40020058
 80055e4:	40020070 	.word	0x40020070
 80055e8:	40020088 	.word	0x40020088
 80055ec:	400200a0 	.word	0x400200a0
 80055f0:	400200b8 	.word	0x400200b8
 80055f4:	40020410 	.word	0x40020410
 80055f8:	40020428 	.word	0x40020428
 80055fc:	40020440 	.word	0x40020440
 8005600:	40020458 	.word	0x40020458
 8005604:	40020470 	.word	0x40020470
 8005608:	40020488 	.word	0x40020488
 800560c:	400204a0 	.word	0x400204a0
 8005610:	400204b8 	.word	0x400204b8

08005614 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a46      	ldr	r2, [pc, #280]	; (8005740 <DMA_MultiBufferSetConfig+0x12c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d04a      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a44      	ldr	r2, [pc, #272]	; (8005744 <DMA_MultiBufferSetConfig+0x130>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d045      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a43      	ldr	r2, [pc, #268]	; (8005748 <DMA_MultiBufferSetConfig+0x134>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d040      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a41      	ldr	r2, [pc, #260]	; (800574c <DMA_MultiBufferSetConfig+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d03b      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a40      	ldr	r2, [pc, #256]	; (8005750 <DMA_MultiBufferSetConfig+0x13c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d036      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a3e      	ldr	r2, [pc, #248]	; (8005754 <DMA_MultiBufferSetConfig+0x140>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d031      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3d      	ldr	r2, [pc, #244]	; (8005758 <DMA_MultiBufferSetConfig+0x144>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d02c      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3b      	ldr	r2, [pc, #236]	; (800575c <DMA_MultiBufferSetConfig+0x148>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d027      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <DMA_MultiBufferSetConfig+0x14c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a38      	ldr	r2, [pc, #224]	; (8005764 <DMA_MultiBufferSetConfig+0x150>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01d      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a37      	ldr	r2, [pc, #220]	; (8005768 <DMA_MultiBufferSetConfig+0x154>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a35      	ldr	r2, [pc, #212]	; (800576c <DMA_MultiBufferSetConfig+0x158>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a34      	ldr	r2, [pc, #208]	; (8005770 <DMA_MultiBufferSetConfig+0x15c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a32      	ldr	r2, [pc, #200]	; (8005774 <DMA_MultiBufferSetConfig+0x160>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a31      	ldr	r2, [pc, #196]	; (8005778 <DMA_MultiBufferSetConfig+0x164>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <DMA_MultiBufferSetConfig+0xae>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2f      	ldr	r2, [pc, #188]	; (800577c <DMA_MultiBufferSetConfig+0x168>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d101      	bne.n	80056c6 <DMA_MultiBufferSetConfig+0xb2>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <DMA_MultiBufferSetConfig+0xb4>
 80056c6:	2300      	movs	r3, #0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d019      	beq.n	8005700 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d108      	bne.n	80056ee <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80056ec:	e021      	b.n	8005732 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	60da      	str	r2, [r3, #12]
}
 80056fe:	e018      	b.n	8005732 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d108      	bne.n	8005722 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	60da      	str	r2, [r3, #12]
}
 8005720:	e007      	b.n	8005732 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8

08005780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800578e:	4b89      	ldr	r3, [pc, #548]	; (80059b4 <HAL_GPIO_Init+0x234>)
 8005790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005792:	e194      	b.n	8005abe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2101      	movs	r1, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8186 	beq.w	8005ab8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d00b      	beq.n	80057cc <HAL_GPIO_Init+0x4c>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d007      	beq.n	80057cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057c0:	2b11      	cmp	r3, #17
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b12      	cmp	r3, #18
 80057ca:	d130      	bne.n	800582e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	2203      	movs	r2, #3
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005802:	2201      	movs	r2, #1
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 0201 	and.w	r2, r3, #1
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	2203      	movs	r2, #3
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0xee>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b12      	cmp	r3, #18
 800586c:	d123      	bne.n	80058b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	08da      	lsrs	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3208      	adds	r2, #8
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	220f      	movs	r2, #15
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	08da      	lsrs	r2, r3, #3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3208      	adds	r2, #8
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	2203      	movs	r2, #3
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0203 	and.w	r2, r3, #3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80e0 	beq.w	8005ab8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f8:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <HAL_GPIO_Init+0x238>)
 80058fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fe:	4a2e      	ldr	r2, [pc, #184]	; (80059b8 <HAL_GPIO_Init+0x238>)
 8005900:	f043 0302 	orr.w	r3, r3, #2
 8005904:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_GPIO_Init+0x238>)
 800590a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005916:	4a29      	ldr	r2, [pc, #164]	; (80059bc <HAL_GPIO_Init+0x23c>)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	3302      	adds	r3, #2
 800591e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	220f      	movs	r2, #15
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4013      	ands	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a20      	ldr	r2, [pc, #128]	; (80059c0 <HAL_GPIO_Init+0x240>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d052      	beq.n	80059e8 <HAL_GPIO_Init+0x268>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <HAL_GPIO_Init+0x244>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d031      	beq.n	80059ae <HAL_GPIO_Init+0x22e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1e      	ldr	r2, [pc, #120]	; (80059c8 <HAL_GPIO_Init+0x248>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02b      	beq.n	80059aa <HAL_GPIO_Init+0x22a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <HAL_GPIO_Init+0x24c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d025      	beq.n	80059a6 <HAL_GPIO_Init+0x226>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_GPIO_Init+0x250>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01f      	beq.n	80059a2 <HAL_GPIO_Init+0x222>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <HAL_GPIO_Init+0x254>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d019      	beq.n	800599e <HAL_GPIO_Init+0x21e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <HAL_GPIO_Init+0x258>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_GPIO_Init+0x21a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a19      	ldr	r2, [pc, #100]	; (80059dc <HAL_GPIO_Init+0x25c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00d      	beq.n	8005996 <HAL_GPIO_Init+0x216>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_GPIO_Init+0x260>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <HAL_GPIO_Init+0x212>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_GPIO_Init+0x264>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_GPIO_Init+0x20e>
 800598a:	2309      	movs	r3, #9
 800598c:	e02d      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 800598e:	230a      	movs	r3, #10
 8005990:	e02b      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 8005992:	2308      	movs	r3, #8
 8005994:	e029      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 8005996:	2307      	movs	r3, #7
 8005998:	e027      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 800599a:	2306      	movs	r3, #6
 800599c:	e025      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 800599e:	2305      	movs	r3, #5
 80059a0:	e023      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 80059a2:	2304      	movs	r3, #4
 80059a4:	e021      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 80059a6:	2303      	movs	r3, #3
 80059a8:	e01f      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e01d      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e01b      	b.n	80059ea <HAL_GPIO_Init+0x26a>
 80059b2:	bf00      	nop
 80059b4:	58000080 	.word	0x58000080
 80059b8:	58024400 	.word	0x58024400
 80059bc:	58000400 	.word	0x58000400
 80059c0:	58020000 	.word	0x58020000
 80059c4:	58020400 	.word	0x58020400
 80059c8:	58020800 	.word	0x58020800
 80059cc:	58020c00 	.word	0x58020c00
 80059d0:	58021000 	.word	0x58021000
 80059d4:	58021400 	.word	0x58021400
 80059d8:	58021800 	.word	0x58021800
 80059dc:	58021c00 	.word	0x58021c00
 80059e0:	58022000 	.word	0x58022000
 80059e4:	58022400 	.word	0x58022400
 80059e8:	2300      	movs	r3, #0
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	f002 0203 	and.w	r2, r2, #3
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	4093      	lsls	r3, r2
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059fa:	4938      	ldr	r1, [pc, #224]	; (8005adc <HAL_GPIO_Init+0x35c>)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	3301      	adds	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f47f ae63 	bne.w	8005794 <HAL_GPIO_Init+0x14>
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3724      	adds	r7, #36	; 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	58000400 	.word	0x58000400

08005ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	807b      	strh	r3, [r7, #2]
 8005aec:	4613      	mov	r3, r2
 8005aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005af0:	787b      	ldrb	r3, [r7, #1]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005afc:	e003      	b.n	8005b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	041a      	lsls	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	619a      	str	r2, [r3, #24]
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07f      	b.n	8005c26 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb f838 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2224      	movs	r2, #36	; 0x24
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	e006      	b.n	8005b9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d104      	bne.n	8005bae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6859      	ldr	r1, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <HAL_I2C_Init+0x11c>)
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	ea42 0103 	orr.w	r1, r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	02008000 	.word	0x02008000

08005c34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d138      	bne.n	8005cbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e032      	b.n	8005cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2224      	movs	r2, #36	; 0x24
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d139      	bne.n	8005d54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e033      	b.n	8005d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2224      	movs	r2, #36	; 0x24
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d00a      	beq.n	8005d8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d78:	4b16      	ldr	r3, [pc, #88]	; (8005dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d001      	beq.n	8005d8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e01f      	b.n	8005dca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e01d      	b.n	8005dca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f023 0207 	bic.w	r2, r3, #7
 8005d96:	490f      	ldr	r1, [pc, #60]	; (8005dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d9e:	f7fb fd99 	bl	80018d4 <HAL_GetTick>
 8005da2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005da4:	e009      	b.n	8005dba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005da6:	f7fb fd95 	bl	80018d4 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db4:	d901      	bls.n	8005dba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc6:	d1ee      	bne.n	8005da6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	58024800 	.word	0x58024800

08005dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08c      	sub	sp, #48	; 0x30
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e3ff      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8087 	beq.w	8005f06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005df8:	4b99      	ldr	r3, [pc, #612]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e02:	4b97      	ldr	r3, [pc, #604]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d007      	beq.n	8005e1e <HAL_RCC_OscConfig+0x46>
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	2b18      	cmp	r3, #24
 8005e12:	d110      	bne.n	8005e36 <HAL_RCC_OscConfig+0x5e>
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d10b      	bne.n	8005e36 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e1e:	4b90      	ldr	r3, [pc, #576]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d06c      	beq.n	8005f04 <HAL_RCC_OscConfig+0x12c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d168      	bne.n	8005f04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e3d9      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3e:	d106      	bne.n	8005e4e <HAL_RCC_OscConfig+0x76>
 8005e40:	4b87      	ldr	r3, [pc, #540]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a86      	ldr	r2, [pc, #536]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	e02e      	b.n	8005eac <HAL_RCC_OscConfig+0xd4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x98>
 8005e56:	4b82      	ldr	r3, [pc, #520]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a81      	ldr	r2, [pc, #516]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b7f      	ldr	r3, [pc, #508]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7e      	ldr	r2, [pc, #504]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e01d      	b.n	8005eac <HAL_RCC_OscConfig+0xd4>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e78:	d10c      	bne.n	8005e94 <HAL_RCC_OscConfig+0xbc>
 8005e7a:	4b79      	ldr	r3, [pc, #484]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a78      	ldr	r2, [pc, #480]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4b76      	ldr	r3, [pc, #472]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a75      	ldr	r2, [pc, #468]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	e00b      	b.n	8005eac <HAL_RCC_OscConfig+0xd4>
 8005e94:	4b72      	ldr	r3, [pc, #456]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a71      	ldr	r2, [pc, #452]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	4b6f      	ldr	r3, [pc, #444]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6e      	ldr	r2, [pc, #440]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d013      	beq.n	8005edc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fb fd0e 	bl	80018d4 <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ebc:	f7fb fd0a 	bl	80018d4 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b64      	cmp	r3, #100	; 0x64
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e38d      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ece:	4b64      	ldr	r3, [pc, #400]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0xe4>
 8005eda:	e014      	b.n	8005f06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fb fcfa 	bl	80018d4 <HAL_GetTick>
 8005ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee4:	f7fb fcf6 	bl	80018d4 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	; 0x64
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e379      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ef6:	4b5a      	ldr	r3, [pc, #360]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x10c>
 8005f02:	e000      	b.n	8005f06 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80ae 	beq.w	8006070 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f14:	4b52      	ldr	r3, [pc, #328]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f1e:	4b50      	ldr	r3, [pc, #320]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_RCC_OscConfig+0x162>
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	2b18      	cmp	r3, #24
 8005f2e:	d13a      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x1ce>
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d135      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f3a:	4b49      	ldr	r3, [pc, #292]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCC_OscConfig+0x17a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e34b      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f52:	f7fb fccb 	bl	80018ec <HAL_GetREVID>
 8005f56:	4602      	mov	r2, r0
 8005f58:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d817      	bhi.n	8005f90 <HAL_RCC_OscConfig+0x1b8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d108      	bne.n	8005f7a <HAL_RCC_OscConfig+0x1a2>
 8005f68:	4b3d      	ldr	r3, [pc, #244]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f70:	4a3b      	ldr	r2, [pc, #236]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f76:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f78:	e07a      	b.n	8006070 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	031b      	lsls	r3, r3, #12
 8005f88:	4935      	ldr	r1, [pc, #212]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8e:	e06f      	b.n	8006070 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f90:	4b33      	ldr	r3, [pc, #204]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	4930      	ldr	r1, [pc, #192]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa4:	e064      	b.n	8006070 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d045      	beq.n	800603a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fae:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 0219 	bic.w	r2, r3, #25
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4929      	ldr	r1, [pc, #164]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fb fc88 	bl	80018d4 <HAL_GetTick>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc8:	f7fb fc84 	bl	80018d4 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e307      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fda:	4b21      	ldr	r3, [pc, #132]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	f7fb fc81 	bl	80018ec <HAL_GetREVID>
 8005fea:	4602      	mov	r2, r0
 8005fec:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d817      	bhi.n	8006024 <HAL_RCC_OscConfig+0x24c>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d108      	bne.n	800600e <HAL_RCC_OscConfig+0x236>
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006004:	4a16      	ldr	r2, [pc, #88]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8006006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800600a:	6053      	str	r3, [r2, #4]
 800600c:	e030      	b.n	8006070 <HAL_RCC_OscConfig+0x298>
 800600e:	4b14      	ldr	r3, [pc, #80]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	031b      	lsls	r3, r3, #12
 800601c:	4910      	ldr	r1, [pc, #64]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 800601e:	4313      	orrs	r3, r2
 8006020:	604b      	str	r3, [r1, #4]
 8006022:	e025      	b.n	8006070 <HAL_RCC_OscConfig+0x298>
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	490b      	ldr	r1, [pc, #44]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
 8006038:	e01a      	b.n	8006070 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800603a:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a08      	ldr	r2, [pc, #32]	; (8006060 <HAL_RCC_OscConfig+0x288>)
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006046:	f7fb fc45 	bl	80018d4 <HAL_GetTick>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800604c:	e00a      	b.n	8006064 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800604e:	f7fb fc41 	bl	80018d4 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d903      	bls.n	8006064 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e2c4      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
 8006060:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006064:	4ba4      	ldr	r3, [pc, #656]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ee      	bne.n	800604e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80a9 	beq.w	80061d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800607e:	4b9e      	ldr	r3, [pc, #632]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006086:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006088:	4b9b      	ldr	r3, [pc, #620]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d007      	beq.n	80060a4 <HAL_RCC_OscConfig+0x2cc>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b18      	cmp	r3, #24
 8006098:	d13a      	bne.n	8006110 <HAL_RCC_OscConfig+0x338>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d135      	bne.n	8006110 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060a4:	4b94      	ldr	r3, [pc, #592]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_OscConfig+0x2e4>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	2b80      	cmp	r3, #128	; 0x80
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e296      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060bc:	f7fb fc16 	bl	80018ec <HAL_GetREVID>
 80060c0:	4602      	mov	r2, r0
 80060c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d817      	bhi.n	80060fa <HAL_RCC_OscConfig+0x322>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d108      	bne.n	80060e4 <HAL_RCC_OscConfig+0x30c>
 80060d2:	4b89      	ldr	r3, [pc, #548]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060da:	4a87      	ldr	r2, [pc, #540]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80060dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060e2:	e075      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060e4:	4b84      	ldr	r3, [pc, #528]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	069b      	lsls	r3, r3, #26
 80060f2:	4981      	ldr	r1, [pc, #516]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f8:	e06a      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060fa:	4b7f      	ldr	r3, [pc, #508]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	497b      	ldr	r1, [pc, #492]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800610a:	4313      	orrs	r3, r2
 800610c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800610e:	e05f      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d042      	beq.n	800619e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006118:	4b77      	ldr	r3, [pc, #476]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a76      	ldr	r2, [pc, #472]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fb fbd6 	bl	80018d4 <HAL_GetTick>
 8006128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800612c:	f7fb fbd2 	bl	80018d4 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e255      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800613e:	4b6e      	ldr	r3, [pc, #440]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800614a:	f7fb fbcf 	bl	80018ec <HAL_GetREVID>
 800614e:	4602      	mov	r2, r0
 8006150:	f241 0303 	movw	r3, #4099	; 0x1003
 8006154:	429a      	cmp	r2, r3
 8006156:	d817      	bhi.n	8006188 <HAL_RCC_OscConfig+0x3b0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	2b20      	cmp	r3, #32
 800615e:	d108      	bne.n	8006172 <HAL_RCC_OscConfig+0x39a>
 8006160:	4b65      	ldr	r3, [pc, #404]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006168:	4a63      	ldr	r2, [pc, #396]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800616a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800616e:	6053      	str	r3, [r2, #4]
 8006170:	e02e      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f8>
 8006172:	4b61      	ldr	r3, [pc, #388]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	069b      	lsls	r3, r3, #26
 8006180:	495d      	ldr	r1, [pc, #372]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006182:	4313      	orrs	r3, r2
 8006184:	604b      	str	r3, [r1, #4]
 8006186:	e023      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f8>
 8006188:	4b5b      	ldr	r3, [pc, #364]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	061b      	lsls	r3, r3, #24
 8006196:	4958      	ldr	r1, [pc, #352]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006198:	4313      	orrs	r3, r2
 800619a:	60cb      	str	r3, [r1, #12]
 800619c:	e018      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800619e:	4b56      	ldr	r3, [pc, #344]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a55      	ldr	r2, [pc, #340]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80061a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fb fb93 	bl	80018d4 <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061b2:	f7fb fb8f 	bl	80018d4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e212      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061c4:	4b4c      	ldr	r3, [pc, #304]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d036      	beq.n	800624a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d019      	beq.n	8006218 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e4:	4b44      	ldr	r3, [pc, #272]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80061e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e8:	4a43      	ldr	r2, [pc, #268]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fb fb70 	bl	80018d4 <HAL_GetTick>
 80061f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f8:	f7fb fb6c 	bl	80018d4 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e1ef      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800620a:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x420>
 8006216:	e018      	b.n	800624a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800621a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621c:	4a36      	ldr	r2, [pc, #216]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fb fb56 	bl	80018d4 <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800622c:	f7fb fb52 	bl	80018d4 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e1d5      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d036      	beq.n	80062c4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d019      	beq.n	8006292 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800625e:	4b26      	ldr	r3, [pc, #152]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a25      	ldr	r2, [pc, #148]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006268:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800626a:	f7fb fb33 	bl	80018d4 <HAL_GetTick>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006272:	f7fb fb2f 	bl	80018d4 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e1b2      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x49a>
 8006290:	e018      	b.n	80062c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006292:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 8006298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800629c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800629e:	f7fb fb19 	bl	80018d4 <HAL_GetTick>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062a6:	f7fb fb15 	bl	80018d4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e198      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062b8:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <HAL_RCC_OscConfig+0x520>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8085 	beq.w	80063dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062d2:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <HAL_RCC_OscConfig+0x524>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <HAL_RCC_OscConfig+0x524>)
 80062d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062de:	f7fb faf9 	bl	80018d4 <HAL_GetTick>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062e4:	e00c      	b.n	8006300 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062e6:	f7fb faf5 	bl	80018d4 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b64      	cmp	r3, #100	; 0x64
 80062f2:	d905      	bls.n	8006300 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e178      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
 80062f8:	58024400 	.word	0x58024400
 80062fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006300:	4b96      	ldr	r3, [pc, #600]	; (800655c <HAL_RCC_OscConfig+0x784>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ec      	beq.n	80062e6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d106      	bne.n	8006322 <HAL_RCC_OscConfig+0x54a>
 8006314:	4b92      	ldr	r3, [pc, #584]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	4a91      	ldr	r2, [pc, #580]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	6713      	str	r3, [r2, #112]	; 0x70
 8006320:	e02d      	b.n	800637e <HAL_RCC_OscConfig+0x5a6>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0x56c>
 800632a:	4b8d      	ldr	r3, [pc, #564]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632e:	4a8c      	ldr	r2, [pc, #560]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	6713      	str	r3, [r2, #112]	; 0x70
 8006336:	4b8a      	ldr	r3, [pc, #552]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	4a89      	ldr	r2, [pc, #548]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800633c:	f023 0304 	bic.w	r3, r3, #4
 8006340:	6713      	str	r3, [r2, #112]	; 0x70
 8006342:	e01c      	b.n	800637e <HAL_RCC_OscConfig+0x5a6>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b05      	cmp	r3, #5
 800634a:	d10c      	bne.n	8006366 <HAL_RCC_OscConfig+0x58e>
 800634c:	4b84      	ldr	r3, [pc, #528]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	4a83      	ldr	r2, [pc, #524]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006352:	f043 0304 	orr.w	r3, r3, #4
 8006356:	6713      	str	r3, [r2, #112]	; 0x70
 8006358:	4b81      	ldr	r3, [pc, #516]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	4a80      	ldr	r2, [pc, #512]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	6713      	str	r3, [r2, #112]	; 0x70
 8006364:	e00b      	b.n	800637e <HAL_RCC_OscConfig+0x5a6>
 8006366:	4b7e      	ldr	r3, [pc, #504]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4a7d      	ldr	r2, [pc, #500]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	6713      	str	r3, [r2, #112]	; 0x70
 8006372:	4b7b      	ldr	r3, [pc, #492]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	4a7a      	ldr	r2, [pc, #488]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006378:	f023 0304 	bic.w	r3, r3, #4
 800637c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d015      	beq.n	80063b2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006386:	f7fb faa5 	bl	80018d4 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fb faa1 	bl	80018d4 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f241 3288 	movw	r2, #5000	; 0x1388
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e122      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063a4:	4b6e      	ldr	r3, [pc, #440]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ee      	beq.n	800638e <HAL_RCC_OscConfig+0x5b6>
 80063b0:	e014      	b.n	80063dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fb fa8f 	bl	80018d4 <HAL_GetTick>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ba:	f7fb fa8b 	bl	80018d4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e10c      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063d0:	4b63      	ldr	r3, [pc, #396]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ee      	bne.n	80063ba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8101 	beq.w	80065e8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063e6:	4b5e      	ldr	r3, [pc, #376]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ee:	2b18      	cmp	r3, #24
 80063f0:	f000 80bc 	beq.w	800656c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	f040 8095 	bne.w	8006528 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b58      	ldr	r3, [pc, #352]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a57      	ldr	r2, [pc, #348]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640a:	f7fb fa63 	bl	80018d4 <HAL_GetTick>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006412:	f7fb fa5f 	bl	80018d4 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e0e2      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006424:	4b4e      	ldr	r3, [pc, #312]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f0      	bne.n	8006412 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006430:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006434:	4b4b      	ldr	r3, [pc, #300]	; (8006564 <HAL_RCC_OscConfig+0x78c>)
 8006436:	4013      	ands	r3, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006440:	0112      	lsls	r2, r2, #4
 8006442:	430a      	orrs	r2, r1
 8006444:	4946      	ldr	r1, [pc, #280]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006446:	4313      	orrs	r3, r2
 8006448:	628b      	str	r3, [r1, #40]	; 0x28
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	3b01      	subs	r3, #1
 8006450:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	3b01      	subs	r3, #1
 800645a:	025b      	lsls	r3, r3, #9
 800645c:	b29b      	uxth	r3, r3
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	3b01      	subs	r3, #1
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	3b01      	subs	r3, #1
 8006474:	061b      	lsls	r3, r3, #24
 8006476:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800647a:	4939      	ldr	r1, [pc, #228]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800647c:	4313      	orrs	r3, r2
 800647e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006480:	4b37      	ldr	r3, [pc, #220]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a36      	ldr	r2, [pc, #216]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800648c:	4b34      	ldr	r3, [pc, #208]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006490:	4b35      	ldr	r3, [pc, #212]	; (8006568 <HAL_RCC_OscConfig+0x790>)
 8006492:	4013      	ands	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006498:	00d2      	lsls	r2, r2, #3
 800649a:	4931      	ldr	r1, [pc, #196]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800649c:	4313      	orrs	r3, r2
 800649e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064a0:	4b2f      	ldr	r3, [pc, #188]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	f023 020c 	bic.w	r2, r3, #12
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	492c      	ldr	r1, [pc, #176]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064b2:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	f023 0202 	bic.w	r2, r3, #2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064be:	4928      	ldr	r1, [pc, #160]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064c4:	4b26      	ldr	r3, [pc, #152]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	4a25      	ldr	r2, [pc, #148]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d0:	4b23      	ldr	r3, [pc, #140]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	4a22      	ldr	r2, [pc, #136]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064dc:	4b20      	ldr	r3, [pc, #128]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064f4:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 80064fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fb f9e8 	bl	80018d4 <HAL_GetTick>
 8006504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006508:	f7fb f9e4 	bl	80018d4 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e067      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800651a:	4b11      	ldr	r3, [pc, #68]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x730>
 8006526:	e05f      	b.n	80065e8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006528:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fb f9ce 	bl	80018d4 <HAL_GetTick>
 8006538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800653c:	f7fb f9ca 	bl	80018d4 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e04d      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800654e:	4b04      	ldr	r3, [pc, #16]	; (8006560 <HAL_RCC_OscConfig+0x788>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x764>
 800655a:	e045      	b.n	80065e8 <HAL_RCC_OscConfig+0x810>
 800655c:	58024800 	.word	0x58024800
 8006560:	58024400 	.word	0x58024400
 8006564:	fffffc0c 	.word	0xfffffc0c
 8006568:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800656c:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <HAL_RCC_OscConfig+0x81c>)
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006572:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <HAL_RCC_OscConfig+0x81c>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b01      	cmp	r3, #1
 800657e:	d031      	beq.n	80065e4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f003 0203 	and.w	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800658a:	429a      	cmp	r2, r3
 800658c:	d12a      	bne.n	80065e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d122      	bne.n	80065e4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d11a      	bne.n	80065e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	0a5b      	lsrs	r3, r3, #9
 80065b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d111      	bne.n	80065e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d108      	bne.n	80065e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3730      	adds	r7, #48	; 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	58024400 	.word	0x58024400

080065f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e19c      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800660c:	4b8a      	ldr	r3, [pc, #552]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d910      	bls.n	800663c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800661a:	4b87      	ldr	r3, [pc, #540]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f023 020f 	bic.w	r2, r3, #15
 8006622:	4985      	ldr	r1, [pc, #532]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	4313      	orrs	r3, r2
 8006628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800662a:	4b83      	ldr	r3, [pc, #524]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d001      	beq.n	800663c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e184      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	4b7b      	ldr	r3, [pc, #492]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006654:	429a      	cmp	r2, r3
 8006656:	d908      	bls.n	800666a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006658:	4b78      	ldr	r3, [pc, #480]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	4975      	ldr	r1, [pc, #468]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006666:	4313      	orrs	r3, r2
 8006668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d010      	beq.n	8006698 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	4b70      	ldr	r3, [pc, #448]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006682:	429a      	cmp	r2, r3
 8006684:	d908      	bls.n	8006698 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006686:	4b6d      	ldr	r3, [pc, #436]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	496a      	ldr	r1, [pc, #424]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006694:	4313      	orrs	r3, r2
 8006696:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d010      	beq.n	80066c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	4b64      	ldr	r3, [pc, #400]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d908      	bls.n	80066c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066b4:	4b61      	ldr	r3, [pc, #388]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	495e      	ldr	r1, [pc, #376]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d010      	beq.n	80066f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	4b59      	ldr	r3, [pc, #356]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066de:	429a      	cmp	r2, r3
 80066e0:	d908      	bls.n	80066f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066e2:	4b56      	ldr	r3, [pc, #344]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	4953      	ldr	r1, [pc, #332]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d010      	beq.n	8006722 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	4b4d      	ldr	r3, [pc, #308]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	429a      	cmp	r2, r3
 800670e:	d908      	bls.n	8006722 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006710:	4b4a      	ldr	r3, [pc, #296]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f023 020f 	bic.w	r2, r3, #15
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4947      	ldr	r1, [pc, #284]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800671e:	4313      	orrs	r3, r2
 8006720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d055      	beq.n	80067da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800672e:	4b43      	ldr	r3, [pc, #268]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4940      	ldr	r1, [pc, #256]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800673c:	4313      	orrs	r3, r2
 800673e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d107      	bne.n	8006758 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006748:	4b3c      	ldr	r3, [pc, #240]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d121      	bne.n	8006798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0f6      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d107      	bne.n	8006770 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006760:	4b36      	ldr	r3, [pc, #216]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d115      	bne.n	8006798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0ea      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d107      	bne.n	8006788 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006778:	4b30      	ldr	r3, [pc, #192]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0de      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006788:	4b2c      	ldr	r3, [pc, #176]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0d6      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006798:	4b28      	ldr	r3, [pc, #160]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f023 0207 	bic.w	r2, r3, #7
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4925      	ldr	r1, [pc, #148]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fb f893 	bl	80018d4 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b0:	e00a      	b.n	80067c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b2:	f7fb f88f 	bl	80018d4 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e0be      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c8:	4b1c      	ldr	r3, [pc, #112]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d1eb      	bne.n	80067b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d208      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f023 020f 	bic.w	r2, r3, #15
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	490e      	ldr	r1, [pc, #56]	; (800683c <HAL_RCC_ClockConfig+0x244>)
 8006804:	4313      	orrs	r3, r2
 8006806:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d214      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 020f 	bic.w	r2, r3, #15
 800681e:	4906      	ldr	r1, [pc, #24]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4313      	orrs	r3, r2
 8006824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b04      	ldr	r3, [pc, #16]	; (8006838 <HAL_RCC_ClockConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d005      	beq.n	8006840 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e086      	b.n	8006946 <HAL_RCC_ClockConfig+0x34e>
 8006838:	52002000 	.word	0x52002000
 800683c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	4b3f      	ldr	r3, [pc, #252]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006858:	429a      	cmp	r2, r3
 800685a:	d208      	bcs.n	800686e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800685c:	4b3c      	ldr	r3, [pc, #240]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	4939      	ldr	r1, [pc, #228]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 800686a:	4313      	orrs	r3, r2
 800686c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	4b34      	ldr	r3, [pc, #208]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006886:	429a      	cmp	r2, r3
 8006888:	d208      	bcs.n	800689c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800688a:	4b31      	ldr	r3, [pc, #196]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	492e      	ldr	r1, [pc, #184]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 8006898:	4313      	orrs	r3, r2
 800689a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d010      	beq.n	80068ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	4b28      	ldr	r3, [pc, #160]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d208      	bcs.n	80068ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	4922      	ldr	r1, [pc, #136]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d010      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d208      	bcs.n	80068f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	4917      	ldr	r1, [pc, #92]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068f8:	f000 f89e 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 80068fc:	4601      	mov	r1, r0
 80068fe:	4b14      	ldr	r3, [pc, #80]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	4a12      	ldr	r2, [pc, #72]	; (8006954 <HAL_RCC_ClockConfig+0x35c>)
 800690a:	5cd3      	ldrb	r3, [r2, r3]
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	fa21 f303 	lsr.w	r3, r1, r3
 8006914:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <HAL_RCC_ClockConfig+0x358>)
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <HAL_RCC_ClockConfig+0x35c>)
 8006920:	5cd3      	ldrb	r3, [r2, r3]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
 800692c:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x360>)
 800692e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <HAL_RCC_ClockConfig+0x364>)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <HAL_RCC_ClockConfig+0x368>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fa ff80 	bl	8001840 <HAL_InitTick>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	58024400 	.word	0x58024400
 8006954:	0800be54 	.word	0x0800be54
 8006958:	24000004 	.word	0x24000004
 800695c:	24000000 	.word	0x24000000
 8006960:	24000008 	.word	0x24000008

08006964 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08c      	sub	sp, #48	; 0x30
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d12a      	bne.n	80069cc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006976:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 8006978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800697c:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006986:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 8006988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699a:	2302      	movs	r3, #2
 800699c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800699e:	2303      	movs	r3, #3
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80069a6:	2300      	movs	r3, #0
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80069aa:	f107 031c 	add.w	r3, r7, #28
 80069ae:	4619      	mov	r1, r3
 80069b0:	481f      	ldr	r0, [pc, #124]	; (8006a30 <HAL_RCC_MCOConfig+0xcc>)
 80069b2:	f7fe fee5 	bl	8005780 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	430b      	orrs	r3, r1
 80069c4:	4919      	ldr	r1, [pc, #100]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80069ca:	e02a      	b.n	8006a22 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80069cc:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 80069ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 80069d4:	f043 0304 	orr.w	r3, r3, #4
 80069d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069dc:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 80069de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80069ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f0:	2302      	movs	r3, #2
 80069f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f4:	2303      	movs	r3, #3
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006a00:	f107 031c 	add.w	r3, r7, #28
 8006a04:	4619      	mov	r1, r3
 8006a06:	480b      	ldr	r0, [pc, #44]	; (8006a34 <HAL_RCC_MCOConfig+0xd0>)
 8006a08:	f7fe feba 	bl	8005780 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006a0c:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	01d9      	lsls	r1, r3, #7
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	4903      	ldr	r1, [pc, #12]	; (8006a2c <HAL_RCC_MCOConfig+0xc8>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	610b      	str	r3, [r1, #16]
}
 8006a22:	bf00      	nop
 8006a24:	3730      	adds	r7, #48	; 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	58020000 	.word	0x58020000
 8006a34:	58020800 	.word	0x58020800

08006a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b089      	sub	sp, #36	; 0x24
 8006a3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a3e:	4baf      	ldr	r3, [pc, #700]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a46:	2b18      	cmp	r3, #24
 8006a48:	f200 814e 	bhi.w	8006ce8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006ab9 	.word	0x08006ab9
 8006a58:	08006ce9 	.word	0x08006ce9
 8006a5c:	08006ce9 	.word	0x08006ce9
 8006a60:	08006ce9 	.word	0x08006ce9
 8006a64:	08006ce9 	.word	0x08006ce9
 8006a68:	08006ce9 	.word	0x08006ce9
 8006a6c:	08006ce9 	.word	0x08006ce9
 8006a70:	08006ce9 	.word	0x08006ce9
 8006a74:	08006adf 	.word	0x08006adf
 8006a78:	08006ce9 	.word	0x08006ce9
 8006a7c:	08006ce9 	.word	0x08006ce9
 8006a80:	08006ce9 	.word	0x08006ce9
 8006a84:	08006ce9 	.word	0x08006ce9
 8006a88:	08006ce9 	.word	0x08006ce9
 8006a8c:	08006ce9 	.word	0x08006ce9
 8006a90:	08006ce9 	.word	0x08006ce9
 8006a94:	08006ae5 	.word	0x08006ae5
 8006a98:	08006ce9 	.word	0x08006ce9
 8006a9c:	08006ce9 	.word	0x08006ce9
 8006aa0:	08006ce9 	.word	0x08006ce9
 8006aa4:	08006ce9 	.word	0x08006ce9
 8006aa8:	08006ce9 	.word	0x08006ce9
 8006aac:	08006ce9 	.word	0x08006ce9
 8006ab0:	08006ce9 	.word	0x08006ce9
 8006ab4:	08006aeb 	.word	0x08006aeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab8:	4b90      	ldr	r3, [pc, #576]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ac4:	4b8d      	ldr	r3, [pc, #564]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	08db      	lsrs	r3, r3, #3
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	4a8c      	ldr	r2, [pc, #560]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006ad6:	e10a      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ad8:	4b89      	ldr	r3, [pc, #548]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ada:	61bb      	str	r3, [r7, #24]
    break;
 8006adc:	e107      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006ade:	4b89      	ldr	r3, [pc, #548]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006ae0:	61bb      	str	r3, [r7, #24]
    break;
 8006ae2:	e104      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006ae4:	4b88      	ldr	r3, [pc, #544]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006ae6:	61bb      	str	r3, [r7, #24]
    break;
 8006ae8:	e101      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aea:	4b84      	ldr	r3, [pc, #528]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006af4:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b00:	4b7e      	ldr	r3, [pc, #504]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b0a:	4b7c      	ldr	r3, [pc, #496]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	08db      	lsrs	r3, r3, #3
 8006b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80da 	beq.w	8006ce2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d05a      	beq.n	8006bea <HAL_RCC_GetSysClockFreq+0x1b2>
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d302      	bcc.n	8006b3e <HAL_RCC_GetSysClockFreq+0x106>
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d078      	beq.n	8006c2e <HAL_RCC_GetSysClockFreq+0x1f6>
 8006b3c:	e099      	b.n	8006c72 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3e:	4b6f      	ldr	r3, [pc, #444]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d02d      	beq.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b4a:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	08db      	lsrs	r3, r3, #3
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	4a6a      	ldr	r2, [pc, #424]	; (8006d00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b74:	4b61      	ldr	r3, [pc, #388]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b84:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b88:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ba4:	e087      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006d10 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb8:	4b50      	ldr	r3, [pc, #320]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bcc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be8:	e065      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfc:	4b3f      	ldr	r3, [pc, #252]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c10:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c2c:	e043      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c38:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006d18 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c40:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c50:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c54:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c70:	e021      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	ee07 3a90 	vmov	s15, r3
 8006c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c98:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006d0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	0a5b      	lsrs	r3, r3, #9
 8006cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cda:	ee17 3a90 	vmov	r3, s15
 8006cde:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006ce0:	e005      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
    break;
 8006ce6:	e002      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006cea:	61bb      	str	r3, [r7, #24]
    break;
 8006cec:	bf00      	nop
  }

  return sysclockfreq;
 8006cee:	69bb      	ldr	r3, [r7, #24]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3724      	adds	r7, #36	; 0x24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	003d0900 	.word	0x003d0900
 8006d08:	01e84800 	.word	0x01e84800
 8006d0c:	46000000 	.word	0x46000000
 8006d10:	4c742400 	.word	0x4c742400
 8006d14:	4a742400 	.word	0x4a742400
 8006d18:	4bf42400 	.word	0x4bf42400

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d22:	f7ff fe89 	bl	8006a38 <HAL_RCC_GetSysClockFreq>
 8006d26:	4601      	mov	r1, r0
 8006d28:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	4a0f      	ldr	r2, [pc, #60]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d34:	5cd3      	ldrb	r3, [r2, r3]
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8006d3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d4a:	5cd3      	ldrb	r3, [r2, r3]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d5a:	4a07      	ldr	r2, [pc, #28]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	0800be54 	.word	0x0800be54
 8006d74:	24000004 	.word	0x24000004
 8006d78:	24000000 	.word	0x24000000

08006d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d80:	f7ff ffcc 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d84:	4601      	mov	r1, r0
 8006d86:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	4a04      	ldr	r2, [pc, #16]	; (8006da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d92:	5cd3      	ldrb	r3, [r2, r3]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	58024400 	.word	0x58024400
 8006da4:	0800be54 	.word	0x0800be54

08006da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006dac:	f7ff ffb6 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006db0:	4601      	mov	r1, r0
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	4a04      	ldr	r2, [pc, #16]	; (8006dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dbe:	5cd3      	ldrb	r3, [r2, r3]
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	0800be54 	.word	0x0800be54

08006dd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006de0:	2300      	movs	r3, #0
 8006de2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d03d      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df8:	d013      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfe:	d802      	bhi.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006e04:	e01f      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e0a:	d013      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e10:	d01c      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e12:	e018      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e14:	4baf      	ldr	r3, [pc, #700]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	4aae      	ldr	r2, [pc, #696]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e20:	e015      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2102      	movs	r1, #2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f96f 	bl	800810c <RCCEx_PLL2_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e32:	e00c      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3324      	adds	r3, #36	; 0x24
 8006e38:	2102      	movs	r1, #2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 fa18 	bl	8008270 <RCCEx_PLL3_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e44:	e003      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4a:	e000      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e54:	4b9f      	ldr	r3, [pc, #636]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e60:	499c      	ldr	r1, [pc, #624]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	650b      	str	r3, [r1, #80]	; 0x50
 8006e66:	e001      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d03d      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d826      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006e9d 	.word	0x08006e9d
 8006e8c:	08006eab 	.word	0x08006eab
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9c:	4b8d      	ldr	r3, [pc, #564]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a8c      	ldr	r2, [pc, #560]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ea8:	e015      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 f92b 	bl	800810c <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eba:	e00c      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3324      	adds	r3, #36	; 0x24
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f9d4 	bl	8008270 <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006edc:	4b7d      	ldr	r3, [pc, #500]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	f023 0207 	bic.w	r2, r3, #7
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee8:	497a      	ldr	r1, [pc, #488]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	650b      	str	r3, [r1, #80]	; 0x50
 8006eee:	e001      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d03e      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d01c      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d804      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d00d      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f14:	e01e      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006f16:	2bc0      	cmp	r3, #192	; 0xc0
 8006f18:	d01f      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1e:	d01e      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f20:	e018      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f22:	4b6c      	ldr	r3, [pc, #432]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a6b      	ldr	r2, [pc, #428]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f2e:	e017      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f8e8 	bl	800810c <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f40:	e00e      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 f991 	bl	8008270 <RCCEx_PLL3_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f52:	e005      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	e002      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f66:	4b5b      	ldr	r3, [pc, #364]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	4958      	ldr	r1, [pc, #352]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	650b      	str	r3, [r1, #80]	; 0x50
 8006f78:	e001      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d044      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f94:	d01f      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9a:	d805      	bhi.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fa4:	d00e      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006fa6:	e01f      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006fa8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fac:	d01f      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fb2:	d01e      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006fb4:	e018      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb6:	4b47      	ldr	r3, [pc, #284]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	4a46      	ldr	r2, [pc, #280]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc2:	e017      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 f89e 	bl	800810c <RCCEx_PLL2_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006fd4:	e00e      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3324      	adds	r3, #36	; 0x24
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f947 	bl	8008270 <RCCEx_PLL3_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fe6:	e005      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
      break;
 8006fec:	e002      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006fee:	bf00      	nop
 8006ff0:	e000      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ffa:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007008:	4932      	ldr	r1, [pc, #200]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800700a:	4313      	orrs	r3, r2
 800700c:	658b      	str	r3, [r1, #88]	; 0x58
 800700e:	e001      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701c:	2b00      	cmp	r3, #0
 800701e:	d044      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800702a:	d01f      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800702c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007030:	d805      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800703a:	d00e      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800703c:	e01f      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800703e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007042:	d01f      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007048:	d01e      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800704a:	e018      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704c:	4b21      	ldr	r3, [pc, #132]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	4a20      	ldr	r2, [pc, #128]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007058:	e017      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3304      	adds	r3, #4
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f853 	bl	800810c <RCCEx_PLL2_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800706a:	e00e      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f001 f8fc 	bl	8008270 <RCCEx_PLL3_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800707c:	e005      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      break;
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007090:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007094:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800709e:	490d      	ldr	r1, [pc, #52]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	658b      	str	r3, [r1, #88]	; 0x58
 80070a4:	e001      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d035      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d00c      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d802      	bhi.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01b      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80070c6:	e017      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d00c      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80070cc:	2b30      	cmp	r3, #48	; 0x30
 80070ce:	d018      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80070d0:	e012      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80070d2:	bf00      	nop
 80070d4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d8:	4baf      	ldr	r3, [pc, #700]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	4aae      	ldr	r2, [pc, #696]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070e4:	e00e      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2102      	movs	r1, #2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 f80d 	bl	800810c <RCCEx_PLL2_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070f6:	e005      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	75fb      	strb	r3, [r7, #23]
      break;
 80070fc:	e002      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800710a:	4ba3      	ldr	r3, [pc, #652]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800710c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007116:	49a0      	ldr	r1, [pc, #640]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007118:	4313      	orrs	r3, r2
 800711a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800711c:	e001      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d042      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007136:	d01f      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713c:	d805      	bhi.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007146:	d00e      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007148:	e01f      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800714a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800714e:	d01f      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007154:	d01e      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007156:	e018      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007158:	4b8f      	ldr	r3, [pc, #572]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4a8e      	ldr	r2, [pc, #568]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800715e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007164:	e017      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f000 ffcd 	bl	800810c <RCCEx_PLL2_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007176:	e00e      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3324      	adds	r3, #36	; 0x24
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f001 f876 	bl	8008270 <RCCEx_PLL3_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007188:	e005      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
      break;
 800718e:	e002      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800719c:	4b7e      	ldr	r3, [pc, #504]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800719e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a8:	497b      	ldr	r1, [pc, #492]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	650b      	str	r3, [r1, #80]	; 0x50
 80071ae:	e001      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d042      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c8:	d01b      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80071ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ce:	d805      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d022      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d8:	d00a      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80071da:	e01b      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80071dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071e0:	d01d      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80071e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e6:	d01c      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80071e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ec:	d01b      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80071ee:	e011      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	2101      	movs	r1, #1
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 ff88 	bl	800810c <RCCEx_PLL2_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007200:	e012      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3324      	adds	r3, #36	; 0x24
 8007206:	2101      	movs	r1, #1
 8007208:	4618      	mov	r0, r3
 800720a:	f001 f831 	bl	8008270 <RCCEx_PLL3_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007212:	e009      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	75fb      	strb	r3, [r7, #23]
      break;
 8007218:	e006      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800721a:	bf00      	nop
 800721c:	e004      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800721e:	bf00      	nop
 8007220:	e002      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800722e:	4b5a      	ldr	r3, [pc, #360]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007232:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723a:	4957      	ldr	r1, [pc, #348]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	650b      	str	r3, [r1, #80]	; 0x50
 8007240:	e001      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d044      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725c:	d01b      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800725e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007262:	d805      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d022      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726c:	d00a      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800726e:	e01b      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d01d      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800727a:	d01c      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800727c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007280:	d01b      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007282:	e011      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3304      	adds	r3, #4
 8007288:	2101      	movs	r1, #1
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ff3e 	bl	800810c <RCCEx_PLL2_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007294:	e012      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3324      	adds	r3, #36	; 0x24
 800729a:	2101      	movs	r1, #1
 800729c:	4618      	mov	r0, r3
 800729e:	f000 ffe7 	bl	8008270 <RCCEx_PLL3_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072a6:	e009      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	75fb      	strb	r3, [r7, #23]
      break;
 80072ac:	e006      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072ae:	bf00      	nop
 80072b0:	e004      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072b2:	bf00      	nop
 80072b4:	e002      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072b6:	bf00      	nop
 80072b8:	e000      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80072ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80072c2:	4b35      	ldr	r3, [pc, #212]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072d0:	4931      	ldr	r1, [pc, #196]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	658b      	str	r3, [r1, #88]	; 0x58
 80072d6:	e001      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02d      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072f0:	d005      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80072f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f6:	d009      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x538>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d013      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80072fc:	e00f      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072fe:	4b26      	ldr	r3, [pc, #152]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	4a25      	ldr	r2, [pc, #148]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007308:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800730a:	e00c      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	2101      	movs	r1, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fefa 	bl	800810c <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800731c:	e003      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
      break;
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800732c:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800732e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007330:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007338:	4917      	ldr	r1, [pc, #92]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800733a:	4313      	orrs	r3, r2
 800733c:	650b      	str	r3, [r1, #80]	; 0x50
 800733e:	e001      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d035      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	2b03      	cmp	r3, #3
 8007356:	d81b      	bhi.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	0800739d 	.word	0x0800739d
 8007364:	08007371 	.word	0x08007371
 8007368:	0800737f 	.word	0x0800737f
 800736c:	0800739d 	.word	0x0800739d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007370:	4b09      	ldr	r3, [pc, #36]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	4a08      	ldr	r2, [pc, #32]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800737c:	e00f      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3304      	adds	r3, #4
 8007382:	2102      	movs	r1, #2
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fec1 	bl	800810c <RCCEx_PLL2_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800738e:	e006      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
      break;
 8007394:	e003      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007396:	bf00      	nop
 8007398:	58024400 	.word	0x58024400
      break;
 800739c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073a4:	4bba      	ldr	r3, [pc, #744]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a8:	f023 0203 	bic.w	r2, r3, #3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	49b7      	ldr	r1, [pc, #732]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b6:	e001      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8086 	beq.w	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ca:	4bb2      	ldr	r3, [pc, #712]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4ab1      	ldr	r2, [pc, #708]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80073d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073d6:	f7fa fa7d 	bl	80018d4 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073dc:	e009      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073de:	f7fa fa79 	bl	80018d4 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b64      	cmp	r3, #100	; 0x64
 80073ea:	d902      	bls.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	75fb      	strb	r3, [r7, #23]
        break;
 80073f0:	e005      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073f2:	4ba8      	ldr	r3, [pc, #672]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0ef      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d166      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007404:	4ba2      	ldr	r3, [pc, #648]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800740e:	4053      	eors	r3, r2
 8007410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007414:	2b00      	cmp	r3, #0
 8007416:	d013      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007418:	4b9d      	ldr	r3, [pc, #628]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007420:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007422:	4b9b      	ldr	r3, [pc, #620]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	4a9a      	ldr	r2, [pc, #616]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800742c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800742e:	4b98      	ldr	r3, [pc, #608]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007432:	4a97      	ldr	r2, [pc, #604]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007438:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800743a:	4a95      	ldr	r2, [pc, #596]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744a:	d115      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fa fa42 	bl	80018d4 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007452:	e00b      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007454:	f7fa fa3e 	bl	80018d4 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007462:	4293      	cmp	r3, r2
 8007464:	d902      	bls.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	75fb      	strb	r3, [r7, #23]
            break;
 800746a:	e005      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800746c:	4b88      	ldr	r3, [pc, #544]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0ed      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d126      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748c:	d10d      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800748e:	4b80      	ldr	r3, [pc, #512]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800749c:	0919      	lsrs	r1, r3, #4
 800749e:	4b7e      	ldr	r3, [pc, #504]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80074a0:	400b      	ands	r3, r1
 80074a2:	497b      	ldr	r1, [pc, #492]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	610b      	str	r3, [r1, #16]
 80074a8:	e005      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80074aa:	4b79      	ldr	r3, [pc, #484]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	4a78      	ldr	r2, [pc, #480]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074b4:	6113      	str	r3, [r2, #16]
 80074b6:	4b76      	ldr	r3, [pc, #472]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c4:	4972      	ldr	r1, [pc, #456]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	670b      	str	r3, [r1, #112]	; 0x70
 80074ca:	e004      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	75bb      	strb	r3, [r7, #22]
 80074d0:	e001      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d07d      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074e6:	2b28      	cmp	r3, #40	; 0x28
 80074e8:	d866      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	080075bf 	.word	0x080075bf
 80074f4:	080075b9 	.word	0x080075b9
 80074f8:	080075b9 	.word	0x080075b9
 80074fc:	080075b9 	.word	0x080075b9
 8007500:	080075b9 	.word	0x080075b9
 8007504:	080075b9 	.word	0x080075b9
 8007508:	080075b9 	.word	0x080075b9
 800750c:	080075b9 	.word	0x080075b9
 8007510:	08007595 	.word	0x08007595
 8007514:	080075b9 	.word	0x080075b9
 8007518:	080075b9 	.word	0x080075b9
 800751c:	080075b9 	.word	0x080075b9
 8007520:	080075b9 	.word	0x080075b9
 8007524:	080075b9 	.word	0x080075b9
 8007528:	080075b9 	.word	0x080075b9
 800752c:	080075b9 	.word	0x080075b9
 8007530:	080075a7 	.word	0x080075a7
 8007534:	080075b9 	.word	0x080075b9
 8007538:	080075b9 	.word	0x080075b9
 800753c:	080075b9 	.word	0x080075b9
 8007540:	080075b9 	.word	0x080075b9
 8007544:	080075b9 	.word	0x080075b9
 8007548:	080075b9 	.word	0x080075b9
 800754c:	080075b9 	.word	0x080075b9
 8007550:	080075bf 	.word	0x080075bf
 8007554:	080075b9 	.word	0x080075b9
 8007558:	080075b9 	.word	0x080075b9
 800755c:	080075b9 	.word	0x080075b9
 8007560:	080075b9 	.word	0x080075b9
 8007564:	080075b9 	.word	0x080075b9
 8007568:	080075b9 	.word	0x080075b9
 800756c:	080075b9 	.word	0x080075b9
 8007570:	080075bf 	.word	0x080075bf
 8007574:	080075b9 	.word	0x080075b9
 8007578:	080075b9 	.word	0x080075b9
 800757c:	080075b9 	.word	0x080075b9
 8007580:	080075b9 	.word	0x080075b9
 8007584:	080075b9 	.word	0x080075b9
 8007588:	080075b9 	.word	0x080075b9
 800758c:	080075b9 	.word	0x080075b9
 8007590:	080075bf 	.word	0x080075bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	2101      	movs	r1, #1
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fdb6 	bl	800810c <RCCEx_PLL2_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075a4:	e00c      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3324      	adds	r3, #36	; 0x24
 80075aa:	2101      	movs	r1, #1
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fe5f 	bl	8008270 <RCCEx_PLL3_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075b6:	e003      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
      break;
 80075bc:	e000      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80075be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075c6:	4b32      	ldr	r3, [pc, #200]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d2:	492f      	ldr	r1, [pc, #188]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	654b      	str	r3, [r1, #84]	; 0x54
 80075d8:	e001      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d037      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d820      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	0800763b 	.word	0x0800763b
 80075fc:	08007611 	.word	0x08007611
 8007600:	08007623 	.word	0x08007623
 8007604:	0800763b 	.word	0x0800763b
 8007608:	0800763b 	.word	0x0800763b
 800760c:	0800763b 	.word	0x0800763b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3304      	adds	r3, #4
 8007614:	2101      	movs	r1, #1
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fd78 	bl	800810c <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007620:	e00c      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3324      	adds	r3, #36	; 0x24
 8007626:	2101      	movs	r1, #1
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fe21 	bl	8008270 <RCCEx_PLL3_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007632:	e003      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
      break;
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800763a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007642:	4b13      	ldr	r3, [pc, #76]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	f023 0207 	bic.w	r2, r3, #7
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764e:	4910      	ldr	r1, [pc, #64]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007650:	4313      	orrs	r3, r2
 8007652:	654b      	str	r3, [r1, #84]	; 0x54
 8007654:	e001      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d040      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766c:	2b05      	cmp	r3, #5
 800766e:	d827      	bhi.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076c7 	.word	0x080076c7
 800767c:	0800769d 	.word	0x0800769d
 8007680:	080076af 	.word	0x080076af
 8007684:	080076c7 	.word	0x080076c7
 8007688:	080076c7 	.word	0x080076c7
 800768c:	080076c7 	.word	0x080076c7
 8007690:	58024400 	.word	0x58024400
 8007694:	58024800 	.word	0x58024800
 8007698:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3304      	adds	r3, #4
 80076a0:	2101      	movs	r1, #1
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fd32 	bl	800810c <RCCEx_PLL2_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80076ac:	e00c      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3324      	adds	r3, #36	; 0x24
 80076b2:	2101      	movs	r1, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fddb 	bl	8008270 <RCCEx_PLL3_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80076be:	e003      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
      break;
 80076c4:	e000      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80076c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076ce:	4bb2      	ldr	r3, [pc, #712]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d2:	f023 0207 	bic.w	r2, r3, #7
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076dc:	49ae      	ldr	r1, [pc, #696]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	658b      	str	r3, [r1, #88]	; 0x58
 80076e2:	e001      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d044      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fe:	d01b      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007704:	d805      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d022      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800770a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800770e:	d00a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007710:	e01b      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007716:	d01d      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800771c:	d01c      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800771e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007722:	d01b      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007724:	e011      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fced 	bl	800810c <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007736:	e012      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3324      	adds	r3, #36	; 0x24
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fd96 	bl	8008270 <RCCEx_PLL3_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007748:	e009      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
      break;
 800774e:	e006      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007750:	bf00      	nop
 8007752:	e004      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007754:	bf00      	nop
 8007756:	e002      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007758:	bf00      	nop
 800775a:	e000      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800775c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007764:	4b8c      	ldr	r3, [pc, #560]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007768:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007772:	4989      	ldr	r1, [pc, #548]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007774:	4313      	orrs	r3, r2
 8007776:	654b      	str	r3, [r1, #84]	; 0x54
 8007778:	e001      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d044      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007794:	d01b      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779a:	d805      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d022      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80077a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a4:	d00a      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80077a6:	e01b      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80077a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ac:	d01d      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80077ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077b2:	d01c      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80077b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077b8:	d01b      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80077ba:	e011      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fca2 	bl	800810c <RCCEx_PLL2_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077cc:	e012      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3324      	adds	r3, #36	; 0x24
 80077d2:	2102      	movs	r1, #2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fd4b 	bl	8008270 <RCCEx_PLL3_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80077de:	e009      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	75fb      	strb	r3, [r7, #23]
      break;
 80077e4:	e006      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80077e6:	bf00      	nop
 80077e8:	e004      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80077ea:	bf00      	nop
 80077ec:	e002      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80077f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077fa:	4b67      	ldr	r3, [pc, #412]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007808:	4963      	ldr	r1, [pc, #396]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800780a:	4313      	orrs	r3, r2
 800780c:	658b      	str	r3, [r1, #88]	; 0x58
 800780e:	e001      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d044      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782a:	d01b      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800782c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007830:	d805      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d022      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783a:	d00a      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800783c:	e01b      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800783e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007842:	d01d      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007844:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007848:	d01c      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800784a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800784e:	d01b      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007850:	e011      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3304      	adds	r3, #4
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fc57 	bl	800810c <RCCEx_PLL2_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007862:	e012      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3324      	adds	r3, #36	; 0x24
 8007868:	2102      	movs	r1, #2
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fd00 	bl	8008270 <RCCEx_PLL3_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007874:	e009      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
      break;
 800787a:	e006      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800787c:	bf00      	nop
 800787e:	e004      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007880:	bf00      	nop
 8007882:	e002      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007884:	bf00      	nop
 8007886:	e000      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007890:	4b41      	ldr	r3, [pc, #260]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007894:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800789e:	493e      	ldr	r1, [pc, #248]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	658b      	str	r3, [r1, #88]	; 0x58
 80078a4:	e001      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01a      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d10a      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3324      	adds	r3, #36	; 0x24
 80078c6:	2102      	movs	r1, #2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fcd1 	bl	8008270 <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078d8:	4b2f      	ldr	r3, [pc, #188]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e6:	492c      	ldr	r1, [pc, #176]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007902:	d10a      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3324      	adds	r3, #36	; 0x24
 8007908:	2102      	movs	r1, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fcb0 	bl	8008270 <RCCEx_PLL3_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800791a:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007928:	491b      	ldr	r1, [pc, #108]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800792a:	4313      	orrs	r3, r2
 800792c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d032      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007944:	d00d      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800794a:	d016      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d111      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fbd8 	bl	800810c <RCCEx_PLL2_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007960:	e00c      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3324      	adds	r3, #36	; 0x24
 8007966:	2102      	movs	r1, #2
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fc81 	bl	8008270 <RCCEx_PLL3_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007972:	e003      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
      break;
 8007978:	e000      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800797a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007990:	4901      	ldr	r1, [pc, #4]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007992:	4313      	orrs	r3, r2
 8007994:	658b      	str	r3, [r1, #88]	; 0x58
 8007996:	e003      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d02f      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079b6:	d00c      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80079b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079bc:	d015      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c2:	d10f      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b79      	ldr	r3, [pc, #484]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a78      	ldr	r2, [pc, #480]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079d0:	e00c      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3324      	adds	r3, #36	; 0x24
 80079d6:	2101      	movs	r1, #1
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fc49 	bl	8008270 <RCCEx_PLL3_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079e2:	e003      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	e000      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80079ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079f2:	4b6e      	ldr	r3, [pc, #440]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a00:	496a      	ldr	r1, [pc, #424]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	654b      	str	r3, [r1, #84]	; 0x54
 8007a06:	e001      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d029      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a24:	d007      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007a26:	e00f      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a28:	4b60      	ldr	r3, [pc, #384]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	4a5f      	ldr	r2, [pc, #380]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a34:	e00b      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fb65 	bl	800810c <RCCEx_PLL2_Config>
 8007a42:	4603      	mov	r3, r0
 8007a44:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a46:	e002      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d109      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a54:	4b55      	ldr	r3, [pc, #340]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a60:	4952      	ldr	r1, [pc, #328]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a66:	e001      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3324      	adds	r3, #36	; 0x24
 8007a7c:	2102      	movs	r1, #2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fbf6 	bl	8008270 <RCCEx_PLL3_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d02f      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa2:	d00c      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa8:	d802      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d011      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007aae:	e00d      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab4:	d00f      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aba:	d00e      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007abc:	e006      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007abe:	4b3b      	ldr	r3, [pc, #236]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	4a3a      	ldr	r2, [pc, #232]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007aca:	e007      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad0:	e004      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007ad2:	bf00      	nop
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007ad6:	bf00      	nop
 8007ad8:	e000      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ae2:	4b32      	ldr	r3, [pc, #200]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aee:	492f      	ldr	r1, [pc, #188]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	654b      	str	r3, [r1, #84]	; 0x54
 8007af4:	e001      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b06:	4b29      	ldr	r3, [pc, #164]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	4926      	ldr	r1, [pc, #152]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b24:	4b21      	ldr	r3, [pc, #132]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b32:	491e      	ldr	r1, [pc, #120]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b44:	4b19      	ldr	r3, [pc, #100]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b50:	4916      	ldr	r1, [pc, #88]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00d      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b62:	4b12      	ldr	r3, [pc, #72]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	4a11      	ldr	r2, [pc, #68]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b6c:	6113      	str	r3, [r2, #16]
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b78:	490c      	ldr	r1, [pc, #48]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da08      	bge.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b92:	4906      	ldr	r1, [pc, #24]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007b98:	7dbb      	ldrb	r3, [r7, #22]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	58024400 	.word	0x58024400

08007bb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007bb4:	f7ff f8b2 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8007bb8:	4601      	mov	r1, r0
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	091b      	lsrs	r3, r3, #4
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	4a04      	ldr	r2, [pc, #16]	; (8007bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bc6:	5cd3      	ldrb	r3, [r2, r3]
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	0800be54 	.word	0x0800be54

08007bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be4:	4b9d      	ldr	r3, [pc, #628]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007bee:	4b9b      	ldr	r3, [pc, #620]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	0b1b      	lsrs	r3, r3, #12
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bfa:	4b98      	ldr	r3, [pc, #608]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c06:	4b95      	ldr	r3, [pc, #596]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 810a 	beq.w	8007e3e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d05a      	beq.n	8007ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d302      	bcc.n	8007c3a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d078      	beq.n	8007d2a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007c38:	e099      	b.n	8007d6e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c3a:	4b88      	ldr	r3, [pc, #544]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d02d      	beq.n	8007ca2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c46:	4b85      	ldr	r3, [pc, #532]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	08db      	lsrs	r3, r3, #3
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	4a83      	ldr	r2, [pc, #524]	; (8007e60 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007c52:	fa22 f303 	lsr.w	r3, r2, r3
 8007c56:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c70:	4b7a      	ldr	r3, [pc, #488]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ca0:	e087      	b.n	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb4:	4b69      	ldr	r3, [pc, #420]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ce4:	e065      	b.n	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf8:	4b58      	ldr	r3, [pc, #352]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d28:	e043      	b.n	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3c:	4b47      	ldr	r3, [pc, #284]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d6c:	e021      	b.n	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	ee07 3a90 	vmov	s15, r3
 8007d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d80:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d88:	ee07 3a90 	vmov	s15, r3
 8007d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007db0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007db2:	4b2a      	ldr	r3, [pc, #168]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	0a5b      	lsrs	r3, r3, #9
 8007db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd8:	ee17 2a90 	vmov	r2, s15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007de0:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e06:	ee17 2a90 	vmov	r2, s15
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e34:	ee17 2a90 	vmov	r2, s15
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e3c:	e008      	b.n	8007e50 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	3724      	adds	r7, #36	; 0x24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	46000000 	.word	0x46000000
 8007e68:	4c742400 	.word	0x4c742400
 8007e6c:	4a742400 	.word	0x4a742400
 8007e70:	4bf42400 	.word	0x4bf42400

08007e74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	; 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e7c:	4b9d      	ldr	r3, [pc, #628]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007e86:	4b9b      	ldr	r3, [pc, #620]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	0d1b      	lsrs	r3, r3, #20
 8007e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e92:	4b98      	ldr	r3, [pc, #608]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007e9e:	4b95      	ldr	r3, [pc, #596]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea2:	08db      	lsrs	r3, r3, #3
 8007ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	fb02 f303 	mul.w	r3, r2, r3
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 810a 	beq.w	80080d6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d05a      	beq.n	8007f7e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d302      	bcc.n	8007ed2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d078      	beq.n	8007fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007ed0:	e099      	b.n	8008006 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed2:	4b88      	ldr	r3, [pc, #544]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02d      	beq.n	8007f3a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ede:	4b85      	ldr	r3, [pc, #532]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	4a83      	ldr	r2, [pc, #524]	; (80080f8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007eea:	fa22 f303 	lsr.w	r3, r2, r3
 8007eee:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	ee07 3a90 	vmov	s15, r3
 8007f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f08:	4b7a      	ldr	r3, [pc, #488]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f34:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f38:	e087      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008100 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4c:	4b69      	ldr	r3, [pc, #420]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f60:	eddf 5a66 	vldr	s11, [pc, #408]	; 80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f7c:	e065      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	ee07 3a90 	vmov	s15, r3
 8007f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f90:	4b58      	ldr	r3, [pc, #352]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa4:	eddf 5a55 	vldr	s11, [pc, #340]	; 80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fc0:	e043      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	ee07 3a90 	vmov	s15, r3
 8007fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fcc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008108 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd4:	4b47      	ldr	r3, [pc, #284]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008000:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008004:	e021      	b.n	800804a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	ee07 3a90 	vmov	s15, r3
 800800c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008010:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008018:	4b36      	ldr	r3, [pc, #216]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008028:	ed97 6a03 	vldr	s12, [r7, #12]
 800802c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800803c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008044:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008048:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800804a:	4b2a      	ldr	r3, [pc, #168]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	0a5b      	lsrs	r3, r3, #9
 8008050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008054:	ee07 3a90 	vmov	s15, r3
 8008058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008060:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008064:	edd7 6a07 	vldr	s13, [r7, #28]
 8008068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800806c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008070:	ee17 2a90 	vmov	r2, s15
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800808e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008092:	edd7 6a07 	vldr	s13, [r7, #28]
 8008096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809e:	ee17 2a90 	vmov	r2, s15
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	0e1b      	lsrs	r3, r3, #24
 80080ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080cc:	ee17 2a90 	vmov	r2, s15
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080d4:	e008      	b.n	80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	609a      	str	r2, [r3, #8]
}
 80080e8:	bf00      	nop
 80080ea:	3724      	adds	r7, #36	; 0x24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	58024400 	.word	0x58024400
 80080f8:	03d09000 	.word	0x03d09000
 80080fc:	46000000 	.word	0x46000000
 8008100:	4c742400 	.word	0x4c742400
 8008104:	4a742400 	.word	0x4a742400
 8008108:	4bf42400 	.word	0x4bf42400

0800810c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800811a:	4b53      	ldr	r3, [pc, #332]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 800811c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b03      	cmp	r3, #3
 8008124:	d101      	bne.n	800812a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e099      	b.n	800825e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800812a:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a4e      	ldr	r2, [pc, #312]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008136:	f7f9 fbcd 	bl	80018d4 <HAL_GetTick>
 800813a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800813c:	e008      	b.n	8008150 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800813e:	f7f9 fbc9 	bl	80018d4 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d901      	bls.n	8008150 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e086      	b.n	800825e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008150:	4b45      	ldr	r3, [pc, #276]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f0      	bne.n	800813e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800815c:	4b42      	ldr	r3, [pc, #264]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	493f      	ldr	r1, [pc, #252]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	628b      	str	r3, [r1, #40]	; 0x28
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	3b01      	subs	r3, #1
 8008176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	3b01      	subs	r3, #1
 8008180:	025b      	lsls	r3, r3, #9
 8008182:	b29b      	uxth	r3, r3
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	3b01      	subs	r3, #1
 800818c:	041b      	lsls	r3, r3, #16
 800818e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	3b01      	subs	r3, #1
 800819a:	061b      	lsls	r3, r3, #24
 800819c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081a0:	4931      	ldr	r1, [pc, #196]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081a6:	4b30      	ldr	r3, [pc, #192]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	492d      	ldr	r1, [pc, #180]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081b8:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	f023 0220 	bic.w	r2, r3, #32
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	4928      	ldr	r1, [pc, #160]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081ca:	4b27      	ldr	r3, [pc, #156]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	4a26      	ldr	r2, [pc, #152]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081d0:	f023 0310 	bic.w	r3, r3, #16
 80081d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081da:	4b24      	ldr	r3, [pc, #144]	; (800826c <RCCEx_PLL2_Config+0x160>)
 80081dc:	4013      	ands	r3, r2
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	69d2      	ldr	r2, [r2, #28]
 80081e2:	00d2      	lsls	r2, r2, #3
 80081e4:	4920      	ldr	r1, [pc, #128]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081ea:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	f043 0310 	orr.w	r3, r3, #16
 80081f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4a19      	ldr	r2, [pc, #100]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008208:	e00f      	b.n	800822a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d106      	bne.n	800821e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008210:	4b15      	ldr	r3, [pc, #84]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a14      	ldr	r2, [pc, #80]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800821a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800821c:	e005      	b.n	800822a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800821e:	4b12      	ldr	r3, [pc, #72]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	4a11      	ldr	r2, [pc, #68]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008228:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800822a:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a0e      	ldr	r2, [pc, #56]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008236:	f7f9 fb4d 	bl	80018d4 <HAL_GetTick>
 800823a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800823c:	e008      	b.n	8008250 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800823e:	f7f9 fb49 	bl	80018d4 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e006      	b.n	800825e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <RCCEx_PLL2_Config+0x15c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	58024400 	.word	0x58024400
 800826c:	ffff0007 	.word	0xffff0007

08008270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800827e:	4b53      	ldr	r3, [pc, #332]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d101      	bne.n	800828e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e099      	b.n	80083c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800828e:	4b4f      	ldr	r3, [pc, #316]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a4e      	ldr	r2, [pc, #312]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829a:	f7f9 fb1b 	bl	80018d4 <HAL_GetTick>
 800829e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082a0:	e008      	b.n	80082b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082a2:	f7f9 fb17 	bl	80018d4 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e086      	b.n	80083c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082b4:	4b45      	ldr	r3, [pc, #276]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1f0      	bne.n	80082a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082c0:	4b42      	ldr	r3, [pc, #264]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	051b      	lsls	r3, r3, #20
 80082ce:	493f      	ldr	r1, [pc, #252]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	628b      	str	r3, [r1, #40]	; 0x28
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	3b01      	subs	r3, #1
 80082da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	025b      	lsls	r3, r3, #9
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	061b      	lsls	r3, r3, #24
 8008300:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008304:	4931      	ldr	r1, [pc, #196]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008306:	4313      	orrs	r3, r2
 8008308:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800830a:	4b30      	ldr	r3, [pc, #192]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	492d      	ldr	r1, [pc, #180]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008318:	4313      	orrs	r3, r2
 800831a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800831c:	4b2b      	ldr	r3, [pc, #172]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	4928      	ldr	r1, [pc, #160]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 800832a:	4313      	orrs	r3, r2
 800832c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800832e:	4b27      	ldr	r3, [pc, #156]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	4a26      	ldr	r2, [pc, #152]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800833a:	4b24      	ldr	r3, [pc, #144]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 800833c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800833e:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <RCCEx_PLL3_Config+0x160>)
 8008340:	4013      	ands	r3, r2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	69d2      	ldr	r2, [r2, #28]
 8008346:	00d2      	lsls	r2, r2, #3
 8008348:	4920      	ldr	r1, [pc, #128]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 800834a:	4313      	orrs	r3, r2
 800834c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800834e:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008360:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a19      	ldr	r2, [pc, #100]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008366:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800836a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800836c:	e00f      	b.n	800838e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d106      	bne.n	8008382 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a14      	ldr	r2, [pc, #80]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 800837a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008380:	e005      	b.n	800838e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	4a11      	ldr	r2, [pc, #68]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800838c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a0e      	ldr	r2, [pc, #56]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 8008394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800839a:	f7f9 fa9b 	bl	80018d4 <HAL_GetTick>
 800839e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083a0:	e008      	b.n	80083b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083a2:	f7f9 fa97 	bl	80018d4 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e006      	b.n	80083c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <RCCEx_PLL3_Config+0x15c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	58024400 	.word	0x58024400
 80083d0:	ffff0007 	.word	0xffff0007

080083d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e0e2      	b.n	80085b0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a70      	ldr	r2, [pc, #448]	; (80085b8 <HAL_SPI_Init+0x1e4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <HAL_SPI_Init+0x46>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a6f      	ldr	r2, [pc, #444]	; (80085bc <HAL_SPI_Init+0x1e8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00a      	beq.n	800841a <HAL_SPI_Init+0x46>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6d      	ldr	r2, [pc, #436]	; (80085c0 <HAL_SPI_Init+0x1ec>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d005      	beq.n	800841a <HAL_SPI_Init+0x46>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	2b0f      	cmp	r3, #15
 8008414:	d901      	bls.n	800841a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e0ca      	b.n	80085b0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8d2 	bl	80085c4 <SPI_GetPacketSize>
 8008420:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a64      	ldr	r2, [pc, #400]	; (80085b8 <HAL_SPI_Init+0x1e4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00c      	beq.n	8008446 <HAL_SPI_Init+0x72>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a62      	ldr	r2, [pc, #392]	; (80085bc <HAL_SPI_Init+0x1e8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d007      	beq.n	8008446 <HAL_SPI_Init+0x72>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a61      	ldr	r2, [pc, #388]	; (80085c0 <HAL_SPI_Init+0x1ec>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d002      	beq.n	8008446 <HAL_SPI_Init+0x72>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b08      	cmp	r3, #8
 8008444:	d811      	bhi.n	800846a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800844a:	4a5b      	ldr	r2, [pc, #364]	; (80085b8 <HAL_SPI_Init+0x1e4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d009      	beq.n	8008464 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a59      	ldr	r2, [pc, #356]	; (80085bc <HAL_SPI_Init+0x1e8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_SPI_Init+0x90>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a58      	ldr	r2, [pc, #352]	; (80085c0 <HAL_SPI_Init+0x1ec>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d104      	bne.n	800846e <HAL_SPI_Init+0x9a>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b10      	cmp	r3, #16
 8008468:	d901      	bls.n	800846e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e0a0      	b.n	80085b0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7f8 fd60 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084a8:	d110      	bne.n	80084cc <HAL_SPI_Init+0xf8>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b2:	d10b      	bne.n	80084cc <HAL_SPI_Init+0xf8>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d107      	bne.n	80084cc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084ca:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d4:	431a      	orrs	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084de:	ea42 0103 	orr.w	r1, r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852c:	ea42 0103 	orr.w	r1, r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d113      	bne.n	800856c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008556:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800856a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0201 	bic.w	r2, r2, #1
 800857a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40013000 	.word	0x40013000
 80085bc:	40003800 	.word	0x40003800
 80085c0:	40003c00 	.word	0x40003c00

080085c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3307      	adds	r3, #7
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e049      	b.n	80086a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7f8 ff0f 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2202      	movs	r2, #2
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f000 fb4d 	bl	8008cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e049      	b.n	800874e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f841 	bl	8008756 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f000 faf6 	bl	8008cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e049      	b.n	8008810 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d106      	bne.n	8008796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f841 	bl	8008818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4619      	mov	r1, r3
 80087a8:	4610      	mov	r0, r2
 80087aa:	f000 fa95 	bl	8008cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008842:	2302      	movs	r3, #2
 8008844:	e064      	b.n	8008910 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b14      	cmp	r3, #20
 8008852:	d857      	bhi.n	8008904 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <HAL_TIM_OC_ConfigChannel+0x30>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	080088b1 	.word	0x080088b1
 8008860:	08008905 	.word	0x08008905
 8008864:	08008905 	.word	0x08008905
 8008868:	08008905 	.word	0x08008905
 800886c:	080088bf 	.word	0x080088bf
 8008870:	08008905 	.word	0x08008905
 8008874:	08008905 	.word	0x08008905
 8008878:	08008905 	.word	0x08008905
 800887c:	080088cd 	.word	0x080088cd
 8008880:	08008905 	.word	0x08008905
 8008884:	08008905 	.word	0x08008905
 8008888:	08008905 	.word	0x08008905
 800888c:	080088db 	.word	0x080088db
 8008890:	08008905 	.word	0x08008905
 8008894:	08008905 	.word	0x08008905
 8008898:	08008905 	.word	0x08008905
 800889c:	080088e9 	.word	0x080088e9
 80088a0:	08008905 	.word	0x08008905
 80088a4:	08008905 	.word	0x08008905
 80088a8:	08008905 	.word	0x08008905
 80088ac:	080088f7 	.word	0x080088f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 faa8 	bl	8008e0c <TIM_OC1_SetConfig>
      break;
 80088bc:	e023      	b.n	8008906 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fb31 	bl	8008f2c <TIM_OC2_SetConfig>
      break;
 80088ca:	e01c      	b.n	8008906 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fbb4 	bl	8009040 <TIM_OC3_SetConfig>
      break;
 80088d8:	e015      	b.n	8008906 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fc33 	bl	800914c <TIM_OC4_SetConfig>
      break;
 80088e6:	e00e      	b.n	8008906 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fc94 	bl	800921c <TIM_OC5_SetConfig>
      break;
 80088f4:	e007      	b.n	8008906 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fcef 	bl	80092e0 <TIM_OC6_SetConfig>
      break;
 8008902:	e000      	b.n	8008906 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800892e:	2302      	movs	r3, #2
 8008930:	e0fd      	b.n	8008b2e <HAL_TIM_PWM_ConfigChannel+0x216>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b14      	cmp	r3, #20
 800893e:	f200 80f0 	bhi.w	8008b22 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	0800899d 	.word	0x0800899d
 800894c:	08008b23 	.word	0x08008b23
 8008950:	08008b23 	.word	0x08008b23
 8008954:	08008b23 	.word	0x08008b23
 8008958:	080089dd 	.word	0x080089dd
 800895c:	08008b23 	.word	0x08008b23
 8008960:	08008b23 	.word	0x08008b23
 8008964:	08008b23 	.word	0x08008b23
 8008968:	08008a1f 	.word	0x08008a1f
 800896c:	08008b23 	.word	0x08008b23
 8008970:	08008b23 	.word	0x08008b23
 8008974:	08008b23 	.word	0x08008b23
 8008978:	08008a5f 	.word	0x08008a5f
 800897c:	08008b23 	.word	0x08008b23
 8008980:	08008b23 	.word	0x08008b23
 8008984:	08008b23 	.word	0x08008b23
 8008988:	08008aa1 	.word	0x08008aa1
 800898c:	08008b23 	.word	0x08008b23
 8008990:	08008b23 	.word	0x08008b23
 8008994:	08008b23 	.word	0x08008b23
 8008998:	08008ae1 	.word	0x08008ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fa32 	bl	8008e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0208 	orr.w	r2, r2, #8
 80089b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0204 	bic.w	r2, r2, #4
 80089c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6999      	ldr	r1, [r3, #24]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	619a      	str	r2, [r3, #24]
      break;
 80089da:	e0a3      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 faa2 	bl	8008f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6999      	ldr	r1, [r3, #24]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	021a      	lsls	r2, r3, #8
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	619a      	str	r2, [r3, #24]
      break;
 8008a1c:	e082      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fb0b 	bl	8009040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0208 	orr.w	r2, r2, #8
 8008a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0204 	bic.w	r2, r2, #4
 8008a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69d9      	ldr	r1, [r3, #28]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	61da      	str	r2, [r3, #28]
      break;
 8008a5c:	e062      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 fb71 	bl	800914c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69d9      	ldr	r1, [r3, #28]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	021a      	lsls	r2, r3, #8
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	61da      	str	r2, [r3, #28]
      break;
 8008a9e:	e041      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 fbb8 	bl	800921c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0208 	orr.w	r2, r2, #8
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0204 	bic.w	r2, r2, #4
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	691a      	ldr	r2, [r3, #16]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ade:	e021      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fbfa 	bl	80092e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	021a      	lsls	r2, r3, #8
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b20:	e000      	b.n	8008b24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008b22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_TIM_ConfigClockSource+0x18>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e0b7      	b.n	8008cc0 <HAL_TIM_ConfigClockSource+0x188>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4b57      	ldr	r3, [pc, #348]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x190>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b70      	cmp	r3, #112	; 0x70
 8008b86:	d02e      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0xae>
 8008b88:	2b70      	cmp	r3, #112	; 0x70
 8008b8a:	d812      	bhi.n	8008bb2 <HAL_TIM_ConfigClockSource+0x7a>
 8008b8c:	2b30      	cmp	r3, #48	; 0x30
 8008b8e:	f000 8084 	beq.w	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008b92:	2b30      	cmp	r3, #48	; 0x30
 8008b94:	d806      	bhi.n	8008ba4 <HAL_TIM_ConfigClockSource+0x6c>
 8008b96:	2b10      	cmp	r3, #16
 8008b98:	d07f      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d07d      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d07b      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ba2:	e084      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008ba4:	2b50      	cmp	r3, #80	; 0x50
 8008ba6:	d048      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x102>
 8008ba8:	2b60      	cmp	r3, #96	; 0x60
 8008baa:	d056      	beq.n	8008c5a <HAL_TIM_ConfigClockSource+0x122>
 8008bac:	2b40      	cmp	r3, #64	; 0x40
 8008bae:	d064      	beq.n	8008c7a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008bb0:	e07d      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bb2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bb6:	d070      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008bb8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bbc:	d809      	bhi.n	8008bd2 <HAL_TIM_ConfigClockSource+0x9a>
 8008bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc2:	d027      	beq.n	8008c14 <HAL_TIM_ConfigClockSource+0xdc>
 8008bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc8:	d067      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bce:	d06d      	beq.n	8008cac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bd0:	e06d      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bd2:	4a3e      	ldr	r2, [pc, #248]	; (8008ccc <HAL_TIM_ConfigClockSource+0x194>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d060      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008bd8:	4a3d      	ldr	r2, [pc, #244]	; (8008cd0 <HAL_TIM_ConfigClockSource+0x198>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d05d      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
 8008bde:	4a3d      	ldr	r2, [pc, #244]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x19c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d05a      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008be4:	e063      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6899      	ldr	r1, [r3, #8]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f000 fc55 	bl	80094a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	609a      	str	r2, [r3, #8]
      break;
 8008c12:	e04c      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	6899      	ldr	r1, [r3, #8]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f000 fc3e 	bl	80094a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c36:	609a      	str	r2, [r3, #8]
      break;
 8008c38:	e039      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6818      	ldr	r0, [r3, #0]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	6859      	ldr	r1, [r3, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	461a      	mov	r2, r3
 8008c48:	f000 fbae 	bl	80093a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2150      	movs	r1, #80	; 0x50
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fc08 	bl	8009468 <TIM_ITRx_SetConfig>
      break;
 8008c58:	e029      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	6859      	ldr	r1, [r3, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f000 fbcd 	bl	8009406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2160      	movs	r1, #96	; 0x60
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fbf8 	bl	8009468 <TIM_ITRx_SetConfig>
      break;
 8008c78:	e019      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	6859      	ldr	r1, [r3, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	461a      	mov	r2, r3
 8008c88:	f000 fb8e 	bl	80093a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2140      	movs	r1, #64	; 0x40
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fbe8 	bl	8009468 <TIM_ITRx_SetConfig>
      break;
 8008c98:	e009      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f000 fbdf 	bl	8009468 <TIM_ITRx_SetConfig>
      break;
 8008caa:	e000      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008cac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	ffceff88 	.word	0xffceff88
 8008ccc:	00100030 	.word	0x00100030
 8008cd0:	00100040 	.word	0x00100040
 8008cd4:	00100020 	.word	0x00100020

08008cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a40      	ldr	r2, [pc, #256]	; (8008dec <TIM_Base_SetConfig+0x114>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf6:	d00f      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a3d      	ldr	r2, [pc, #244]	; (8008df0 <TIM_Base_SetConfig+0x118>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00b      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a3c      	ldr	r2, [pc, #240]	; (8008df4 <TIM_Base_SetConfig+0x11c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d007      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a3b      	ldr	r2, [pc, #236]	; (8008df8 <TIM_Base_SetConfig+0x120>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d003      	beq.n	8008d18 <TIM_Base_SetConfig+0x40>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a3a      	ldr	r2, [pc, #232]	; (8008dfc <TIM_Base_SetConfig+0x124>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d108      	bne.n	8008d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2f      	ldr	r2, [pc, #188]	; (8008dec <TIM_Base_SetConfig+0x114>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d01f      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d38:	d01b      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a2c      	ldr	r2, [pc, #176]	; (8008df0 <TIM_Base_SetConfig+0x118>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d017      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a2b      	ldr	r2, [pc, #172]	; (8008df4 <TIM_Base_SetConfig+0x11c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <TIM_Base_SetConfig+0x120>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00f      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a29      	ldr	r2, [pc, #164]	; (8008dfc <TIM_Base_SetConfig+0x124>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a28      	ldr	r2, [pc, #160]	; (8008e00 <TIM_Base_SetConfig+0x128>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d007      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a27      	ldr	r2, [pc, #156]	; (8008e04 <TIM_Base_SetConfig+0x12c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_Base_SetConfig+0x9a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a26      	ldr	r2, [pc, #152]	; (8008e08 <TIM_Base_SetConfig+0x130>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d108      	bne.n	8008d84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a10      	ldr	r2, [pc, #64]	; (8008dec <TIM_Base_SetConfig+0x114>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00f      	beq.n	8008dd0 <TIM_Base_SetConfig+0xf8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a12      	ldr	r2, [pc, #72]	; (8008dfc <TIM_Base_SetConfig+0x124>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00b      	beq.n	8008dd0 <TIM_Base_SetConfig+0xf8>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a11      	ldr	r2, [pc, #68]	; (8008e00 <TIM_Base_SetConfig+0x128>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <TIM_Base_SetConfig+0xf8>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a10      	ldr	r2, [pc, #64]	; (8008e04 <TIM_Base_SetConfig+0x12c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_Base_SetConfig+0xf8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a0f      	ldr	r2, [pc, #60]	; (8008e08 <TIM_Base_SetConfig+0x130>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d103      	bne.n	8008dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	615a      	str	r2, [r3, #20]
}
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800

08008e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f023 0201 	bic.w	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4b37      	ldr	r3, [pc, #220]	; (8008f14 <TIM_OC1_SetConfig+0x108>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f023 0302 	bic.w	r3, r3, #2
 8008e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a2d      	ldr	r2, [pc, #180]	; (8008f18 <TIM_OC1_SetConfig+0x10c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00f      	beq.n	8008e88 <TIM_OC1_SetConfig+0x7c>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a2c      	ldr	r2, [pc, #176]	; (8008f1c <TIM_OC1_SetConfig+0x110>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d00b      	beq.n	8008e88 <TIM_OC1_SetConfig+0x7c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a2b      	ldr	r2, [pc, #172]	; (8008f20 <TIM_OC1_SetConfig+0x114>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d007      	beq.n	8008e88 <TIM_OC1_SetConfig+0x7c>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a2a      	ldr	r2, [pc, #168]	; (8008f24 <TIM_OC1_SetConfig+0x118>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d003      	beq.n	8008e88 <TIM_OC1_SetConfig+0x7c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <TIM_OC1_SetConfig+0x11c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d10c      	bne.n	8008ea2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f023 0308 	bic.w	r3, r3, #8
 8008e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f023 0304 	bic.w	r3, r3, #4
 8008ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <TIM_OC1_SetConfig+0x10c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00f      	beq.n	8008eca <TIM_OC1_SetConfig+0xbe>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <TIM_OC1_SetConfig+0x110>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00b      	beq.n	8008eca <TIM_OC1_SetConfig+0xbe>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a1a      	ldr	r2, [pc, #104]	; (8008f20 <TIM_OC1_SetConfig+0x114>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d007      	beq.n	8008eca <TIM_OC1_SetConfig+0xbe>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a19      	ldr	r2, [pc, #100]	; (8008f24 <TIM_OC1_SetConfig+0x118>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d003      	beq.n	8008eca <TIM_OC1_SetConfig+0xbe>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <TIM_OC1_SetConfig+0x11c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d111      	bne.n	8008eee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	621a      	str	r2, [r3, #32]
}
 8008f08:	bf00      	nop
 8008f0a:	371c      	adds	r7, #28
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	fffeff8f 	.word	0xfffeff8f
 8008f18:	40010000 	.word	0x40010000
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40014000 	.word	0x40014000
 8008f24:	40014400 	.word	0x40014400
 8008f28:	40014800 	.word	0x40014800

08008f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f023 0210 	bic.w	r2, r3, #16
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4b34      	ldr	r3, [pc, #208]	; (8009028 <TIM_OC2_SetConfig+0xfc>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f023 0320 	bic.w	r3, r3, #32
 8008f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a29      	ldr	r2, [pc, #164]	; (800902c <TIM_OC2_SetConfig+0x100>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d003      	beq.n	8008f94 <TIM_OC2_SetConfig+0x68>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a28      	ldr	r2, [pc, #160]	; (8009030 <TIM_OC2_SetConfig+0x104>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d10d      	bne.n	8008fb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a1e      	ldr	r2, [pc, #120]	; (800902c <TIM_OC2_SetConfig+0x100>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00f      	beq.n	8008fd8 <TIM_OC2_SetConfig+0xac>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a1d      	ldr	r2, [pc, #116]	; (8009030 <TIM_OC2_SetConfig+0x104>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00b      	beq.n	8008fd8 <TIM_OC2_SetConfig+0xac>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a1c      	ldr	r2, [pc, #112]	; (8009034 <TIM_OC2_SetConfig+0x108>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d007      	beq.n	8008fd8 <TIM_OC2_SetConfig+0xac>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a1b      	ldr	r2, [pc, #108]	; (8009038 <TIM_OC2_SetConfig+0x10c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC2_SetConfig+0xac>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a1a      	ldr	r2, [pc, #104]	; (800903c <TIM_OC2_SetConfig+0x110>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d113      	bne.n	8009000 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	621a      	str	r2, [r3, #32]
}
 800901a:	bf00      	nop
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	feff8fff 	.word	0xfeff8fff
 800902c:	40010000 	.word	0x40010000
 8009030:	40010400 	.word	0x40010400
 8009034:	40014000 	.word	0x40014000
 8009038:	40014400 	.word	0x40014400
 800903c:	40014800 	.word	0x40014800

08009040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0303 	bic.w	r3, r3, #3
 8009076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	4313      	orrs	r3, r2
 8009094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a27      	ldr	r2, [pc, #156]	; (8009138 <TIM_OC3_SetConfig+0xf8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d003      	beq.n	80090a6 <TIM_OC3_SetConfig+0x66>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a26      	ldr	r2, [pc, #152]	; (800913c <TIM_OC3_SetConfig+0xfc>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d10d      	bne.n	80090c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <TIM_OC3_SetConfig+0xf8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d00f      	beq.n	80090ea <TIM_OC3_SetConfig+0xaa>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <TIM_OC3_SetConfig+0xfc>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d00b      	beq.n	80090ea <TIM_OC3_SetConfig+0xaa>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a1a      	ldr	r2, [pc, #104]	; (8009140 <TIM_OC3_SetConfig+0x100>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d007      	beq.n	80090ea <TIM_OC3_SetConfig+0xaa>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a19      	ldr	r2, [pc, #100]	; (8009144 <TIM_OC3_SetConfig+0x104>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d003      	beq.n	80090ea <TIM_OC3_SetConfig+0xaa>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a18      	ldr	r2, [pc, #96]	; (8009148 <TIM_OC3_SetConfig+0x108>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d113      	bne.n	8009112 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	4313      	orrs	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	621a      	str	r2, [r3, #32]
}
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	40010000 	.word	0x40010000
 800913c:	40010400 	.word	0x40010400
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800917a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	031b      	lsls	r3, r3, #12
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a18      	ldr	r2, [pc, #96]	; (8009208 <TIM_OC4_SetConfig+0xbc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a17      	ldr	r2, [pc, #92]	; (800920c <TIM_OC4_SetConfig+0xc0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a16      	ldr	r2, [pc, #88]	; (8009210 <TIM_OC4_SetConfig+0xc4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a15      	ldr	r2, [pc, #84]	; (8009214 <TIM_OC4_SetConfig+0xc8>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC4_SetConfig+0x80>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a14      	ldr	r2, [pc, #80]	; (8009218 <TIM_OC4_SetConfig+0xcc>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d109      	bne.n	80091e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	019b      	lsls	r3, r3, #6
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	40010000 	.word	0x40010000
 800920c:	40010400 	.word	0x40010400
 8009210:	40014000 	.word	0x40014000
 8009214:	40014400 	.word	0x40014400
 8009218:	40014800 	.word	0x40014800

0800921c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800925c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4313      	orrs	r3, r2
 8009268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <TIM_OC5_SetConfig+0xb0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00f      	beq.n	8009292 <TIM_OC5_SetConfig+0x76>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a16      	ldr	r2, [pc, #88]	; (80092d0 <TIM_OC5_SetConfig+0xb4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00b      	beq.n	8009292 <TIM_OC5_SetConfig+0x76>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a15      	ldr	r2, [pc, #84]	; (80092d4 <TIM_OC5_SetConfig+0xb8>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d007      	beq.n	8009292 <TIM_OC5_SetConfig+0x76>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a14      	ldr	r2, [pc, #80]	; (80092d8 <TIM_OC5_SetConfig+0xbc>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d003      	beq.n	8009292 <TIM_OC5_SetConfig+0x76>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a13      	ldr	r2, [pc, #76]	; (80092dc <TIM_OC5_SetConfig+0xc0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d109      	bne.n	80092a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	021b      	lsls	r3, r3, #8
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	621a      	str	r2, [r3, #32]
}
 80092c0:	bf00      	nop
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40010400 	.word	0x40010400
 80092d4:	40014000 	.word	0x40014000
 80092d8:	40014400 	.word	0x40014400
 80092dc:	40014800 	.word	0x40014800

080092e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	021b      	lsls	r3, r3, #8
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	051b      	lsls	r3, r3, #20
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	4313      	orrs	r3, r2
 800932e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a18      	ldr	r2, [pc, #96]	; (8009394 <TIM_OC6_SetConfig+0xb4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d00f      	beq.n	8009358 <TIM_OC6_SetConfig+0x78>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a17      	ldr	r2, [pc, #92]	; (8009398 <TIM_OC6_SetConfig+0xb8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00b      	beq.n	8009358 <TIM_OC6_SetConfig+0x78>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a16      	ldr	r2, [pc, #88]	; (800939c <TIM_OC6_SetConfig+0xbc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d007      	beq.n	8009358 <TIM_OC6_SetConfig+0x78>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <TIM_OC6_SetConfig+0xc0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d003      	beq.n	8009358 <TIM_OC6_SetConfig+0x78>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a14      	ldr	r2, [pc, #80]	; (80093a4 <TIM_OC6_SetConfig+0xc4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d109      	bne.n	800936c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800935e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	029b      	lsls	r3, r3, #10
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4313      	orrs	r3, r2
 800936a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40010000 	.word	0x40010000
 8009398:	40010400 	.word	0x40010400
 800939c:	40014000 	.word	0x40014000
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800

080093a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	f023 0201 	bic.w	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f023 030a 	bic.w	r3, r3, #10
 80093e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	621a      	str	r2, [r3, #32]
}
 80093fa:	bf00      	nop
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009406:	b480      	push	{r7}
 8009408:	b087      	sub	sp, #28
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	f023 0210 	bic.w	r2, r3, #16
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	031b      	lsls	r3, r3, #12
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4313      	orrs	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	621a      	str	r2, [r3, #32]
}
 800945a:	bf00      	nop
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
	...

08009468 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <TIM_ITRx_SetConfig+0x38>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4313      	orrs	r3, r2
 8009486:	f043 0307 	orr.w	r3, r3, #7
 800948a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	609a      	str	r2, [r3, #8]
}
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	ffcfff8f 	.word	0xffcfff8f

080094a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	021a      	lsls	r2, r3, #8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	431a      	orrs	r2, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	609a      	str	r2, [r3, #8]
}
 80094d8:	bf00      	nop
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094f8:	2302      	movs	r3, #2
 80094fa:	e068      	b.n	80095ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a2e      	ldr	r2, [pc, #184]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d004      	beq.n	8009530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a2d      	ldr	r2, [pc, #180]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d108      	bne.n	8009542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1e      	ldr	r2, [pc, #120]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d01d      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956e:	d018      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a1b      	ldr	r2, [pc, #108]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d013      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a1a      	ldr	r2, [pc, #104]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d00e      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a18      	ldr	r2, [pc, #96]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d009      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a13      	ldr	r2, [pc, #76]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d004      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a14      	ldr	r2, [pc, #80]	; (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d10c      	bne.n	80095bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000
 80095e0:	40010400 	.word	0x40010400
 80095e4:	40000400 	.word	0x40000400
 80095e8:	40000800 	.word	0x40000800
 80095ec:	40000c00 	.word	0x40000c00
 80095f0:	40001800 	.word	0x40001800

080095f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e042      	b.n	800968c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7f8 f81f 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2224      	movs	r2, #36	; 0x24
 8009622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 0201 	bic.w	r2, r2, #1
 8009634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fb2e 	bl	8009c98 <UART_SetConfig>
 800963c:	4603      	mov	r3, r0
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e022      	b.n	800968c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 f8d2 	bl	800a7f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f959 	bl	800a93c <UART_CheckIdleState>
 800968a:	4603      	mov	r3, r0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	; 0x28
 8009698:	af02      	add	r7, sp, #8
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	f040 8083 	bne.w	80097b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <HAL_UART_Transmit+0x28>
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e07b      	b.n	80097b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <HAL_UART_Transmit+0x3a>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e074      	b.n	80097b8 <HAL_UART_Transmit+0x124>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2221      	movs	r2, #33	; 0x21
 80096e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80096e6:	f7f8 f8f5 	bl	80018d4 <HAL_GetTick>
 80096ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	88fa      	ldrh	r2, [r7, #6]
 80096f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	88fa      	ldrh	r2, [r7, #6]
 80096f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009704:	d108      	bne.n	8009718 <HAL_UART_Transmit+0x84>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d104      	bne.n	8009718 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	e003      	b.n	8009720 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009728:	e02c      	b.n	8009784 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2200      	movs	r2, #0
 8009732:	2180      	movs	r1, #128	; 0x80
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f001 f949 	bl	800a9cc <UART_WaitOnFlagUntilTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e039      	b.n	80097b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10b      	bne.n	8009762 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009758:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	3302      	adds	r3, #2
 800975e:	61bb      	str	r3, [r7, #24]
 8009760:	e007      	b.n	8009772 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	781a      	ldrb	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	3301      	adds	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800978a:	b29b      	uxth	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1cc      	bne.n	800972a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2200      	movs	r2, #0
 8009798:	2140      	movs	r1, #64	; 0x40
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f001 f916 	bl	800a9cc <UART_WaitOnFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e006      	b.n	80097b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e000      	b.n	80097b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80097b6:	2302      	movs	r3, #2
  }
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	f040 80bc 	bne.w	8009952 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <HAL_UART_Receive_IT+0x26>
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e0b4      	b.n	8009954 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_UART_Receive_IT+0x38>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e0ad      	b.n	8009954 <HAL_UART_Receive_IT+0x194>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	88fa      	ldrh	r2, [r7, #6]
 800980a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	88fa      	ldrh	r2, [r7, #6]
 8009812:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009824:	d10e      	bne.n	8009844 <HAL_UART_Receive_IT+0x84>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d105      	bne.n	800983a <HAL_UART_Receive_IT+0x7a>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009834:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009838:	e02d      	b.n	8009896 <HAL_UART_Receive_IT+0xd6>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	22ff      	movs	r2, #255	; 0xff
 800983e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009842:	e028      	b.n	8009896 <HAL_UART_Receive_IT+0xd6>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10d      	bne.n	8009868 <HAL_UART_Receive_IT+0xa8>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <HAL_UART_Receive_IT+0x9e>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	22ff      	movs	r2, #255	; 0xff
 8009858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800985c:	e01b      	b.n	8009896 <HAL_UART_Receive_IT+0xd6>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	227f      	movs	r2, #127	; 0x7f
 8009862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009866:	e016      	b.n	8009896 <HAL_UART_Receive_IT+0xd6>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009870:	d10d      	bne.n	800988e <HAL_UART_Receive_IT+0xce>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <HAL_UART_Receive_IT+0xc4>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	227f      	movs	r2, #127	; 0x7f
 800987e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009882:	e008      	b.n	8009896 <HAL_UART_Receive_IT+0xd6>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	223f      	movs	r2, #63	; 0x3f
 8009888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800988c:	e003      	b.n	8009896 <HAL_UART_Receive_IT+0xd6>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2222      	movs	r2, #34	; 0x22
 80098a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 0201 	orr.w	r2, r2, #1
 80098b4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098be:	d12a      	bne.n	8009916 <HAL_UART_Receive_IT+0x156>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d324      	bcc.n	8009916 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d4:	d107      	bne.n	80098e6 <HAL_UART_Receive_IT+0x126>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a1f      	ldr	r2, [pc, #124]	; (8009960 <HAL_UART_Receive_IT+0x1a0>)
 80098e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80098e4:	e002      	b.n	80098ec <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4a1e      	ldr	r2, [pc, #120]	; (8009964 <HAL_UART_Receive_IT+0x1a4>)
 80098ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009902:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009912:	609a      	str	r2, [r3, #8]
 8009914:	e01b      	b.n	800994e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991e:	d107      	bne.n	8009930 <HAL_UART_Receive_IT+0x170>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4a0f      	ldr	r2, [pc, #60]	; (8009968 <HAL_UART_Receive_IT+0x1a8>)
 800992c:	66da      	str	r2, [r3, #108]	; 0x6c
 800992e:	e002      	b.n	8009936 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4a0e      	ldr	r2, [pc, #56]	; (800996c <HAL_UART_Receive_IT+0x1ac>)
 8009934:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800994c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	e000      	b.n	8009954 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009952:	2302      	movs	r3, #2
  }
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	0800add1 	.word	0x0800add1
 8009964:	0800acc9 	.word	0x0800acc9
 8009968:	0800ac1f 	.word	0x0800ac1f
 800996c:	0800ab75 	.word	0x0800ab75

08009970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	f640 030f 	movw	r3, #2063	; 0x80f
 8009996:	4013      	ands	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d118      	bne.n	80099d2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d013      	beq.n	80099d2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d009      	beq.n	80099d2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8145 	beq.w	8009c52 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	4798      	blx	r3
      }
      return;
 80099d0:	e13f      	b.n	8009c52 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 80e8 	beq.w	8009baa <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4ba1      	ldr	r3, [pc, #644]	; (8009c64 <HAL_UART_IRQHandler+0x2f4>)
 80099de:	4013      	ands	r3, r2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d105      	bne.n	80099f0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	4ba0      	ldr	r3, [pc, #640]	; (8009c68 <HAL_UART_IRQHandler+0x2f8>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 80dd 	beq.w	8009baa <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d010      	beq.n	8009a1c <HAL_UART_IRQHandler+0xac>
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00b      	beq.n	8009a1c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a12:	f043 0201 	orr.w	r2, r3, #1
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d010      	beq.n	8009a48 <HAL_UART_IRQHandler+0xd8>
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2202      	movs	r2, #2
 8009a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3e:	f043 0204 	orr.w	r2, r3, #4
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d010      	beq.n	8009a74 <HAL_UART_IRQHandler+0x104>
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2204      	movs	r2, #4
 8009a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6a:	f043 0202 	orr.w	r2, r3, #2
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d015      	beq.n	8009aaa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	f003 0320 	and.w	r3, r3, #32
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4b76      	ldr	r3, [pc, #472]	; (8009c64 <HAL_UART_IRQHandler+0x2f4>)
 8009a8c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2208      	movs	r2, #8
 8009a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa0:	f043 0208 	orr.w	r2, r3, #8
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d011      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x168>
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00c      	beq.n	8009ad8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	f043 0220 	orr.w	r2, r3, #32
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80b9 	beq.w	8009c56 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d011      	beq.n	8009b12 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f003 0320 	and.w	r3, r3, #32
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d007      	beq.n	8009b12 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b18:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b24:	2b40      	cmp	r3, #64	; 0x40
 8009b26:	d004      	beq.n	8009b32 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d031      	beq.n	8009b96 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 ffca 	bl	800aacc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b42:	2b40      	cmp	r3, #64	; 0x40
 8009b44:	d123      	bne.n	8009b8e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b54:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b62:	4a42      	ldr	r2, [pc, #264]	; (8009c6c <HAL_UART_IRQHandler+0x2fc>)
 8009b64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7f9 fc02 	bl	8003374 <HAL_DMA_Abort_IT>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d017      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b84:	e00f      	b.n	8009ba6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f87c 	bl	8009c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8c:	e00b      	b.n	8009ba6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f878 	bl	8009c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b94:	e007      	b.n	8009ba6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f874 	bl	8009c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009ba4:	e057      	b.n	8009c56 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba6:	bf00      	nop
    return;
 8009ba8:	e055      	b.n	8009c56 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00d      	beq.n	8009bd0 <HAL_UART_IRQHandler+0x260>
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d008      	beq.n	8009bd0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f001 f985 	bl	800aed8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bce:	e045      	b.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d012      	beq.n	8009c00 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d104      	bne.n	8009bee <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d008      	beq.n	8009c00 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d031      	beq.n	8009c5a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
    }
    return;
 8009bfe:	e02c      	b.n	8009c5a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d008      	beq.n	8009c1c <HAL_UART_IRQHandler+0x2ac>
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 ff93 	bl	800ab40 <UART_EndTransmit_IT>
    return;
 8009c1a:	e01f      	b.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d008      	beq.n	8009c38 <HAL_UART_IRQHandler+0x2c8>
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 f965 	bl	800af00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c36:	e011      	b.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00c      	beq.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da09      	bge.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f94f 	bl	800aeec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c4e:	bf00      	nop
 8009c50:	e004      	b.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
      return;
 8009c52:	bf00      	nop
 8009c54:	e002      	b.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009c5a:	bf00      	nop
  }
}
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	10000001 	.word	0x10000001
 8009c68:	04000120 	.word	0x04000120
 8009c6c:	0800ab15 	.word	0x0800ab15

08009c70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009c9c:	b08e      	sub	sp, #56	; 0x38
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	4bc1      	ldr	r3, [pc, #772]	; (8009fd8 <UART_SetConfig+0x340>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	6812      	ldr	r2, [r2, #0]
 8009cd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4ab7      	ldr	r2, [pc, #732]	; (8009fdc <UART_SetConfig+0x344>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d004      	beq.n	8009d0e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	4bb2      	ldr	r3, [pc, #712]	; (8009fe0 <UART_SetConfig+0x348>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	f023 010f 	bic.w	r1, r3, #15
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4aa9      	ldr	r2, [pc, #676]	; (8009fe4 <UART_SetConfig+0x34c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d177      	bne.n	8009e32 <UART_SetConfig+0x19a>
 8009d42:	4ba9      	ldr	r3, [pc, #676]	; (8009fe8 <UART_SetConfig+0x350>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d4a:	2b28      	cmp	r3, #40	; 0x28
 8009d4c:	d86c      	bhi.n	8009e28 <UART_SetConfig+0x190>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <UART_SetConfig+0xbc>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009df9 	.word	0x08009df9
 8009d58:	08009e29 	.word	0x08009e29
 8009d5c:	08009e29 	.word	0x08009e29
 8009d60:	08009e29 	.word	0x08009e29
 8009d64:	08009e29 	.word	0x08009e29
 8009d68:	08009e29 	.word	0x08009e29
 8009d6c:	08009e29 	.word	0x08009e29
 8009d70:	08009e29 	.word	0x08009e29
 8009d74:	08009e01 	.word	0x08009e01
 8009d78:	08009e29 	.word	0x08009e29
 8009d7c:	08009e29 	.word	0x08009e29
 8009d80:	08009e29 	.word	0x08009e29
 8009d84:	08009e29 	.word	0x08009e29
 8009d88:	08009e29 	.word	0x08009e29
 8009d8c:	08009e29 	.word	0x08009e29
 8009d90:	08009e29 	.word	0x08009e29
 8009d94:	08009e09 	.word	0x08009e09
 8009d98:	08009e29 	.word	0x08009e29
 8009d9c:	08009e29 	.word	0x08009e29
 8009da0:	08009e29 	.word	0x08009e29
 8009da4:	08009e29 	.word	0x08009e29
 8009da8:	08009e29 	.word	0x08009e29
 8009dac:	08009e29 	.word	0x08009e29
 8009db0:	08009e29 	.word	0x08009e29
 8009db4:	08009e11 	.word	0x08009e11
 8009db8:	08009e29 	.word	0x08009e29
 8009dbc:	08009e29 	.word	0x08009e29
 8009dc0:	08009e29 	.word	0x08009e29
 8009dc4:	08009e29 	.word	0x08009e29
 8009dc8:	08009e29 	.word	0x08009e29
 8009dcc:	08009e29 	.word	0x08009e29
 8009dd0:	08009e29 	.word	0x08009e29
 8009dd4:	08009e19 	.word	0x08009e19
 8009dd8:	08009e29 	.word	0x08009e29
 8009ddc:	08009e29 	.word	0x08009e29
 8009de0:	08009e29 	.word	0x08009e29
 8009de4:	08009e29 	.word	0x08009e29
 8009de8:	08009e29 	.word	0x08009e29
 8009dec:	08009e29 	.word	0x08009e29
 8009df0:	08009e29 	.word	0x08009e29
 8009df4:	08009e21 	.word	0x08009e21
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e233      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e00:	2304      	movs	r3, #4
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e22f      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e08:	2308      	movs	r3, #8
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e22b      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e10:	2310      	movs	r3, #16
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e227      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e18:	2320      	movs	r3, #32
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e223      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e21f      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e28:	2380      	movs	r3, #128	; 0x80
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	bf00      	nop
 8009e30:	e21a      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a6d      	ldr	r2, [pc, #436]	; (8009fec <UART_SetConfig+0x354>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d132      	bne.n	8009ea2 <UART_SetConfig+0x20a>
 8009e3c:	4b6a      	ldr	r3, [pc, #424]	; (8009fe8 <UART_SetConfig+0x350>)
 8009e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	2b05      	cmp	r3, #5
 8009e46:	d827      	bhi.n	8009e98 <UART_SetConfig+0x200>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0x1b8>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009e69 	.word	0x08009e69
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	08009e79 	.word	0x08009e79
 8009e5c:	08009e81 	.word	0x08009e81
 8009e60:	08009e89 	.word	0x08009e89
 8009e64:	08009e91 	.word	0x08009e91
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e1fb      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e70:	2304      	movs	r3, #4
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e1f7      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e78:	2308      	movs	r3, #8
 8009e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7e:	e1f3      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e80:	2310      	movs	r3, #16
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e1ef      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e88:	2320      	movs	r3, #32
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8e:	e1eb      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e1e7      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009e98:	2380      	movs	r3, #128	; 0x80
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	bf00      	nop
 8009ea0:	e1e2      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a52      	ldr	r2, [pc, #328]	; (8009ff0 <UART_SetConfig+0x358>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d132      	bne.n	8009f12 <UART_SetConfig+0x27a>
 8009eac:	4b4e      	ldr	r3, [pc, #312]	; (8009fe8 <UART_SetConfig+0x350>)
 8009eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb0:	f003 0307 	and.w	r3, r3, #7
 8009eb4:	2b05      	cmp	r3, #5
 8009eb6:	d827      	bhi.n	8009f08 <UART_SetConfig+0x270>
 8009eb8:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <UART_SetConfig+0x228>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009ee9 	.word	0x08009ee9
 8009ecc:	08009ef1 	.word	0x08009ef1
 8009ed0:	08009ef9 	.word	0x08009ef9
 8009ed4:	08009f01 	.word	0x08009f01
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e1c3      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e1bf      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eee:	e1bb      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef6:	e1b7      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009ef8:	2320      	movs	r3, #32
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efe:	e1b3      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f06:	e1af      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f08:	2380      	movs	r3, #128	; 0x80
 8009f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0e:	bf00      	nop
 8009f10:	e1aa      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a37      	ldr	r2, [pc, #220]	; (8009ff4 <UART_SetConfig+0x35c>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d132      	bne.n	8009f82 <UART_SetConfig+0x2ea>
 8009f1c:	4b32      	ldr	r3, [pc, #200]	; (8009fe8 <UART_SetConfig+0x350>)
 8009f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	2b05      	cmp	r3, #5
 8009f26:	d827      	bhi.n	8009f78 <UART_SetConfig+0x2e0>
 8009f28:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <UART_SetConfig+0x298>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f49 	.word	0x08009f49
 8009f34:	08009f51 	.word	0x08009f51
 8009f38:	08009f59 	.word	0x08009f59
 8009f3c:	08009f61 	.word	0x08009f61
 8009f40:	08009f69 	.word	0x08009f69
 8009f44:	08009f71 	.word	0x08009f71
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4e:	e18b      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f50:	2304      	movs	r3, #4
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f56:	e187      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f58:	2308      	movs	r3, #8
 8009f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5e:	e183      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f60:	2310      	movs	r3, #16
 8009f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f66:	e17f      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f68:	2320      	movs	r3, #32
 8009f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6e:	e17b      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f70:	2340      	movs	r3, #64	; 0x40
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f76:	e177      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	bf00      	nop
 8009f80:	e172      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1c      	ldr	r2, [pc, #112]	; (8009ff8 <UART_SetConfig+0x360>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d144      	bne.n	800a016 <UART_SetConfig+0x37e>
 8009f8c:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <UART_SetConfig+0x350>)
 8009f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	2b05      	cmp	r3, #5
 8009f96:	d839      	bhi.n	800a00c <UART_SetConfig+0x374>
 8009f98:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <UART_SetConfig+0x308>)
 8009f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9e:	bf00      	nop
 8009fa0:	08009fb9 	.word	0x08009fb9
 8009fa4:	08009fc1 	.word	0x08009fc1
 8009fa8:	08009fc9 	.word	0x08009fc9
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	08009ffd 	.word	0x08009ffd
 8009fb4:	0800a005 	.word	0x0800a005
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e153      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc6:	e14f      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009fc8:	2308      	movs	r3, #8
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e14b      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e147      	b.n	800a268 <UART_SetConfig+0x5d0>
 8009fd8:	cfff69f3 	.word	0xcfff69f3
 8009fdc:	58000c00 	.word	0x58000c00
 8009fe0:	11fff4ff 	.word	0x11fff4ff
 8009fe4:	40011000 	.word	0x40011000
 8009fe8:	58024400 	.word	0x58024400
 8009fec:	40004400 	.word	0x40004400
 8009ff0:	40004800 	.word	0x40004800
 8009ff4:	40004c00 	.word	0x40004c00
 8009ff8:	40005000 	.word	0x40005000
 8009ffc:	2320      	movs	r3, #32
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e131      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e12d      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	bf00      	nop
 800a014:	e128      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4ab6      	ldr	r2, [pc, #728]	; (800a2f4 <UART_SetConfig+0x65c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d178      	bne.n	800a112 <UART_SetConfig+0x47a>
 800a020:	4bb5      	ldr	r3, [pc, #724]	; (800a2f8 <UART_SetConfig+0x660>)
 800a022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a028:	2b28      	cmp	r3, #40	; 0x28
 800a02a:	d86d      	bhi.n	800a108 <UART_SetConfig+0x470>
 800a02c:	a201      	add	r2, pc, #4	; (adr r2, 800a034 <UART_SetConfig+0x39c>)
 800a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a032:	bf00      	nop
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a109 	.word	0x0800a109
 800a03c:	0800a109 	.word	0x0800a109
 800a040:	0800a109 	.word	0x0800a109
 800a044:	0800a109 	.word	0x0800a109
 800a048:	0800a109 	.word	0x0800a109
 800a04c:	0800a109 	.word	0x0800a109
 800a050:	0800a109 	.word	0x0800a109
 800a054:	0800a0e1 	.word	0x0800a0e1
 800a058:	0800a109 	.word	0x0800a109
 800a05c:	0800a109 	.word	0x0800a109
 800a060:	0800a109 	.word	0x0800a109
 800a064:	0800a109 	.word	0x0800a109
 800a068:	0800a109 	.word	0x0800a109
 800a06c:	0800a109 	.word	0x0800a109
 800a070:	0800a109 	.word	0x0800a109
 800a074:	0800a0e9 	.word	0x0800a0e9
 800a078:	0800a109 	.word	0x0800a109
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a109 	.word	0x0800a109
 800a084:	0800a109 	.word	0x0800a109
 800a088:	0800a109 	.word	0x0800a109
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a109 	.word	0x0800a109
 800a094:	0800a0f1 	.word	0x0800a0f1
 800a098:	0800a109 	.word	0x0800a109
 800a09c:	0800a109 	.word	0x0800a109
 800a0a0:	0800a109 	.word	0x0800a109
 800a0a4:	0800a109 	.word	0x0800a109
 800a0a8:	0800a109 	.word	0x0800a109
 800a0ac:	0800a109 	.word	0x0800a109
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a0f9 	.word	0x0800a0f9
 800a0b8:	0800a109 	.word	0x0800a109
 800a0bc:	0800a109 	.word	0x0800a109
 800a0c0:	0800a109 	.word	0x0800a109
 800a0c4:	0800a109 	.word	0x0800a109
 800a0c8:	0800a109 	.word	0x0800a109
 800a0cc:	0800a109 	.word	0x0800a109
 800a0d0:	0800a109 	.word	0x0800a109
 800a0d4:	0800a101 	.word	0x0800a101
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0de:	e0c3      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e6:	e0bf      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ee:	e0bb      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f6:	e0b7      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fe:	e0b3      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a100:	2340      	movs	r3, #64	; 0x40
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a106:	e0af      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10e:	bf00      	nop
 800a110:	e0aa      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a79      	ldr	r2, [pc, #484]	; (800a2fc <UART_SetConfig+0x664>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d132      	bne.n	800a182 <UART_SetConfig+0x4ea>
 800a11c:	4b76      	ldr	r3, [pc, #472]	; (800a2f8 <UART_SetConfig+0x660>)
 800a11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a120:	f003 0307 	and.w	r3, r3, #7
 800a124:	2b05      	cmp	r3, #5
 800a126:	d827      	bhi.n	800a178 <UART_SetConfig+0x4e0>
 800a128:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <UART_SetConfig+0x498>)
 800a12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12e:	bf00      	nop
 800a130:	0800a149 	.word	0x0800a149
 800a134:	0800a151 	.word	0x0800a151
 800a138:	0800a159 	.word	0x0800a159
 800a13c:	0800a161 	.word	0x0800a161
 800a140:	0800a169 	.word	0x0800a169
 800a144:	0800a171 	.word	0x0800a171
 800a148:	2300      	movs	r3, #0
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	e08b      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a150:	2304      	movs	r3, #4
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	e087      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a158:	2308      	movs	r3, #8
 800a15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15e:	e083      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a160:	2310      	movs	r3, #16
 800a162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a166:	e07f      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a168:	2320      	movs	r3, #32
 800a16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a16e:	e07b      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a170:	2340      	movs	r3, #64	; 0x40
 800a172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a176:	e077      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a178:	2380      	movs	r3, #128	; 0x80
 800a17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a17e:	bf00      	nop
 800a180:	e072      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a5e      	ldr	r2, [pc, #376]	; (800a300 <UART_SetConfig+0x668>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d132      	bne.n	800a1f2 <UART_SetConfig+0x55a>
 800a18c:	4b5a      	ldr	r3, [pc, #360]	; (800a2f8 <UART_SetConfig+0x660>)
 800a18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	2b05      	cmp	r3, #5
 800a196:	d827      	bhi.n	800a1e8 <UART_SetConfig+0x550>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x508>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1b9 	.word	0x0800a1b9
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1d9 	.word	0x0800a1d9
 800a1b4:	0800a1e1 	.word	0x0800a1e1
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1be:	e053      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1c0:	2304      	movs	r3, #4
 800a1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c6:	e04f      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ce:	e04b      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1d0:	2310      	movs	r3, #16
 800a1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d6:	e047      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1de:	e043      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1e0:	2340      	movs	r3, #64	; 0x40
 800a1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e6:	e03f      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1e8:	2380      	movs	r3, #128	; 0x80
 800a1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ee:	bf00      	nop
 800a1f0:	e03a      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a43      	ldr	r2, [pc, #268]	; (800a304 <UART_SetConfig+0x66c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d132      	bne.n	800a262 <UART_SetConfig+0x5ca>
 800a1fc:	4b3e      	ldr	r3, [pc, #248]	; (800a2f8 <UART_SetConfig+0x660>)
 800a1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a200:	f003 0307 	and.w	r3, r3, #7
 800a204:	2b05      	cmp	r3, #5
 800a206:	d827      	bhi.n	800a258 <UART_SetConfig+0x5c0>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <UART_SetConfig+0x578>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	2302      	movs	r3, #2
 800a22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22e:	e01b      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e017      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e013      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e00f      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a248:	2320      	movs	r3, #32
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e00b      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e007      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a258:	2380      	movs	r3, #128	; 0x80
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	bf00      	nop
 800a260:	e002      	b.n	800a268 <UART_SetConfig+0x5d0>
 800a262:	2380      	movs	r3, #128	; 0x80
 800a264:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a25      	ldr	r2, [pc, #148]	; (800a304 <UART_SetConfig+0x66c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	f040 80b8 	bne.w	800a3e4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a274:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d019      	beq.n	800a2b0 <UART_SetConfig+0x618>
 800a27c:	2b08      	cmp	r3, #8
 800a27e:	dc04      	bgt.n	800a28a <UART_SetConfig+0x5f2>
 800a280:	2b02      	cmp	r3, #2
 800a282:	d009      	beq.n	800a298 <UART_SetConfig+0x600>
 800a284:	2b04      	cmp	r3, #4
 800a286:	d00b      	beq.n	800a2a0 <UART_SetConfig+0x608>
 800a288:	e042      	b.n	800a310 <UART_SetConfig+0x678>
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d02b      	beq.n	800a2e6 <UART_SetConfig+0x64e>
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d02c      	beq.n	800a2ec <UART_SetConfig+0x654>
 800a292:	2b10      	cmp	r3, #16
 800a294:	d014      	beq.n	800a2c0 <UART_SetConfig+0x628>
 800a296:	e03b      	b.n	800a310 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a298:	f7fd fc8a 	bl	8007bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a29c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a29e:	e03d      	b.n	800a31c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a0:	f107 0314 	add.w	r3, r7, #20
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fd fc99 	bl	8007bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ae:	e035      	b.n	800a31c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b0:	f107 0308 	add.w	r3, r7, #8
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fd fddd 	bl	8007e74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2be:	e02d      	b.n	800a31c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c0:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <UART_SetConfig+0x660>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <UART_SetConfig+0x660>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	08db      	lsrs	r3, r3, #3
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	4a0c      	ldr	r2, [pc, #48]	; (800a308 <UART_SetConfig+0x670>)
 800a2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2de:	e01d      	b.n	800a31c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a2e0:	4b09      	ldr	r3, [pc, #36]	; (800a308 <UART_SetConfig+0x670>)
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e4:	e01a      	b.n	800a31c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e6:	4b09      	ldr	r3, [pc, #36]	; (800a30c <UART_SetConfig+0x674>)
 800a2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ea:	e017      	b.n	800a31c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2f2:	e013      	b.n	800a31c <UART_SetConfig+0x684>
 800a2f4:	40011400 	.word	0x40011400
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	40007800 	.word	0x40007800
 800a300:	40007c00 	.word	0x40007c00
 800a304:	58000c00 	.word	0x58000c00
 800a308:	03d09000 	.word	0x03d09000
 800a30c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a31a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 824d 	beq.w	800a7be <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	4aad      	ldr	r2, [pc, #692]	; (800a5e0 <UART_SetConfig+0x948>)
 800a32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a32e:	461a      	mov	r2, r3
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	fbb3 f3f2 	udiv	r3, r3, r2
 800a336:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	4613      	mov	r3, r2
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	4413      	add	r3, r2
 800a342:	6a3a      	ldr	r2, [r7, #32]
 800a344:	429a      	cmp	r2, r3
 800a346:	d305      	bcc.n	800a354 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a34e:	6a3a      	ldr	r2, [r7, #32]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a35a:	e230      	b.n	800a7be <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	4618      	mov	r0, r3
 800a360:	f04f 0100 	mov.w	r1, #0
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	4a9d      	ldr	r2, [pc, #628]	; (800a5e0 <UART_SetConfig+0x948>)
 800a36a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	f04f 0400 	mov.w	r4, #0
 800a374:	461a      	mov	r2, r3
 800a376:	4623      	mov	r3, r4
 800a378:	f7f5 ffb6 	bl	80002e8 <__aeabi_uldivmod>
 800a37c:	4603      	mov	r3, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	4619      	mov	r1, r3
 800a382:	4622      	mov	r2, r4
 800a384:	f04f 0300 	mov.w	r3, #0
 800a388:	f04f 0400 	mov.w	r4, #0
 800a38c:	0214      	lsls	r4, r2, #8
 800a38e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a392:	020b      	lsls	r3, r1, #8
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6852      	ldr	r2, [r2, #4]
 800a398:	0852      	lsrs	r2, r2, #1
 800a39a:	4611      	mov	r1, r2
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	eb13 0b01 	adds.w	fp, r3, r1
 800a3a4:	eb44 0c02 	adc.w	ip, r4, r2
 800a3a8:	4658      	mov	r0, fp
 800a3aa:	4661      	mov	r1, ip
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f04f 0400 	mov.w	r4, #0
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4623      	mov	r3, r4
 800a3b8:	f7f5 ff96 	bl	80002e8 <__aeabi_uldivmod>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3c8:	d308      	bcc.n	800a3dc <UART_SetConfig+0x744>
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3d0:	d204      	bcs.n	800a3dc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d8:	60da      	str	r2, [r3, #12]
 800a3da:	e1f0      	b.n	800a7be <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a3e2:	e1ec      	b.n	800a7be <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ec:	f040 8100 	bne.w	800a5f0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a3f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3f4:	2b40      	cmp	r3, #64	; 0x40
 800a3f6:	f200 80b7 	bhi.w	800a568 <UART_SetConfig+0x8d0>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <UART_SetConfig+0x768>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a505 	.word	0x0800a505
 800a404:	0800a50d 	.word	0x0800a50d
 800a408:	0800a569 	.word	0x0800a569
 800a40c:	0800a569 	.word	0x0800a569
 800a410:	0800a515 	.word	0x0800a515
 800a414:	0800a569 	.word	0x0800a569
 800a418:	0800a569 	.word	0x0800a569
 800a41c:	0800a569 	.word	0x0800a569
 800a420:	0800a525 	.word	0x0800a525
 800a424:	0800a569 	.word	0x0800a569
 800a428:	0800a569 	.word	0x0800a569
 800a42c:	0800a569 	.word	0x0800a569
 800a430:	0800a569 	.word	0x0800a569
 800a434:	0800a569 	.word	0x0800a569
 800a438:	0800a569 	.word	0x0800a569
 800a43c:	0800a569 	.word	0x0800a569
 800a440:	0800a535 	.word	0x0800a535
 800a444:	0800a569 	.word	0x0800a569
 800a448:	0800a569 	.word	0x0800a569
 800a44c:	0800a569 	.word	0x0800a569
 800a450:	0800a569 	.word	0x0800a569
 800a454:	0800a569 	.word	0x0800a569
 800a458:	0800a569 	.word	0x0800a569
 800a45c:	0800a569 	.word	0x0800a569
 800a460:	0800a569 	.word	0x0800a569
 800a464:	0800a569 	.word	0x0800a569
 800a468:	0800a569 	.word	0x0800a569
 800a46c:	0800a569 	.word	0x0800a569
 800a470:	0800a569 	.word	0x0800a569
 800a474:	0800a569 	.word	0x0800a569
 800a478:	0800a569 	.word	0x0800a569
 800a47c:	0800a569 	.word	0x0800a569
 800a480:	0800a55b 	.word	0x0800a55b
 800a484:	0800a569 	.word	0x0800a569
 800a488:	0800a569 	.word	0x0800a569
 800a48c:	0800a569 	.word	0x0800a569
 800a490:	0800a569 	.word	0x0800a569
 800a494:	0800a569 	.word	0x0800a569
 800a498:	0800a569 	.word	0x0800a569
 800a49c:	0800a569 	.word	0x0800a569
 800a4a0:	0800a569 	.word	0x0800a569
 800a4a4:	0800a569 	.word	0x0800a569
 800a4a8:	0800a569 	.word	0x0800a569
 800a4ac:	0800a569 	.word	0x0800a569
 800a4b0:	0800a569 	.word	0x0800a569
 800a4b4:	0800a569 	.word	0x0800a569
 800a4b8:	0800a569 	.word	0x0800a569
 800a4bc:	0800a569 	.word	0x0800a569
 800a4c0:	0800a569 	.word	0x0800a569
 800a4c4:	0800a569 	.word	0x0800a569
 800a4c8:	0800a569 	.word	0x0800a569
 800a4cc:	0800a569 	.word	0x0800a569
 800a4d0:	0800a569 	.word	0x0800a569
 800a4d4:	0800a569 	.word	0x0800a569
 800a4d8:	0800a569 	.word	0x0800a569
 800a4dc:	0800a569 	.word	0x0800a569
 800a4e0:	0800a569 	.word	0x0800a569
 800a4e4:	0800a569 	.word	0x0800a569
 800a4e8:	0800a569 	.word	0x0800a569
 800a4ec:	0800a569 	.word	0x0800a569
 800a4f0:	0800a569 	.word	0x0800a569
 800a4f4:	0800a569 	.word	0x0800a569
 800a4f8:	0800a569 	.word	0x0800a569
 800a4fc:	0800a569 	.word	0x0800a569
 800a500:	0800a561 	.word	0x0800a561
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a504:	f7fc fc3a 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 800a508:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a50a:	e033      	b.n	800a574 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a50c:	f7fc fc4c 	bl	8006da8 <HAL_RCC_GetPCLK2Freq>
 800a510:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a512:	e02f      	b.n	800a574 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fd fb5f 	bl	8007bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a522:	e027      	b.n	800a574 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a524:	f107 0308 	add.w	r3, r7, #8
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd fca3 	bl	8007e74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a532:	e01f      	b.n	800a574 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a534:	4b2b      	ldr	r3, [pc, #172]	; (800a5e4 <UART_SetConfig+0x94c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d009      	beq.n	800a554 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a540:	4b28      	ldr	r3, [pc, #160]	; (800a5e4 <UART_SetConfig+0x94c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	08db      	lsrs	r3, r3, #3
 800a546:	f003 0303 	and.w	r3, r3, #3
 800a54a:	4a27      	ldr	r2, [pc, #156]	; (800a5e8 <UART_SetConfig+0x950>)
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
 800a550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a552:	e00f      	b.n	800a574 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a554:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <UART_SetConfig+0x950>)
 800a556:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a558:	e00c      	b.n	800a574 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <UART_SetConfig+0x954>)
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a55e:	e009      	b.n	800a574 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a566:	e005      	b.n	800a574 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a572:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 8121 	beq.w	800a7be <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	4a17      	ldr	r2, [pc, #92]	; (800a5e0 <UART_SetConfig+0x948>)
 800a582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a586:	461a      	mov	r2, r3
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a58e:	005a      	lsls	r2, r3, #1
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	085b      	lsrs	r3, r3, #1
 800a596:	441a      	add	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	2b0f      	cmp	r3, #15
 800a5a8:	d916      	bls.n	800a5d8 <UART_SetConfig+0x940>
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b0:	d212      	bcs.n	800a5d8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f023 030f 	bic.w	r3, r3, #15
 800a5ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5d4:	60da      	str	r2, [r3, #12]
 800a5d6:	e0f2      	b.n	800a7be <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a5de:	e0ee      	b.n	800a7be <UART_SetConfig+0xb26>
 800a5e0:	0800be6c 	.word	0x0800be6c
 800a5e4:	58024400 	.word	0x58024400
 800a5e8:	03d09000 	.word	0x03d09000
 800a5ec:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5f4:	2b40      	cmp	r3, #64	; 0x40
 800a5f6:	f200 80b7 	bhi.w	800a768 <UART_SetConfig+0xad0>
 800a5fa:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <UART_SetConfig+0x968>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a705 	.word	0x0800a705
 800a604:	0800a70d 	.word	0x0800a70d
 800a608:	0800a769 	.word	0x0800a769
 800a60c:	0800a769 	.word	0x0800a769
 800a610:	0800a715 	.word	0x0800a715
 800a614:	0800a769 	.word	0x0800a769
 800a618:	0800a769 	.word	0x0800a769
 800a61c:	0800a769 	.word	0x0800a769
 800a620:	0800a725 	.word	0x0800a725
 800a624:	0800a769 	.word	0x0800a769
 800a628:	0800a769 	.word	0x0800a769
 800a62c:	0800a769 	.word	0x0800a769
 800a630:	0800a769 	.word	0x0800a769
 800a634:	0800a769 	.word	0x0800a769
 800a638:	0800a769 	.word	0x0800a769
 800a63c:	0800a769 	.word	0x0800a769
 800a640:	0800a735 	.word	0x0800a735
 800a644:	0800a769 	.word	0x0800a769
 800a648:	0800a769 	.word	0x0800a769
 800a64c:	0800a769 	.word	0x0800a769
 800a650:	0800a769 	.word	0x0800a769
 800a654:	0800a769 	.word	0x0800a769
 800a658:	0800a769 	.word	0x0800a769
 800a65c:	0800a769 	.word	0x0800a769
 800a660:	0800a769 	.word	0x0800a769
 800a664:	0800a769 	.word	0x0800a769
 800a668:	0800a769 	.word	0x0800a769
 800a66c:	0800a769 	.word	0x0800a769
 800a670:	0800a769 	.word	0x0800a769
 800a674:	0800a769 	.word	0x0800a769
 800a678:	0800a769 	.word	0x0800a769
 800a67c:	0800a769 	.word	0x0800a769
 800a680:	0800a75b 	.word	0x0800a75b
 800a684:	0800a769 	.word	0x0800a769
 800a688:	0800a769 	.word	0x0800a769
 800a68c:	0800a769 	.word	0x0800a769
 800a690:	0800a769 	.word	0x0800a769
 800a694:	0800a769 	.word	0x0800a769
 800a698:	0800a769 	.word	0x0800a769
 800a69c:	0800a769 	.word	0x0800a769
 800a6a0:	0800a769 	.word	0x0800a769
 800a6a4:	0800a769 	.word	0x0800a769
 800a6a8:	0800a769 	.word	0x0800a769
 800a6ac:	0800a769 	.word	0x0800a769
 800a6b0:	0800a769 	.word	0x0800a769
 800a6b4:	0800a769 	.word	0x0800a769
 800a6b8:	0800a769 	.word	0x0800a769
 800a6bc:	0800a769 	.word	0x0800a769
 800a6c0:	0800a769 	.word	0x0800a769
 800a6c4:	0800a769 	.word	0x0800a769
 800a6c8:	0800a769 	.word	0x0800a769
 800a6cc:	0800a769 	.word	0x0800a769
 800a6d0:	0800a769 	.word	0x0800a769
 800a6d4:	0800a769 	.word	0x0800a769
 800a6d8:	0800a769 	.word	0x0800a769
 800a6dc:	0800a769 	.word	0x0800a769
 800a6e0:	0800a769 	.word	0x0800a769
 800a6e4:	0800a769 	.word	0x0800a769
 800a6e8:	0800a769 	.word	0x0800a769
 800a6ec:	0800a769 	.word	0x0800a769
 800a6f0:	0800a769 	.word	0x0800a769
 800a6f4:	0800a769 	.word	0x0800a769
 800a6f8:	0800a769 	.word	0x0800a769
 800a6fc:	0800a769 	.word	0x0800a769
 800a700:	0800a761 	.word	0x0800a761
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a704:	f7fc fb3a 	bl	8006d7c <HAL_RCC_GetPCLK1Freq>
 800a708:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a70a:	e033      	b.n	800a774 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a70c:	f7fc fb4c 	bl	8006da8 <HAL_RCC_GetPCLK2Freq>
 800a710:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a712:	e02f      	b.n	800a774 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a714:	f107 0314 	add.w	r3, r7, #20
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fd fa5f 	bl	8007bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a722:	e027      	b.n	800a774 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a724:	f107 0308 	add.w	r3, r7, #8
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fd fba3 	bl	8007e74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a732:	e01f      	b.n	800a774 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a734:	4b2c      	ldr	r3, [pc, #176]	; (800a7e8 <UART_SetConfig+0xb50>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a740:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <UART_SetConfig+0xb50>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	08db      	lsrs	r3, r3, #3
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	4a28      	ldr	r2, [pc, #160]	; (800a7ec <UART_SetConfig+0xb54>)
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
 800a750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a752:	e00f      	b.n	800a774 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a754:	4b25      	ldr	r3, [pc, #148]	; (800a7ec <UART_SetConfig+0xb54>)
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a758:	e00c      	b.n	800a774 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a75a:	4b25      	ldr	r3, [pc, #148]	; (800a7f0 <UART_SetConfig+0xb58>)
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a75e:	e009      	b.n	800a774 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a764:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a766:	e005      	b.n	800a774 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a772:	bf00      	nop
    }

    if (pclk != 0U)
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d021      	beq.n	800a7be <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	4a1d      	ldr	r2, [pc, #116]	; (800a7f4 <UART_SetConfig+0xb5c>)
 800a780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a784:	461a      	mov	r2, r3
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	fbb3 f2f2 	udiv	r2, r3, r2
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	085b      	lsrs	r3, r3, #1
 800a792:	441a      	add	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	2b0f      	cmp	r3, #15
 800a7a4:	d908      	bls.n	800a7b8 <UART_SetConfig+0xb20>
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ac:	d204      	bcs.n	800a7b8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b4:	60da      	str	r2, [r3, #12]
 800a7b6:	e002      	b.n	800a7be <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a7da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3738      	adds	r7, #56	; 0x38
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	03d09000 	.word	0x03d09000
 800a7f0:	003d0900 	.word	0x003d0900
 800a7f4:	0800be6c 	.word	0x0800be6c

0800a7f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00a      	beq.n	800a822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	430a      	orrs	r2, r1
 800a842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	f003 0308 	and.w	r3, r3, #8
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00a      	beq.n	800a8aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01a      	beq.n	800a90e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8f6:	d10a      	bne.n	800a90e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	605a      	str	r2, [r3, #4]
  }
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af02      	add	r7, sp, #8
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a94c:	f7f6 ffc2 	bl	80018d4 <HAL_GetTick>
 800a950:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0308 	and.w	r3, r3, #8
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d10e      	bne.n	800a97e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f82c 	bl	800a9cc <UART_WaitOnFlagUntilTimeout>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e022      	b.n	800a9c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d10e      	bne.n	800a9aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a98c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f816 	bl	800a9cc <UART_WaitOnFlagUntilTimeout>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e00c      	b.n	800a9c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9dc:	e062      	b.n	800aaa4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e4:	d05e      	beq.n	800aaa4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9e6:	f7f6 ff75 	bl	80018d4 <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d302      	bcc.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11d      	bne.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa0a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0201 	bic.w	r2, r2, #1
 800aa1a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2220      	movs	r2, #32
 800aa28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e045      	b.n	800aac4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0304 	and.w	r3, r3, #4
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02e      	beq.n	800aaa4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa54:	d126      	bne.n	800aaa4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa6e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0201 	bic.w	r2, r2, #1
 800aa7e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2220      	movs	r2, #32
 800aa84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2220      	movs	r2, #32
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e00f      	b.n	800aac4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69da      	ldr	r2, [r3, #28]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4013      	ands	r3, r2
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	bf0c      	ite	eq
 800aab4:	2301      	moveq	r3, #1
 800aab6:	2300      	movne	r3, #0
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	461a      	mov	r2, r3
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d08d      	beq.n	800a9de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aae2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6899      	ldr	r1, [r3, #8]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b08      	ldr	r3, [pc, #32]	; (800ab10 <UART_EndRxTransfer+0x44>)
 800aaf0:	400b      	ands	r3, r1
 800aaf2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	effffffe 	.word	0xeffffffe

0800ab14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f7ff f8a6 	bl	8009c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab38:	bf00      	nop
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff f882 	bl	8009c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab82:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab8a:	2b22      	cmp	r3, #34	; 0x22
 800ab8c:	d13b      	bne.n	800ac06 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab96:	89bb      	ldrh	r3, [r7, #12]
 800ab98:	b2d9      	uxtb	r1, r3
 800ab9a:	89fb      	ldrh	r3, [r7, #14]
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba2:	400a      	ands	r2, r1
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3b01      	subs	r3, #1
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abca:	b29b      	uxth	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d122      	bne.n	800ac16 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abde:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689a      	ldr	r2, [r3, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0201 	bic.w	r2, r2, #1
 800abee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fad0 	bl	800b1a4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac04:	e007      	b.n	800ac16 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	699a      	ldr	r2, [r3, #24]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f042 0208 	orr.w	r2, r2, #8
 800ac14:	619a      	str	r2, [r3, #24]
}
 800ac16:	bf00      	nop
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac2c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac34:	2b22      	cmp	r3, #34	; 0x22
 800ac36:	d13b      	bne.n	800acb0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac44:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ac46:	89ba      	ldrh	r2, [r7, #12]
 800ac48:	89fb      	ldrh	r3, [r7, #14]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac56:	1c9a      	adds	r2, r3, #2
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d122      	bne.n	800acc0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac88:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0201 	bic.w	r2, r2, #1
 800ac98:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fa7b 	bl	800b1a4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acae:	e007      	b.n	800acc0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	699a      	ldr	r2, [r3, #24]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f042 0208 	orr.w	r2, r2, #8
 800acbe:	619a      	str	r2, [r3, #24]
}
 800acc0:	bf00      	nop
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acd6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acde:	2b22      	cmp	r3, #34	; 0x22
 800ace0:	d166      	bne.n	800adb0 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ace8:	81fb      	strh	r3, [r7, #14]
 800acea:	e03d      	b.n	800ad68 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800acf4:	893b      	ldrh	r3, [r7, #8]
 800acf6:	b2d9      	uxtb	r1, r3
 800acf8:	89bb      	ldrh	r3, [r7, #12]
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad00:	400a      	ands	r2, r1
 800ad02:	b2d2      	uxtb	r2, r2
 800ad04:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d119      	bne.n	800ad62 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad3c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6899      	ldr	r1, [r3, #8]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	4b1f      	ldr	r3, [pc, #124]	; (800adc8 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800ad4a:	400b      	ands	r3, r1
 800ad4c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2220      	movs	r2, #32
 800ad52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fa21 	bl	800b1a4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ad62:	89fb      	ldrh	r3, [r7, #14]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	81fb      	strh	r3, [r7, #14]
 800ad68:	89fb      	ldrh	r3, [r7, #14]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1be      	bne.n	800acec <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad74:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad76:	897b      	ldrh	r3, [r7, #10]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d021      	beq.n	800adc0 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad82:	897a      	ldrh	r2, [r7, #10]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d21b      	bcs.n	800adc0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad96:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a0c      	ldr	r2, [pc, #48]	; (800adcc <UART_RxISR_8BIT_FIFOEN+0x104>)
 800ad9c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0220 	orr.w	r2, r2, #32
 800adac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adae:	e007      	b.n	800adc0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	699a      	ldr	r2, [r3, #24]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f042 0208 	orr.w	r2, r2, #8
 800adbe:	619a      	str	r2, [r3, #24]
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	effffffe 	.word	0xeffffffe
 800adcc:	0800ab75 	.word	0x0800ab75

0800add0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adde:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ade6:	2b22      	cmp	r3, #34	; 0x22
 800ade8:	d166      	bne.n	800aeb8 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adf0:	82fb      	strh	r3, [r7, #22]
 800adf2:	e03d      	b.n	800ae70 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae00:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800ae02:	8a3a      	ldrh	r2, [r7, #16]
 800ae04:	8abb      	ldrh	r3, [r7, #20]
 800ae06:	4013      	ands	r3, r2
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae12:	1c9a      	adds	r2, r3, #2
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	3b01      	subs	r3, #1
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d119      	bne.n	800ae6a <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae44:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6899      	ldr	r1, [r3, #8]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	4b1f      	ldr	r3, [pc, #124]	; (800aed0 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800ae52:	400b      	ands	r3, r1
 800ae54:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f99d 	bl	800b1a4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ae6a:	8afb      	ldrh	r3, [r7, #22]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	82fb      	strh	r3, [r7, #22]
 800ae70:	8afb      	ldrh	r3, [r7, #22]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1be      	bne.n	800adf4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae7c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae7e:	8a7b      	ldrh	r3, [r7, #18]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d021      	beq.n	800aec8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ae8a:	8a7a      	ldrh	r2, [r7, #18]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d21b      	bcs.n	800aec8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689a      	ldr	r2, [r3, #8]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ae9e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a0c      	ldr	r2, [pc, #48]	; (800aed4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800aea4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f042 0220 	orr.w	r2, r2, #32
 800aeb4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aeb6:	e007      	b.n	800aec8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0208 	orr.w	r2, r2, #8
 800aec6:	619a      	str	r2, [r3, #24]
}
 800aec8:	bf00      	nop
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	effffffe 	.word	0xeffffffe
 800aed4:	0800ac1f 	.word	0x0800ac1f

0800aed8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af22:	2b01      	cmp	r3, #1
 800af24:	d101      	bne.n	800af2a <HAL_UARTEx_DisableFifoMode+0x16>
 800af26:	2302      	movs	r3, #2
 800af28:	e027      	b.n	800af7a <HAL_UARTEx_DisableFifoMode+0x66>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2224      	movs	r2, #36	; 0x24
 800af36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0201 	bic.w	r2, r2, #1
 800af50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2220      	movs	r2, #32
 800af6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e02d      	b.n	800affa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2224      	movs	r2, #36	; 0x24
 800afaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0201 	bic.w	r2, r2, #1
 800afc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f850 	bl	800b080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2220      	movs	r2, #32
 800afec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b084      	sub	sp, #16
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b012:	2b01      	cmp	r3, #1
 800b014:	d101      	bne.n	800b01a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b016:	2302      	movs	r3, #2
 800b018:	e02d      	b.n	800b076 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2224      	movs	r2, #36	; 0x24
 800b026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f022 0201 	bic.w	r2, r2, #1
 800b040:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f812 	bl	800b080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2220      	movs	r2, #32
 800b068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b080:	b480      	push	{r7}
 800b082:	b089      	sub	sp, #36	; 0x24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b088:	4a2f      	ldr	r2, [pc, #188]	; (800b148 <UARTEx_SetNbDataToProcess+0xc8>)
 800b08a:	f107 0314 	add.w	r3, r7, #20
 800b08e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b092:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b096:	4a2d      	ldr	r2, [pc, #180]	; (800b14c <UARTEx_SetNbDataToProcess+0xcc>)
 800b098:	f107 030c 	add.w	r3, r7, #12
 800b09c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b0a0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d108      	bne.n	800b0be <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0bc:	e03d      	b.n	800b13a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0be:	2310      	movs	r3, #16
 800b0c0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0c2:	2310      	movs	r3, #16
 800b0c4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	0e5b      	lsrs	r3, r3, #25
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	f003 0307 	and.w	r3, r3, #7
 800b0d4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	0f5b      	lsrs	r3, r3, #29
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f003 0307 	and.w	r3, r3, #7
 800b0e4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b0e6:	7fbb      	ldrb	r3, [r7, #30]
 800b0e8:	7f3a      	ldrb	r2, [r7, #28]
 800b0ea:	f107 0120 	add.w	r1, r7, #32
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b0f4:	fb02 f303 	mul.w	r3, r2, r3
 800b0f8:	7f3a      	ldrb	r2, [r7, #28]
 800b0fa:	f107 0120 	add.w	r1, r7, #32
 800b0fe:	440a      	add	r2, r1
 800b100:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b104:	fb93 f3f2 	sdiv	r3, r3, r2
 800b108:	b29a      	uxth	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b110:	7ffb      	ldrb	r3, [r7, #31]
 800b112:	7f7a      	ldrb	r2, [r7, #29]
 800b114:	f107 0120 	add.w	r1, r7, #32
 800b118:	440a      	add	r2, r1
 800b11a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b11e:	fb02 f303 	mul.w	r3, r2, r3
 800b122:	7f7a      	ldrb	r2, [r7, #29]
 800b124:	f107 0120 	add.w	r1, r7, #32
 800b128:	440a      	add	r2, r1
 800b12a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b12e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b132:	b29a      	uxth	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b13a:	bf00      	nop
 800b13c:	3724      	adds	r7, #36	; 0x24
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	0800be44 	.word	0x0800be44
 800b14c:	0800be4c 	.word	0x0800be4c

0800b150 <GPS_Init>:
uint8_t isDebug = 0, recvChr, recvBuf[200], recvCount = 0, gpsFlag = 0, recvFlag = 0, LEDflag = 0;
uint8_t (*GPS_Parsers[])(GPS_INFO*, uint8_t*) = {GPS_RMC_Parse, GPS_GGA_Parse, GPS_GSV_Parse};
GPS_INFO mGPS;

void GPS_Init(UART_HandleTypeDef *GPShuart, UART_HandleTypeDef *DebugHuart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  if(DebugHuart != NULL)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <GPS_Init+0x16>
  {
    isDebug = 1;
 800b160:	4b08      	ldr	r3, [pc, #32]	; (800b184 <GPS_Init+0x34>)
 800b162:	2201      	movs	r2, #1
 800b164:	701a      	strb	r2, [r3, #0]
  }
  mGPSuart = GPShuart;
 800b166:	4a08      	ldr	r2, [pc, #32]	; (800b188 <GPS_Init+0x38>)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6013      	str	r3, [r2, #0]
  DebugHuart = DebugHuart;
  HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <GPS_Init+0x38>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2201      	movs	r2, #1
 800b172:	4906      	ldr	r1, [pc, #24]	; (800b18c <GPS_Init+0x3c>)
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fb23 	bl	80097c0 <HAL_UART_Receive_IT>
}
 800b17a:	bf00      	nop
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	2400003c 	.word	0x2400003c
 800b188:	2400a4a0 	.word	0x2400a4a0
 800b18c:	2400a3d0 	.word	0x2400a3d0

0800b190 <get_GPS_INFO>:

const GPS_INFO * get_GPS_INFO()
{
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
	return (const GPS_INFO *)(&mGPS);
 800b194:	4b02      	ldr	r3, [pc, #8]	; (800b1a0 <get_GPS_INFO+0x10>)
}
 800b196:	4618      	mov	r0, r3
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	2400a4a8 	.word	0x2400a4a8

0800b1a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(recvChr == '$')  //如果收到字符'$'，便开始接收
 800b1ac:	4b33      	ldr	r3, [pc, #204]	; (800b27c <HAL_UART_RxCpltCallback+0xd8>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b24      	cmp	r3, #36	; 0x24
 800b1b2:	d109      	bne.n	800b1c8 <HAL_UART_RxCpltCallback+0x24>
	{
		recvFlag = 1;
 800b1b4:	4b32      	ldr	r3, [pc, #200]	; (800b280 <HAL_UART_RxCpltCallback+0xdc>)
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	701a      	strb	r2, [r3, #0]
		recvBuf[0] = '$';
 800b1ba:	4b32      	ldr	r3, [pc, #200]	; (800b284 <HAL_UART_RxCpltCallback+0xe0>)
 800b1bc:	2224      	movs	r2, #36	; 0x24
 800b1be:	701a      	strb	r2, [r3, #0]
    	recvCount = 1;
 800b1c0:	4b31      	ldr	r3, [pc, #196]	; (800b288 <HAL_UART_RxCpltCallback+0xe4>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e021      	b.n	800b20c <HAL_UART_RxCpltCallback+0x68>
  } else if(recvFlag == 1)  //标志位为1，开始接收
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <HAL_UART_RxCpltCallback+0xdc>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d11d      	bne.n	800b20c <HAL_UART_RxCpltCallback+0x68>
	{
		recvBuf[recvCount++] = recvChr;  //字符存到数组中
 800b1d0:	4b2d      	ldr	r3, [pc, #180]	; (800b288 <HAL_UART_RxCpltCallback+0xe4>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	b2d1      	uxtb	r1, r2
 800b1d8:	4a2b      	ldr	r2, [pc, #172]	; (800b288 <HAL_UART_RxCpltCallback+0xe4>)
 800b1da:	7011      	strb	r1, [r2, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4b27      	ldr	r3, [pc, #156]	; (800b27c <HAL_UART_RxCpltCallback+0xd8>)
 800b1e0:	7819      	ldrb	r1, [r3, #0]
 800b1e2:	4b28      	ldr	r3, [pc, #160]	; (800b284 <HAL_UART_RxCpltCallback+0xe0>)
 800b1e4:	5499      	strb	r1, [r3, r2]
		if(recvChr == '\n')     //如果接收到换行
 800b1e6:	4b25      	ldr	r3, [pc, #148]	; (800b27c <HAL_UART_RxCpltCallback+0xd8>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b0a      	cmp	r3, #10
 800b1ec:	d10e      	bne.n	800b20c <HAL_UART_RxCpltCallback+0x68>
		{
			recvBuf[recvCount] = '\0';
 800b1ee:	4b26      	ldr	r3, [pc, #152]	; (800b288 <HAL_UART_RxCpltCallback+0xe4>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	4b23      	ldr	r3, [pc, #140]	; (800b284 <HAL_UART_RxCpltCallback+0xe0>)
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	5499      	strb	r1, [r3, r2]
		  recvFlag = 0;
 800b1fa:	4b21      	ldr	r3, [pc, #132]	; (800b280 <HAL_UART_RxCpltCallback+0xdc>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
			  gpsFlag = 1;
 800b200:	4b22      	ldr	r3, [pc, #136]	; (800b28c <HAL_UART_RxCpltCallback+0xe8>)
 800b202:	2201      	movs	r2, #1
 800b204:	701a      	strb	r2, [r3, #0]
			recvCount = 1;
 800b206:	4b20      	ldr	r3, [pc, #128]	; (800b288 <HAL_UART_RxCpltCallback+0xe4>)
 800b208:	2201      	movs	r2, #1
 800b20a:	701a      	strb	r2, [r3, #0]
		}
	}
  if(gpsFlag == 1)
 800b20c:	4b1f      	ldr	r3, [pc, #124]	; (800b28c <HAL_UART_RxCpltCallback+0xe8>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d128      	bne.n	800b266 <HAL_UART_RxCpltCallback+0xc2>
  {
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b214:	2300      	movs	r3, #0
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e01f      	b.n	800b25a <HAL_UART_RxCpltCallback+0xb6>
		{
			if(GPS_Parsers[i](&mGPS, recvBuf))
 800b21a:	4a1d      	ldr	r2, [pc, #116]	; (800b290 <HAL_UART_RxCpltCallback+0xec>)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b222:	4918      	ldr	r1, [pc, #96]	; (800b284 <HAL_UART_RxCpltCallback+0xe0>)
 800b224:	481b      	ldr	r0, [pc, #108]	; (800b294 <HAL_UART_RxCpltCallback+0xf0>)
 800b226:	4798      	blx	r3
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d012      	beq.n	800b254 <HAL_UART_RxCpltCallback+0xb0>
			{
				HAL_GPIO_WritePin(LED_GPS_GPIO_Port, LED_GPS_Pin, LEDflag);
 800b22e:	4b1a      	ldr	r3, [pc, #104]	; (800b298 <HAL_UART_RxCpltCallback+0xf4>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b238:	4818      	ldr	r0, [pc, #96]	; (800b29c <HAL_UART_RxCpltCallback+0xf8>)
 800b23a:	f7fa fc51 	bl	8005ae0 <HAL_GPIO_WritePin>
				LEDflag = !LEDflag;
 800b23e:	4b16      	ldr	r3, [pc, #88]	; (800b298 <HAL_UART_RxCpltCallback+0xf4>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	bf0c      	ite	eq
 800b246:	2301      	moveq	r3, #1
 800b248:	2300      	movne	r3, #0
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	461a      	mov	r2, r3
 800b24e:	4b12      	ldr	r3, [pc, #72]	; (800b298 <HAL_UART_RxCpltCallback+0xf4>)
 800b250:	701a      	strb	r2, [r3, #0]
				break;
 800b252:	e005      	b.n	800b260 <HAL_UART_RxCpltCallback+0xbc>
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d9dc      	bls.n	800b21a <HAL_UART_RxCpltCallback+0x76>
			}
		}
		gpsFlag = 0;
 800b260:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <HAL_UART_RxCpltCallback+0xe8>)
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b266:	4b0e      	ldr	r3, [pc, #56]	; (800b2a0 <HAL_UART_RxCpltCallback+0xfc>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2201      	movs	r2, #1
 800b26c:	4903      	ldr	r1, [pc, #12]	; (800b27c <HAL_UART_RxCpltCallback+0xd8>)
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe faa6 	bl	80097c0 <HAL_UART_Receive_IT>
}
 800b274:	bf00      	nop
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	2400a3d0 	.word	0x2400a3d0
 800b280:	2400003f 	.word	0x2400003f
 800b284:	2400a3d8 	.word	0x2400a3d8
 800b288:	2400003d 	.word	0x2400003d
 800b28c:	2400003e 	.word	0x2400003e
 800b290:	24000010 	.word	0x24000010
 800b294:	2400a4a8 	.word	0x2400a4a8
 800b298:	24000040 	.word	0x24000040
 800b29c:	58020400 	.word	0x58020400
 800b2a0:	2400a4a0 	.word	0x2400a4a0
 800b2a4:	00000000 	.word	0x00000000

0800b2a8 <GPS_RMC_Parse>:
// 返 回 值：
//			 1: 解析GPRMC完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_RMC_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
	uint8_t ch, status, tmp;
	float lati_cent_tmp, lati_second_tmp;
	float long_cent_tmp, long_second_tmp;
	float speed_tmp;
	uint8_t *buf = line;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
	ch = buf[5];
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	795b      	ldrb	r3, [r3, #5]
 800b2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status = buf[GetComma(2, buf)];
 800b2be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2c0:	2002      	movs	r0, #2
 800b2c2:	f000 fd43 	bl	800bd4c <GetComma>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	4413      	add	r3, r2
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	if (ch == 'C')  //如果第五个字符是C，($GPRMC)
 800b2d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2d8:	2b43      	cmp	r3, #67	; 0x43
 800b2da:	f040 8169 	bne.w	800b5b0 <GPS_RMC_Parse+0x308>
	{
		if (status == 'A')  //如果数据有效，则分析
 800b2de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2e2:	2b41      	cmp	r3, #65	; 0x41
 800b2e4:	f040 8164 	bne.w	800b5b0 <GPS_RMC_Parse+0x308>
		{
			GPS -> NS       = buf[GetComma(4, buf)];
 800b2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2ea:	2004      	movs	r0, #4
 800b2ec:	f000 fd2e 	bl	800bd4c <GetComma>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	4413      	add	r3, r2
 800b2f8:	781a      	ldrb	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			GPS -> EW       = buf[GetComma(6, buf)];
 800b300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b302:	2006      	movs	r0, #6
 800b304:	f000 fd22 	bl	800bd4c <GetComma>
 800b308:	4603      	mov	r3, r0
 800b30a:	461a      	mov	r2, r3
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	4413      	add	r3, r2
 800b310:	781a      	ldrb	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

			GPS->latitude   = Get_Double_Number(&buf[GetComma(3, buf)]);
 800b318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b31a:	2003      	movs	r0, #3
 800b31c:	f000 fd16 	bl	800bd4c <GetComma>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	4413      	add	r3, r2
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 fcdf 	bl	800bcec <Get_Double_Number>
 800b32e:	eeb0 7b40 	vmov.f64	d7, d0
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	ed83 7b00 	vstr	d7, [r3]
			GPS->longitude  = Get_Double_Number(&buf[GetComma( 5, buf)]);
 800b338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b33a:	2005      	movs	r0, #5
 800b33c:	f000 fd06 	bl	800bd4c <GetComma>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	4413      	add	r3, r2
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fccf 	bl	800bcec <Get_Double_Number>
 800b34e:	eeb0 7b40 	vmov.f64	d7, d0
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	ed83 7b02 	vstr	d7, [r3, #8]

      GPS->latitude_Degree  = (int32_t)GPS->latitude / 100;       //分离纬度
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	ed93 7b00 	vldr	d7, [r3]
 800b35e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b362:	ee17 1a90 	vmov	r1, s15
 800b366:	4b98      	ldr	r3, [pc, #608]	; (800b5c8 <GPS_RMC_Parse+0x320>)
 800b368:	fb83 2301 	smull	r2, r3, r3, r1
 800b36c:	115a      	asrs	r2, r3, #5
 800b36e:	17cb      	asrs	r3, r1, #31
 800b370:	1ad2      	subs	r2, r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	621a      	str	r2, [r3, #32]
			lati_cent_tmp         = (GPS->latitude - GPS->latitude_Degree * 100);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	ed93 6b00 	vldr	d6, [r3]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	2264      	movs	r2, #100	; 0x64
 800b382:	fb02 f303 	mul.w	r3, r2, r3
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b38e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b392:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b396:	edc7 7a07 	vstr	s15, [r7, #28]
			GPS->latitude_Cent    = (int32_t)lati_cent_tmp;
 800b39a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b39e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a2:	ee17 2a90 	vmov	r2, s15
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	625a      	str	r2, [r3, #36]	; 0x24
			lati_second_tmp       = (lati_cent_tmp - GPS->latitude_Cent) * 60;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3b6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3be:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b5cc <GPS_RMC_Parse+0x324>
 800b3c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3c6:	edc7 7a06 	vstr	s15, [r7, #24]
			GPS->latitude_Second  = (int32_t)lati_second_tmp;
 800b3ca:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3d2:	ee17 2a90 	vmov	r2, s15
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	629a      	str	r2, [r3, #40]	; 0x28

			GPS->longitude_Degree = (int32_t)GPS->longitude / 100;	//分离经度
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b3e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b3e4:	ee17 1a90 	vmov	r1, s15
 800b3e8:	4b77      	ldr	r3, [pc, #476]	; (800b5c8 <GPS_RMC_Parse+0x320>)
 800b3ea:	fb83 2301 	smull	r2, r3, r3, r1
 800b3ee:	115a      	asrs	r2, r3, #5
 800b3f0:	17cb      	asrs	r3, r1, #31
 800b3f2:	1ad2      	subs	r2, r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	62da      	str	r2, [r3, #44]	; 0x2c
			long_cent_tmp         = (GPS->longitude - GPS->longitude_Degree * 100);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	ed93 6b02 	vldr	d6, [r3, #8]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	2264      	movs	r2, #100	; 0x64
 800b404:	fb02 f303 	mul.w	r3, r2, r3
 800b408:	ee07 3a90 	vmov	s15, r3
 800b40c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b410:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b414:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b418:	edc7 7a05 	vstr	s15, [r7, #20]
			GPS->longitude_Cent   = (int32_t)long_cent_tmp;    
 800b41c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b424:	ee17 2a90 	vmov	r2, s15
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	631a      	str	r2, [r3, #48]	; 0x30
			long_second_tmp       = (long_cent_tmp - GPS->longitude_Cent) * 60;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b438:	ed97 7a05 	vldr	s14, [r7, #20]
 800b43c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b440:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800b5cc <GPS_RMC_Parse+0x324>
 800b444:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b448:	edc7 7a04 	vstr	s15, [r7, #16]
			GPS->longitude_Second = (int32_t)long_second_tmp;
 800b44c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b454:	ee17 2a90 	vmov	r2, s15
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	635a      	str	r2, [r3, #52]	; 0x34

			speed_tmp      = Get_Float_Number(&buf[GetComma(7, buf)]);    //速度(单位：海里/时)
 800b45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b45e:	2007      	movs	r0, #7
 800b460:	f000 fc74 	bl	800bd4c <GetComma>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	4413      	add	r3, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fb3d 	bl	800baec <Get_Float_Number>
 800b472:	ed87 0a03 	vstr	s0, [r7, #12]
			GPS->speed     = speed_tmp * 1.85;                           //1海里=1.85公里
 800b476:	edd7 7a03 	vldr	s15, [r7, #12]
 800b47a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b47e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800b5c0 <GPS_RMC_Parse+0x318>
 800b482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b486:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	edc3 7a05 	vstr	s15, [r3, #20]
			GPS->direction = Get_Float_Number(&buf[GetComma(8, buf)]); //角度			
 800b490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b492:	2008      	movs	r0, #8
 800b494:	f000 fc5a 	bl	800bd4c <GetComma>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	4413      	add	r3, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fb23 	bl	800baec <Get_Float_Number>
 800b4a6:	eef0 7a40 	vmov.f32	s15, s0
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	edc3 7a06 	vstr	s15, [r3, #24]

			GPS->D.hour    = (buf[7] - '0') * 10 + (buf[8] - '0');		//时间
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	3307      	adds	r3, #7
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	3b30      	subs	r3, #48	; 0x30
 800b4cc:	441a      	add	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	64da      	str	r2, [r3, #76]	; 0x4c
			GPS->D.minute  = (buf[9] - '0') * 10 + (buf[10] - '0');
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	3309      	adds	r3, #9
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	330a      	adds	r3, #10
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	3b30      	subs	r3, #48	; 0x30
 800b4ee:	441a      	add	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	651a      	str	r2, [r3, #80]	; 0x50
			GPS->D.second  = (buf[11] - '0') * 10 + (buf[12] - '0');
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	330b      	adds	r3, #11
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	461a      	mov	r2, r3
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	330c      	adds	r3, #12
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	3b30      	subs	r3, #48	; 0x30
 800b510:	441a      	add	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	655a      	str	r2, [r3, #84]	; 0x54
			tmp = GetComma(9, buf);
 800b516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b518:	2009      	movs	r0, #9
 800b51a:	f000 fc17 	bl	800bd4c <GetComma>
 800b51e:	4603      	mov	r3, r0
 800b520:	72fb      	strb	r3, [r7, #11]
			GPS->D.day     = (buf[tmp + 0] - '0') * 10 + (buf[tmp + 1] - '0'); //日期
 800b522:	7afb      	ldrb	r3, [r7, #11]
 800b524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b526:	4413      	add	r3, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	4619      	mov	r1, r3
 800b538:	7afb      	ldrb	r3, [r7, #11]
 800b53a:	3301      	adds	r3, #1
 800b53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b53e:	4413      	add	r3, r2
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	3b30      	subs	r3, #48	; 0x30
 800b544:	18ca      	adds	r2, r1, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	649a      	str	r2, [r3, #72]	; 0x48
			GPS->D.month   = (buf[tmp + 2] - '0') * 10 + (buf[tmp + 3] - '0');
 800b54a:	7afb      	ldrb	r3, [r7, #11]
 800b54c:	3302      	adds	r3, #2
 800b54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b550:	4413      	add	r3, r2
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b558:	4613      	mov	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	4619      	mov	r1, r3
 800b562:	7afb      	ldrb	r3, [r7, #11]
 800b564:	3303      	adds	r3, #3
 800b566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b568:	4413      	add	r3, r2
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	3b30      	subs	r3, #48	; 0x30
 800b56e:	18ca      	adds	r2, r1, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	645a      	str	r2, [r3, #68]	; 0x44
			GPS->D.year    = (buf[tmp + 4] - '0') * 10 + (buf[tmp + 5] - '0')+2000;
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	3304      	adds	r3, #4
 800b578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b57a:	4413      	add	r3, r2
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b582:	4613      	mov	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	4619      	mov	r1, r3
 800b58c:	7afb      	ldrb	r3, [r7, #11]
 800b58e:	3305      	adds	r3, #5
 800b590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b592:	4413      	add	r3, r2
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	3b30      	subs	r3, #48	; 0x30
 800b598:	440b      	add	r3, r1
 800b59a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	641a      	str	r2, [r3, #64]	; 0x40

			UTC2BTC(&GPS->D);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3340      	adds	r3, #64	; 0x40
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 f875 	bl	800b696 <UTC2BTC>
			
			return 1;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e000      	b.n	800b5b2 <GPS_RMC_Parse+0x30a>
		}		
	}
	
	return 0;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3728      	adds	r7, #40	; 0x28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	f3af 8000 	nop.w
 800b5c0:	9999999a 	.word	0x9999999a
 800b5c4:	3ffd9999 	.word	0x3ffd9999
 800b5c8:	51eb851f 	.word	0x51eb851f
 800b5cc:	42700000 	.word	0x42700000

0800b5d0 <GPS_GGA_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GGA_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
	uint8_t ch, status;
	uint8_t *buf = line;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	60fb      	str	r3, [r7, #12]
	ch = buf[4];
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	791b      	ldrb	r3, [r3, #4]
 800b5e2:	72fb      	strb	r3, [r7, #11]
	status = buf[GetComma(2, buf)];
 800b5e4:	68f9      	ldr	r1, [r7, #12]
 800b5e6:	2002      	movs	r0, #2
 800b5e8:	f000 fbb0 	bl	800bd4c <GetComma>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	72bb      	strb	r3, [r7, #10]

	if (ch == 'G')  //$GPGGA
 800b5f8:	7afb      	ldrb	r3, [r7, #11]
 800b5fa:	2b47      	cmp	r3, #71	; 0x47
 800b5fc:	d124      	bne.n	800b648 <GPS_GGA_Parse+0x78>
	{
		if (status != ',')
 800b5fe:	7abb      	ldrb	r3, [r7, #10]
 800b600:	2b2c      	cmp	r3, #44	; 0x2c
 800b602:	d021      	beq.n	800b648 <GPS_GGA_Parse+0x78>
		{
			GPS->height_sea = Get_Float_Number(&buf[GetComma(9, buf)]);
 800b604:	68f9      	ldr	r1, [r7, #12]
 800b606:	2009      	movs	r0, #9
 800b608:	f000 fba0 	bl	800bd4c <GetComma>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	4413      	add	r3, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f000 fa69 	bl	800baec <Get_Float_Number>
 800b61a:	eef0 7a40 	vmov.f32	s15, s0
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	edc3 7a04 	vstr	s15, [r3, #16]
			GPS->height_ground = Get_Float_Number(&buf[GetComma(11, buf)]);
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	200b      	movs	r0, #11
 800b628:	f000 fb90 	bl	800bd4c <GetComma>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	4618      	mov	r0, r3
 800b636:	f000 fa59 	bl	800baec <Get_Float_Number>
 800b63a:	eef0 7a40 	vmov.f32	s15, s0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	edc3 7a07 	vstr	s15, [r3, #28]

			return 1;
 800b644:	2301      	movs	r3, #1
 800b646:	e000      	b.n	800b64a <GPS_GGA_Parse+0x7a>
		}
	}
	
	return 0;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <GPS_GSV_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GSV_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
	uint8_t ch;
	uint8_t *buf = line;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	60fb      	str	r3, [r7, #12]
	ch = buf[5];
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	795b      	ldrb	r3, [r3, #5]
 800b664:	72fb      	strb	r3, [r7, #11]

	if (ch == 'V')  //$GPGSV
 800b666:	7afb      	ldrb	r3, [r7, #11]
 800b668:	2b56      	cmp	r3, #86	; 0x56
 800b66a:	d10f      	bne.n	800b68c <GPS_GSV_Parse+0x3a>
	{
		GPS->satellite = Get_Int_Number(&buf[GetComma(3, buf)]);
 800b66c:	68f9      	ldr	r1, [r7, #12]
 800b66e:	2003      	movs	r0, #3
 800b670:	f000 fb6c 	bl	800bd4c <GetComma>
 800b674:	4603      	mov	r3, r0
 800b676:	461a      	mov	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4413      	add	r3, r2
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 f963 	bl	800b948 <Get_Int_Number>
 800b682:	4602      	mov	r2, r0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	639a      	str	r2, [r3, #56]	; 0x38
		return 1;
 800b688:	2301      	movs	r3, #1
 800b68a:	e000      	b.n	800b68e <GPS_GSV_Parse+0x3c>
	}
	
	return 0;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <UTC2BTC>:
// 实现功能：转化时间为北京时区的时间
// 参    数：存放时间的结构体
// 返 回 值：无
//====================================================================//
void UTC2BTC(DATE_TIME *date_time)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
	date_time->second ++;  
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	615a      	str	r2, [r3, #20]
	if(date_time->second > 59)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	2b3b      	cmp	r3, #59	; 0x3b
 800b6ae:	dd13      	ble.n	800b6d8 <UTC2BTC+0x42>
	{
		date_time->second = 0;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	615a      	str	r2, [r3, #20]
		date_time->minute ++;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	611a      	str	r2, [r3, #16]
		if(date_time->minute > 59)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	2b3b      	cmp	r3, #59	; 0x3b
 800b6c6:	dd07      	ble.n	800b6d8 <UTC2BTC+0x42>
		{
			date_time->minute = 0;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	611a      	str	r2, [r3, #16]
			date_time->hour ++;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	60da      	str	r2, [r3, #12]
		}
	}	

    date_time->hour = date_time->hour + 8;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f103 0208 	add.w	r2, r3, #8
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	60da      	str	r2, [r3, #12]
	if(date_time->hour > 23)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2b17      	cmp	r3, #23
 800b6ea:	dd6d      	ble.n	800b7c8 <UTC2BTC+0x132>
	{
		date_time->hour -= 24;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f1a3 0218 	sub.w	r2, r3, #24
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60da      	str	r2, [r3, #12]
		date_time->day += 1;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	609a      	str	r2, [r3, #8]
		if(date_time->month == 2 ||
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	2b02      	cmp	r3, #2
 800b708:	d00f      	beq.n	800b72a <UTC2BTC+0x94>
		   		date_time->month == 4 ||
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
		if(date_time->month == 2 ||
 800b70e:	2b04      	cmp	r3, #4
 800b710:	d00b      	beq.n	800b72a <UTC2BTC+0x94>
		   		date_time->month == 6 ||
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 4 ||
 800b716:	2b06      	cmp	r3, #6
 800b718:	d007      	beq.n	800b72a <UTC2BTC+0x94>
		   		date_time->month == 9 ||
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 6 ||
 800b71e:	2b09      	cmp	r3, #9
 800b720:	d003      	beq.n	800b72a <UTC2BTC+0x94>
		   		date_time->month == 11 )
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 9 ||
 800b726:	2b0b      	cmp	r3, #11
 800b728:	d10c      	bne.n	800b744 <UTC2BTC+0xae>
		{
			if(date_time->day > 30)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	2b1e      	cmp	r3, #30
 800b730:	dd14      	ble.n	800b75c <UTC2BTC+0xc6>
			{
		   		date_time->day = 1;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2201      	movs	r2, #1
 800b736:	609a      	str	r2, [r3, #8]
				date_time->month++;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]
			if(date_time->day > 30)
 800b742:	e00b      	b.n	800b75c <UTC2BTC+0xc6>
			}
		}
		else
		{
			if(date_time->day > 31)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	2b1f      	cmp	r3, #31
 800b74a:	dd07      	ble.n	800b75c <UTC2BTC+0xc6>
			{	
		   		date_time->day = 1;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->year % 4 == 0 )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d110      	bne.n	800b78a <UTC2BTC+0xf4>
		{
	   		if(date_time->day > 29 && date_time->month == 2)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	2b1d      	cmp	r3, #29
 800b76e:	dd1c      	ble.n	800b7aa <UTC2BTC+0x114>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2b02      	cmp	r3, #2
 800b776:	d118      	bne.n	800b7aa <UTC2BTC+0x114>
			{		
	   			date_time->day = 1;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	605a      	str	r2, [r3, #4]
 800b788:	e00f      	b.n	800b7aa <UTC2BTC+0x114>
			}
		}
		else
		{
	   		if(date_time->day > 28 &&date_time->month == 2)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	2b1c      	cmp	r3, #28
 800b790:	dd0b      	ble.n	800b7aa <UTC2BTC+0x114>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d107      	bne.n	800b7aa <UTC2BTC+0x114>
			{
	   			date_time->day = 1;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->month > 12)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	2b0c      	cmp	r3, #12
 800b7b0:	dd0a      	ble.n	800b7c8 <UTC2BTC+0x132>
		{
			date_time->month -= 12;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f1a3 020c 	sub.w	r2, r3, #12
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	605a      	str	r2, [r3, #4]
			date_time->year ++;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	601a      	str	r2, [r3, #0]
		}		
	}
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <StartOV2640>:
{
	osSemaphoreRelease(sem_TakePhoto);
}*/

void StartOV2640()//拍照的线程
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <StartOV2640+0x38>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <StartOV2640+0x38>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f042 0201 	orr.w	r2, r2, #1
 800b7ea:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800b7ec:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	4807      	ldr	r0, [pc, #28]	; (800b810 <StartOV2640+0x3c>)
 800b7f4:	f000 fafc 	bl	800bdf0 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800b7f8:	4b04      	ldr	r3, [pc, #16]	; (800b80c <StartOV2640+0x38>)
 800b7fa:	6818      	ldr	r0, [r3, #0]
 800b7fc:	4a04      	ldr	r2, [pc, #16]	; (800b810 <StartOV2640+0x3c>)
 800b7fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b802:	2102      	movs	r1, #2
 800b804:	f7f6 fa08 	bl	8001c18 <HAL_DCMI_Start_DMA>

}
 800b808:	bf00      	nop
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	2400a500 	.word	0x2400a500
 800b810:	24000044 	.word	0x24000044

0800b814 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800b81c:	4b18      	ldr	r3, [pc, #96]	; (800b880 <HAL_DCMI_FrameEventCallback+0x6c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4618      	mov	r0, r3
 800b822:	f7f6 fb1b 	bl	8001e5c <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800b826:	4b16      	ldr	r3, [pc, #88]	; (800b880 <HAL_DCMI_FrameEventCallback+0x6c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7f6 fab6 	bl	8001d9c <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800b830:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b834:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800b836:	e009      	b.n	800b84c <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	4a11      	ldr	r2, [pc, #68]	; (800b884 <HAL_DCMI_FrameEventCallback+0x70>)
 800b83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3b01      	subs	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	dcf2      	bgt.n	800b838 <HAL_DCMI_FrameEventCallback+0x24>
 800b852:	e000      	b.n	800b856 <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800b854:	bf00      	nop
	}
	pictureLength*=4;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <HAL_DCMI_FrameEventCallback+0x74>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d007      	beq.n	800b874 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800b864:	4b08      	ldr	r3, [pc, #32]	; (800b888 <HAL_DCMI_FrameEventCallback+0x74>)
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	4b07      	ldr	r3, [pc, #28]	; (800b88c <HAL_DCMI_FrameEventCallback+0x78>)
 800b86e:	4905      	ldr	r1, [pc, #20]	; (800b884 <HAL_DCMI_FrameEventCallback+0x70>)
 800b870:	f7fd ff10 	bl	8009694 <HAL_UART_Transmit>

	StartOV2640();
 800b874:	f7ff ffae 	bl	800b7d4 <StartOV2640>
}
 800b878:	bf00      	nop
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2400a500 	.word	0x2400a500
 800b884:	24000044 	.word	0x24000044
 800b888:	2400a504 	.word	0x2400a504
 800b88c:	000186a0 	.word	0x000186a0

0800b890 <Str_To_Int>:
// 实现功能： 把一个字符串转化成整数
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Str_To_Int(uint8_t *buf)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	int32_t rev = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	617b      	str	r3, [r7, #20]
	int32_t dat;
	uint8_t *str = buf;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800b8a0:	e046      	b.n	800b930 <Str_To_Int+0xa0>
	{
		switch(*str)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	3b30      	subs	r3, #48	; 0x30
 800b8a8:	2b09      	cmp	r3, #9
 800b8aa:	d835      	bhi.n	800b918 <Str_To_Int+0x88>
 800b8ac:	a201      	add	r2, pc, #4	; (adr r2, 800b8b4 <Str_To_Int+0x24>)
 800b8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b2:	bf00      	nop
 800b8b4:	0800b8dd 	.word	0x0800b8dd
 800b8b8:	0800b8e3 	.word	0x0800b8e3
 800b8bc:	0800b8e9 	.word	0x0800b8e9
 800b8c0:	0800b8ef 	.word	0x0800b8ef
 800b8c4:	0800b8f5 	.word	0x0800b8f5
 800b8c8:	0800b8fb 	.word	0x0800b8fb
 800b8cc:	0800b901 	.word	0x0800b901
 800b8d0:	0800b907 	.word	0x0800b907
 800b8d4:	0800b90d 	.word	0x0800b90d
 800b8d8:	0800b913 	.word	0x0800b913
		{
			case '0':
				dat = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	613b      	str	r3, [r7, #16]
				break;
 800b8e0:	e01a      	b.n	800b918 <Str_To_Int+0x88>
			case '1':
				dat = 1;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	613b      	str	r3, [r7, #16]
				break;
 800b8e6:	e017      	b.n	800b918 <Str_To_Int+0x88>
			case '2':
				dat = 2;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	613b      	str	r3, [r7, #16]
				break;		
 800b8ec:	e014      	b.n	800b918 <Str_To_Int+0x88>
			case '3':
				dat = 3;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	613b      	str	r3, [r7, #16]
				break;
 800b8f2:	e011      	b.n	800b918 <Str_To_Int+0x88>
			case '4':
				dat = 4;
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	613b      	str	r3, [r7, #16]
				break;
 800b8f8:	e00e      	b.n	800b918 <Str_To_Int+0x88>
			case '5':
				dat = 5;
 800b8fa:	2305      	movs	r3, #5
 800b8fc:	613b      	str	r3, [r7, #16]
				break;
 800b8fe:	e00b      	b.n	800b918 <Str_To_Int+0x88>
			case '6':
				dat = 6;
 800b900:	2306      	movs	r3, #6
 800b902:	613b      	str	r3, [r7, #16]
				break;
 800b904:	e008      	b.n	800b918 <Str_To_Int+0x88>
			case '7':
				dat = 7;
 800b906:	2307      	movs	r3, #7
 800b908:	613b      	str	r3, [r7, #16]
				break;
 800b90a:	e005      	b.n	800b918 <Str_To_Int+0x88>
			case '8':
				dat = 8;
 800b90c:	2308      	movs	r3, #8
 800b90e:	613b      	str	r3, [r7, #16]
				break;
 800b910:	e002      	b.n	800b918 <Str_To_Int+0x88>
			case '9':
				dat = 9;
 800b912:	2309      	movs	r3, #9
 800b914:	613b      	str	r3, [r7, #16]
				break;
 800b916:	bf00      	nop
		}

		rev = rev * 10 + dat;
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	4613      	mov	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	461a      	mov	r2, r3
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	4413      	add	r3, r2
 800b928:	617b      	str	r3, [r7, #20]
		str ++;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3301      	adds	r3, #1
 800b92e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1b4      	bne.n	800b8a2 <Str_To_Int+0x12>
	}

	return rev;
 800b938:	697b      	ldr	r3, [r7, #20]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop

0800b948 <Get_Int_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成整型
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Get_Int_Number(uint8_t *s)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	int32_t rev;
	i=GetComma(1, s);
 800b950:	6879      	ldr	r1, [r7, #4]
 800b952:	2001      	movs	r0, #1
 800b954:	f000 f9fa 	bl	800bd4c <GetComma>
 800b958:	4603      	mov	r3, r0
 800b95a:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800b95c:	7ffb      	ldrb	r3, [r7, #31]
 800b95e:	3b01      	subs	r3, #1
 800b960:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800b962:	7ffa      	ldrb	r2, [r7, #31]
 800b964:	f107 030c 	add.w	r3, r7, #12
 800b968:	6879      	ldr	r1, [r7, #4]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fa48 	bl	800be00 <strncpy>
	buf[i] = 0;
 800b970:	7ffb      	ldrb	r3, [r7, #31]
 800b972:	f107 0220 	add.w	r2, r7, #32
 800b976:	4413      	add	r3, r2
 800b978:	2200      	movs	r2, #0
 800b97a:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Int(buf);
 800b97e:	f107 030c 	add.w	r3, r7, #12
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff ff84 	bl	800b890 <Str_To_Int>
 800b988:	61b8      	str	r0, [r7, #24]
	return rev;	
 800b98a:	69bb      	ldr	r3, [r7, #24]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <Str_To_Float>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Str_To_Float(uint8_t *buf)
{
 800b994:	b480      	push	{r7}
 800b996:	b089      	sub	sp, #36	; 0x24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
	float rev = 0;
 800b99c:	f04f 0300 	mov.w	r3, #0
 800b9a0:	61fb      	str	r3, [r7, #28]
	float dat;
	int32_t integer = 1;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800b9aa:	e082      	b.n	800bab2 <Str_To_Float+0x11e>
	{
		switch(*str)
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	3b2e      	subs	r3, #46	; 0x2e
 800b9b2:	2b0b      	cmp	r3, #11
 800b9b4:	d840      	bhi.n	800ba38 <Str_To_Float+0xa4>
 800b9b6:	a201      	add	r2, pc, #4	; (adr r2, 800b9bc <Str_To_Float+0x28>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800ba33 	.word	0x0800ba33
 800b9c0:	0800ba39 	.word	0x0800ba39
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9f5 	.word	0x0800b9f5
 800b9cc:	0800b9fd 	.word	0x0800b9fd
 800b9d0:	0800ba05 	.word	0x0800ba05
 800b9d4:	0800ba0b 	.word	0x0800ba0b
 800b9d8:	0800ba13 	.word	0x0800ba13
 800b9dc:	0800ba19 	.word	0x0800ba19
 800b9e0:	0800ba1f 	.word	0x0800ba1f
 800b9e4:	0800ba25 	.word	0x0800ba25
 800b9e8:	0800ba2d 	.word	0x0800ba2d
		{
			case '0':
				dat = 0;
 800b9ec:	f04f 0300 	mov.w	r3, #0
 800b9f0:	61bb      	str	r3, [r7, #24]
				break;
 800b9f2:	e021      	b.n	800ba38 <Str_To_Float+0xa4>
			case '1':
				dat = 1;
 800b9f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b9f8:	61bb      	str	r3, [r7, #24]
				break;
 800b9fa:	e01d      	b.n	800ba38 <Str_To_Float+0xa4>
			case '2':
				dat = 2;
 800b9fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba00:	61bb      	str	r3, [r7, #24]
				break;		
 800ba02:	e019      	b.n	800ba38 <Str_To_Float+0xa4>
			case '3':
				dat = 3;
 800ba04:	4b32      	ldr	r3, [pc, #200]	; (800bad0 <Str_To_Float+0x13c>)
 800ba06:	61bb      	str	r3, [r7, #24]
				break;
 800ba08:	e016      	b.n	800ba38 <Str_To_Float+0xa4>
			case '4':
				dat = 4;
 800ba0a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800ba0e:	61bb      	str	r3, [r7, #24]
				break;
 800ba10:	e012      	b.n	800ba38 <Str_To_Float+0xa4>
			case '5':
				dat = 5;
 800ba12:	4b30      	ldr	r3, [pc, #192]	; (800bad4 <Str_To_Float+0x140>)
 800ba14:	61bb      	str	r3, [r7, #24]
				break;
 800ba16:	e00f      	b.n	800ba38 <Str_To_Float+0xa4>
			case '6':
				dat = 6;
 800ba18:	4b2f      	ldr	r3, [pc, #188]	; (800bad8 <Str_To_Float+0x144>)
 800ba1a:	61bb      	str	r3, [r7, #24]
				break;
 800ba1c:	e00c      	b.n	800ba38 <Str_To_Float+0xa4>
			case '7':
				dat = 7;
 800ba1e:	4b2f      	ldr	r3, [pc, #188]	; (800badc <Str_To_Float+0x148>)
 800ba20:	61bb      	str	r3, [r7, #24]
				break;
 800ba22:	e009      	b.n	800ba38 <Str_To_Float+0xa4>
			case '8':
				dat = 8;
 800ba24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800ba28:	61bb      	str	r3, [r7, #24]
				break;
 800ba2a:	e005      	b.n	800ba38 <Str_To_Float+0xa4>
			case '9':
				dat = 9;
 800ba2c:	4b2c      	ldr	r3, [pc, #176]	; (800bae0 <Str_To_Float+0x14c>)
 800ba2e:	61bb      	str	r3, [r7, #24]
				break;
 800ba30:	e002      	b.n	800ba38 <Str_To_Float+0xa4>
			case '.':
				dat = '.';
 800ba32:	4b2c      	ldr	r3, [pc, #176]	; (800bae4 <Str_To_Float+0x150>)
 800ba34:	61bb      	str	r3, [r7, #24]
				break;
 800ba36:	bf00      	nop
		}
		if(dat == '.')
 800ba38:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba3c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800bae8 <Str_To_Float+0x154>
 800ba40:	eef4 7a47 	vcmp.f32	s15, s14
 800ba44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba48:	d107      	bne.n	800ba5a <Str_To_Float+0xc6>
		{
			integer = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	617b      	str	r3, [r7, #20]
			i = 1;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	60fb      	str	r3, [r7, #12]
			str ++;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	3301      	adds	r3, #1
 800ba56:	613b      	str	r3, [r7, #16]
			continue;
 800ba58:	e02b      	b.n	800bab2 <Str_To_Float+0x11e>
		}
		if( integer == 1 )
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d10c      	bne.n	800ba7a <Str_To_Float+0xe6>
		{
			rev = rev * 10 + dat;
 800ba60:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ba68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba6c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ba70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba74:	edc7 7a07 	vstr	s15, [r7, #28]
 800ba78:	e018      	b.n	800baac <Str_To_Float+0x118>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	ee07 3a90 	vmov	s15, r3
 800ba88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba8c:	edd7 6a06 	vldr	s13, [r7, #24]
 800ba90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba94:	ed97 7a07 	vldr	s14, [r7, #28]
 800ba98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba9c:	edc7 7a07 	vstr	s15, [r7, #28]
			i = i * 10 ;
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	3301      	adds	r3, #1
 800bab0:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f47f af78 	bne.w	800b9ac <Str_To_Float+0x18>
	}
	return rev;
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	ee07 3a90 	vmov	s15, r3

}
 800bac2:	eeb0 0a67 	vmov.f32	s0, s15
 800bac6:	3724      	adds	r7, #36	; 0x24
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	40400000 	.word	0x40400000
 800bad4:	40a00000 	.word	0x40a00000
 800bad8:	40c00000 	.word	0x40c00000
 800badc:	40e00000 	.word	0x40e00000
 800bae0:	41100000 	.word	0x41100000
 800bae4:	42380000 	.word	0x42380000
 800bae8:	42380000 	.word	0x42380000

0800baec <Get_Float_Number>:
// 实现功能： 把给定字符串第一个逗号之前的字符转化成单精度型
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Get_Float_Number(uint8_t *s)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	float rev;
	i=GetComma(1, s);
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	2001      	movs	r0, #1
 800baf8:	f000 f928 	bl	800bd4c <GetComma>
 800bafc:	4603      	mov	r3, r0
 800bafe:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800bb00:	7ffb      	ldrb	r3, [r7, #31]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800bb06:	7ffa      	ldrb	r2, [r7, #31]
 800bb08:	f107 030c 	add.w	r3, r7, #12
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 f976 	bl	800be00 <strncpy>
	buf[i] = 0;
 800bb14:	7ffb      	ldrb	r3, [r7, #31]
 800bb16:	f107 0220 	add.w	r2, r7, #32
 800bb1a:	4413      	add	r3, r2
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Float(buf);
 800bb22:	f107 030c 	add.w	r3, r7, #12
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff ff34 	bl	800b994 <Str_To_Float>
 800bb2c:	ed87 0a06 	vstr	s0, [r7, #24]
	return rev;	
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	ee07 3a90 	vmov	s15, r3
}
 800bb36:	eeb0 0a67 	vmov.f32	s0, s15
 800bb3a:	3720      	adds	r7, #32
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <Str_To_Double>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Str_To_Double(uint8_t *buf)
{
 800bb40:	b490      	push	{r4, r7}
 800bb42:	b08a      	sub	sp, #40	; 0x28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	double rev = 0;
 800bb48:	f04f 0300 	mov.w	r3, #0
 800bb4c:	f04f 0400 	mov.w	r4, #0
 800bb50:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dat;
	int32_t integer = 1;
 800bb54:	2301      	movs	r3, #1
 800bb56:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800bb5c:	e0a1      	b.n	800bca2 <Str_To_Double+0x162>
	{
		switch(*str)
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	3b2e      	subs	r3, #46	; 0x2e
 800bb64:	2b0b      	cmp	r3, #11
 800bb66:	d85f      	bhi.n	800bc28 <Str_To_Double+0xe8>
 800bb68:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <Str_To_Double+0x30>)
 800bb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6e:	bf00      	nop
 800bb70:	0800bc1d 	.word	0x0800bc1d
 800bb74:	0800bc29 	.word	0x0800bc29
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bbaf 	.word	0x0800bbaf
 800bb80:	0800bbbb 	.word	0x0800bbbb
 800bb84:	0800bbc9 	.word	0x0800bbc9
 800bb88:	0800bbd5 	.word	0x0800bbd5
 800bb8c:	0800bbe1 	.word	0x0800bbe1
 800bb90:	0800bbed 	.word	0x0800bbed
 800bb94:	0800bbf9 	.word	0x0800bbf9
 800bb98:	0800bc05 	.word	0x0800bc05
 800bb9c:	0800bc11 	.word	0x0800bc11
		{
			case '0':
				dat = 0;
 800bba0:	f04f 0300 	mov.w	r3, #0
 800bba4:	f04f 0400 	mov.w	r4, #0
 800bba8:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bbac:	e03c      	b.n	800bc28 <Str_To_Double+0xe8>
			case '1':
				dat = 1;
 800bbae:	f04f 0300 	mov.w	r3, #0
 800bbb2:	4c45      	ldr	r4, [pc, #276]	; (800bcc8 <Str_To_Double+0x188>)
 800bbb4:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bbb8:	e036      	b.n	800bc28 <Str_To_Double+0xe8>
			case '2':
				dat = 2;
 800bbba:	f04f 0300 	mov.w	r3, #0
 800bbbe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800bbc2:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;		
 800bbc6:	e02f      	b.n	800bc28 <Str_To_Double+0xe8>
			case '3':
				dat = 3;
 800bbc8:	f04f 0300 	mov.w	r3, #0
 800bbcc:	4c3f      	ldr	r4, [pc, #252]	; (800bccc <Str_To_Double+0x18c>)
 800bbce:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bbd2:	e029      	b.n	800bc28 <Str_To_Double+0xe8>
			case '4':
				dat = 4;
 800bbd4:	f04f 0300 	mov.w	r3, #0
 800bbd8:	4c3d      	ldr	r4, [pc, #244]	; (800bcd0 <Str_To_Double+0x190>)
 800bbda:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bbde:	e023      	b.n	800bc28 <Str_To_Double+0xe8>
			case '5':
				dat = 5;
 800bbe0:	f04f 0300 	mov.w	r3, #0
 800bbe4:	4c3b      	ldr	r4, [pc, #236]	; (800bcd4 <Str_To_Double+0x194>)
 800bbe6:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bbea:	e01d      	b.n	800bc28 <Str_To_Double+0xe8>
			case '6':
				dat = 6;
 800bbec:	f04f 0300 	mov.w	r3, #0
 800bbf0:	4c39      	ldr	r4, [pc, #228]	; (800bcd8 <Str_To_Double+0x198>)
 800bbf2:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bbf6:	e017      	b.n	800bc28 <Str_To_Double+0xe8>
			case '7':
				dat = 7;
 800bbf8:	f04f 0300 	mov.w	r3, #0
 800bbfc:	4c37      	ldr	r4, [pc, #220]	; (800bcdc <Str_To_Double+0x19c>)
 800bbfe:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bc02:	e011      	b.n	800bc28 <Str_To_Double+0xe8>
			case '8':
				dat = 8;
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	4c35      	ldr	r4, [pc, #212]	; (800bce0 <Str_To_Double+0x1a0>)
 800bc0a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bc0e:	e00b      	b.n	800bc28 <Str_To_Double+0xe8>
			case '9':
				dat = 9;
 800bc10:	f04f 0300 	mov.w	r3, #0
 800bc14:	4c33      	ldr	r4, [pc, #204]	; (800bce4 <Str_To_Double+0x1a4>)
 800bc16:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bc1a:	e005      	b.n	800bc28 <Str_To_Double+0xe8>
			case '.':
				dat = '.';
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	4c31      	ldr	r4, [pc, #196]	; (800bce8 <Str_To_Double+0x1a8>)
 800bc22:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bc26:	bf00      	nop
		}
		if(dat == '.')
 800bc28:	ed97 7b06 	vldr	d7, [r7, #24]
 800bc2c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800bcc0 <Str_To_Double+0x180>
 800bc30:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc38:	d107      	bne.n	800bc4a <Str_To_Double+0x10a>
		{
			integer = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	617b      	str	r3, [r7, #20]
			i = 1;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	60fb      	str	r3, [r7, #12]
			str ++;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	3301      	adds	r3, #1
 800bc46:	613b      	str	r3, [r7, #16]
			continue;
 800bc48:	e02b      	b.n	800bca2 <Str_To_Double+0x162>
		}
		if( integer == 1 )
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d10c      	bne.n	800bc6a <Str_To_Double+0x12a>
		{
			rev = rev * 10 + dat;
 800bc50:	ed97 7b08 	vldr	d7, [r7, #32]
 800bc54:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bc58:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc5c:	ed97 6b06 	vldr	d6, [r7, #24]
 800bc60:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bc64:	ed87 7b08 	vstr	d7, [r7, #32]
 800bc68:	e018      	b.n	800bc9c <Str_To_Double+0x15c>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bc7c:	ed97 5b06 	vldr	d5, [r7, #24]
 800bc80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bc84:	ed97 6b08 	vldr	d6, [r7, #32]
 800bc88:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bc8c:	ed87 7b08 	vstr	d7, [r7, #32]
			i = i * 10 ;
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4613      	mov	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f47f af59 	bne.w	800bb5e <Str_To_Double+0x1e>
	}
	return rev;
 800bcac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bcb0:	ec44 3b17 	vmov	d7, r3, r4
}
 800bcb4:	eeb0 0b47 	vmov.f64	d0, d7
 800bcb8:	3728      	adds	r7, #40	; 0x28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bc90      	pop	{r4, r7}
 800bcbe:	4770      	bx	lr
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	40470000 	.word	0x40470000
 800bcc8:	3ff00000 	.word	0x3ff00000
 800bccc:	40080000 	.word	0x40080000
 800bcd0:	40100000 	.word	0x40100000
 800bcd4:	40140000 	.word	0x40140000
 800bcd8:	40180000 	.word	0x40180000
 800bcdc:	401c0000 	.word	0x401c0000
 800bce0:	40200000 	.word	0x40200000
 800bce4:	40220000 	.word	0x40220000
 800bce8:	40470000 	.word	0x40470000

0800bcec <Get_Double_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成双精度型
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Get_Double_Number(uint8_t *s)
{
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b08b      	sub	sp, #44	; 0x2c
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	double rev;
	i=GetComma(1, s);
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	f000 f828 	bl	800bd4c <GetComma>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	i = i - 1;
 800bd02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd06:	3b01      	subs	r3, #1
 800bd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	strncpy(buf, s, i);
 800bd0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bd10:	f107 030c 	add.w	r3, r7, #12
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 f872 	bl	800be00 <strncpy>
	buf[i] = 0;
 800bd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bd24:	4413      	add	r3, r2
 800bd26:	2200      	movs	r2, #0
 800bd28:	f803 2c1c 	strb.w	r2, [r3, #-28]
	rev=Str_To_Double(buf);
 800bd2c:	f107 030c 	add.w	r3, r7, #12
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff ff05 	bl	800bb40 <Str_To_Double>
 800bd36:	ed87 0b06 	vstr	d0, [r7, #24]
	return rev;	
 800bd3a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bd3e:	ec44 3b17 	vmov	d7, r3, r4
}
 800bd42:	eeb0 0b47 	vmov.f64	d0, d7
 800bd46:	372c      	adds	r7, #44	; 0x2c
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd90      	pop	{r4, r7, pc}

0800bd4c <GetComma>:
// 实现功能：计算字符串中各个逗号的位置
// 参    数：查找的逗号是第几个的个数，需要查找的字符串
// 返 回 值：0
//====================================================================//
uint8_t GetComma(uint8_t num,uint8_t *str)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	6039      	str	r1, [r7, #0]
 800bd56:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73bb      	strb	r3, [r7, #14]
	int32_t len=strlen(str);
 800bd5c:	6838      	ldr	r0, [r7, #0]
 800bd5e:	f7f4 fabb 	bl	80002d8 <strlen>
 800bd62:	4603      	mov	r3, r0
 800bd64:	60bb      	str	r3, [r7, #8]

	for(i = 0;i < len;i ++)
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
 800bd6a:	e013      	b.n	800bd94 <GetComma+0x48>
	{
		if(str[i] == ',')
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	4413      	add	r3, r2
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b2c      	cmp	r3, #44	; 0x2c
 800bd76:	d102      	bne.n	800bd7e <GetComma+0x32>
			j++;
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	73bb      	strb	r3, [r7, #14]
		if(j == num)
 800bd7e:	7bba      	ldrb	r2, [r7, #14]
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d103      	bne.n	800bd8e <GetComma+0x42>
			return i + 1;	
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	e007      	b.n	800bd9e <GetComma+0x52>
	for(i = 0;i < len;i ++)
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	3301      	adds	r3, #1
 800bd92:	73fb      	strb	r3, [r7, #15]
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	dce7      	bgt.n	800bd6c <GetComma+0x20>
	}

	return 0;	
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <__libc_init_array>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	4e0d      	ldr	r6, [pc, #52]	; (800bde0 <__libc_init_array+0x38>)
 800bdac:	4c0d      	ldr	r4, [pc, #52]	; (800bde4 <__libc_init_array+0x3c>)
 800bdae:	1ba4      	subs	r4, r4, r6
 800bdb0:	10a4      	asrs	r4, r4, #2
 800bdb2:	2500      	movs	r5, #0
 800bdb4:	42a5      	cmp	r5, r4
 800bdb6:	d109      	bne.n	800bdcc <__libc_init_array+0x24>
 800bdb8:	4e0b      	ldr	r6, [pc, #44]	; (800bde8 <__libc_init_array+0x40>)
 800bdba:	4c0c      	ldr	r4, [pc, #48]	; (800bdec <__libc_init_array+0x44>)
 800bdbc:	f000 f836 	bl	800be2c <_init>
 800bdc0:	1ba4      	subs	r4, r4, r6
 800bdc2:	10a4      	asrs	r4, r4, #2
 800bdc4:	2500      	movs	r5, #0
 800bdc6:	42a5      	cmp	r5, r4
 800bdc8:	d105      	bne.n	800bdd6 <__libc_init_array+0x2e>
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdd0:	4798      	blx	r3
 800bdd2:	3501      	adds	r5, #1
 800bdd4:	e7ee      	b.n	800bdb4 <__libc_init_array+0xc>
 800bdd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdda:	4798      	blx	r3
 800bddc:	3501      	adds	r5, #1
 800bdde:	e7f2      	b.n	800bdc6 <__libc_init_array+0x1e>
 800bde0:	0800be8c 	.word	0x0800be8c
 800bde4:	0800be8c 	.word	0x0800be8c
 800bde8:	0800be8c 	.word	0x0800be8c
 800bdec:	0800be90 	.word	0x0800be90

0800bdf0 <memset>:
 800bdf0:	4402      	add	r2, r0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d100      	bne.n	800bdfa <memset+0xa>
 800bdf8:	4770      	bx	lr
 800bdfa:	f803 1b01 	strb.w	r1, [r3], #1
 800bdfe:	e7f9      	b.n	800bdf4 <memset+0x4>

0800be00 <strncpy>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	3901      	subs	r1, #1
 800be04:	4604      	mov	r4, r0
 800be06:	b902      	cbnz	r2, 800be0a <strncpy+0xa>
 800be08:	bd70      	pop	{r4, r5, r6, pc}
 800be0a:	4623      	mov	r3, r4
 800be0c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800be10:	f803 5b01 	strb.w	r5, [r3], #1
 800be14:	1e56      	subs	r6, r2, #1
 800be16:	b92d      	cbnz	r5, 800be24 <strncpy+0x24>
 800be18:	4414      	add	r4, r2
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	d0f4      	beq.n	800be08 <strncpy+0x8>
 800be1e:	f803 5b01 	strb.w	r5, [r3], #1
 800be22:	e7fa      	b.n	800be1a <strncpy+0x1a>
 800be24:	461c      	mov	r4, r3
 800be26:	4632      	mov	r2, r6
 800be28:	e7ed      	b.n	800be06 <strncpy+0x6>
	...

0800be2c <_init>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	bf00      	nop
 800be30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be32:	bc08      	pop	{r3}
 800be34:	469e      	mov	lr, r3
 800be36:	4770      	bx	lr

0800be38 <_fini>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	bf00      	nop
 800be3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3e:	bc08      	pop	{r3}
 800be40:	469e      	mov	lr, r3
 800be42:	4770      	bx	lr
