
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c524  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7fc  0800c7fc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c804  0800c804  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c808  0800c808  0001c808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  0800c80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a48c  24000094  0800c8a0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400a520  0800c8a0  0002a520  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033bee  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f8b  00000000  00000000  00053cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001818  00000000  00000000  00058c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001610  00000000  00000000  0005a458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a8ce  00000000  00000000  0005ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001afcd  00000000  00000000  00096336  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00169437  00000000  00000000  000b1303  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021a73a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063cc  00000000  00000000  0021a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000094 	.word	0x24000094
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c7a4 	.word	0x0800c7a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000098 	.word	0x24000098
 80002d4:	0800c7a4 	.word	0x0800c7a4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <init>:

UART_HandleTypeDef *debugHuart;
uint8_t recvChr;
uint8_t throttlePercent = 0;
void init(UART_HandleTypeDef *DebugHuart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  debugHuart = DebugHuart;
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <init+0x24>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_IT(debugHuart, &recvChr, 1);
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <init+0x24>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4904      	ldr	r1, [pc, #16]	; (8000600 <init+0x28>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00a fade 	bl	800abb0 <HAL_UART_Receive_IT>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2400a0b8 	.word	0x2400a0b8
 8000600:	2400a0b4 	.word	0x2400a0b4

08000604 <getThrottlePercent>:

uint8_t getThrottlePercent()
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return throttlePercent;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <getThrottlePercent+0x14>)
 800060a:	781b      	ldrb	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	240000b0 	.word	0x240000b0

0800061c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
  throttlePercent = recvChr;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <HAL_UART_RxCpltCallback+0x28>)
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_UART_RxCpltCallback+0x2c>)
 800062a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(debugHuart, &recvChr, 1);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_UART_RxCpltCallback+0x30>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2201      	movs	r2, #1
 8000632:	4904      	ldr	r1, [pc, #16]	; (8000644 <HAL_UART_RxCpltCallback+0x28>)
 8000634:	4618      	mov	r0, r3
 8000636:	f00a fabb 	bl	800abb0 <HAL_UART_Receive_IT>
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2400a0b4 	.word	0x2400a0b4
 8000648:	240000b0 	.word	0x240000b0
 800064c:	2400a0b8 	.word	0x2400a0b8

08000650 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_DCMI_Init+0x64>)
 8000658:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_DCMI_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000662:	2220      	movs	r2, #32
 8000664:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_DCMI_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_DCMI_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000680:	2208      	movs	r2, #8
 8000682:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_DCMI_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_DCMI_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_DCMI_Init+0x60>)
 800069e:	f001 ff01 	bl	80024a4 <HAL_DCMI_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fc20 	bl	8000eec <Error_Handler>
  }

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2400a134 	.word	0x2400a134
 80006b4:	48020000 	.word	0x48020000

080006b8 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	; 0x38
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a7a      	ldr	r2, [pc, #488]	; (80008c0 <HAL_DCMI_MspInit+0x208>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	f040 80ed 	bne.w	80008b6 <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80006dc:	4b79      	ldr	r3, [pc, #484]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 80006de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80006e2:	4a78      	ldr	r2, [pc, #480]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80006ec:	4b75      	ldr	r3, [pc, #468]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
 80006f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4b72      	ldr	r3, [pc, #456]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a70      	ldr	r2, [pc, #448]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b6e      	ldr	r3, [pc, #440]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b6a      	ldr	r3, [pc, #424]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a69      	ldr	r2, [pc, #420]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a61      	ldr	r2, [pc, #388]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b5f      	ldr	r3, [pc, #380]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a5a      	ldr	r2, [pc, #360]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a52      	ldr	r2, [pc, #328]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <HAL_DCMI_MspInit+0x20c>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000790:	2370      	movs	r3, #112	; 0x70
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a0:	230d      	movs	r3, #13
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4847      	ldr	r0, [pc, #284]	; (80008c8 <HAL_DCMI_MspInit+0x210>)
 80007ac:	f005 fca8 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007b0:	2350      	movs	r3, #80	; 0x50
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c0:	230d      	movs	r3, #13
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4840      	ldr	r0, [pc, #256]	; (80008cc <HAL_DCMI_MspInit+0x214>)
 80007cc:	f005 fc98 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80007d0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e2:	230d      	movs	r3, #13
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	4838      	ldr	r0, [pc, #224]	; (80008d0 <HAL_DCMI_MspInit+0x218>)
 80007ee:	f005 fc87 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f2:	2308      	movs	r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000802:	230d      	movs	r3, #13
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4831      	ldr	r0, [pc, #196]	; (80008d4 <HAL_DCMI_MspInit+0x21c>)
 800080e:	f005 fc77 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000822:	230d      	movs	r3, #13
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	482a      	ldr	r0, [pc, #168]	; (80008d8 <HAL_DCMI_MspInit+0x220>)
 800082e:	f005 fc67 	bl	8006100 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000834:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <HAL_DCMI_MspInit+0x228>)
 8000836:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800083a:	224b      	movs	r2, #75	; 0x4b
 800083c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800084c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000850:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000858:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800085c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000860:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000868:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800086c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000870:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000874:	2204      	movs	r2, #4
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800087a:	2203      	movs	r2, #3
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 8000886:	2200      	movs	r2, #0
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800088a:	4814      	ldr	r0, [pc, #80]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800088c:	f002 f94e 	bl	8002b2c <HAL_DMA_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 8000896:	f000 fb29 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 800089e:	649a      	str	r2, [r3, #72]	; 0x48
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_DCMI_MspInit+0x224>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	204e      	movs	r0, #78	; 0x4e
 80008ac:	f001 fdc5 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80008b0:	204e      	movs	r0, #78	; 0x4e
 80008b2:	f001 fddc 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3738      	adds	r7, #56	; 0x38
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	48020000 	.word	0x48020000
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58021000 	.word	0x58021000
 80008cc:	58020000 	.word	0x58020000
 80008d0:	58020800 	.word	0x58020800
 80008d4:	58020c00 	.word	0x58020c00
 80008d8:	58020400 	.word	0x58020400
 80008dc:	2400a0bc 	.word	0x2400a0bc
 80008e0:	40020010 	.word	0x40020010

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_DMA_Init+0x4c>)
 80008ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_DMA_Init+0x4c>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_DMA_Init+0x4c>)
 80008fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	200b      	movs	r0, #11
 800090e:	f001 fd94 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000912:	200b      	movs	r0, #11
 8000914:	f001 fdab 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	200c      	movs	r0, #12
 800091e:	f001 fd8c 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000922:	200c      	movs	r0, #12
 8000924:	f001 fda3 	bl	800246e <HAL_NVIC_EnableIRQ>

}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58024400 	.word	0x58024400

08000934 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	4b6e      	ldr	r3, [pc, #440]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a6c      	ldr	r2, [pc, #432]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b6a      	ldr	r3, [pc, #424]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000968:	4b66      	ldr	r3, [pc, #408]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a65      	ldr	r2, [pc, #404]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b5f      	ldr	r3, [pc, #380]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a5d      	ldr	r2, [pc, #372]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b57      	ldr	r3, [pc, #348]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a56      	ldr	r2, [pc, #344]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a4e      	ldr	r2, [pc, #312]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b4c      	ldr	r3, [pc, #304]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a47      	ldr	r2, [pc, #284]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <MX_GPIO_Init+0x1d0>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2104      	movs	r1, #4
 8000a02:	4841      	ldr	r0, [pc, #260]	; (8000b08 <MX_GPIO_Init+0x1d4>)
 8000a04:	f005 fd2c 	bl	8006460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	483f      	ldr	r0, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x1d8>)
 8000a0e:	f005 fd27 	bl	8006460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2103      	movs	r1, #3
 8000a16:	483e      	ldr	r0, [pc, #248]	; (8000b10 <MX_GPIO_Init+0x1dc>)
 8000a18:	f005 fd22 	bl	8006460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a22:	483b      	ldr	r0, [pc, #236]	; (8000b10 <MX_GPIO_Init+0x1dc>)
 8000a24:	f005 fd1c 	bl	8006460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4839      	ldr	r0, [pc, #228]	; (8000b14 <MX_GPIO_Init+0x1e0>)
 8000a2e:	f005 fd17 	bl	8006460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 8000a32:	2304      	movs	r3, #4
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	482f      	ldr	r0, [pc, #188]	; (8000b08 <MX_GPIO_Init+0x1d4>)
 8000a4a:	f005 fb59 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 8000a4e:	2320      	movs	r3, #32
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4829      	ldr	r0, [pc, #164]	; (8000b0c <MX_GPIO_Init+0x1d8>)
 8000a66:	f005 fb4b 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 8000a6a:	f247 0303 	movw	r3, #28675	; 0x7003
 8000a6e:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_GPIO_Init+0x1dc>)
 8000a84:	f005 fb3c 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <MX_GPIO_Init+0x1dc>)
 8000a9c:	f005 fb30 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4815      	ldr	r0, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x1dc>)
 8000aba:	f005 fb21 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0x1d4>)
 8000adc:	f005 fb10 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_GPIO_Init+0x1e0>)
 8000af8:	f005 fb02 	bl	8006100 <HAL_GPIO_Init>

}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58020000 	.word	0x58020000
 8000b0c:	58020800 	.word	0x58020800
 8000b10:	58020400 	.word	0x58020400
 8000b14:	58020c00 	.word	0x58020c00

08000b18 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <MX_I2C1_Init+0x78>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b24:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <MX_I2C1_Init+0x7c>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b54:	f005 fcb8 	bl	80064c8 <HAL_I2C_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b5e:	f000 f9c5 	bl	8000eec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b66:	f006 f821 	bl	8006bac <HAL_I2CEx_ConfigAnalogFilter>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b70:	f000 f9bc 	bl	8000eec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_I2C1_Init+0x74>)
 8000b78:	f006 f863 	bl	8006c42 <HAL_I2CEx_ConfigDigitalFilter>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b82:	f000 f9b3 	bl	8000eec <Error_Handler>
  }

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2400a184 	.word	0x2400a184
 8000b90:	40005400 	.word	0x40005400
 8000b94:	009034b6 	.word	0x009034b6

08000b98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <MX_I2C2_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x009034B6;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_I2C2_Init+0x7c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bd4:	f005 fc78 	bl	80064c8 <HAL_I2C_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bde:	f000 f985 	bl	8000eec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000be6:	f005 ffe1 	bl	8006bac <HAL_I2CEx_ConfigAnalogFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 f97c 	bl	8000eec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_I2C2_Init+0x74>)
 8000bf8:	f006 f823 	bl	8006c42 <HAL_I2CEx_ConfigDigitalFilter>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c02:	f000 f973 	bl	8000eec <Error_Handler>
  }

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2400a1d0 	.word	0x2400a1d0
 8000c10:	40005800 	.word	0x40005800
 8000c14:	009034b6 	.word	0x009034b6

08000c18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <HAL_I2C_MspInit+0xf4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12f      	bne.n	8000c9a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c58:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5e:	2312      	movs	r3, #18
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4827      	ldr	r0, [pc, #156]	; (8000d14 <HAL_I2C_MspInit+0xfc>)
 8000c76:	f005 fa43 	bl	8006100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c80:	4a23      	ldr	r2, [pc, #140]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c98:	e033      	b.n	8000d02 <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <HAL_I2C_MspInit+0x100>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d12e      	bne.n	8000d02 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_I2C_MspInit+0xfc>)
 8000ce0:	f005 fa0e 	bl	8006100 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_I2C_MspInit+0xf8>)
 8000cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	; 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020400 	.word	0x58020400
 8000d18:	40005800 	.word	0x40005800

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f001 f9f0 	bl	8002104 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f81c 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f7ff fe04 	bl	8000934 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2c:	f7ff fdda 	bl	80008e4 <MX_DMA_Init>
  MX_DCMI_Init();
 8000d30:	f7ff fc8e 	bl	8000650 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000d34:	f7ff fef0 	bl	8000b18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d38:	f7ff ff2e 	bl	8000b98 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d3c:	f000 f8de 	bl	8000efc <MX_SPI1_Init>
  MX_UART4_Init();
 8000d40:	f000 fd5e 	bl	8001800 <MX_UART4_Init>
  MX_TIM4_Init();
 8000d44:	f000 faec 	bl	8001320 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d48:	f000 fb6c 	bl	8001424 <MX_TIM5_Init>
  MX_TIM16_Init();
 8000d4c:	f000 fbe2 	bl	8001514 <MX_TIM16_Init>
  MX_TIM3_Init();
 8000d50:	f000 fa98 	bl	8001284 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ctrlCent.init();
 8000d54:	4b01      	ldr	r3, [pc, #4]	; (8000d5c <main+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <main+0x3e>
 8000d5c:	24000010 	.word	0x24000010

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0cc      	sub	sp, #304	; 0x130
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d6a:	224c      	movs	r2, #76	; 0x4c
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00b fd10 	bl	800c794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00b fd09 	bl	800c794 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	23bc      	movs	r3, #188	; 0xbc
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f00b fd01 	bl	800c794 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f005 ffa2 	bl	8006cdc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <SystemClock_Config+0x184>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	4a50      	ldr	r2, [pc, #320]	; (8000ee4 <SystemClock_Config+0x184>)
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000daa:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <SystemClock_Config+0x184>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <SystemClock_Config+0x188>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a4b      	ldr	r2, [pc, #300]	; (8000ee8 <SystemClock_Config+0x188>)
 8000dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <SystemClock_Config+0x188>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd2:	bf00      	nop
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <SystemClock_Config+0x188>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de0:	d1f8      	bne.n	8000dd4 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000e0e:	23c8      	movs	r3, #200	; 0xc8
 8000e10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e26:	2308      	movs	r3, #8
 8000e28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f005 ff87 	bl	8006d50 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e48:	f000 f850 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	233f      	movs	r3, #63	; 0x3f
 8000e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fb73 	bl	8007570 <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e90:	f000 f82c 	bl	8000eec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e9c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 ff45 	bl	8007d4c <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000ec8:	f000 f810 	bl	8000eec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000ecc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f006 fd02 	bl	80078dc <HAL_RCC_MCOConfig>
}
 8000ed8:	bf00      	nop
 8000eda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	58000400 	.word	0x58000400
 8000ee8:	58024800 	.word	0x58024800

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <MX_SPI1_Init+0xa8>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_SPI1_Init+0xa4>)
 8000f8e:	f008 f9dd 	bl	800934c <HAL_SPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f98:	f7ff ffa8 	bl	8000eec <Error_Handler>
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2400a21c 	.word	0x2400a21c
 8000fa4:	40013000 	.word	0x40013000

08000fa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <HAL_SPI_MspInit+0xc8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d14d      	bne.n	8001066 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8000fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd0:	4a28      	ldr	r2, [pc, #160]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8000fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8000fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0xcc>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8001024:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001036:	2305      	movs	r3, #5
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <HAL_SPI_MspInit+0xd0>)
 8001042:	f005 f85d 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001046:	2310      	movs	r3, #16
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001056:	2305      	movs	r3, #5
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <HAL_SPI_MspInit+0xd4>)
 8001062:	f005 f84d 	bl	8006100 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40013000 	.word	0x40013000
 8001074:	58024400 	.word	0x58024400
 8001078:	58020000 	.word	0x58020000
 800107c:	58020400 	.word	0x58020400

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_MspInit+0x30>)
 8001088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_MspInit+0x30>)
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_MspInit+0x30>)
 8001098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58024400 	.word	0x58024400

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f001 f872 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <DMA1_Stream0_IRQHandler+0x10>)
 800110e:	f003 f835 	bl	800417c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2400a0bc 	.word	0x2400a0bc

0800111c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DMA1_Stream1_IRQHandler+0x10>)
 8001122:	f003 f82b 	bl	800417c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2400a3d4 	.word	0x2400a3d4

08001130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM3_IRQHandler+0x10>)
 8001136:	f008 fbdd 	bl	80098f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2400a33c 	.word	0x2400a33c

08001144 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <UART4_IRQHandler+0x10>)
 800114a:	f009 fe09 	bl	800ad60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2400a44c 	.word	0x2400a44c

08001158 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DCMI_IRQHandler+0x10>)
 800115e:	f001 fb95 	bl	800288c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2400a134 	.word	0x2400a134

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <SystemInit+0xec>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a38      	ldr	r2, [pc, #224]	; (8001258 <SystemInit+0xec>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <SystemInit+0xf0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	2b06      	cmp	r3, #6
 800118a:	d807      	bhi.n	800119c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <SystemInit+0xf0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	4a31      	ldr	r2, [pc, #196]	; (800125c <SystemInit+0xf0>)
 8001196:	f043 0307 	orr.w	r3, r3, #7
 800119a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <SystemInit+0xf4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <SystemInit+0xf4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <SystemInit+0xf4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <SystemInit+0xf4>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	492b      	ldr	r1, [pc, #172]	; (8001260 <SystemInit+0xf4>)
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <SystemInit+0xf8>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <SystemInit+0xf0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d907      	bls.n	80011d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <SystemInit+0xf0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 030f 	bic.w	r3, r3, #15
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <SystemInit+0xf0>)
 80011d0:	f043 0307 	orr.w	r3, r3, #7
 80011d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <SystemInit+0xf4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <SystemInit+0xf4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <SystemInit+0xf4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <SystemInit+0xf4>)
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <SystemInit+0xfc>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <SystemInit+0xf4>)
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <SystemInit+0x100>)
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <SystemInit+0xf4>)
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <SystemInit+0x104>)
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <SystemInit+0xf4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <SystemInit+0xf4>)
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <SystemInit+0x104>)
 8001204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <SystemInit+0xf4>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <SystemInit+0xf4>)
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <SystemInit+0x104>)
 8001210:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <SystemInit+0xf4>)
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <SystemInit+0xf4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <SystemInit+0xf4>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <SystemInit+0xf4>)
 8001226:	2200      	movs	r2, #0
 8001228:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <SystemInit+0x108>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <SystemInit+0x10c>)
 8001230:	4013      	ands	r3, r2
 8001232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001236:	d202      	bcs.n	800123e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <SystemInit+0x110>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <SystemInit+0x114>)
 8001240:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001244:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SystemInit+0xec>)
 8001248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00
 800125c:	52002000 	.word	0x52002000
 8001260:	58024400 	.word	0x58024400
 8001264:	eaf6ed7f 	.word	0xeaf6ed7f
 8001268:	02020200 	.word	0x02020200
 800126c:	01ff0000 	.word	0x01ff0000
 8001270:	01010280 	.word	0x01010280
 8001274:	5c001000 	.word	0x5c001000
 8001278:	ffff0000 	.word	0xffff0000
 800127c:	51008108 	.word	0x51008108
 8001280:	52004000 	.word	0x52004000

08001284 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM3_Init+0x94>)
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <MX_TIM3_Init+0x98>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_TIM3_Init+0x94>)
 80012aa:	22c7      	movs	r2, #199	; 0xc7
 80012ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_TIM3_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM3_Init+0x94>)
 80012b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80012ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_TIM3_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM3_Init+0x94>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM3_Init+0x94>)
 80012ca:	f008 f952 	bl	8009572 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012d4:	f7ff fe0a 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM3_Init+0x94>)
 80012e6:	f008 fd35 	bl	8009d54 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012f0:	f7ff fdfc 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM3_Init+0x94>)
 8001302:	f009 fa4b 	bl	800a79c <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800130c:	f7ff fdee 	bl	8000eec <Error_Handler>
  }

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2400a33c 	.word	0x2400a33c
 800131c:	40000400 	.word	0x40000400

08001320 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	615a      	str	r2, [r3, #20]
 8001350:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <MX_TIM4_Init+0xfc>)
 8001354:	4a32      	ldr	r2, [pc, #200]	; (8001420 <MX_TIM4_Init+0x100>)
 8001356:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_TIM4_Init+0xfc>)
 800135a:	2263      	movs	r2, #99	; 0x63
 800135c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_TIM4_Init+0xfc>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_TIM4_Init+0xfc>)
 8001366:	f241 3287 	movw	r2, #4999	; 0x1387
 800136a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_TIM4_Init+0xfc>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_TIM4_Init+0xfc>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001378:	4828      	ldr	r0, [pc, #160]	; (800141c <MX_TIM4_Init+0xfc>)
 800137a:	f008 f8fa 	bl	8009572 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001384:	f7ff fdb2 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	4821      	ldr	r0, [pc, #132]	; (800141c <MX_TIM4_Init+0xfc>)
 8001396:	f008 fcdd 	bl	8009d54 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013a0:	f7ff fda4 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013a4:	481d      	ldr	r0, [pc, #116]	; (800141c <MX_TIM4_Init+0xfc>)
 80013a6:	f008 f971 	bl	800968c <HAL_TIM_PWM_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80013b0:	f7ff fd9c 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4816      	ldr	r0, [pc, #88]	; (800141c <MX_TIM4_Init+0xfc>)
 80013c4:	f009 f9ea 	bl	800a79c <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013ce:	f7ff fd8d 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	; 0x60
 80013d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	2204      	movs	r2, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_TIM4_Init+0xfc>)
 80013ea:	f008 fba3 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013f4:	f7ff fd7a 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	2208      	movs	r2, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <MX_TIM4_Init+0xfc>)
 8001400:	f008 fb98 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800140a:	f7ff fd6f 	bl	8000eec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <MX_TIM4_Init+0xfc>)
 8001410:	f000 f968 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8001414:	bf00      	nop
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2400a2a4 	.word	0x2400a2a4
 8001420:	40000800 	.word	0x40000800

08001424 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_TIM5_Init+0xe8>)
 8001458:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <MX_TIM5_Init+0xec>)
 800145a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_TIM5_Init+0xe8>)
 800145e:	2263      	movs	r2, #99	; 0x63
 8001460:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <MX_TIM5_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <MX_TIM5_Init+0xe8>)
 800146a:	f241 3287 	movw	r2, #4999	; 0x1387
 800146e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b26      	ldr	r3, [pc, #152]	; (800150c <MX_TIM5_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <MX_TIM5_Init+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800147c:	4823      	ldr	r0, [pc, #140]	; (800150c <MX_TIM5_Init+0xe8>)
 800147e:	f008 f878 	bl	8009572 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001488:	f7ff fd30 	bl	8000eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	; (800150c <MX_TIM5_Init+0xe8>)
 800149a:	f008 fc5b 	bl	8009d54 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80014a4:	f7ff fd22 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014a8:	4818      	ldr	r0, [pc, #96]	; (800150c <MX_TIM5_Init+0xe8>)
 80014aa:	f008 f8ef 	bl	800968c <HAL_TIM_PWM_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80014b4:	f7ff fd1a 	bl	8000eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <MX_TIM5_Init+0xe8>)
 80014c8:	f009 f968 	bl	800a79c <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014d2:	f7ff fd0b 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d6:	2360      	movs	r3, #96	; 0x60
 80014d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 80014da:	f240 23ee 	movw	r3, #750	; 0x2ee
 80014de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	220c      	movs	r2, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM5_Init+0xe8>)
 80014f0:	f008 fb20 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 80014fa:	f7ff fcf7 	bl	8000eec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM5_Init+0xe8>)
 8001500:	f000 f8f0 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400a2f0 	.word	0x2400a2f0
 8001510:	40000c00 	.word	0x40000c00

08001514 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b092      	sub	sp, #72	; 0x48
 8001518:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f00b f92d 	bl	800c794 <memset>

  htim16.Instance = TIM16;
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MX_TIM16_Init+0xec>)
 800153c:	4a31      	ldr	r2, [pc, #196]	; (8001604 <MX_TIM16_Init+0xf0>)
 800153e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100-1;
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_TIM16_Init+0xec>)
 8001542:	2263      	movs	r2, #99	; 0x63
 8001544:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <MX_TIM16_Init+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_TIM16_Init+0xec>)
 800154e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001552:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <MX_TIM16_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_TIM16_Init+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <MX_TIM16_Init+0xec>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001566:	4826      	ldr	r0, [pc, #152]	; (8001600 <MX_TIM16_Init+0xec>)
 8001568:	f008 f803 	bl	8009572 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001572:	f7ff fcbb 	bl	8000eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001576:	4822      	ldr	r0, [pc, #136]	; (8001600 <MX_TIM16_Init+0xec>)
 8001578:	f008 f888 	bl	800968c <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001582:	f7ff fcb3 	bl	8000eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001586:	2360      	movs	r3, #96	; 0x60
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <MX_TIM16_Init+0xec>)
 80015ac:	f008 fac2 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015b6:	f7ff fc99 	bl	8000eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM16_Init+0xec>)
 80015e2:	f009 f963 	bl	800a8ac <HAL_TIMEx_ConfigBreakDeadTime>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80015ec:	f7ff fc7e 	bl	8000eec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM16_Init+0xec>)
 80015f2:	f000 f877 	bl	80016e4 <HAL_TIM_MspPostInit>

}
 80015f6:	bf00      	nop
 80015f8:	3748      	adds	r7, #72	; 0x48
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2400a388 	.word	0x2400a388
 8001604:	40014400 	.word	0x40014400

08001608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2e      	ldr	r2, [pc, #184]	; (80016d0 <HAL_TIM_Base_MspInit+0xc8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d117      	bne.n	800164a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 800161c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001620:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 800162c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	201d      	movs	r0, #29
 800163e:	f000 fefc 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001642:	201d      	movs	r0, #29
 8001644:	f000 ff13 	bl	800246e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001648:	e03d      	b.n	80016c6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM4)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d10f      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
}
 8001672:	e028      	b.n	80016c6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM5)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_TIM_Base_MspInit+0xd4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10f      	bne.n	800169e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	e013      	b.n	80016c6 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM16)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_TIM_Base_MspInit+0xd8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d10e      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 80016aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 80016ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40000400 	.word	0x40000400
 80016d4:	58024400 	.word	0x58024400
 80016d8:	40000800 	.word	0x40000800
 80016dc:	40000c00 	.word	0x40000c00
 80016e0:	40014400 	.word	0x40014400

080016e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <HAL_TIM_MspPostInit+0x100>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d120      	bne.n	8001748 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001724:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001736:	2302      	movs	r3, #2
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	482a      	ldr	r0, [pc, #168]	; (80017ec <HAL_TIM_MspPostInit+0x108>)
 8001742:	f004 fcdd 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001746:	e049      	b.n	80017dc <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM5)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <HAL_TIM_MspPostInit+0x10c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d11f      	bne.n	8001792 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001770:	2308      	movs	r3, #8
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001780:	2302      	movs	r3, #2
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	481a      	ldr	r0, [pc, #104]	; (80017f4 <HAL_TIM_MspPostInit+0x110>)
 800178c:	f004 fcb8 	bl	8006100 <HAL_GPIO_Init>
}
 8001790:	e024      	b.n	80017dc <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM16)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_TIM_MspPostInit+0x114>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d11f      	bne.n	80017dc <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_TIM_MspPostInit+0x104>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <HAL_TIM_MspPostInit+0x118>)
 80017d8:	f004 fc92 	bl	8006100 <HAL_GPIO_Init>
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40000800 	.word	0x40000800
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58020c00 	.word	0x58020c00
 80017f0:	40000c00 	.word	0x40000c00
 80017f4:	58020000 	.word	0x58020000
 80017f8:	40014400 	.word	0x40014400
 80017fc:	58020400 	.word	0x58020400

08001800 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_UART4_Init+0x90>)
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <MX_UART4_Init+0x94>)
 8001808:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_UART4_Init+0x90>)
 800180c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001810:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_UART4_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_UART4_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_UART4_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_UART4_Init+0x90>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_UART4_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_UART4_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_UART4_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_UART4_Init+0x90>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_UART4_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001848:	4811      	ldr	r0, [pc, #68]	; (8001890 <MX_UART4_Init+0x90>)
 800184a:	f009 f8cb 	bl	800a9e4 <HAL_UART_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001854:	f7ff fb4a 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001858:	2100      	movs	r1, #0
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_UART4_Init+0x90>)
 800185c:	f00a fd8b 	bl	800c376 <HAL_UARTEx_SetTxFifoThreshold>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001866:	f7ff fb41 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186a:	2100      	movs	r1, #0
 800186c:	4808      	ldr	r0, [pc, #32]	; (8001890 <MX_UART4_Init+0x90>)
 800186e:	f00a fdc0 	bl	800c3f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001878:	f7ff fb38 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_UART4_Init+0x90>)
 800187e:	f00a fd41 	bl	800c304 <HAL_UARTEx_DisableFifoMode>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001888:	f7ff fb30 	bl	8000eec <Error_Handler>
  }

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2400a44c 	.word	0x2400a44c
 8001894:	40004c00 	.word	0x40004c00

08001898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <HAL_UART_MspInit+0x104>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d16c      	bne.n	8001994 <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_UART_MspInit+0x108>)
 80018bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c0:	4a37      	ldr	r2, [pc, #220]	; (80019a0 <HAL_UART_MspInit+0x108>)
 80018c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_UART_MspInit+0x108>)
 80018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_UART_MspInit+0x108>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	4a30      	ldr	r2, [pc, #192]	; (80019a0 <HAL_UART_MspInit+0x108>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_UART_MspInit+0x108>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f6:	2303      	movs	r3, #3
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001906:	2308      	movs	r3, #8
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4824      	ldr	r0, [pc, #144]	; (80019a4 <HAL_UART_MspInit+0x10c>)
 8001912:	f004 fbf5 	bl	8006100 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001918:	4a24      	ldr	r2, [pc, #144]	; (80019ac <HAL_UART_MspInit+0x114>)
 800191a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800191e:	223f      	movs	r2, #63	; 0x3f
 8001920:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001934:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001948:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001952:	2204      	movs	r2, #4
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001958:	2203      	movs	r2, #3
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800195e:	2200      	movs	r2, #0
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001968:	480f      	ldr	r0, [pc, #60]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800196a:	f001 f8df 	bl	8002b2c <HAL_DMA_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001974:	f7ff faba 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_UART_MspInit+0x110>)
 800197c:	679a      	str	r2, [r3, #120]	; 0x78
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_UART_MspInit+0x110>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2034      	movs	r0, #52	; 0x34
 800198a:	f000 fd56 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800198e:	2034      	movs	r0, #52	; 0x34
 8001990:	f000 fd6d 	bl	800246e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40004c00 	.word	0x40004c00
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020000 	.word	0x58020000
 80019a8:	2400a3d4 	.word	0x2400a3d4
 80019ac:	40020028 	.word	0x40020028

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
  ldr  r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff fbc7 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f00a feb5 	bl	800c74c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff f99b 	bl	8000d1c <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80019ec:	0800c80c 	.word	0x0800c80c
  ldr  r0, =_sdata
 80019f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80019f4:	24000094 	.word	0x24000094
  ldr  r2, =_sbss
 80019f8:	24000094 	.word	0x24000094
  ldr  r3, = _ebss
 80019fc:	2400a520 	.word	0x2400a520

08001a00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC3_IRQHandler>
	...

08001a04 <initCtrlCenter>:
/**
  * @brief  初始化控制程序，启动定时器控制循环.
  * @retval None
  */
void initCtrlCenter()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  ctrler.throttleInit(0);
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <initCtrlCenter+0x78>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4798      	blx	r3
  //ctrler.throttleTest();
  //GPS_Init(&huart4, NULL);
  jy61p.init(&hi2c2);
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <initCtrlCenter+0x7c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	481b      	ldr	r0, [pc, #108]	; (8001a84 <initCtrlCenter+0x80>)
 8001a16:	4798      	blx	r3
  comm.init(&huart4);
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <initCtrlCenter+0x84>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	481b      	ldr	r0, [pc, #108]	; (8001a8c <initCtrlCenter+0x88>)
 8001a1e:	4798      	blx	r3
  //testGPS = get_GPS_INFO();
  ctrler.Init(0.005f);
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <initCtrlCenter+0x78>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001a90 <initCtrlCenter+0x8c>
 8001a28:	4798      	blx	r3
  ctrler.initParams(PARAM_ROLL, 12, 0, 0, 0);
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <initCtrlCenter+0x78>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001a94 <initCtrlCenter+0x90>
 8001a32:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8001a94 <initCtrlCenter+0x90>
 8001a36:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001a94 <initCtrlCenter+0x90>
 8001a3a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	4798      	blx	r3
  ctrler.initParams(PARAM_PITCH, 0, 0, 0, 0);
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <initCtrlCenter+0x78>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	eddf 1a13 	vldr	s3, [pc, #76]	; 8001a94 <initCtrlCenter+0x90>
 8001a4a:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001a94 <initCtrlCenter+0x90>
 8001a4e:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001a94 <initCtrlCenter+0x90>
 8001a52:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001a94 <initCtrlCenter+0x90>
 8001a56:	2001      	movs	r0, #1
 8001a58:	4798      	blx	r3
  ctrler.initParams(PARAM_YAW, 0, 0, 0, 0);
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <initCtrlCenter+0x78>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8001a94 <initCtrlCenter+0x90>
 8001a62:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001a94 <initCtrlCenter+0x90>
 8001a66:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001a94 <initCtrlCenter+0x90>
 8001a6a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001a94 <initCtrlCenter+0x90>
 8001a6e:	2002      	movs	r0, #2
 8001a70:	4798      	blx	r3
  HAL_TIM_Base_Start_IT(&htim3);
 8001a72:	4809      	ldr	r0, [pc, #36]	; (8001a98 <initCtrlCenter+0x94>)
 8001a74:	f007 fdd4 	bl	8009620 <HAL_TIM_Base_Start_IT>
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	24000014 	.word	0x24000014
 8001a80:	24000070 	.word	0x24000070
 8001a84:	2400a1d0 	.word	0x2400a1d0
 8001a88:	24000000 	.word	0x24000000
 8001a8c:	2400a44c 	.word	0x2400a44c
 8001a90:	3ba3d70a 	.word	0x3ba3d70a
 8001a94:	00000000 	.word	0x00000000
 8001a98:	2400a33c 	.word	0x2400a33c

08001a9c <HAL_TIM_PeriodElapsedCallback>:
const uint8_t loopPSK = 10;
uint8_t loopCount = 0;
Atti nowAtti, expectAtti;
//200Hz,5ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9e:	b095      	sub	sp, #84	; 0x54
 8001aa0:	af0a      	add	r7, sp, #40	; 0x28
 8001aa2:	6278      	str	r0, [r7, #36]	; 0x24
  if (htim->Instance == htim3.Instance)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d14b      	bne.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0xac>
  {
	  nowAtti = jy61p.getAtti();
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4c28      	ldr	r4, [pc, #160]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ab6:	f107 0208 	add.w	r2, r7, #8
 8001aba:	4610      	mov	r0, r2
 8001abc:	4798      	blx	r3
 8001abe:	4625      	mov	r5, r4
 8001ac0:	f107 0408 	add.w	r4, r7, #8
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001acc:	e885 0003 	stmia.w	r5, {r0, r1}
    expectAtti.roll = 0;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
    expectAtti.pitch = 0;
 8001ad8:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    expectAtti.yaw = 0;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    ctrler.updateCtrlFrame(nowAtti, expectAtti, comm.getThrottlePercent());
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4798      	blx	r3
 8001af4:	4603      	mov	r3, r0
 8001af6:	4e18      	ldr	r6, [pc, #96]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001af8:	9308      	str	r3, [sp, #32]
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001afc:	ac02      	add	r4, sp, #8
 8001afe:	461d      	mov	r5, r3
 8001b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b08:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b0c:	466a      	mov	r2, sp
 8001b0e:	f106 0310 	add.w	r3, r6, #16
 8001b12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b16:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b1a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b1e:	687c      	ldr	r4, [r7, #4]
 8001b20:	47a0      	blx	r4

    //LOOP指示灯闪烁
    if(++loopCount >= loopPSK)
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	220a      	movs	r2, #10
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d307      	bcc.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0xac>
    {
      HAL_GPIO_TogglePin(LED_LOOP_GPIO_Port, LED_LOOP_Pin);
 8001b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b3e:	f004 fca8 	bl	8006492 <HAL_GPIO_TogglePin>
      loopCount = 0;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001b48:	bf00      	nop
 8001b4a:	372c      	adds	r7, #44	; 0x2c
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b50:	2400a33c 	.word	0x2400a33c
 8001b54:	24000070 	.word	0x24000070
 8001b58:	2400a4f0 	.word	0x2400a4f0
 8001b5c:	2400a4d8 	.word	0x2400a4d8
 8001b60:	24000014 	.word	0x24000014
 8001b64:	24000000 	.word	0x24000000
 8001b68:	240000b1 	.word	0x240000b1
 8001b6c:	58020400 	.word	0x58020400

08001b70 <throttleInit>:
  throttleInit,
  throttleTest
};

void throttleInit(uint8_t withCalibration)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001b7a:	210c      	movs	r1, #12
 8001b7c:	4820      	ldr	r0, [pc, #128]	; (8001c00 <throttleInit+0x90>)
 8001b7e:	f007 fde7 	bl	8009750 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b82:	2104      	movs	r1, #4
 8001b84:	481f      	ldr	r0, [pc, #124]	; (8001c04 <throttleInit+0x94>)
 8001b86:	f007 fde3 	bl	8009750 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	481d      	ldr	r0, [pc, #116]	; (8001c04 <throttleInit+0x94>)
 8001b8e:	f007 fddf 	bl	8009750 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001b92:	2100      	movs	r1, #0
 8001b94:	481c      	ldr	r0, [pc, #112]	; (8001c08 <throttleInit+0x98>)
 8001b96:	f007 fddb 	bl	8009750 <HAL_TIM_PWM_Start>
	if(withCalibration)
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d016      	beq.n	8001bce <throttleInit+0x5e>
	{
		HAL_Delay(100);
 8001ba0:	2064      	movs	r0, #100	; 0x64
 8001ba2:	f000 fb41 	bl	8002228 <HAL_Delay>
		THROTTLE1(THROTTLE_MAX);
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <throttleInit+0x9c>)
 8001ba8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
		THROTTLE2(THROTTLE_MAX);
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <throttleInit+0xa0>)
 8001bb0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
		THROTTLE3(THROTTLE_MAX);
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <throttleInit+0xa0>)
 8001bb8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001bbc:	63da      	str	r2, [r3, #60]	; 0x3c
		THROTTLE4(THROTTLE_MAX);
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <throttleInit+0xa4>)
 8001bc0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(3000);
 8001bc6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001bca:	f000 fb2d 	bl	8002228 <HAL_Delay>
	}
	THROTTLE1(THROTTLE_MIN);
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <throttleInit+0x9c>)
 8001bd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
	THROTTLE2(THROTTLE_MIN);
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <throttleInit+0xa0>)
 8001bd8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38
	THROTTLE3(THROTTLE_MIN);
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <throttleInit+0xa0>)
 8001be0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
	THROTTLE4(THROTTLE_MIN);
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <throttleInit+0xa4>)
 8001be8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(2000);
 8001bee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bf2:	f000 fb19 	bl	8002228 <HAL_Delay>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2400a2f0 	.word	0x2400a2f0
 8001c04:	2400a2a4 	.word	0x2400a2a4
 8001c08:	2400a388 	.word	0x2400a388
 8001c0c:	40000c00 	.word	0x40000c00
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40014400 	.word	0x40014400

08001c18 <throttleTest>:

void throttleTest()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t throttle = THROTTLE_MIN;
 8001c1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c22:	607b      	str	r3, [r7, #4]
  int8_t dir = +1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	70fb      	strb	r3, [r7, #3]
  while(1)
  {
    HAL_Delay(100);
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f000 fafd 	bl	8002228 <HAL_Delay>
    throttle += (THROTTLE_MAX - THROTTLE_MIN) / 100 * dir;
 8001c2e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	607b      	str	r3, [r7, #4]
    THROTTLE1(throttle);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001c48:	d206      	bcs.n	8001c58 <throttleTest+0x40>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c50:	bf38      	it	cc
 8001c52:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001c56:	e001      	b.n	8001c5c <throttleTest+0x44>
 8001c58:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <throttleTest+0xc0>)
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
	  THROTTLE2(throttle);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001c66:	d206      	bcs.n	8001c76 <throttleTest+0x5e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c6e:	bf38      	it	cc
 8001c70:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001c74:	e001      	b.n	8001c7a <throttleTest+0x62>
 8001c76:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <throttleTest+0xc4>)
 8001c7c:	6393      	str	r3, [r2, #56]	; 0x38
	  THROTTLE3(throttle);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001c84:	d206      	bcs.n	8001c94 <throttleTest+0x7c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c8c:	bf38      	it	cc
 8001c8e:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001c92:	e001      	b.n	8001c98 <throttleTest+0x80>
 8001c94:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001c98:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <throttleTest+0xc4>)
 8001c9a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  THROTTLE4(throttle);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001ca2:	d206      	bcs.n	8001cb2 <throttleTest+0x9a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001caa:	bf38      	it	cc
 8001cac:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8001cb0:	e001      	b.n	8001cb6 <throttleTest+0x9e>
 8001cb2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <throttleTest+0xc8>)
 8001cb8:	6353      	str	r3, [r2, #52]	; 0x34
    if(throttle <= THROTTLE_MIN || throttle >= (THROTTLE_MAX * 3 / 4))dir = -dir;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001cc0:	d904      	bls.n	8001ccc <throttleTest+0xb4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d9ad      	bls.n	8001c28 <throttleTest+0x10>
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	425b      	negs	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	70fb      	strb	r3, [r7, #3]
    HAL_Delay(100);
 8001cd4:	e7a8      	b.n	8001c28 <throttleTest+0x10>
 8001cd6:	bf00      	nop
 8001cd8:	40000c00 	.word	0x40000c00
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40014400 	.word	0x40014400

08001ce4 <initPID>:
  }
}

void initPID(float deltaT)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	ed87 0a01 	vstr	s0, [r7, #4]
  ctrler.deltaT = deltaT;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <initPID+0x1c>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	24000014 	.word	0x24000014

08001d04 <initParams>:
  * @param  Kd: 微分控制器的K.
  * @param  LimitI: 积分限幅，正数.
  * @retval None
  */
void initParams(uint8_t axis, float Kp, float Ki, float Kd, float LimitI)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d10:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d14:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d18:	edc7 1a01 	vstr	s3, [r7, #4]
 8001d1c:	75fb      	strb	r3, [r7, #23]
  ctrler.params[axis].Kp = Kp;
 8001d1e:	7dfa      	ldrb	r2, [r7, #23]
 8001d20:	491b      	ldr	r1, [pc, #108]	; (8001d90 <initParams+0x8c>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].Ki = Ki;
 8001d32:	7dfa      	ldrb	r2, [r7, #23]
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <initParams+0x8c>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3308      	adds	r3, #8
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].Kd = Kd;
 8001d46:	7dfa      	ldrb	r2, [r7, #23]
 8001d48:	4911      	ldr	r1, [pc, #68]	; (8001d90 <initParams+0x8c>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	330c      	adds	r3, #12
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].LimitI = LimitI;
 8001d5a:	7dfa      	ldrb	r2, [r7, #23]
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <initParams+0x8c>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3310      	adds	r3, #16
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
  ctrler.params[axis].Integral = 0;
 8001d6e:	7dfa      	ldrb	r2, [r7, #23]
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <initParams+0x8c>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	24000014 	.word	0x24000014

08001d94 <updateCtrlFrame>:
  * @param  nowAtti: 当前姿态.
  * @param  expectAtti: 期望姿态.
  * @retval None
  */
void updateCtrlFrame(Atti nowAtti, Atti expectAtti, uint32_t throttle)
{
 8001d94:	b084      	sub	sp, #16
 8001d96:	b480      	push	{r7}
 8001d98:	b08b      	sub	sp, #44	; 0x2c
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001da0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if(throttle == 0)
 8001da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d110      	bne.n	8001dcc <updateCtrlFrame+0x38>
  {
	  THROTTLE1(THROTTLE_MIN);
 8001daa:	4bcc      	ldr	r3, [pc, #816]	; (80020dc <updateCtrlFrame+0x348>)
 8001dac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
	    THROTTLE2(THROTTLE_MIN);
 8001db2:	4bcb      	ldr	r3, [pc, #812]	; (80020e0 <updateCtrlFrame+0x34c>)
 8001db4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
	    THROTTLE3(THROTTLE_MIN);
 8001dba:	4bc9      	ldr	r3, [pc, #804]	; (80020e0 <updateCtrlFrame+0x34c>)
 8001dbc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c
	    THROTTLE4(THROTTLE_MIN);
 8001dc2:	4bc8      	ldr	r3, [pc, #800]	; (80020e4 <updateCtrlFrame+0x350>)
 8001dc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	e193      	b.n	80020f4 <updateCtrlFrame+0x360>
	    return;
  }
  uint32_t Out[3];
  float error[3] = {expectAtti.roll - nowAtti.roll, 
 8001dcc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001dd0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd8:	edc7 7a03 	vstr	s15, [r7, #12]
                    expectAtti.pitch - nowAtti.pitch, 
 8001ddc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001de0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
  float error[3] = {expectAtti.roll - nowAtti.roll, 
 8001de8:	edc7 7a04 	vstr	s15, [r7, #16]
                    expectAtti.yaw - nowAtti.yaw};
 8001dec:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001df0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001df4:	ee77 7a67 	vsub.f32	s15, s14, s15
  float error[3] = {expectAtti.roll - nowAtti.roll, 
 8001df8:	edc7 7a05 	vstr	s15, [r7, #20]
  float gyro[3] = {nowAtti.gx, nowAtti.gy, nowAtti.gz}; //TODO: 顺序待测
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	60bb      	str	r3, [r7, #8]
  for (uint32_t i = 0; i < 3; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	e0fa      	b.n	8002004 <updateCtrlFrame+0x270>
  {
    ctrler.params[i].Integral += error[i] * ctrler.deltaT;
 8001e0e:	49b6      	ldr	r1, [pc, #728]	; (80020e8 <updateCtrlFrame+0x354>)
 8001e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b1c      	subs	r3, #28
 8001e2e:	edd3 6a00 	vldr	s13, [r3]
 8001e32:	4bad      	ldr	r3, [pc, #692]	; (80020e8 <updateCtrlFrame+0x354>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e40:	49a9      	ldr	r1, [pc, #676]	; (80020e8 <updateCtrlFrame+0x354>)
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3314      	adds	r3, #20
 8001e50:	edc3 7a00 	vstr	s15, [r3]
    //积分限幅
    ctrler.params[i].Integral = LIMIT(-ctrler.params[i].LimitI, ctrler.params[i].LimitI, ctrler.params[i].Integral);
 8001e54:	49a4      	ldr	r1, [pc, #656]	; (80020e8 <updateCtrlFrame+0x354>)
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3310      	adds	r3, #16
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eeb1 7a67 	vneg.f32	s14, s15
 8001e6c:	499e      	ldr	r1, [pc, #632]	; (80020e8 <updateCtrlFrame+0x354>)
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	dd0c      	ble.n	8001ea4 <updateCtrlFrame+0x110>
 8001e8a:	4997      	ldr	r1, [pc, #604]	; (80020e8 <updateCtrlFrame+0x354>)
 8001e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3310      	adds	r3, #16
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eef1 7a67 	vneg.f32	s15, s15
 8001ea2:	e009      	b.n	8001eb8 <updateCtrlFrame+0x124>
 8001ea4:	4990      	ldr	r1, [pc, #576]	; (80020e8 <updateCtrlFrame+0x354>)
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3314      	adds	r3, #20
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	498b      	ldr	r1, [pc, #556]	; (80020e8 <updateCtrlFrame+0x354>)
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	ed93 7a00 	vldr	s14, [r3]
 8001ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	d532      	bpl.n	8001f3c <updateCtrlFrame+0x1a8>
 8001ed6:	4984      	ldr	r1, [pc, #528]	; (80020e8 <updateCtrlFrame+0x354>)
 8001ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eeb1 7a67 	vneg.f32	s14, s15
 8001eee:	497e      	ldr	r1, [pc, #504]	; (80020e8 <updateCtrlFrame+0x354>)
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3314      	adds	r3, #20
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	dd0c      	ble.n	8001f26 <updateCtrlFrame+0x192>
 8001f0c:	4976      	ldr	r1, [pc, #472]	; (80020e8 <updateCtrlFrame+0x354>)
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	eef1 7a67 	vneg.f32	s15, s15
 8001f24:	e014      	b.n	8001f50 <updateCtrlFrame+0x1bc>
 8001f26:	4970      	ldr	r1, [pc, #448]	; (80020e8 <updateCtrlFrame+0x354>)
 8001f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	3314      	adds	r3, #20
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	e009      	b.n	8001f50 <updateCtrlFrame+0x1bc>
 8001f3c:	496a      	ldr	r1, [pc, #424]	; (80020e8 <updateCtrlFrame+0x354>)
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3310      	adds	r3, #16
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	4965      	ldr	r1, [pc, #404]	; (80020e8 <updateCtrlFrame+0x354>)
 8001f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3314      	adds	r3, #20
 8001f60:	edc3 7a00 	vstr	s15, [r3]
    //输出计算
    Out[i] = (uint32_t)(ctrler.params[i].Kp * error[i] + ctrler.params[i].Ki * ctrler.params[i].Integral - ctrler.params[i].Kd * gyro[i]);
 8001f64:	4960      	ldr	r1, [pc, #384]	; (80020e8 <updateCtrlFrame+0x354>)
 8001f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3304      	adds	r3, #4
 8001f74:	ed93 7a00 	vldr	s14, [r3]
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f80:	4413      	add	r3, r2
 8001f82:	3b1c      	subs	r3, #28
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8c:	4956      	ldr	r1, [pc, #344]	; (80020e8 <updateCtrlFrame+0x354>)
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	4951      	ldr	r1, [pc, #324]	; (80020e8 <updateCtrlFrame+0x354>)
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3314      	adds	r3, #20
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fbc:	494a      	ldr	r1, [pc, #296]	; (80020e8 <updateCtrlFrame+0x354>)
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	330c      	adds	r3, #12
 8001fcc:	edd3 6a00 	vldr	s13, [r3]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b28      	subs	r3, #40	; 0x28
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fec:	ee17 2a90 	vmov	r2, s15
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f843 2c10 	str.w	r2, [r3, #-16]
  for (uint32_t i = 0; i < 3; i++)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	2b02      	cmp	r3, #2
 8002008:	f67f af01 	bls.w	8001e0e <updateCtrlFrame+0x7a>
  }
  THROTTLE1(throttle * 20 + THROTTLE_MIN);// + (throttle / 100.0f) * (+Out[PARAM_ROLL] + Out[PARAM_PITCH]));
 800200c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800201a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800201e:	d20c      	bcs.n	800203a <updateCtrlFrame+0x2a6>
 8002020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800202e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002032:	bf38      	it	cc
 8002034:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 8002038:	e001      	b.n	800203e <updateCtrlFrame+0x2aa>
 800203a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800203e:	4a27      	ldr	r2, [pc, #156]	; (80020dc <updateCtrlFrame+0x348>)
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
  THROTTLE2(throttle * 20 + THROTTLE_MIN);// + (throttle / 100.0f) * (-Out[PARAM_ROLL] + Out[PARAM_PITCH]));
 8002042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002050:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002054:	d20c      	bcs.n	8002070 <updateCtrlFrame+0x2dc>
 8002056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002064:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002068:	bf38      	it	cc
 800206a:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 800206e:	e001      	b.n	8002074 <updateCtrlFrame+0x2e0>
 8002070:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002074:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <updateCtrlFrame+0x34c>)
 8002076:	6393      	str	r3, [r2, #56]	; 0x38
  THROTTLE3(throttle * 20 + THROTTLE_MIN);// + (throttle / 100.0f) * (-Out[PARAM_ROLL] - Out[PARAM_PITCH]));
 8002078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002086:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800208a:	d20c      	bcs.n	80020a6 <updateCtrlFrame+0x312>
 800208c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800209a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800209e:	bf38      	it	cc
 80020a0:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 80020a4:	e001      	b.n	80020aa <updateCtrlFrame+0x316>
 80020a6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <updateCtrlFrame+0x34c>)
 80020ac:	63d3      	str	r3, [r2, #60]	; 0x3c
  THROTTLE4(throttle * 20 + THROTTLE_MIN);// + (throttle / 100.0f) * (+Out[PARAM_ROLL] - Out[PARAM_PITCH]));
 80020ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020bc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80020c0:	d214      	bcs.n	80020ec <updateCtrlFrame+0x358>
 80020c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020d4:	bf38      	it	cc
 80020d6:	f44f 63fa 	movcc.w	r3, #2000	; 0x7d0
 80020da:	e009      	b.n	80020f0 <updateCtrlFrame+0x35c>
 80020dc:	40000c00 	.word	0x40000c00
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40014400 	.word	0x40014400
 80020e8:	24000014 	.word	0x24000014
 80020ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <updateCtrlFrame+0x36c>)
 80020f2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80020f4:	372c      	adds	r7, #44	; 0x2c
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	b004      	add	sp, #16
 80020fe:	4770      	bx	lr
 8002100:	40014400 	.word	0x40014400

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210a:	2003      	movs	r0, #3
 800210c:	f000 f98a 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002110:	f005 fc4e 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8002114:	4601      	mov	r1, r0
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_Init+0x68>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_Init+0x6c>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	fa21 f303 	lsr.w	r3, r1, r3
 800212c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_Init+0x68>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_Init+0x6c>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_Init+0x70>)
 8002146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002148:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_Init+0x74>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214e:	2000      	movs	r0, #0
 8002150:	f000 f814 	bl	800217c <HAL_InitTick>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e002      	b.n	8002164 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800215e:	f7fe ff8f 	bl	8001080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	58024400 	.word	0x58024400
 8002170:	0800c7cc 	.word	0x0800c7cc
 8002174:	2400000c 	.word	0x2400000c
 8002178:	24000008 	.word	0x24000008

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_InitTick+0x60>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e021      	b.n	80021d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_InitTick+0x64>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_InitTick+0x60>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f96f 	bl	800248a <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f000 f939 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_InitTick+0x68>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2400006c 	.word	0x2400006c
 80021e0:	24000008 	.word	0x24000008
 80021e4:	24000068 	.word	0x24000068

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2400006c 	.word	0x2400006c
 800220c:	2400a508 	.word	0x2400a508

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	2400a508 	.word	0x2400a508

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_Delay+0x40>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2400006c 	.word	0x2400006c

0800226c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_GetREVID+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0c1b      	lsrs	r3, r3, #16
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	5c001000 	.word	0x5c001000

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x40>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	05fa0000 	.word	0x05fa0000

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff40 	bl	80022cc <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff90 	bl	8002378 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5f 	bl	8002324 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff33 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa4 	bl	80023e0 <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e069      	b.n	800258a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe f8f8 	bl	80006b8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_DCMI_Init+0xf0>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002502:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800250e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800251a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002526:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002532:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d112      	bne.n	800256a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7f5b      	ldrb	r3, [r3, #29]
 800254e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002550:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f9b      	ldrb	r3, [r3, #30]
 8002556:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002558:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7fdb      	ldrb	r3, [r3, #31]
 8002560:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002566:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002568:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 021e 	orr.w	r2, r2, #30
 8002578:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	ffe0f007 	.word	0xffe0f007

08002598 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_DCMI_Start_DMA+0x1c>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e0ab      	b.n	800270c <HAL_DCMI_Start_DMA+0x174>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0202 	bic.w	r2, r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f8:	4a46      	ldr	r2, [pc, #280]	; (8002714 <HAL_DCMI_Start_DMA+0x17c>)
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002600:	4a45      	ldr	r2, [pc, #276]	; (8002718 <HAL_DCMI_Start_DMA+0x180>)
 8002602:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	2200      	movs	r2, #0
 800260a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	d219      	bcs.n	8002660 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3328      	adds	r3, #40	; 0x28
 8002636:	4619      	mov	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	f000 fdd2 	bl	80031e4 <HAL_DMA_Start_IT>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d055      	beq.n	80026f2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e055      	b.n	800270c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_DCMI_Start_DMA+0x17c>)
 8002666:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800267a:	e009      	b.n	8002690 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	085a      	lsrs	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	005a      	lsls	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d2f0      	bcs.n	800267c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	1e9a      	subs	r2, r3, #2
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3328      	adds	r3, #40	; 0x28
 80026c2:	4619      	mov	r1, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	f003 f867 	bl	80057a0 <HAL_DMAEx_MultiBufferStart_IT>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00c      	b.n	800270c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	080029cd 	.word	0x080029cd
 8002718:	08002af3 	.word	0x08002af3

0800271c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_DCMI_Stop+0xb8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_DCMI_Stop+0xbc>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0a5b      	lsrs	r3, r3, #9
 8002730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_DCMI_Stop+0x30>
 8002748:	2302      	movs	r3, #2
 800274a:	e03f      	b.n	80027cc <HAL_DCMI_Stop+0xb0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3b01      	subs	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d108      	bne.n	800278a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	72fb      	strb	r3, [r7, #11]
      break;
 8002788:	e006      	b.n	8002798 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e9      	bne.n	800276c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027a6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 ff83 	bl	80036b8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	24000008 	.word	0x24000008
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_DCMI_Suspend+0xa8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_DCMI_Suspend+0xac>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a5b      	lsrs	r3, r3, #9
 80027f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_DCMI_Suspend+0x30>
 8002808:	2302      	movs	r3, #2
 800280a:	e034      	b.n	8002876 <HAL_DCMI_Suspend+0x9a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d125      	bne.n	800286c <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2205      	movs	r2, #5
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3b01      	subs	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10c      	bne.n	800285e <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	72fb      	strb	r3, [r7, #11]
        break;
 800285c:	e006      	b.n	800286c <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e5      	bne.n	8002838 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002874:	7afb      	ldrb	r3, [r7, #11]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	24000008 	.word	0x24000008
 8002888:	10624dd3 	.word	0x10624dd3

0800288c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f043 0202 	orr.w	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2204      	movs	r2, #4
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_DCMI_IRQHandler+0x100>)
 80028c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 fa10 	bl	8003cf4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2202      	movs	r2, #2
 80028e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2204      	movs	r2, #4
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_DCMI_IRQHandler+0x100>)
 8002900:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002906:	4618      	mov	r0, r3
 8002908:	f001 f9f4 	bl	8003cf4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2210      	movs	r2, #16
 800291c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f840 	bl	80029a4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2208      	movs	r2, #8
 8002934:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f83e 	bl	80029b8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01d      	beq.n	8002982 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	d107      	bne.n	8002964 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 021e 	bic.w	r2, r2, #30
 8002962:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f009 fea7 	bl	800c6d0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	08002af3 	.word	0x08002af3

08002990 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d043      	beq.n	8002a6a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ee:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d118      	bne.n	8002a2e <DCMI_DMAXferCplt+0x62>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d015      	beq.n	8002a2e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f003 fa1d 	bl	8005e5c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	1e5a      	subs	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2c:	e044      	b.n	8002ab8 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d13c      	bne.n	8002ab8 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	00da      	lsls	r2, r3, #3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4413      	add	r3, r2
 8002a56:	2201      	movs	r2, #1
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f003 f9ff 	bl	8005e5c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
 8002a68:	e026      	b.n	8002ab8 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e017      	b.n	8002ab8 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	440a      	add	r2, r1
 8002aae:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d112      	bne.n	8002aea <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d103      	bne.n	8002aea <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d009      	beq.n	8002b1e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ff36 	bl	8002990 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fb6c 	bl	8002210 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e316      	b.n	8003172 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a66      	ldr	r2, [pc, #408]	; (8002ce4 <HAL_DMA_Init+0x1b8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d04a      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a65      	ldr	r2, [pc, #404]	; (8002ce8 <HAL_DMA_Init+0x1bc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d045      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a63      	ldr	r2, [pc, #396]	; (8002cec <HAL_DMA_Init+0x1c0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d040      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a62      	ldr	r2, [pc, #392]	; (8002cf0 <HAL_DMA_Init+0x1c4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d03b      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a60      	ldr	r2, [pc, #384]	; (8002cf4 <HAL_DMA_Init+0x1c8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d036      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a5f      	ldr	r2, [pc, #380]	; (8002cf8 <HAL_DMA_Init+0x1cc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d031      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_DMA_Init+0x1d0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d02c      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5c      	ldr	r2, [pc, #368]	; (8002d00 <HAL_DMA_Init+0x1d4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d027      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5a      	ldr	r2, [pc, #360]	; (8002d04 <HAL_DMA_Init+0x1d8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d022      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a59      	ldr	r2, [pc, #356]	; (8002d08 <HAL_DMA_Init+0x1dc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d01d      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a57      	ldr	r2, [pc, #348]	; (8002d0c <HAL_DMA_Init+0x1e0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a56      	ldr	r2, [pc, #344]	; (8002d10 <HAL_DMA_Init+0x1e4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a54      	ldr	r2, [pc, #336]	; (8002d14 <HAL_DMA_Init+0x1e8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00e      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a53      	ldr	r2, [pc, #332]	; (8002d18 <HAL_DMA_Init+0x1ec>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a51      	ldr	r2, [pc, #324]	; (8002d1c <HAL_DMA_Init+0x1f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_DMA_Init+0xb8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a50      	ldr	r2, [pc, #320]	; (8002d20 <HAL_DMA_Init+0x1f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_DMA_Init+0xbc>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_DMA_Init+0xbe>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 813b 	beq.w	8002e66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a37      	ldr	r2, [pc, #220]	; (8002ce4 <HAL_DMA_Init+0x1b8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d04a      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a36      	ldr	r2, [pc, #216]	; (8002ce8 <HAL_DMA_Init+0x1bc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d045      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a34      	ldr	r2, [pc, #208]	; (8002cec <HAL_DMA_Init+0x1c0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d040      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_DMA_Init+0x1c4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d03b      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a31      	ldr	r2, [pc, #196]	; (8002cf4 <HAL_DMA_Init+0x1c8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d036      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_DMA_Init+0x1cc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d031      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <HAL_DMA_Init+0x1d0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02c      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_Init+0x1d4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d027      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_DMA_Init+0x1d8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_Init+0x1dc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01d      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <HAL_DMA_Init+0x1e0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d018      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_DMA_Init+0x1e4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <HAL_DMA_Init+0x1e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00e      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_DMA_Init+0x1ec>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d009      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_DMA_Init+0x1f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_DMA_Init+0x174>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_DMA_Init+0x1f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d108      	bne.n	8002cb2 <HAL_DMA_Init+0x186>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e007      	b.n	8002cc2 <HAL_DMA_Init+0x196>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cc2:	e02f      	b.n	8002d24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc4:	f7ff faa4 	bl	8002210 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d928      	bls.n	8002d24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e246      	b.n	8003172 <HAL_DMA_Init+0x646>
 8002ce4:	40020010 	.word	0x40020010
 8002ce8:	40020028 	.word	0x40020028
 8002cec:	40020040 	.word	0x40020040
 8002cf0:	40020058 	.word	0x40020058
 8002cf4:	40020070 	.word	0x40020070
 8002cf8:	40020088 	.word	0x40020088
 8002cfc:	400200a0 	.word	0x400200a0
 8002d00:	400200b8 	.word	0x400200b8
 8002d04:	40020410 	.word	0x40020410
 8002d08:	40020428 	.word	0x40020428
 8002d0c:	40020440 	.word	0x40020440
 8002d10:	40020458 	.word	0x40020458
 8002d14:	40020470 	.word	0x40020470
 8002d18:	40020488 	.word	0x40020488
 8002d1c:	400204a0 	.word	0x400204a0
 8002d20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1c8      	bne.n	8002cc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4b83      	ldr	r3, [pc, #524]	; (8002f4c <HAL_DMA_Init+0x420>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002d4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4313      	orrs	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d88:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <HAL_DMA_Init+0x424>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b71      	ldr	r3, [pc, #452]	; (8002f54 <HAL_DMA_Init+0x428>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d94:	d328      	bcc.n	8002de8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b28      	cmp	r3, #40	; 0x28
 8002d9c:	d903      	bls.n	8002da6 <HAL_DMA_Init+0x27a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b2e      	cmp	r3, #46	; 0x2e
 8002da4:	d917      	bls.n	8002dd6 <HAL_DMA_Init+0x2aa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b3e      	cmp	r3, #62	; 0x3e
 8002dac:	d903      	bls.n	8002db6 <HAL_DMA_Init+0x28a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b42      	cmp	r3, #66	; 0x42
 8002db4:	d90f      	bls.n	8002dd6 <HAL_DMA_Init+0x2aa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b46      	cmp	r3, #70	; 0x46
 8002dbc:	d903      	bls.n	8002dc6 <HAL_DMA_Init+0x29a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b48      	cmp	r3, #72	; 0x48
 8002dc4:	d907      	bls.n	8002dd6 <HAL_DMA_Init+0x2aa>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b4e      	cmp	r3, #78	; 0x4e
 8002dcc:	d905      	bls.n	8002dda <HAL_DMA_Init+0x2ae>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b52      	cmp	r3, #82	; 0x52
 8002dd4:	d801      	bhi.n	8002dda <HAL_DMA_Init+0x2ae>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_DMA_Init+0x2b0>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d117      	bne.n	8002e42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f002 fb31 	bl	800548c <DMA_CheckFifoParam>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e197      	b.n	8003172 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f002 fa6c 	bl	8005328 <DMA_CalcBaseAndBitshift>
 8002e50:	4603      	mov	r3, r0
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e0cd      	b.n	8003002 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a3b      	ldr	r2, [pc, #236]	; (8002f58 <HAL_DMA_Init+0x42c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d022      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a39      	ldr	r2, [pc, #228]	; (8002f5c <HAL_DMA_Init+0x430>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01d      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a38      	ldr	r2, [pc, #224]	; (8002f60 <HAL_DMA_Init+0x434>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a36      	ldr	r2, [pc, #216]	; (8002f64 <HAL_DMA_Init+0x438>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a35      	ldr	r2, [pc, #212]	; (8002f68 <HAL_DMA_Init+0x43c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a33      	ldr	r2, [pc, #204]	; (8002f6c <HAL_DMA_Init+0x440>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <HAL_DMA_Init+0x444>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_DMA_Init+0x38a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_DMA_Init+0x448>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_DMA_Init+0x38e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_DMA_Init+0x390>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8097 	beq.w	8002ff0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_DMA_Init+0x42c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d021      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_DMA_Init+0x430>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01c      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <HAL_DMA_Init+0x434>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d017      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_DMA_Init+0x438>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d012      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_DMA_Init+0x43c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00d      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_DMA_Init+0x440>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d008      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_DMA_Init+0x444>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_Init+0x3e4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_DMA_Init+0x448>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_DMA_Init+0x44c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d020      	beq.n	8002f7c <HAL_DMA_Init+0x450>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d102      	bne.n	8002f48 <HAL_DMA_Init+0x41c>
 8002f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f46:	e01a      	b.n	8002f7e <HAL_DMA_Init+0x452>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e018      	b.n	8002f7e <HAL_DMA_Init+0x452>
 8002f4c:	fe10803f 	.word	0xfe10803f
 8002f50:	5c001000 	.word	0x5c001000
 8002f54:	ffff0000 	.word	0xffff0000
 8002f58:	58025408 	.word	0x58025408
 8002f5c:	5802541c 	.word	0x5802541c
 8002f60:	58025430 	.word	0x58025430
 8002f64:	58025444 	.word	0x58025444
 8002f68:	58025458 	.word	0x58025458
 8002f6c:	5802546c 	.word	0x5802546c
 8002f70:	58025480 	.word	0x58025480
 8002f74:	58025494 	.word	0x58025494
 8002f78:	fffe000f 	.word	0xfffe000f
 8002f7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68d2      	ldr	r2, [r2, #12]
 8002f82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002f94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002f9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b6e      	ldr	r3, [pc, #440]	; (800317c <HAL_DMA_Init+0x650>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a6e      	ldr	r2, [pc, #440]	; (8003180 <HAL_DMA_Init+0x654>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f002 f9a7 	bl	8005328 <DMA_CalcBaseAndBitshift>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	e008      	b.n	8003002 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0b7      	b.n	8003172 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5f      	ldr	r2, [pc, #380]	; (8003184 <HAL_DMA_Init+0x658>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d072      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5d      	ldr	r2, [pc, #372]	; (8003188 <HAL_DMA_Init+0x65c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d06d      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_DMA_Init+0x660>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d068      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <HAL_DMA_Init+0x664>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d063      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a59      	ldr	r2, [pc, #356]	; (8003194 <HAL_DMA_Init+0x668>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d05e      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_DMA_Init+0x66c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d059      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_DMA_Init+0x670>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d054      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_DMA_Init+0x674>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d04f      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a53      	ldr	r2, [pc, #332]	; (80031a4 <HAL_DMA_Init+0x678>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d04a      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_DMA_Init+0x67c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d045      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_DMA_Init+0x680>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d040      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <HAL_DMA_Init+0x684>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d03b      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4d      	ldr	r2, [pc, #308]	; (80031b4 <HAL_DMA_Init+0x688>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d036      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a4b      	ldr	r2, [pc, #300]	; (80031b8 <HAL_DMA_Init+0x68c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d031      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4a      	ldr	r2, [pc, #296]	; (80031bc <HAL_DMA_Init+0x690>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d02c      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a48      	ldr	r2, [pc, #288]	; (80031c0 <HAL_DMA_Init+0x694>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d027      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a47      	ldr	r2, [pc, #284]	; (80031c4 <HAL_DMA_Init+0x698>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a45      	ldr	r2, [pc, #276]	; (80031c8 <HAL_DMA_Init+0x69c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01d      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a44      	ldr	r2, [pc, #272]	; (80031cc <HAL_DMA_Init+0x6a0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a42      	ldr	r2, [pc, #264]	; (80031d0 <HAL_DMA_Init+0x6a4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a41      	ldr	r2, [pc, #260]	; (80031d4 <HAL_DMA_Init+0x6a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <HAL_DMA_Init+0x6ac>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <HAL_DMA_Init+0x6b0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_DMA_Init+0x5c6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <HAL_DMA_Init+0x6b4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Init+0x5ca>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_Init+0x5cc>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f002 fa41 	bl	8005584 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d102      	bne.n	8003110 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003124:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_DMA_Init+0x624>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d80c      	bhi.n	8003150 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f002 fabe 	bl	80056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e008      	b.n	8003162 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	a7fdabf8 	.word	0xa7fdabf8
 8003180:	cccccccd 	.word	0xcccccccd
 8003184:	40020010 	.word	0x40020010
 8003188:	40020028 	.word	0x40020028
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020070 	.word	0x40020070
 8003198:	40020088 	.word	0x40020088
 800319c:	400200a0 	.word	0x400200a0
 80031a0:	400200b8 	.word	0x400200b8
 80031a4:	40020410 	.word	0x40020410
 80031a8:	40020428 	.word	0x40020428
 80031ac:	40020440 	.word	0x40020440
 80031b0:	40020458 	.word	0x40020458
 80031b4:	40020470 	.word	0x40020470
 80031b8:	40020488 	.word	0x40020488
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	400204b8 	.word	0x400204b8
 80031c4:	58025408 	.word	0x58025408
 80031c8:	5802541c 	.word	0x5802541c
 80031cc:	58025430 	.word	0x58025430
 80031d0:	58025444 	.word	0x58025444
 80031d4:	58025458 	.word	0x58025458
 80031d8:	5802546c 	.word	0x5802546c
 80031dc:	58025480 	.word	0x58025480
 80031e0:	58025494 	.word	0x58025494

080031e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e226      	b.n	800364e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_DMA_Start_IT+0x2a>
 800320a:	2302      	movs	r3, #2
 800320c:	e21f      	b.n	800364e <HAL_DMA_Start_IT+0x46a>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	f040 820a 	bne.w	8003638 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <HAL_DMA_Start_IT+0x1f4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_DMA_Start_IT+0x1f8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_DMA_Start_IT+0x1fc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_DMA_Start_IT+0x200>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <HAL_DMA_Start_IT+0x204>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_DMA_Start_IT+0x208>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_DMA_Start_IT+0x20c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_DMA_Start_IT+0x210>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5c      	ldr	r2, [pc, #368]	; (80033f8 <HAL_DMA_Start_IT+0x214>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5a      	ldr	r2, [pc, #360]	; (80033fc <HAL_DMA_Start_IT+0x218>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a59      	ldr	r2, [pc, #356]	; (8003400 <HAL_DMA_Start_IT+0x21c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_DMA_Start_IT+0x220>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_DMA_Start_IT+0x224>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a54      	ldr	r2, [pc, #336]	; (800340c <HAL_DMA_Start_IT+0x228>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a53      	ldr	r2, [pc, #332]	; (8003410 <HAL_DMA_Start_IT+0x22c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_Start_IT+0xee>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a51      	ldr	r2, [pc, #324]	; (8003414 <HAL_DMA_Start_IT+0x230>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <HAL_DMA_Start_IT+0x100>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e007      	b.n	80032f4 <HAL_DMA_Start_IT+0x110>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f001 fe68 	bl	8004fd0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <HAL_DMA_Start_IT+0x1f4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a33      	ldr	r2, [pc, #204]	; (80033dc <HAL_DMA_Start_IT+0x1f8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <HAL_DMA_Start_IT+0x1fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a30      	ldr	r2, [pc, #192]	; (80033e4 <HAL_DMA_Start_IT+0x200>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2e      	ldr	r2, [pc, #184]	; (80033e8 <HAL_DMA_Start_IT+0x204>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <HAL_DMA_Start_IT+0x208>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <HAL_DMA_Start_IT+0x20c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <HAL_DMA_Start_IT+0x210>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <HAL_DMA_Start_IT+0x214>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a27      	ldr	r2, [pc, #156]	; (80033fc <HAL_DMA_Start_IT+0x218>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a25      	ldr	r2, [pc, #148]	; (8003400 <HAL_DMA_Start_IT+0x21c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a24      	ldr	r2, [pc, #144]	; (8003404 <HAL_DMA_Start_IT+0x220>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_DMA_Start_IT+0x224>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_DMA_Start_IT+0x228>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_DMA_Start_IT+0x22c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_Start_IT+0x1bc>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_DMA_Start_IT+0x230>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <HAL_DMA_Start_IT+0x1c0>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_Start_IT+0x1c2>
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d036      	beq.n	8003418 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 021e 	bic.w	r2, r3, #30
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0216 	orr.w	r2, r2, #22
 80033bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03e      	beq.n	8003444 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0208 	orr.w	r2, r2, #8
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e035      	b.n	8003444 <HAL_DMA_Start_IT+0x260>
 80033d8:	40020010 	.word	0x40020010
 80033dc:	40020028 	.word	0x40020028
 80033e0:	40020040 	.word	0x40020040
 80033e4:	40020058 	.word	0x40020058
 80033e8:	40020070 	.word	0x40020070
 80033ec:	40020088 	.word	0x40020088
 80033f0:	400200a0 	.word	0x400200a0
 80033f4:	400200b8 	.word	0x400200b8
 80033f8:	40020410 	.word	0x40020410
 80033fc:	40020428 	.word	0x40020428
 8003400:	40020440 	.word	0x40020440
 8003404:	40020458 	.word	0x40020458
 8003408:	40020470 	.word	0x40020470
 800340c:	40020488 	.word	0x40020488
 8003410:	400204a0 	.word	0x400204a0
 8003414:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 020e 	bic.w	r2, r3, #14
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 020a 	orr.w	r2, r2, #10
 800342a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0204 	orr.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a83      	ldr	r2, [pc, #524]	; (8003658 <HAL_DMA_Start_IT+0x474>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d072      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a82      	ldr	r2, [pc, #520]	; (800365c <HAL_DMA_Start_IT+0x478>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d06d      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_DMA_Start_IT+0x47c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d068      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7f      	ldr	r2, [pc, #508]	; (8003664 <HAL_DMA_Start_IT+0x480>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d063      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <HAL_DMA_Start_IT+0x484>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d05e      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_DMA_Start_IT+0x488>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d059      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_DMA_Start_IT+0x48c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d054      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a79      	ldr	r2, [pc, #484]	; (8003674 <HAL_DMA_Start_IT+0x490>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d04f      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_DMA_Start_IT+0x494>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d04a      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a76      	ldr	r2, [pc, #472]	; (800367c <HAL_DMA_Start_IT+0x498>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d045      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a74      	ldr	r2, [pc, #464]	; (8003680 <HAL_DMA_Start_IT+0x49c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d040      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_DMA_Start_IT+0x4a0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d03b      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a71      	ldr	r2, [pc, #452]	; (8003688 <HAL_DMA_Start_IT+0x4a4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d036      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a70      	ldr	r2, [pc, #448]	; (800368c <HAL_DMA_Start_IT+0x4a8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d031      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_DMA_Start_IT+0x4ac>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d02c      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6d      	ldr	r2, [pc, #436]	; (8003694 <HAL_DMA_Start_IT+0x4b0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d027      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6b      	ldr	r2, [pc, #428]	; (8003698 <HAL_DMA_Start_IT+0x4b4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6a      	ldr	r2, [pc, #424]	; (800369c <HAL_DMA_Start_IT+0x4b8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01d      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <HAL_DMA_Start_IT+0x4bc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a67      	ldr	r2, [pc, #412]	; (80036a4 <HAL_DMA_Start_IT+0x4c0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_DMA_Start_IT+0x4c4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a64      	ldr	r2, [pc, #400]	; (80036ac <HAL_DMA_Start_IT+0x4c8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a62      	ldr	r2, [pc, #392]	; (80036b0 <HAL_DMA_Start_IT+0x4cc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_DMA_Start_IT+0x350>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a61      	ldr	r2, [pc, #388]	; (80036b4 <HAL_DMA_Start_IT+0x4d0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Start_IT+0x354>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_DMA_Start_IT+0x356>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01a      	beq.n	8003574 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003572:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a37      	ldr	r2, [pc, #220]	; (8003658 <HAL_DMA_Start_IT+0x474>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d04a      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a36      	ldr	r2, [pc, #216]	; (800365c <HAL_DMA_Start_IT+0x478>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d045      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a34      	ldr	r2, [pc, #208]	; (8003660 <HAL_DMA_Start_IT+0x47c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d040      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a33      	ldr	r2, [pc, #204]	; (8003664 <HAL_DMA_Start_IT+0x480>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d03b      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a31      	ldr	r2, [pc, #196]	; (8003668 <HAL_DMA_Start_IT+0x484>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d036      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a30      	ldr	r2, [pc, #192]	; (800366c <HAL_DMA_Start_IT+0x488>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d031      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2e      	ldr	r2, [pc, #184]	; (8003670 <HAL_DMA_Start_IT+0x48c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02c      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <HAL_DMA_Start_IT+0x490>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d027      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <HAL_DMA_Start_IT+0x494>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d022      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2a      	ldr	r2, [pc, #168]	; (800367c <HAL_DMA_Start_IT+0x498>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01d      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a28      	ldr	r2, [pc, #160]	; (8003680 <HAL_DMA_Start_IT+0x49c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d018      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_DMA_Start_IT+0x4a0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_DMA_Start_IT+0x4a4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00e      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_DMA_Start_IT+0x4a8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d009      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a22      	ldr	r2, [pc, #136]	; (8003690 <HAL_DMA_Start_IT+0x4ac>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_DMA_Start_IT+0x430>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a21      	ldr	r2, [pc, #132]	; (8003694 <HAL_DMA_Start_IT+0x4b0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <HAL_DMA_Start_IT+0x442>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e012      	b.n	800364c <HAL_DMA_Start_IT+0x468>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e009      	b.n	800364c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003646:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40020010 	.word	0x40020010
 800365c:	40020028 	.word	0x40020028
 8003660:	40020040 	.word	0x40020040
 8003664:	40020058 	.word	0x40020058
 8003668:	40020070 	.word	0x40020070
 800366c:	40020088 	.word	0x40020088
 8003670:	400200a0 	.word	0x400200a0
 8003674:	400200b8 	.word	0x400200b8
 8003678:	40020410 	.word	0x40020410
 800367c:	40020428 	.word	0x40020428
 8003680:	40020440 	.word	0x40020440
 8003684:	40020458 	.word	0x40020458
 8003688:	40020470 	.word	0x40020470
 800368c:	40020488 	.word	0x40020488
 8003690:	400204a0 	.word	0x400204a0
 8003694:	400204b8 	.word	0x400204b8
 8003698:	58025408 	.word	0x58025408
 800369c:	5802541c 	.word	0x5802541c
 80036a0:	58025430 	.word	0x58025430
 80036a4:	58025444 	.word	0x58025444
 80036a8:	58025458 	.word	0x58025458
 80036ac:	5802546c 	.word	0x5802546c
 80036b0:	58025480 	.word	0x58025480
 80036b4:	58025494 	.word	0x58025494

080036b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7fe fda6 	bl	8002210 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e2dc      	b.n	8003c8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d008      	beq.n	80036ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e2cd      	b.n	8003c8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a76      	ldr	r2, [pc, #472]	; (80038cc <HAL_DMA_Abort+0x214>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a74      	ldr	r2, [pc, #464]	; (80038d0 <HAL_DMA_Abort+0x218>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a73      	ldr	r2, [pc, #460]	; (80038d4 <HAL_DMA_Abort+0x21c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a71      	ldr	r2, [pc, #452]	; (80038d8 <HAL_DMA_Abort+0x220>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a70      	ldr	r2, [pc, #448]	; (80038dc <HAL_DMA_Abort+0x224>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6e      	ldr	r2, [pc, #440]	; (80038e0 <HAL_DMA_Abort+0x228>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6d      	ldr	r2, [pc, #436]	; (80038e4 <HAL_DMA_Abort+0x22c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6b      	ldr	r2, [pc, #428]	; (80038e8 <HAL_DMA_Abort+0x230>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6a      	ldr	r2, [pc, #424]	; (80038ec <HAL_DMA_Abort+0x234>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a68      	ldr	r2, [pc, #416]	; (80038f0 <HAL_DMA_Abort+0x238>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a67      	ldr	r2, [pc, #412]	; (80038f4 <HAL_DMA_Abort+0x23c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_DMA_Abort+0x240>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a64      	ldr	r2, [pc, #400]	; (80038fc <HAL_DMA_Abort+0x244>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a62      	ldr	r2, [pc, #392]	; (8003900 <HAL_DMA_Abort+0x248>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a61      	ldr	r2, [pc, #388]	; (8003904 <HAL_DMA_Abort+0x24c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_Abort+0xd6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a5f      	ldr	r2, [pc, #380]	; (8003908 <HAL_DMA_Abort+0x250>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_DMA_Abort+0xda>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_DMA_Abort+0xdc>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 021e 	bic.w	r2, r2, #30
 80037a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e00a      	b.n	80037d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 020e 	bic.w	r2, r2, #14
 80037ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <HAL_DMA_Abort+0x214>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d072      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a3a      	ldr	r2, [pc, #232]	; (80038d0 <HAL_DMA_Abort+0x218>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d06d      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a39      	ldr	r2, [pc, #228]	; (80038d4 <HAL_DMA_Abort+0x21c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d068      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <HAL_DMA_Abort+0x220>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d063      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a36      	ldr	r2, [pc, #216]	; (80038dc <HAL_DMA_Abort+0x224>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d05e      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a34      	ldr	r2, [pc, #208]	; (80038e0 <HAL_DMA_Abort+0x228>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d059      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_DMA_Abort+0x22c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d054      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <HAL_DMA_Abort+0x230>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d04f      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_DMA_Abort+0x234>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d04a      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_DMA_Abort+0x238>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d045      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <HAL_DMA_Abort+0x23c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <HAL_DMA_Abort+0x240>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d03b      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <HAL_DMA_Abort+0x244>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d036      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <HAL_DMA_Abort+0x248>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <HAL_DMA_Abort+0x24c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d02c      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <HAL_DMA_Abort+0x250>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d027      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <HAL_DMA_Abort+0x254>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_DMA_Abort+0x258>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a21      	ldr	r2, [pc, #132]	; (8003914 <HAL_DMA_Abort+0x25c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_DMA_Abort+0x260>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_DMA_Abort+0x264>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_DMA_Abort+0x268>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_DMA_Abort+0x26c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_DMA_Abort+0x20e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_DMA_Abort+0x270>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d132      	bne.n	800392c <HAL_DMA_Abort+0x274>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e031      	b.n	800392e <HAL_DMA_Abort+0x276>
 80038ca:	bf00      	nop
 80038cc:	40020010 	.word	0x40020010
 80038d0:	40020028 	.word	0x40020028
 80038d4:	40020040 	.word	0x40020040
 80038d8:	40020058 	.word	0x40020058
 80038dc:	40020070 	.word	0x40020070
 80038e0:	40020088 	.word	0x40020088
 80038e4:	400200a0 	.word	0x400200a0
 80038e8:	400200b8 	.word	0x400200b8
 80038ec:	40020410 	.word	0x40020410
 80038f0:	40020428 	.word	0x40020428
 80038f4:	40020440 	.word	0x40020440
 80038f8:	40020458 	.word	0x40020458
 80038fc:	40020470 	.word	0x40020470
 8003900:	40020488 	.word	0x40020488
 8003904:	400204a0 	.word	0x400204a0
 8003908:	400204b8 	.word	0x400204b8
 800390c:	58025408 	.word	0x58025408
 8003910:	5802541c 	.word	0x5802541c
 8003914:	58025430 	.word	0x58025430
 8003918:	58025444 	.word	0x58025444
 800391c:	58025458 	.word	0x58025458
 8003920:	5802546c 	.word	0x5802546c
 8003924:	58025480 	.word	0x58025480
 8003928:	58025494 	.word	0x58025494
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003940:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6d      	ldr	r2, [pc, #436]	; (8003afc <HAL_DMA_Abort+0x444>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04a      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6b      	ldr	r2, [pc, #428]	; (8003b00 <HAL_DMA_Abort+0x448>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d045      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <HAL_DMA_Abort+0x44c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_DMA_Abort+0x450>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d03b      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a67      	ldr	r2, [pc, #412]	; (8003b0c <HAL_DMA_Abort+0x454>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d036      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a65      	ldr	r2, [pc, #404]	; (8003b10 <HAL_DMA_Abort+0x458>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a64      	ldr	r2, [pc, #400]	; (8003b14 <HAL_DMA_Abort+0x45c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d02c      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a62      	ldr	r2, [pc, #392]	; (8003b18 <HAL_DMA_Abort+0x460>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d027      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a61      	ldr	r2, [pc, #388]	; (8003b1c <HAL_DMA_Abort+0x464>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5f      	ldr	r2, [pc, #380]	; (8003b20 <HAL_DMA_Abort+0x468>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5e      	ldr	r2, [pc, #376]	; (8003b24 <HAL_DMA_Abort+0x46c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5c      	ldr	r2, [pc, #368]	; (8003b28 <HAL_DMA_Abort+0x470>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5b      	ldr	r2, [pc, #364]	; (8003b2c <HAL_DMA_Abort+0x474>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a59      	ldr	r2, [pc, #356]	; (8003b30 <HAL_DMA_Abort+0x478>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <HAL_DMA_Abort+0x47c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_Abort+0x32a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_DMA_Abort+0x480>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <HAL_DMA_Abort+0x33c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e007      	b.n	8003a04 <HAL_DMA_Abort+0x34c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a04:	e013      	b.n	8003a2e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a06:	f7fe fc03 	bl	8002210 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d90c      	bls.n	8003a2e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e12d      	b.n	8003c8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <HAL_DMA_Abort+0x444>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04a      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2d      	ldr	r2, [pc, #180]	; (8003b00 <HAL_DMA_Abort+0x448>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d045      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <HAL_DMA_Abort+0x44c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d040      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_DMA_Abort+0x450>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d03b      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <HAL_DMA_Abort+0x454>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d036      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <HAL_DMA_Abort+0x458>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d031      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_DMA_Abort+0x45c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d02c      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <HAL_DMA_Abort+0x460>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d027      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <HAL_DMA_Abort+0x464>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_DMA_Abort+0x468>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <HAL_DMA_Abort+0x46c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_DMA_Abort+0x470>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_DMA_Abort+0x474>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_DMA_Abort+0x478>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_DMA_Abort+0x47c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_DMA_Abort+0x422>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_DMA_Abort+0x480>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_DMA_Abort+0x426>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_DMA_Abort+0x428>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02b      	beq.n	8003b3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	223f      	movs	r2, #63	; 0x3f
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	e02a      	b.n	8003b52 <HAL_DMA_Abort+0x49a>
 8003afc:	40020010 	.word	0x40020010
 8003b00:	40020028 	.word	0x40020028
 8003b04:	40020040 	.word	0x40020040
 8003b08:	40020058 	.word	0x40020058
 8003b0c:	40020070 	.word	0x40020070
 8003b10:	40020088 	.word	0x40020088
 8003b14:	400200a0 	.word	0x400200a0
 8003b18:	400200b8 	.word	0x400200b8
 8003b1c:	40020410 	.word	0x40020410
 8003b20:	40020428 	.word	0x40020428
 8003b24:	40020440 	.word	0x40020440
 8003b28:	40020458 	.word	0x40020458
 8003b2c:	40020470 	.word	0x40020470
 8003b30:	40020488 	.word	0x40020488
 8003b34:	400204a0 	.word	0x400204a0
 8003b38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4f      	ldr	r2, [pc, #316]	; (8003c94 <HAL_DMA_Abort+0x5dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d072      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4d      	ldr	r2, [pc, #308]	; (8003c98 <HAL_DMA_Abort+0x5e0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d06d      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_DMA_Abort+0x5e4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d068      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4a      	ldr	r2, [pc, #296]	; (8003ca0 <HAL_DMA_Abort+0x5e8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d063      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a49      	ldr	r2, [pc, #292]	; (8003ca4 <HAL_DMA_Abort+0x5ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d05e      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a47      	ldr	r2, [pc, #284]	; (8003ca8 <HAL_DMA_Abort+0x5f0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d059      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a46      	ldr	r2, [pc, #280]	; (8003cac <HAL_DMA_Abort+0x5f4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d054      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <HAL_DMA_Abort+0x5f8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d04f      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <HAL_DMA_Abort+0x5fc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d04a      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a41      	ldr	r2, [pc, #260]	; (8003cb8 <HAL_DMA_Abort+0x600>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d045      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a40      	ldr	r2, [pc, #256]	; (8003cbc <HAL_DMA_Abort+0x604>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d040      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3e      	ldr	r2, [pc, #248]	; (8003cc0 <HAL_DMA_Abort+0x608>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d03b      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3d      	ldr	r2, [pc, #244]	; (8003cc4 <HAL_DMA_Abort+0x60c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d036      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <HAL_DMA_Abort+0x610>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d031      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <HAL_DMA_Abort+0x614>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d02c      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a38      	ldr	r2, [pc, #224]	; (8003cd0 <HAL_DMA_Abort+0x618>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d027      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a37      	ldr	r2, [pc, #220]	; (8003cd4 <HAL_DMA_Abort+0x61c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d022      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a35      	ldr	r2, [pc, #212]	; (8003cd8 <HAL_DMA_Abort+0x620>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01d      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <HAL_DMA_Abort+0x624>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d018      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <HAL_DMA_Abort+0x628>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a31      	ldr	r2, [pc, #196]	; (8003ce4 <HAL_DMA_Abort+0x62c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00e      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2f      	ldr	r2, [pc, #188]	; (8003ce8 <HAL_DMA_Abort+0x630>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d009      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2e      	ldr	r2, [pc, #184]	; (8003cec <HAL_DMA_Abort+0x634>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d004      	beq.n	8003c42 <HAL_DMA_Abort+0x58a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <HAL_DMA_Abort+0x638>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_DMA_Abort+0x58e>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_DMA_Abort+0x590>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
 8003cd4:	58025408 	.word	0x58025408
 8003cd8:	5802541c 	.word	0x5802541c
 8003cdc:	58025430 	.word	0x58025430
 8003ce0:	58025444 	.word	0x58025444
 8003ce4:	58025458 	.word	0x58025458
 8003ce8:	5802546c 	.word	0x5802546c
 8003cec:	58025480 	.word	0x58025480
 8003cf0:	58025494 	.word	0x58025494

08003cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e205      	b.n	8004112 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d004      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e1fa      	b.n	8004112 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a8c      	ldr	r2, [pc, #560]	; (8003f54 <HAL_DMA_Abort_IT+0x260>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a8b      	ldr	r2, [pc, #556]	; (8003f58 <HAL_DMA_Abort_IT+0x264>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a89      	ldr	r2, [pc, #548]	; (8003f5c <HAL_DMA_Abort_IT+0x268>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a88      	ldr	r2, [pc, #544]	; (8003f60 <HAL_DMA_Abort_IT+0x26c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a86      	ldr	r2, [pc, #536]	; (8003f64 <HAL_DMA_Abort_IT+0x270>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a85      	ldr	r2, [pc, #532]	; (8003f68 <HAL_DMA_Abort_IT+0x274>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a83      	ldr	r2, [pc, #524]	; (8003f6c <HAL_DMA_Abort_IT+0x278>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a82      	ldr	r2, [pc, #520]	; (8003f70 <HAL_DMA_Abort_IT+0x27c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a80      	ldr	r2, [pc, #512]	; (8003f74 <HAL_DMA_Abort_IT+0x280>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7f      	ldr	r2, [pc, #508]	; (8003f78 <HAL_DMA_Abort_IT+0x284>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7d      	ldr	r2, [pc, #500]	; (8003f7c <HAL_DMA_Abort_IT+0x288>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7c      	ldr	r2, [pc, #496]	; (8003f80 <HAL_DMA_Abort_IT+0x28c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a7a      	ldr	r2, [pc, #488]	; (8003f84 <HAL_DMA_Abort_IT+0x290>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a79      	ldr	r2, [pc, #484]	; (8003f88 <HAL_DMA_Abort_IT+0x294>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a77      	ldr	r2, [pc, #476]	; (8003f8c <HAL_DMA_Abort_IT+0x298>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_DMA_Abort_IT+0xc8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a76      	ldr	r2, [pc, #472]	; (8003f90 <HAL_DMA_Abort_IT+0x29c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_DMA_Abort_IT+0xcc>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xce>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d065      	beq.n	8003e92 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a60      	ldr	r2, [pc, #384]	; (8003f54 <HAL_DMA_Abort_IT+0x260>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d04a      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5e      	ldr	r2, [pc, #376]	; (8003f58 <HAL_DMA_Abort_IT+0x264>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d045      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5d      	ldr	r2, [pc, #372]	; (8003f5c <HAL_DMA_Abort_IT+0x268>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d040      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <HAL_DMA_Abort_IT+0x26c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d03b      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a5a      	ldr	r2, [pc, #360]	; (8003f64 <HAL_DMA_Abort_IT+0x270>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d036      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_DMA_Abort_IT+0x274>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d031      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a57      	ldr	r2, [pc, #348]	; (8003f6c <HAL_DMA_Abort_IT+0x278>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d02c      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a55      	ldr	r2, [pc, #340]	; (8003f70 <HAL_DMA_Abort_IT+0x27c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d027      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a54      	ldr	r2, [pc, #336]	; (8003f74 <HAL_DMA_Abort_IT+0x280>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_DMA_Abort_IT+0x284>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a51      	ldr	r2, [pc, #324]	; (8003f7c <HAL_DMA_Abort_IT+0x288>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4f      	ldr	r2, [pc, #316]	; (8003f80 <HAL_DMA_Abort_IT+0x28c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4e      	ldr	r2, [pc, #312]	; (8003f84 <HAL_DMA_Abort_IT+0x290>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4c      	ldr	r2, [pc, #304]	; (8003f88 <HAL_DMA_Abort_IT+0x294>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <HAL_DMA_Abort_IT+0x298>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x17a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_DMA_Abort_IT+0x29c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <HAL_DMA_Abort_IT+0x18c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e147      	b.n	8004110 <HAL_DMA_Abort_IT+0x41c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e13e      	b.n	8004110 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 020e 	bic.w	r2, r2, #14
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <HAL_DMA_Abort_IT+0x260>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <HAL_DMA_Abort_IT+0x264>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <HAL_DMA_Abort_IT+0x268>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <HAL_DMA_Abort_IT+0x26c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <HAL_DMA_Abort_IT+0x270>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_DMA_Abort_IT+0x274>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <HAL_DMA_Abort_IT+0x278>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <HAL_DMA_Abort_IT+0x27c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <HAL_DMA_Abort_IT+0x280>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_DMA_Abort_IT+0x284>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <HAL_DMA_Abort_IT+0x288>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_DMA_Abort_IT+0x28c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_DMA_Abort_IT+0x290>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_DMA_Abort_IT+0x294>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_DMA_Abort_IT+0x298>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x24e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_DMA_Abort_IT+0x29c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d128      	bne.n	8003f94 <HAL_DMA_Abort_IT+0x2a0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e027      	b.n	8003fa4 <HAL_DMA_Abort_IT+0x2b0>
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a5c      	ldr	r2, [pc, #368]	; (800411c <HAL_DMA_Abort_IT+0x428>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d072      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <HAL_DMA_Abort_IT+0x42c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d06d      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a59      	ldr	r2, [pc, #356]	; (8004124 <HAL_DMA_Abort_IT+0x430>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d068      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a58      	ldr	r2, [pc, #352]	; (8004128 <HAL_DMA_Abort_IT+0x434>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d063      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_DMA_Abort_IT+0x438>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d05e      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a55      	ldr	r2, [pc, #340]	; (8004130 <HAL_DMA_Abort_IT+0x43c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d059      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_DMA_Abort_IT+0x440>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d054      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_DMA_Abort_IT+0x444>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04f      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a50      	ldr	r2, [pc, #320]	; (800413c <HAL_DMA_Abort_IT+0x448>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04a      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_DMA_Abort_IT+0x44c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d045      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4d      	ldr	r2, [pc, #308]	; (8004144 <HAL_DMA_Abort_IT+0x450>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d040      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a4c      	ldr	r2, [pc, #304]	; (8004148 <HAL_DMA_Abort_IT+0x454>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d03b      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4a      	ldr	r2, [pc, #296]	; (800414c <HAL_DMA_Abort_IT+0x458>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d036      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a49      	ldr	r2, [pc, #292]	; (8004150 <HAL_DMA_Abort_IT+0x45c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d031      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a47      	ldr	r2, [pc, #284]	; (8004154 <HAL_DMA_Abort_IT+0x460>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d02c      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a46      	ldr	r2, [pc, #280]	; (8004158 <HAL_DMA_Abort_IT+0x464>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d027      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a44      	ldr	r2, [pc, #272]	; (800415c <HAL_DMA_Abort_IT+0x468>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a43      	ldr	r2, [pc, #268]	; (8004160 <HAL_DMA_Abort_IT+0x46c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a41      	ldr	r2, [pc, #260]	; (8004164 <HAL_DMA_Abort_IT+0x470>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a40      	ldr	r2, [pc, #256]	; (8004168 <HAL_DMA_Abort_IT+0x474>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3e      	ldr	r2, [pc, #248]	; (800416c <HAL_DMA_Abort_IT+0x478>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3d      	ldr	r2, [pc, #244]	; (8004170 <HAL_DMA_Abort_IT+0x47c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a3b      	ldr	r2, [pc, #236]	; (8004174 <HAL_DMA_Abort_IT+0x480>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_DMA_Abort_IT+0x3a0>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <HAL_DMA_Abort_IT+0x484>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_DMA_Abort_IT+0x3a4>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <HAL_DMA_Abort_IT+0x3a6>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d028      	beq.n	80040f0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2201      	movs	r2, #1
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
 800415c:	58025408 	.word	0x58025408
 8004160:	5802541c 	.word	0x5802541c
 8004164:	58025430 	.word	0x58025430
 8004168:	58025444 	.word	0x58025444
 800416c:	58025458 	.word	0x58025458
 8004170:	5802546c 	.word	0x5802546c
 8004174:	58025480 	.word	0x58025480
 8004178:	58025494 	.word	0x58025494

0800417c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004188:	4b67      	ldr	r3, [pc, #412]	; (8004328 <HAL_DMA_IRQHandler+0x1ac>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a67      	ldr	r2, [pc, #412]	; (800432c <HAL_DMA_IRQHandler+0x1b0>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0a9b      	lsrs	r3, r3, #10
 8004194:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a5f      	ldr	r2, [pc, #380]	; (8004330 <HAL_DMA_IRQHandler+0x1b4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04a      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5d      	ldr	r2, [pc, #372]	; (8004334 <HAL_DMA_IRQHandler+0x1b8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d045      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5c      	ldr	r2, [pc, #368]	; (8004338 <HAL_DMA_IRQHandler+0x1bc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d040      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5a      	ldr	r2, [pc, #360]	; (800433c <HAL_DMA_IRQHandler+0x1c0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d03b      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a59      	ldr	r2, [pc, #356]	; (8004340 <HAL_DMA_IRQHandler+0x1c4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d036      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a57      	ldr	r2, [pc, #348]	; (8004344 <HAL_DMA_IRQHandler+0x1c8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a56      	ldr	r2, [pc, #344]	; (8004348 <HAL_DMA_IRQHandler+0x1cc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d02c      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a54      	ldr	r2, [pc, #336]	; (800434c <HAL_DMA_IRQHandler+0x1d0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d027      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a53      	ldr	r2, [pc, #332]	; (8004350 <HAL_DMA_IRQHandler+0x1d4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a51      	ldr	r2, [pc, #324]	; (8004354 <HAL_DMA_IRQHandler+0x1d8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a50      	ldr	r2, [pc, #320]	; (8004358 <HAL_DMA_IRQHandler+0x1dc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a4e      	ldr	r2, [pc, #312]	; (800435c <HAL_DMA_IRQHandler+0x1e0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a4d      	ldr	r2, [pc, #308]	; (8004360 <HAL_DMA_IRQHandler+0x1e4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a4b      	ldr	r2, [pc, #300]	; (8004364 <HAL_DMA_IRQHandler+0x1e8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4a      	ldr	r2, [pc, #296]	; (8004368 <HAL_DMA_IRQHandler+0x1ec>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_DMA_IRQHandler+0xd2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a48      	ldr	r2, [pc, #288]	; (800436c <HAL_DMA_IRQHandler+0x1f0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_DMA_IRQHandler+0xd6>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_DMA_IRQHandler+0xd8>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 842b 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2208      	movs	r2, #8
 8004264:	409a      	lsls	r2, r3
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a2 	beq.w	80043b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <HAL_DMA_IRQHandler+0x1b4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <HAL_DMA_IRQHandler+0x1b8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <HAL_DMA_IRQHandler+0x1bc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2a      	ldr	r2, [pc, #168]	; (800433c <HAL_DMA_IRQHandler+0x1c0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a28      	ldr	r2, [pc, #160]	; (8004340 <HAL_DMA_IRQHandler+0x1c4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a27      	ldr	r2, [pc, #156]	; (8004344 <HAL_DMA_IRQHandler+0x1c8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a25      	ldr	r2, [pc, #148]	; (8004348 <HAL_DMA_IRQHandler+0x1cc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a24      	ldr	r2, [pc, #144]	; (800434c <HAL_DMA_IRQHandler+0x1d0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <HAL_DMA_IRQHandler+0x1d4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a21      	ldr	r2, [pc, #132]	; (8004354 <HAL_DMA_IRQHandler+0x1d8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <HAL_DMA_IRQHandler+0x1dc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1e      	ldr	r2, [pc, #120]	; (800435c <HAL_DMA_IRQHandler+0x1e0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <HAL_DMA_IRQHandler+0x1e4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_DMA_IRQHandler+0x1e8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_DMA_IRQHandler+0x1ec>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_IRQHandler+0x194>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_DMA_IRQHandler+0x1f0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d12f      	bne.n	8004370 <HAL_DMA_IRQHandler+0x1f4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e02e      	b.n	8004384 <HAL_DMA_IRQHandler+0x208>
 8004326:	bf00      	nop
 8004328:	24000008 	.word	0x24000008
 800432c:	1b4e81b5 	.word	0x1b4e81b5
 8004330:	40020010 	.word	0x40020010
 8004334:	40020028 	.word	0x40020028
 8004338:	40020040 	.word	0x40020040
 800433c:	40020058 	.word	0x40020058
 8004340:	40020070 	.word	0x40020070
 8004344:	40020088 	.word	0x40020088
 8004348:	400200a0 	.word	0x400200a0
 800434c:	400200b8 	.word	0x400200b8
 8004350:	40020410 	.word	0x40020410
 8004354:	40020428 	.word	0x40020428
 8004358:	40020440 	.word	0x40020440
 800435c:	40020458 	.word	0x40020458
 8004360:	40020470 	.word	0x40020470
 8004364:	40020488 	.word	0x40020488
 8004368:	400204a0 	.word	0x400204a0
 800436c:	400204b8 	.word	0x400204b8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2208      	movs	r2, #8
 80043a2:	409a      	lsls	r2, r3
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d06e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a69      	ldr	r2, [pc, #420]	; (8004574 <HAL_DMA_IRQHandler+0x3f8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d04a      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a67      	ldr	r2, [pc, #412]	; (8004578 <HAL_DMA_IRQHandler+0x3fc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d045      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a66      	ldr	r2, [pc, #408]	; (800457c <HAL_DMA_IRQHandler+0x400>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d040      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a64      	ldr	r2, [pc, #400]	; (8004580 <HAL_DMA_IRQHandler+0x404>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d03b      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a63      	ldr	r2, [pc, #396]	; (8004584 <HAL_DMA_IRQHandler+0x408>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d036      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a61      	ldr	r2, [pc, #388]	; (8004588 <HAL_DMA_IRQHandler+0x40c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d031      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a60      	ldr	r2, [pc, #384]	; (800458c <HAL_DMA_IRQHandler+0x410>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d02c      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5e      	ldr	r2, [pc, #376]	; (8004590 <HAL_DMA_IRQHandler+0x414>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d027      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a5d      	ldr	r2, [pc, #372]	; (8004594 <HAL_DMA_IRQHandler+0x418>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5b      	ldr	r2, [pc, #364]	; (8004598 <HAL_DMA_IRQHandler+0x41c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01d      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a5a      	ldr	r2, [pc, #360]	; (800459c <HAL_DMA_IRQHandler+0x420>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d018      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_DMA_IRQHandler+0x424>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a57      	ldr	r2, [pc, #348]	; (80045a4 <HAL_DMA_IRQHandler+0x428>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a55      	ldr	r2, [pc, #340]	; (80045a8 <HAL_DMA_IRQHandler+0x42c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a54      	ldr	r2, [pc, #336]	; (80045ac <HAL_DMA_IRQHandler+0x430>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_DMA_IRQHandler+0x2ee>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_DMA_IRQHandler+0x434>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10a      	bne.n	8004480 <HAL_DMA_IRQHandler+0x304>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e003      	b.n	8004488 <HAL_DMA_IRQHandler+0x30c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2201      	movs	r2, #1
 8004496:	409a      	lsls	r2, r3
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	f043 0202 	orr.w	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2204      	movs	r2, #4
 80044b2:	409a      	lsls	r2, r3
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 808f 	beq.w	80045dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_DMA_IRQHandler+0x3f8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_DMA_IRQHandler+0x3fc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_DMA_IRQHandler+0x400>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a27      	ldr	r2, [pc, #156]	; (8004580 <HAL_DMA_IRQHandler+0x404>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_DMA_IRQHandler+0x408>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_DMA_IRQHandler+0x40c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a23      	ldr	r2, [pc, #140]	; (800458c <HAL_DMA_IRQHandler+0x410>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a21      	ldr	r2, [pc, #132]	; (8004590 <HAL_DMA_IRQHandler+0x414>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a20      	ldr	r2, [pc, #128]	; (8004594 <HAL_DMA_IRQHandler+0x418>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_DMA_IRQHandler+0x41c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_DMA_IRQHandler+0x420>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_DMA_IRQHandler+0x424>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_DMA_IRQHandler+0x428>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_DMA_IRQHandler+0x42c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a17      	ldr	r2, [pc, #92]	; (80045ac <HAL_DMA_IRQHandler+0x430>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_IRQHandler+0x3e2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <HAL_DMA_IRQHandler+0x434>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d12a      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x438>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e023      	b.n	80045bc <HAL_DMA_IRQHandler+0x440>
 8004574:	40020010 	.word	0x40020010
 8004578:	40020028 	.word	0x40020028
 800457c:	40020040 	.word	0x40020040
 8004580:	40020058 	.word	0x40020058
 8004584:	40020070 	.word	0x40020070
 8004588:	40020088 	.word	0x40020088
 800458c:	400200a0 	.word	0x400200a0
 8004590:	400200b8 	.word	0x400200b8
 8004594:	40020410 	.word	0x40020410
 8004598:	40020428 	.word	0x40020428
 800459c:	40020440 	.word	0x40020440
 80045a0:	40020458 	.word	0x40020458
 80045a4:	40020470 	.word	0x40020470
 80045a8:	40020488 	.word	0x40020488
 80045ac:	400204a0 	.word	0x400204a0
 80045b0:	400204b8 	.word	0x400204b8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2204      	movs	r2, #4
 80045ca:	409a      	lsls	r2, r3
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2210      	movs	r2, #16
 80045e6:	409a      	lsls	r2, r3
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a6 	beq.w	800473e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a85      	ldr	r2, [pc, #532]	; (800480c <HAL_DMA_IRQHandler+0x690>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d04a      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a83      	ldr	r2, [pc, #524]	; (8004810 <HAL_DMA_IRQHandler+0x694>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d045      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a82      	ldr	r2, [pc, #520]	; (8004814 <HAL_DMA_IRQHandler+0x698>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d040      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a80      	ldr	r2, [pc, #512]	; (8004818 <HAL_DMA_IRQHandler+0x69c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d03b      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7f      	ldr	r2, [pc, #508]	; (800481c <HAL_DMA_IRQHandler+0x6a0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d036      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7d      	ldr	r2, [pc, #500]	; (8004820 <HAL_DMA_IRQHandler+0x6a4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a7c      	ldr	r2, [pc, #496]	; (8004824 <HAL_DMA_IRQHandler+0x6a8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d02c      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a7a      	ldr	r2, [pc, #488]	; (8004828 <HAL_DMA_IRQHandler+0x6ac>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d027      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a79      	ldr	r2, [pc, #484]	; (800482c <HAL_DMA_IRQHandler+0x6b0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a77      	ldr	r2, [pc, #476]	; (8004830 <HAL_DMA_IRQHandler+0x6b4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01d      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a76      	ldr	r2, [pc, #472]	; (8004834 <HAL_DMA_IRQHandler+0x6b8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a74      	ldr	r2, [pc, #464]	; (8004838 <HAL_DMA_IRQHandler+0x6bc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a73      	ldr	r2, [pc, #460]	; (800483c <HAL_DMA_IRQHandler+0x6c0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a71      	ldr	r2, [pc, #452]	; (8004840 <HAL_DMA_IRQHandler+0x6c4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a70      	ldr	r2, [pc, #448]	; (8004844 <HAL_DMA_IRQHandler+0x6c8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_DMA_IRQHandler+0x516>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6e      	ldr	r2, [pc, #440]	; (8004848 <HAL_DMA_IRQHandler+0x6cc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10a      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x52c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e009      	b.n	80046bc <HAL_DMA_IRQHandler+0x540>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d03e      	beq.n	800473e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2210      	movs	r2, #16
 80046ca:	409a      	lsls	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d108      	bne.n	80046fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d024      	beq.n	800473e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
 80046fc:	e01f      	b.n	800473e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01b      	beq.n	800473e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
 800470e:	e016      	b.n	800473e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0208 	bic.w	r2, r2, #8
 800472c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2220      	movs	r2, #32
 8004748:	409a      	lsls	r2, r3
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8110 	beq.w	8004974 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2c      	ldr	r2, [pc, #176]	; (800480c <HAL_DMA_IRQHandler+0x690>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d04a      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2b      	ldr	r2, [pc, #172]	; (8004810 <HAL_DMA_IRQHandler+0x694>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d045      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a29      	ldr	r2, [pc, #164]	; (8004814 <HAL_DMA_IRQHandler+0x698>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d040      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_DMA_IRQHandler+0x69c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d03b      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a26      	ldr	r2, [pc, #152]	; (800481c <HAL_DMA_IRQHandler+0x6a0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d036      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_DMA_IRQHandler+0x6a4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d031      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a23      	ldr	r2, [pc, #140]	; (8004824 <HAL_DMA_IRQHandler+0x6a8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02c      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_DMA_IRQHandler+0x6ac>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d027      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <HAL_DMA_IRQHandler+0x6b0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_DMA_IRQHandler+0x6b4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d01d      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_DMA_IRQHandler+0x6b8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_DMA_IRQHandler+0x6bc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <HAL_DMA_IRQHandler+0x6c0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_DMA_IRQHandler+0x6c4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_DMA_IRQHandler+0x6c8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_DMA_IRQHandler+0x678>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_DMA_IRQHandler+0x6cc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d12b      	bne.n	800484c <HAL_DMA_IRQHandler+0x6d0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e02a      	b.n	8004860 <HAL_DMA_IRQHandler+0x6e4>
 800480a:	bf00      	nop
 800480c:	40020010 	.word	0x40020010
 8004810:	40020028 	.word	0x40020028
 8004814:	40020040 	.word	0x40020040
 8004818:	40020058 	.word	0x40020058
 800481c:	40020070 	.word	0x40020070
 8004820:	40020088 	.word	0x40020088
 8004824:	400200a0 	.word	0x400200a0
 8004828:	400200b8 	.word	0x400200b8
 800482c:	40020410 	.word	0x40020410
 8004830:	40020428 	.word	0x40020428
 8004834:	40020440 	.word	0x40020440
 8004838:	40020458 	.word	0x40020458
 800483c:	40020470 	.word	0x40020470
 8004840:	40020488 	.word	0x40020488
 8004844:	400204a0 	.word	0x400204a0
 8004848:	400204b8 	.word	0x400204b8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8087 	beq.w	8004974 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	2220      	movs	r2, #32
 8004870:	409a      	lsls	r2, r3
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b04      	cmp	r3, #4
 8004880:	d139      	bne.n	80048f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0216 	bic.w	r2, r2, #22
 8004890:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_DMA_IRQHandler+0x736>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0208 	bic.w	r2, r2, #8
 80048c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	223f      	movs	r2, #63	; 0x3f
 80048cc:	409a      	lsls	r2, r3
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 834a 	beq.w	8004f80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
          }
          return;
 80048f4:	e344      	b.n	8004f80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d018      	beq.n	8004936 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
 8004922:	e027      	b.n	8004974 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
 8004934:	e01e      	b.n	8004974 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0210 	bic.w	r2, r2, #16
 8004952:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8306 	beq.w	8004f8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8088 	beq.w	8004a9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2204      	movs	r2, #4
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a7a      	ldr	r2, [pc, #488]	; (8004b84 <HAL_DMA_IRQHandler+0xa08>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d04a      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a79      	ldr	r2, [pc, #484]	; (8004b88 <HAL_DMA_IRQHandler+0xa0c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d045      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a77      	ldr	r2, [pc, #476]	; (8004b8c <HAL_DMA_IRQHandler+0xa10>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d040      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a76      	ldr	r2, [pc, #472]	; (8004b90 <HAL_DMA_IRQHandler+0xa14>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d03b      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a74      	ldr	r2, [pc, #464]	; (8004b94 <HAL_DMA_IRQHandler+0xa18>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d036      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a73      	ldr	r2, [pc, #460]	; (8004b98 <HAL_DMA_IRQHandler+0xa1c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d031      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a71      	ldr	r2, [pc, #452]	; (8004b9c <HAL_DMA_IRQHandler+0xa20>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d02c      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a70      	ldr	r2, [pc, #448]	; (8004ba0 <HAL_DMA_IRQHandler+0xa24>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d027      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a6e      	ldr	r2, [pc, #440]	; (8004ba4 <HAL_DMA_IRQHandler+0xa28>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6d      	ldr	r2, [pc, #436]	; (8004ba8 <HAL_DMA_IRQHandler+0xa2c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d01d      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6b      	ldr	r2, [pc, #428]	; (8004bac <HAL_DMA_IRQHandler+0xa30>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6a      	ldr	r2, [pc, #424]	; (8004bb0 <HAL_DMA_IRQHandler+0xa34>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_DMA_IRQHandler+0xa38>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a67      	ldr	r2, [pc, #412]	; (8004bb8 <HAL_DMA_IRQHandler+0xa3c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a65      	ldr	r2, [pc, #404]	; (8004bbc <HAL_DMA_IRQHandler+0xa40>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x8b8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a64      	ldr	r2, [pc, #400]	; (8004bc0 <HAL_DMA_IRQHandler+0xa44>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d108      	bne.n	8004a46 <HAL_DMA_IRQHandler+0x8ca>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e007      	b.n	8004a56 <HAL_DMA_IRQHandler+0x8da>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d307      	bcc.n	8004a72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f2      	bne.n	8004a56 <HAL_DMA_IRQHandler+0x8da>
 8004a70:	e000      	b.n	8004a74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a72:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a92:	e003      	b.n	8004a9c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8272 	beq.w	8004f8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
 8004aae:	e26c      	b.n	8004f8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a43      	ldr	r2, [pc, #268]	; (8004bc4 <HAL_DMA_IRQHandler+0xa48>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d022      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a42      	ldr	r2, [pc, #264]	; (8004bc8 <HAL_DMA_IRQHandler+0xa4c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d01d      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a40      	ldr	r2, [pc, #256]	; (8004bcc <HAL_DMA_IRQHandler+0xa50>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d018      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <HAL_DMA_IRQHandler+0xa54>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d013      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3d      	ldr	r2, [pc, #244]	; (8004bd4 <HAL_DMA_IRQHandler+0xa58>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00e      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <HAL_DMA_IRQHandler+0xa5c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <HAL_DMA_IRQHandler+0xa60>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x984>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a39      	ldr	r2, [pc, #228]	; (8004be0 <HAL_DMA_IRQHandler+0xa64>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x988>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_DMA_IRQHandler+0x98a>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 823f 	beq.w	8004f8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80cd 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0xb48>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80c7 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2204      	movs	r2, #4
 8004b40:	409a      	lsls	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d049      	beq.n	8004be4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8210 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b6c:	e20a      	b.n	8004f84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8206 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b80:	e200      	b.n	8004f84 <HAL_DMA_IRQHandler+0xe08>
 8004b82:	bf00      	nop
 8004b84:	40020010 	.word	0x40020010
 8004b88:	40020028 	.word	0x40020028
 8004b8c:	40020040 	.word	0x40020040
 8004b90:	40020058 	.word	0x40020058
 8004b94:	40020070 	.word	0x40020070
 8004b98:	40020088 	.word	0x40020088
 8004b9c:	400200a0 	.word	0x400200a0
 8004ba0:	400200b8 	.word	0x400200b8
 8004ba4:	40020410 	.word	0x40020410
 8004ba8:	40020428 	.word	0x40020428
 8004bac:	40020440 	.word	0x40020440
 8004bb0:	40020458 	.word	0x40020458
 8004bb4:	40020470 	.word	0x40020470
 8004bb8:	40020488 	.word	0x40020488
 8004bbc:	400204a0 	.word	0x400204a0
 8004bc0:	400204b8 	.word	0x400204b8
 8004bc4:	58025408 	.word	0x58025408
 8004bc8:	5802541c 	.word	0x5802541c
 8004bcc:	58025430 	.word	0x58025430
 8004bd0:	58025444 	.word	0x58025444
 8004bd4:	58025458 	.word	0x58025458
 8004bd8:	5802546c 	.word	0x5802546c
 8004bdc:	58025480 	.word	0x58025480
 8004be0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d160      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a8c      	ldr	r2, [pc, #560]	; (8004e24 <HAL_DMA_IRQHandler+0xca8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d04a      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a8a      	ldr	r2, [pc, #552]	; (8004e28 <HAL_DMA_IRQHandler+0xcac>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d045      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a89      	ldr	r2, [pc, #548]	; (8004e2c <HAL_DMA_IRQHandler+0xcb0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d040      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a87      	ldr	r2, [pc, #540]	; (8004e30 <HAL_DMA_IRQHandler+0xcb4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d03b      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a86      	ldr	r2, [pc, #536]	; (8004e34 <HAL_DMA_IRQHandler+0xcb8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d036      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a84      	ldr	r2, [pc, #528]	; (8004e38 <HAL_DMA_IRQHandler+0xcbc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d031      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a83      	ldr	r2, [pc, #524]	; (8004e3c <HAL_DMA_IRQHandler+0xcc0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d02c      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a81      	ldr	r2, [pc, #516]	; (8004e40 <HAL_DMA_IRQHandler+0xcc4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d027      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a80      	ldr	r2, [pc, #512]	; (8004e44 <HAL_DMA_IRQHandler+0xcc8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d022      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7e      	ldr	r2, [pc, #504]	; (8004e48 <HAL_DMA_IRQHandler+0xccc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7d      	ldr	r2, [pc, #500]	; (8004e4c <HAL_DMA_IRQHandler+0xcd0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d018      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7b      	ldr	r2, [pc, #492]	; (8004e50 <HAL_DMA_IRQHandler+0xcd4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7a      	ldr	r2, [pc, #488]	; (8004e54 <HAL_DMA_IRQHandler+0xcd8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a78      	ldr	r2, [pc, #480]	; (8004e58 <HAL_DMA_IRQHandler+0xcdc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a77      	ldr	r2, [pc, #476]	; (8004e5c <HAL_DMA_IRQHandler+0xce0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_DMA_IRQHandler+0xb12>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a75      	ldr	r2, [pc, #468]	; (8004e60 <HAL_DMA_IRQHandler+0xce4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <HAL_DMA_IRQHandler+0xb24>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0208 	bic.w	r2, r2, #8
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e007      	b.n	8004cb0 <HAL_DMA_IRQHandler+0xb34>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8165 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc2:	e15f      	b.n	8004f84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2202      	movs	r2, #2
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80c5 	beq.w	8004e64 <HAL_DMA_IRQHandler+0xce8>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80bf 	beq.w	8004e64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2202      	movs	r2, #2
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 813a 	beq.w	8004f88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d1c:	e134      	b.n	8004f88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8130 	beq.w	8004f88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d30:	e12a      	b.n	8004f88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d168      	bne.n	8004e0e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <HAL_DMA_IRQHandler+0xca8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d04a      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <HAL_DMA_IRQHandler+0xcac>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d045      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a35      	ldr	r2, [pc, #212]	; (8004e2c <HAL_DMA_IRQHandler+0xcb0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d040      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a34      	ldr	r2, [pc, #208]	; (8004e30 <HAL_DMA_IRQHandler+0xcb4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d03b      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a32      	ldr	r2, [pc, #200]	; (8004e34 <HAL_DMA_IRQHandler+0xcb8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d036      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a31      	ldr	r2, [pc, #196]	; (8004e38 <HAL_DMA_IRQHandler+0xcbc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d031      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <HAL_DMA_IRQHandler+0xcc0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02c      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2e      	ldr	r2, [pc, #184]	; (8004e40 <HAL_DMA_IRQHandler+0xcc4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d027      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <HAL_DMA_IRQHandler+0xcc8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d022      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <HAL_DMA_IRQHandler+0xccc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d01d      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <HAL_DMA_IRQHandler+0xcd0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d018      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <HAL_DMA_IRQHandler+0xcd4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <HAL_DMA_IRQHandler+0xcd8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a25      	ldr	r2, [pc, #148]	; (8004e58 <HAL_DMA_IRQHandler+0xcdc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a23      	ldr	r2, [pc, #140]	; (8004e5c <HAL_DMA_IRQHandler+0xce0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xc60>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_DMA_IRQHandler+0xce4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d108      	bne.n	8004dee <HAL_DMA_IRQHandler+0xc72>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0214 	bic.w	r2, r2, #20
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e007      	b.n	8004dfe <HAL_DMA_IRQHandler+0xc82>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 020a 	bic.w	r2, r2, #10
 8004dfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80b8 	beq.w	8004f88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e20:	e0b2      	b.n	8004f88 <HAL_DMA_IRQHandler+0xe0c>
 8004e22:	bf00      	nop
 8004e24:	40020010 	.word	0x40020010
 8004e28:	40020028 	.word	0x40020028
 8004e2c:	40020040 	.word	0x40020040
 8004e30:	40020058 	.word	0x40020058
 8004e34:	40020070 	.word	0x40020070
 8004e38:	40020088 	.word	0x40020088
 8004e3c:	400200a0 	.word	0x400200a0
 8004e40:	400200b8 	.word	0x400200b8
 8004e44:	40020410 	.word	0x40020410
 8004e48:	40020428 	.word	0x40020428
 8004e4c:	40020440 	.word	0x40020440
 8004e50:	40020458 	.word	0x40020458
 8004e54:	40020470 	.word	0x40020470
 8004e58:	40020488 	.word	0x40020488
 8004e5c:	400204a0 	.word	0x400204a0
 8004e60:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8088 	beq.w	8004f8a <HAL_DMA_IRQHandler+0xe0e>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8082 	beq.w	8004f8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a41      	ldr	r2, [pc, #260]	; (8004f90 <HAL_DMA_IRQHandler+0xe14>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d04a      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3f      	ldr	r2, [pc, #252]	; (8004f94 <HAL_DMA_IRQHandler+0xe18>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d045      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a3e      	ldr	r2, [pc, #248]	; (8004f98 <HAL_DMA_IRQHandler+0xe1c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d040      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3c      	ldr	r2, [pc, #240]	; (8004f9c <HAL_DMA_IRQHandler+0xe20>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d03b      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a3b      	ldr	r2, [pc, #236]	; (8004fa0 <HAL_DMA_IRQHandler+0xe24>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d036      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a39      	ldr	r2, [pc, #228]	; (8004fa4 <HAL_DMA_IRQHandler+0xe28>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d031      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <HAL_DMA_IRQHandler+0xe2c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d02c      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a36      	ldr	r2, [pc, #216]	; (8004fac <HAL_DMA_IRQHandler+0xe30>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d027      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a35      	ldr	r2, [pc, #212]	; (8004fb0 <HAL_DMA_IRQHandler+0xe34>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d022      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a33      	ldr	r2, [pc, #204]	; (8004fb4 <HAL_DMA_IRQHandler+0xe38>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01d      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a32      	ldr	r2, [pc, #200]	; (8004fb8 <HAL_DMA_IRQHandler+0xe3c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d018      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <HAL_DMA_IRQHandler+0xe40>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <HAL_DMA_IRQHandler+0xe44>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00e      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <HAL_DMA_IRQHandler+0xe48>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d009      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <HAL_DMA_IRQHandler+0xe4c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xdaa>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <HAL_DMA_IRQHandler+0xe50>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <HAL_DMA_IRQHandler+0xdbc>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 021c 	bic.w	r2, r2, #28
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e007      	b.n	8004f48 <HAL_DMA_IRQHandler+0xdcc>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 020e 	bic.w	r2, r2, #14
 8004f46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2201      	movs	r2, #1
 8004f52:	409a      	lsls	r2, r3
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
 8004f7e:	e004      	b.n	8004f8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f8a:	3728      	adds	r7, #40	; 0x28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40020010 	.word	0x40020010
 8004f94:	40020028 	.word	0x40020028
 8004f98:	40020040 	.word	0x40020040
 8004f9c:	40020058 	.word	0x40020058
 8004fa0:	40020070 	.word	0x40020070
 8004fa4:	40020088 	.word	0x40020088
 8004fa8:	400200a0 	.word	0x400200a0
 8004fac:	400200b8 	.word	0x400200b8
 8004fb0:	40020410 	.word	0x40020410
 8004fb4:	40020428 	.word	0x40020428
 8004fb8:	40020440 	.word	0x40020440
 8004fbc:	40020458 	.word	0x40020458
 8004fc0:	40020470 	.word	0x40020470
 8004fc4:	40020488 	.word	0x40020488
 8004fc8:	400204a0 	.word	0x400204a0
 8004fcc:	400204b8 	.word	0x400204b8

08004fd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a84      	ldr	r2, [pc, #528]	; (8005200 <DMA_SetConfig+0x230>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d072      	beq.n	80050da <DMA_SetConfig+0x10a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a82      	ldr	r2, [pc, #520]	; (8005204 <DMA_SetConfig+0x234>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d06d      	beq.n	80050da <DMA_SetConfig+0x10a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a81      	ldr	r2, [pc, #516]	; (8005208 <DMA_SetConfig+0x238>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d068      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a7f      	ldr	r2, [pc, #508]	; (800520c <DMA_SetConfig+0x23c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d063      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7e      	ldr	r2, [pc, #504]	; (8005210 <DMA_SetConfig+0x240>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d05e      	beq.n	80050da <DMA_SetConfig+0x10a>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a7c      	ldr	r2, [pc, #496]	; (8005214 <DMA_SetConfig+0x244>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d059      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a7b      	ldr	r2, [pc, #492]	; (8005218 <DMA_SetConfig+0x248>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d054      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a79      	ldr	r2, [pc, #484]	; (800521c <DMA_SetConfig+0x24c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d04f      	beq.n	80050da <DMA_SetConfig+0x10a>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a78      	ldr	r2, [pc, #480]	; (8005220 <DMA_SetConfig+0x250>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04a      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a76      	ldr	r2, [pc, #472]	; (8005224 <DMA_SetConfig+0x254>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d045      	beq.n	80050da <DMA_SetConfig+0x10a>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a75      	ldr	r2, [pc, #468]	; (8005228 <DMA_SetConfig+0x258>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a73      	ldr	r2, [pc, #460]	; (800522c <DMA_SetConfig+0x25c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d03b      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a72      	ldr	r2, [pc, #456]	; (8005230 <DMA_SetConfig+0x260>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <DMA_SetConfig+0x10a>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a70      	ldr	r2, [pc, #448]	; (8005234 <DMA_SetConfig+0x264>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a6f      	ldr	r2, [pc, #444]	; (8005238 <DMA_SetConfig+0x268>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d02c      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6d      	ldr	r2, [pc, #436]	; (800523c <DMA_SetConfig+0x26c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <DMA_SetConfig+0x10a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6c      	ldr	r2, [pc, #432]	; (8005240 <DMA_SetConfig+0x270>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <DMA_SetConfig+0x10a>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a6a      	ldr	r2, [pc, #424]	; (8005244 <DMA_SetConfig+0x274>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <DMA_SetConfig+0x10a>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a69      	ldr	r2, [pc, #420]	; (8005248 <DMA_SetConfig+0x278>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <DMA_SetConfig+0x10a>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a67      	ldr	r2, [pc, #412]	; (800524c <DMA_SetConfig+0x27c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <DMA_SetConfig+0x10a>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a66      	ldr	r2, [pc, #408]	; (8005250 <DMA_SetConfig+0x280>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <DMA_SetConfig+0x10a>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a64      	ldr	r2, [pc, #400]	; (8005254 <DMA_SetConfig+0x284>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <DMA_SetConfig+0x10a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a63      	ldr	r2, [pc, #396]	; (8005258 <DMA_SetConfig+0x288>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <DMA_SetConfig+0x10a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a61      	ldr	r2, [pc, #388]	; (800525c <DMA_SetConfig+0x28c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <DMA_SetConfig+0x10e>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <DMA_SetConfig+0x110>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a3e      	ldr	r2, [pc, #248]	; (8005200 <DMA_SetConfig+0x230>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3d      	ldr	r2, [pc, #244]	; (8005204 <DMA_SetConfig+0x234>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <DMA_SetConfig+0x238>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3a      	ldr	r2, [pc, #232]	; (800520c <DMA_SetConfig+0x23c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a38      	ldr	r2, [pc, #224]	; (8005210 <DMA_SetConfig+0x240>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a37      	ldr	r2, [pc, #220]	; (8005214 <DMA_SetConfig+0x244>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a35      	ldr	r2, [pc, #212]	; (8005218 <DMA_SetConfig+0x248>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a34      	ldr	r2, [pc, #208]	; (800521c <DMA_SetConfig+0x24c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a32      	ldr	r2, [pc, #200]	; (8005220 <DMA_SetConfig+0x250>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a31      	ldr	r2, [pc, #196]	; (8005224 <DMA_SetConfig+0x254>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2f      	ldr	r2, [pc, #188]	; (8005228 <DMA_SetConfig+0x258>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2e      	ldr	r2, [pc, #184]	; (800522c <DMA_SetConfig+0x25c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <DMA_SetConfig+0x260>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2b      	ldr	r2, [pc, #172]	; (8005234 <DMA_SetConfig+0x264>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a29      	ldr	r2, [pc, #164]	; (8005238 <DMA_SetConfig+0x268>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <DMA_SetConfig+0x1d0>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a28      	ldr	r2, [pc, #160]	; (800523c <DMA_SetConfig+0x26c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <DMA_SetConfig+0x1d4>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <DMA_SetConfig+0x1d6>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d05a      	beq.n	8005260 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	223f      	movs	r2, #63	; 0x3f
 80051b4:	409a      	lsls	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d108      	bne.n	80051ec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051ea:	e087      	b.n	80052fc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]
}
 80051fc:	e07e      	b.n	80052fc <DMA_SetConfig+0x32c>
 80051fe:	bf00      	nop
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
 8005240:	58025408 	.word	0x58025408
 8005244:	5802541c 	.word	0x5802541c
 8005248:	58025430 	.word	0x58025430
 800524c:	58025444 	.word	0x58025444
 8005250:	58025458 	.word	0x58025458
 8005254:	5802546c 	.word	0x5802546c
 8005258:	58025480 	.word	0x58025480
 800525c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a28      	ldr	r2, [pc, #160]	; (8005308 <DMA_SetConfig+0x338>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d022      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a27      	ldr	r2, [pc, #156]	; (800530c <DMA_SetConfig+0x33c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d01d      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a25      	ldr	r2, [pc, #148]	; (8005310 <DMA_SetConfig+0x340>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d018      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a24      	ldr	r2, [pc, #144]	; (8005314 <DMA_SetConfig+0x344>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d013      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a22      	ldr	r2, [pc, #136]	; (8005318 <DMA_SetConfig+0x348>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00e      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a21      	ldr	r2, [pc, #132]	; (800531c <DMA_SetConfig+0x34c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d009      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <DMA_SetConfig+0x350>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <DMA_SetConfig+0x2e0>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <DMA_SetConfig+0x354>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <DMA_SetConfig+0x2e4>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <DMA_SetConfig+0x2e6>
 80052b4:	2300      	movs	r3, #0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d020      	beq.n	80052fc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	409a      	lsls	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d108      	bne.n	80052ec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	60da      	str	r2, [r3, #12]
}
 80052ea:	e007      	b.n	80052fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	58025408 	.word	0x58025408
 800530c:	5802541c 	.word	0x5802541c
 8005310:	58025430 	.word	0x58025430
 8005314:	58025444 	.word	0x58025444
 8005318:	58025458 	.word	0x58025458
 800531c:	5802546c 	.word	0x5802546c
 8005320:	58025480 	.word	0x58025480
 8005324:	58025494 	.word	0x58025494

08005328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a42      	ldr	r2, [pc, #264]	; (8005440 <DMA_CalcBaseAndBitshift+0x118>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d04a      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a41      	ldr	r2, [pc, #260]	; (8005444 <DMA_CalcBaseAndBitshift+0x11c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d045      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <DMA_CalcBaseAndBitshift+0x120>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d040      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <DMA_CalcBaseAndBitshift+0x124>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d03b      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <DMA_CalcBaseAndBitshift+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d036      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <DMA_CalcBaseAndBitshift+0x12c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d031      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a39      	ldr	r2, [pc, #228]	; (8005458 <DMA_CalcBaseAndBitshift+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02c      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a38      	ldr	r2, [pc, #224]	; (800545c <DMA_CalcBaseAndBitshift+0x134>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d027      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a36      	ldr	r2, [pc, #216]	; (8005460 <DMA_CalcBaseAndBitshift+0x138>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a35      	ldr	r2, [pc, #212]	; (8005464 <DMA_CalcBaseAndBitshift+0x13c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01d      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a33      	ldr	r2, [pc, #204]	; (8005468 <DMA_CalcBaseAndBitshift+0x140>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a32      	ldr	r2, [pc, #200]	; (800546c <DMA_CalcBaseAndBitshift+0x144>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a30      	ldr	r2, [pc, #192]	; (8005470 <DMA_CalcBaseAndBitshift+0x148>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <DMA_CalcBaseAndBitshift+0x14c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <DMA_CalcBaseAndBitshift+0x150>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <DMA_CalcBaseAndBitshift+0xa8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2c      	ldr	r2, [pc, #176]	; (800547c <DMA_CalcBaseAndBitshift+0x154>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <DMA_CalcBaseAndBitshift+0xac>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <DMA_CalcBaseAndBitshift+0xae>
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d024      	beq.n	8005424 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	3b10      	subs	r3, #16
 80053e2:	4a27      	ldr	r2, [pc, #156]	; (8005480 <DMA_CalcBaseAndBitshift+0x158>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	4a24      	ldr	r2, [pc, #144]	; (8005484 <DMA_CalcBaseAndBitshift+0x15c>)
 80053f4:	5cd3      	ldrb	r3, [r2, r3]
 80053f6:	461a      	mov	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d908      	bls.n	8005414 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <DMA_CalcBaseAndBitshift+0x160>)
 800540a:	4013      	ands	r3, r2
 800540c:	1d1a      	adds	r2, r3, #4
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	659a      	str	r2, [r3, #88]	; 0x58
 8005412:	e00d      	b.n	8005430 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <DMA_CalcBaseAndBitshift+0x160>)
 800541c:	4013      	ands	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6593      	str	r3, [r2, #88]	; 0x58
 8005422:	e005      	b.n	8005430 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40020010 	.word	0x40020010
 8005444:	40020028 	.word	0x40020028
 8005448:	40020040 	.word	0x40020040
 800544c:	40020058 	.word	0x40020058
 8005450:	40020070 	.word	0x40020070
 8005454:	40020088 	.word	0x40020088
 8005458:	400200a0 	.word	0x400200a0
 800545c:	400200b8 	.word	0x400200b8
 8005460:	40020410 	.word	0x40020410
 8005464:	40020428 	.word	0x40020428
 8005468:	40020440 	.word	0x40020440
 800546c:	40020458 	.word	0x40020458
 8005470:	40020470 	.word	0x40020470
 8005474:	40020488 	.word	0x40020488
 8005478:	400204a0 	.word	0x400204a0
 800547c:	400204b8 	.word	0x400204b8
 8005480:	aaaaaaab 	.word	0xaaaaaaab
 8005484:	0800c7dc 	.word	0x0800c7dc
 8005488:	fffffc00 	.word	0xfffffc00

0800548c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d120      	bne.n	80054e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d858      	bhi.n	800555a <DMA_CheckFifoParam+0xce>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <DMA_CheckFifoParam+0x24>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054d3 	.word	0x080054d3
 80054b8:	080054c1 	.word	0x080054c1
 80054bc:	0800555b 	.word	0x0800555b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d048      	beq.n	800555e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054d0:	e045      	b.n	800555e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054da:	d142      	bne.n	8005562 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054e0:	e03f      	b.n	8005562 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ea:	d123      	bne.n	8005534 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d838      	bhi.n	8005566 <DMA_CheckFifoParam+0xda>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <DMA_CheckFifoParam+0x70>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	08005513 	.word	0x08005513
 8005504:	0800550d 	.word	0x0800550d
 8005508:	08005525 	.word	0x08005525
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
        break;
 8005510:	e030      	b.n	8005574 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d025      	beq.n	800556a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005522:	e022      	b.n	800556a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800552c:	d11f      	bne.n	800556e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005532:	e01c      	b.n	800556e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	2b02      	cmp	r3, #2
 800553a:	d902      	bls.n	8005542 <DMA_CheckFifoParam+0xb6>
 800553c:	2b03      	cmp	r3, #3
 800553e:	d003      	beq.n	8005548 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005540:	e018      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
        break;
 8005546:	e015      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
    break;
 8005558:	e00b      	b.n	8005572 <DMA_CheckFifoParam+0xe6>
        break;
 800555a:	bf00      	nop
 800555c:	e00a      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        break;
 800555e:	bf00      	nop
 8005560:	e008      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        break;
 8005562:	bf00      	nop
 8005564:	e006      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        break;
 8005566:	bf00      	nop
 8005568:	e004      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
        break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <DMA_CheckFifoParam+0xe8>
    break;
 8005572:	bf00      	nop
    }
  }

  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop

08005584 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a38      	ldr	r2, [pc, #224]	; (8005678 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a36      	ldr	r2, [pc, #216]	; (800567c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a35      	ldr	r2, [pc, #212]	; (8005680 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a33      	ldr	r2, [pc, #204]	; (8005684 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a32      	ldr	r2, [pc, #200]	; (8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a30      	ldr	r2, [pc, #192]	; (800568c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	3b08      	subs	r3, #8
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4b26      	ldr	r3, [pc, #152]	; (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005610:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005620:	e024      	b.n	800566c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	3b10      	subs	r3, #16
 800562a:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a1c      	ldr	r2, [pc, #112]	; (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d806      	bhi.n	800564a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d902      	bls.n	800564a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3308      	adds	r3, #8
 8005648:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800565c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	2201      	movs	r2, #1
 8005666:	409a      	lsls	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	58025408 	.word	0x58025408
 800567c:	5802541c 	.word	0x5802541c
 8005680:	58025430 	.word	0x58025430
 8005684:	58025444 	.word	0x58025444
 8005688:	58025458 	.word	0x58025458
 800568c:	5802546c 	.word	0x5802546c
 8005690:	58025480 	.word	0x58025480
 8005694:	58025494 	.word	0x58025494
 8005698:	cccccccd 	.word	0xcccccccd
 800569c:	16009600 	.word	0x16009600
 80056a0:	58025880 	.word	0x58025880
 80056a4:	aaaaaaab 	.word	0xaaaaaaab
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	4002040f 	.word	0x4002040f
 80056b0:	10008200 	.word	0x10008200
 80056b4:	40020880 	.word	0x40020880

080056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d04a      	beq.n	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d847      	bhi.n	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a25      	ldr	r2, [pc, #148]	; (8005770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d022      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a24      	ldr	r2, [pc, #144]	; (8005774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d01d      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a22      	ldr	r2, [pc, #136]	; (8005778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d018      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a21      	ldr	r2, [pc, #132]	; (800577c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d013      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00e      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d009      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1b      	ldr	r2, [pc, #108]	; (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a15      	ldr	r2, [pc, #84]	; (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005740:	671a      	str	r2, [r3, #112]	; 0x70
 8005742:	e009      	b.n	8005758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	461a      	mov	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a11      	ldr	r2, [pc, #68]	; (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005756:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	2201      	movs	r2, #1
 800575e:	409a      	lsls	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	58025408 	.word	0x58025408
 8005774:	5802541c 	.word	0x5802541c
 8005778:	58025430 	.word	0x58025430
 800577c:	58025444 	.word	0x58025444
 8005780:	58025458 	.word	0x58025458
 8005784:	5802546c 	.word	0x5802546c
 8005788:	58025480 	.word	0x58025480
 800578c:	58025494 	.word	0x58025494
 8005790:	1600963f 	.word	0x1600963f
 8005794:	58025940 	.word	0x58025940
 8005798:	1000823f 	.word	0x1000823f
 800579c:	40020940 	.word	0x40020940

080057a0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d105      	bne.n	80057c6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e325      	b.n	8005e12 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e31e      	b.n	8005e12 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	f040 830d 	bne.w	8005e04 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a82      	ldr	r2, [pc, #520]	; (8005a08 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d04a      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a81      	ldr	r2, [pc, #516]	; (8005a0c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d045      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a7f      	ldr	r2, [pc, #508]	; (8005a10 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d040      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7e      	ldr	r2, [pc, #504]	; (8005a14 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d03b      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a7c      	ldr	r2, [pc, #496]	; (8005a18 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d036      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a7b      	ldr	r2, [pc, #492]	; (8005a1c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d031      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a79      	ldr	r2, [pc, #484]	; (8005a20 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02c      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a78      	ldr	r2, [pc, #480]	; (8005a24 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d027      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a76      	ldr	r2, [pc, #472]	; (8005a28 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d022      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a75      	ldr	r2, [pc, #468]	; (8005a2c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d01d      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a73      	ldr	r2, [pc, #460]	; (8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a72      	ldr	r2, [pc, #456]	; (8005a34 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a70      	ldr	r2, [pc, #448]	; (8005a38 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a6f      	ldr	r2, [pc, #444]	; (8005a3c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a6d      	ldr	r2, [pc, #436]	; (8005a40 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a6c      	ldr	r2, [pc, #432]	; (8005a44 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80058b0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	3308      	adds	r3, #8
 80058c0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	223f      	movs	r2, #63	; 0x3f
 80058cc:	409a      	lsls	r2, r3
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e018      	b.n	8005906 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	f248 0320 	movw	r3, #32800	; 0x8020
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	3304      	adds	r3, #4
 80058f4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2201      	movs	r2, #1
 8005900:	409a      	lsls	r2, r3
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fb41 	bl	8005f94 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3c      	ldr	r2, [pc, #240]	; (8005a08 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d072      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a3a      	ldr	r2, [pc, #232]	; (8005a0c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d06d      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d068      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a37      	ldr	r2, [pc, #220]	; (8005a14 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d063      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a36      	ldr	r2, [pc, #216]	; (8005a18 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d05e      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a34      	ldr	r2, [pc, #208]	; (8005a1c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d059      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d054      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a31      	ldr	r2, [pc, #196]	; (8005a24 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d04f      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d04a      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2e      	ldr	r2, [pc, #184]	; (8005a2c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d045      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2d      	ldr	r2, [pc, #180]	; (8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d040      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2b      	ldr	r2, [pc, #172]	; (8005a34 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d03b      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d036      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d031      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d02c      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d027      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01d      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d132      	bne.n	8005a68 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e031      	b.n	8005a6a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005a06:	bf00      	nop
 8005a08:	40020010 	.word	0x40020010
 8005a0c:	40020028 	.word	0x40020028
 8005a10:	40020040 	.word	0x40020040
 8005a14:	40020058 	.word	0x40020058
 8005a18:	40020070 	.word	0x40020070
 8005a1c:	40020088 	.word	0x40020088
 8005a20:	400200a0 	.word	0x400200a0
 8005a24:	400200b8 	.word	0x400200b8
 8005a28:	40020410 	.word	0x40020410
 8005a2c:	40020428 	.word	0x40020428
 8005a30:	40020440 	.word	0x40020440
 8005a34:	40020458 	.word	0x40020458
 8005a38:	40020470 	.word	0x40020470
 8005a3c:	40020488 	.word	0x40020488
 8005a40:	400204a0 	.word	0x400204a0
 8005a44:	400204b8 	.word	0x400204b8
 8005a48:	58025408 	.word	0x58025408
 8005a4c:	5802541c 	.word	0x5802541c
 8005a50:	58025430 	.word	0x58025430
 8005a54:	58025444 	.word	0x58025444
 8005a58:	58025458 	.word	0x58025458
 8005a5c:	5802546c 	.word	0x5802546c
 8005a60:	58025480 	.word	0x58025480
 8005a64:	58025494 	.word	0x58025494
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a76:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a88:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a85      	ldr	r2, [pc, #532]	; (8005ca4 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d04a      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a83      	ldr	r2, [pc, #524]	; (8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d045      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a82      	ldr	r2, [pc, #520]	; (8005cac <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d040      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a80      	ldr	r2, [pc, #512]	; (8005cb0 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d03b      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7f      	ldr	r2, [pc, #508]	; (8005cb4 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d036      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7d      	ldr	r2, [pc, #500]	; (8005cb8 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d031      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a7c      	ldr	r2, [pc, #496]	; (8005cbc <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d02c      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7a      	ldr	r2, [pc, #488]	; (8005cc0 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d027      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a79      	ldr	r2, [pc, #484]	; (8005cc4 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d022      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a77      	ldr	r2, [pc, #476]	; (8005cc8 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a76      	ldr	r2, [pc, #472]	; (8005ccc <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a74      	ldr	r2, [pc, #464]	; (8005cd0 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a73      	ldr	r2, [pc, #460]	; (8005cd4 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a71      	ldr	r2, [pc, #452]	; (8005cd8 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a70      	ldr	r2, [pc, #448]	; (8005cdc <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a6e      	ldr	r2, [pc, #440]	; (8005ce0 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d101      	bne.n	8005b2e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d022      	beq.n	8005b7a <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 021e 	bic.w	r2, r3, #30
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0216 	orr.w	r2, r2, #22
 8005b46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b56:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d103      	bne.n	8005b68 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d022      	beq.n	8005bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0208 	orr.w	r2, r2, #8
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e019      	b.n	8005bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f023 020e 	bic.w	r2, r3, #14
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 020a 	orr.w	r2, r2, #10
 8005b8c:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0204 	orr.w	r2, r2, #4
 8005bac:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d072      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a3a      	ldr	r2, [pc, #232]	; (8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d06d      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a39      	ldr	r2, [pc, #228]	; (8005cac <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d068      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a37      	ldr	r2, [pc, #220]	; (8005cb0 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d063      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a36      	ldr	r2, [pc, #216]	; (8005cb4 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d05e      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a34      	ldr	r2, [pc, #208]	; (8005cb8 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d059      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a33      	ldr	r2, [pc, #204]	; (8005cbc <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d054      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a31      	ldr	r2, [pc, #196]	; (8005cc0 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d04f      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a30      	ldr	r2, [pc, #192]	; (8005cc4 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2e      	ldr	r2, [pc, #184]	; (8005cc8 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2d      	ldr	r2, [pc, #180]	; (8005ccc <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	; (8005cd4 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a24      	ldr	r2, [pc, #144]	; (8005ce4 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	; (8005cf4 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d132      	bne.n	8005d04 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e031      	b.n	8005d06 <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8005ca2:	bf00      	nop
 8005ca4:	40020010 	.word	0x40020010
 8005ca8:	40020028 	.word	0x40020028
 8005cac:	40020040 	.word	0x40020040
 8005cb0:	40020058 	.word	0x40020058
 8005cb4:	40020070 	.word	0x40020070
 8005cb8:	40020088 	.word	0x40020088
 8005cbc:	400200a0 	.word	0x400200a0
 8005cc0:	400200b8 	.word	0x400200b8
 8005cc4:	40020410 	.word	0x40020410
 8005cc8:	40020428 	.word	0x40020428
 8005ccc:	40020440 	.word	0x40020440
 8005cd0:	40020458 	.word	0x40020458
 8005cd4:	40020470 	.word	0x40020470
 8005cd8:	40020488 	.word	0x40020488
 8005cdc:	400204a0 	.word	0x400204a0
 8005ce0:	400204b8 	.word	0x400204b8
 8005ce4:	58025408 	.word	0x58025408
 8005ce8:	5802541c 	.word	0x5802541c
 8005cec:	58025430 	.word	0x58025430
 8005cf0:	58025444 	.word	0x58025444
 8005cf4:	58025458 	.word	0x58025458
 8005cf8:	5802546c 	.word	0x5802546c
 8005cfc:	58025480 	.word	0x58025480
 8005d00:	58025494 	.word	0x58025494
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01a      	beq.n	8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a35      	ldr	r2, [pc, #212]	; (8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d04a      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a34      	ldr	r2, [pc, #208]	; (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d045      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a32      	ldr	r2, [pc, #200]	; (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d040      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a31      	ldr	r2, [pc, #196]	; (8005e28 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d03b      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2f      	ldr	r2, [pc, #188]	; (8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d036      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2e      	ldr	r2, [pc, #184]	; (8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d031      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a2c      	ldr	r2, [pc, #176]	; (8005e34 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d02c      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2b      	ldr	r2, [pc, #172]	; (8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d027      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a29      	ldr	r2, [pc, #164]	; (8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d022      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a28      	ldr	r2, [pc, #160]	; (8005e40 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d01d      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a26      	ldr	r2, [pc, #152]	; (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d018      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d013      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a23      	ldr	r2, [pc, #140]	; (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00e      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a22      	ldr	r2, [pc, #136]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d009      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a20      	ldr	r2, [pc, #128]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d108      	bne.n	8005df2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e00e      	b.n	8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e005      	b.n	8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40020010 	.word	0x40020010
 8005e20:	40020028 	.word	0x40020028
 8005e24:	40020040 	.word	0x40020040
 8005e28:	40020058 	.word	0x40020058
 8005e2c:	40020070 	.word	0x40020070
 8005e30:	40020088 	.word	0x40020088
 8005e34:	400200a0 	.word	0x400200a0
 8005e38:	400200b8 	.word	0x400200b8
 8005e3c:	40020410 	.word	0x40020410
 8005e40:	40020428 	.word	0x40020428
 8005e44:	40020440 	.word	0x40020440
 8005e48:	40020458 	.word	0x40020458
 8005e4c:	40020470 	.word	0x40020470
 8005e50:	40020488 	.word	0x40020488
 8005e54:	400204a0 	.word	0x400204a0
 8005e58:	400204b8 	.word	0x400204b8

08005e5c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a39      	ldr	r2, [pc, #228]	; (8005f54 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a37      	ldr	r2, [pc, #220]	; (8005f58 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a36      	ldr	r2, [pc, #216]	; (8005f5c <HAL_DMAEx_ChangeMemory+0x100>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a34      	ldr	r2, [pc, #208]	; (8005f60 <HAL_DMAEx_ChangeMemory+0x104>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <HAL_DMAEx_ChangeMemory+0x108>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a31      	ldr	r2, [pc, #196]	; (8005f68 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <HAL_DMAEx_ChangeMemory+0x110>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <HAL_DMAEx_ChangeMemory+0x114>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <HAL_DMAEx_ChangeMemory+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <HAL_DMAEx_ChangeMemory+0x11c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2a      	ldr	r2, [pc, #168]	; (8005f7c <HAL_DMAEx_ChangeMemory+0x120>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a28      	ldr	r2, [pc, #160]	; (8005f80 <HAL_DMAEx_ChangeMemory+0x124>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <HAL_DMAEx_ChangeMemory+0x128>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a25      	ldr	r2, [pc, #148]	; (8005f88 <HAL_DMAEx_ChangeMemory+0x12c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <HAL_DMAEx_ChangeMemory+0x130>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMAEx_ChangeMemory+0xae>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <HAL_DMAEx_ChangeMemory+0x134>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_DMAEx_ChangeMemory+0xb2>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <HAL_DMAEx_ChangeMemory+0xb4>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e010      	b.n	8005f46 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	611a      	str	r2, [r3, #16]
 8005f2c:	e00b      	b.n	8005f46 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e003      	b.n	8005f46 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40020010 	.word	0x40020010
 8005f58:	40020028 	.word	0x40020028
 8005f5c:	40020040 	.word	0x40020040
 8005f60:	40020058 	.word	0x40020058
 8005f64:	40020070 	.word	0x40020070
 8005f68:	40020088 	.word	0x40020088
 8005f6c:	400200a0 	.word	0x400200a0
 8005f70:	400200b8 	.word	0x400200b8
 8005f74:	40020410 	.word	0x40020410
 8005f78:	40020428 	.word	0x40020428
 8005f7c:	40020440 	.word	0x40020440
 8005f80:	40020458 	.word	0x40020458
 8005f84:	40020470 	.word	0x40020470
 8005f88:	40020488 	.word	0x40020488
 8005f8c:	400204a0 	.word	0x400204a0
 8005f90:	400204b8 	.word	0x400204b8

08005f94 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a46      	ldr	r2, [pc, #280]	; (80060c0 <DMA_MultiBufferSetConfig+0x12c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d04a      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a44      	ldr	r2, [pc, #272]	; (80060c4 <DMA_MultiBufferSetConfig+0x130>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d045      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a43      	ldr	r2, [pc, #268]	; (80060c8 <DMA_MultiBufferSetConfig+0x134>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d040      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a41      	ldr	r2, [pc, #260]	; (80060cc <DMA_MultiBufferSetConfig+0x138>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d03b      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a40      	ldr	r2, [pc, #256]	; (80060d0 <DMA_MultiBufferSetConfig+0x13c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d036      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a3e      	ldr	r2, [pc, #248]	; (80060d4 <DMA_MultiBufferSetConfig+0x140>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d031      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <DMA_MultiBufferSetConfig+0x144>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d02c      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a3b      	ldr	r2, [pc, #236]	; (80060dc <DMA_MultiBufferSetConfig+0x148>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d027      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a3a      	ldr	r2, [pc, #232]	; (80060e0 <DMA_MultiBufferSetConfig+0x14c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d022      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a38      	ldr	r2, [pc, #224]	; (80060e4 <DMA_MultiBufferSetConfig+0x150>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01d      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a37      	ldr	r2, [pc, #220]	; (80060e8 <DMA_MultiBufferSetConfig+0x154>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d018      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a35      	ldr	r2, [pc, #212]	; (80060ec <DMA_MultiBufferSetConfig+0x158>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a34      	ldr	r2, [pc, #208]	; (80060f0 <DMA_MultiBufferSetConfig+0x15c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00e      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a32      	ldr	r2, [pc, #200]	; (80060f4 <DMA_MultiBufferSetConfig+0x160>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d009      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a31      	ldr	r2, [pc, #196]	; (80060f8 <DMA_MultiBufferSetConfig+0x164>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <DMA_MultiBufferSetConfig+0xae>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2f      	ldr	r2, [pc, #188]	; (80060fc <DMA_MultiBufferSetConfig+0x168>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <DMA_MultiBufferSetConfig+0xb2>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <DMA_MultiBufferSetConfig+0xb4>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d019      	beq.n	8006080 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d108      	bne.n	800606e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800606c:	e021      	b.n	80060b2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
}
 800607e:	e018      	b.n	80060b2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d108      	bne.n	80060a2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	60da      	str	r2, [r3, #12]
}
 80060a0:	e007      	b.n	80060b2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	60da      	str	r2, [r3, #12]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8

08006100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	; 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800610e:	4b89      	ldr	r3, [pc, #548]	; (8006334 <HAL_GPIO_Init+0x234>)
 8006110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006112:	e194      	b.n	800643e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	2101      	movs	r1, #1
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	4013      	ands	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8186 	beq.w	8006438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d00b      	beq.n	800614c <HAL_GPIO_Init+0x4c>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d007      	beq.n	800614c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006140:	2b11      	cmp	r3, #17
 8006142:	d003      	beq.n	800614c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b12      	cmp	r3, #18
 800614a:	d130      	bne.n	80061ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	2203      	movs	r2, #3
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4313      	orrs	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006182:	2201      	movs	r2, #1
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4013      	ands	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 0201 	and.w	r2, r3, #1
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	2203      	movs	r2, #3
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4013      	ands	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d003      	beq.n	80061ee <HAL_GPIO_Init+0xee>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b12      	cmp	r3, #18
 80061ec:	d123      	bne.n	8006236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	08da      	lsrs	r2, r3, #3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3208      	adds	r2, #8
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	220f      	movs	r2, #15
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	08da      	lsrs	r2, r3, #3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3208      	adds	r2, #8
 8006230:	69b9      	ldr	r1, [r7, #24]
 8006232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	2203      	movs	r2, #3
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4013      	ands	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f003 0203 	and.w	r2, r3, #3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4313      	orrs	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80e0 	beq.w	8006438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006278:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <HAL_GPIO_Init+0x238>)
 800627a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800627e:	4a2e      	ldr	r2, [pc, #184]	; (8006338 <HAL_GPIO_Init+0x238>)
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006288:	4b2b      	ldr	r3, [pc, #172]	; (8006338 <HAL_GPIO_Init+0x238>)
 800628a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006296:	4a29      	ldr	r2, [pc, #164]	; (800633c <HAL_GPIO_Init+0x23c>)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	3302      	adds	r3, #2
 800629e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	220f      	movs	r2, #15
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a20      	ldr	r2, [pc, #128]	; (8006340 <HAL_GPIO_Init+0x240>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d052      	beq.n	8006368 <HAL_GPIO_Init+0x268>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_GPIO_Init+0x244>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d031      	beq.n	800632e <HAL_GPIO_Init+0x22e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <HAL_GPIO_Init+0x248>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02b      	beq.n	800632a <HAL_GPIO_Init+0x22a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a1d      	ldr	r2, [pc, #116]	; (800634c <HAL_GPIO_Init+0x24c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d025      	beq.n	8006326 <HAL_GPIO_Init+0x226>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_GPIO_Init+0x250>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01f      	beq.n	8006322 <HAL_GPIO_Init+0x222>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_GPIO_Init+0x254>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d019      	beq.n	800631e <HAL_GPIO_Init+0x21e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <HAL_GPIO_Init+0x258>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_GPIO_Init+0x21a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a19      	ldr	r2, [pc, #100]	; (800635c <HAL_GPIO_Init+0x25c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00d      	beq.n	8006316 <HAL_GPIO_Init+0x216>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_GPIO_Init+0x260>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <HAL_GPIO_Init+0x212>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a17      	ldr	r2, [pc, #92]	; (8006364 <HAL_GPIO_Init+0x264>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d101      	bne.n	800630e <HAL_GPIO_Init+0x20e>
 800630a:	2309      	movs	r3, #9
 800630c:	e02d      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800630e:	230a      	movs	r3, #10
 8006310:	e02b      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006312:	2308      	movs	r3, #8
 8006314:	e029      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006316:	2307      	movs	r3, #7
 8006318:	e027      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800631a:	2306      	movs	r3, #6
 800631c:	e025      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800631e:	2305      	movs	r3, #5
 8006320:	e023      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006322:	2304      	movs	r3, #4
 8006324:	e021      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006326:	2303      	movs	r3, #3
 8006328:	e01f      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800632a:	2302      	movs	r3, #2
 800632c:	e01d      	b.n	800636a <HAL_GPIO_Init+0x26a>
 800632e:	2301      	movs	r3, #1
 8006330:	e01b      	b.n	800636a <HAL_GPIO_Init+0x26a>
 8006332:	bf00      	nop
 8006334:	58000080 	.word	0x58000080
 8006338:	58024400 	.word	0x58024400
 800633c:	58000400 	.word	0x58000400
 8006340:	58020000 	.word	0x58020000
 8006344:	58020400 	.word	0x58020400
 8006348:	58020800 	.word	0x58020800
 800634c:	58020c00 	.word	0x58020c00
 8006350:	58021000 	.word	0x58021000
 8006354:	58021400 	.word	0x58021400
 8006358:	58021800 	.word	0x58021800
 800635c:	58021c00 	.word	0x58021c00
 8006360:	58022000 	.word	0x58022000
 8006364:	58022400 	.word	0x58022400
 8006368:	2300      	movs	r3, #0
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	f002 0203 	and.w	r2, r2, #3
 8006370:	0092      	lsls	r2, r2, #2
 8006372:	4093      	lsls	r3, r2
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800637a:	4938      	ldr	r1, [pc, #224]	; (800645c <HAL_GPIO_Init+0x35c>)
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	089b      	lsrs	r3, r3, #2
 8006380:	3302      	adds	r3, #2
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	43db      	mvns	r3, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	43db      	mvns	r3, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4013      	ands	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800640a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	43db      	mvns	r3, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	4013      	ands	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	fa22 f303 	lsr.w	r3, r2, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f ae63 	bne.w	8006114 <HAL_GPIO_Init+0x14>
  }
}
 800644e:	bf00      	nop
 8006450:	3724      	adds	r7, #36	; 0x24
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	58000400 	.word	0x58000400

08006460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
 800646c:	4613      	mov	r3, r2
 800646e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006470:	787b      	ldrb	r3, [r7, #1]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006476:	887a      	ldrh	r2, [r7, #2]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800647c:	e003      	b.n	8006486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	041a      	lsls	r2, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	619a      	str	r2, [r3, #24]
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	887b      	ldrh	r3, [r7, #2]
 80064a4:	401a      	ands	r2, r3
 80064a6:	887b      	ldrh	r3, [r7, #2]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d104      	bne.n	80064b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064ac:	887b      	ldrh	r3, [r7, #2]
 80064ae:	041a      	lsls	r2, r3, #16
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80064b4:	e002      	b.n	80064bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80064b6:	887a      	ldrh	r2, [r7, #2]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e07f      	b.n	80065da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fa fb92 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2224      	movs	r2, #36	; 0x24
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d107      	bne.n	8006542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	e006      	b.n	8006550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800654e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d104      	bne.n	8006562 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6859      	ldr	r1, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <HAL_I2C_Init+0x11c>)
 800656e:	430b      	orrs	r3, r1
 8006570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	ea42 0103 	orr.w	r1, r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	021a      	lsls	r2, r3, #8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69d9      	ldr	r1, [r3, #28]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	02008000 	.word	0x02008000

080065e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	817b      	strh	r3, [r7, #10]
 80065fa:	460b      	mov	r3, r1
 80065fc:	813b      	strh	r3, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b20      	cmp	r3, #32
 800660c:	f040 80fd 	bne.w	800680a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_I2C_Mem_Read+0x34>
 8006616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0f1      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2C_Mem_Read+0x4e>
 8006632:	2302      	movs	r3, #2
 8006634:	e0ea      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800663e:	f7fb fde7 	bl	8002210 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2319      	movs	r3, #25
 800664a:	2201      	movs	r2, #1
 800664c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f95b 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0d5      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2222      	movs	r2, #34	; 0x22
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2240      	movs	r2, #64	; 0x40
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006688:	88f8      	ldrh	r0, [r7, #6]
 800668a:	893a      	ldrh	r2, [r7, #8]
 800668c:	8979      	ldrh	r1, [r7, #10]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4603      	mov	r3, r0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f8bf 	bl	800681c <I2C_RequestMemoryRead>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0ad      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2bff      	cmp	r3, #255	; 0xff
 80066b8:	d90e      	bls.n	80066d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	8979      	ldrh	r1, [r7, #10]
 80066c8:	4b52      	ldr	r3, [pc, #328]	; (8006814 <HAL_I2C_Mem_Read+0x22c>)
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fa3d 	bl	8006b50 <I2C_TransferConfig>
 80066d6:	e00f      	b.n	80066f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	8979      	ldrh	r1, [r7, #10]
 80066ea:	4b4a      	ldr	r3, [pc, #296]	; (8006814 <HAL_I2C_Mem_Read+0x22c>)
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fa2c 	bl	8006b50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	2200      	movs	r2, #0
 8006700:	2104      	movs	r1, #4
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f902 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e07c      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d034      	beq.n	80067b8 <HAL_I2C_Mem_Read+0x1d0>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d130      	bne.n	80067b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	2200      	movs	r2, #0
 800675e:	2180      	movs	r1, #128	; 0x80
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f8d3 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e04d      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	d90e      	bls.n	8006798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	b2da      	uxtb	r2, r3
 8006786:	8979      	ldrh	r1, [r7, #10]
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f9dd 	bl	8006b50 <I2C_TransferConfig>
 8006796:	e00f      	b.n	80067b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	8979      	ldrh	r1, [r7, #10]
 80067aa:	2300      	movs	r3, #0
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f9cc 	bl	8006b50 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d19a      	bne.n	80066f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f920 	bl	8006a0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e01a      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2220      	movs	r2, #32
 80067dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6859      	ldr	r1, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_I2C_Mem_Read+0x230>)
 80067ea:	400b      	ands	r3, r1
 80067ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	80002400 	.word	0x80002400
 8006818:	fe00e800 	.word	0xfe00e800

0800681c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	460b      	mov	r3, r1
 8006830:	813b      	strh	r3, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	8979      	ldrh	r1, [r7, #10]
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <I2C_RequestMemoryRead+0xa4>)
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f984 	bl	8006b50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	69b9      	ldr	r1, [r7, #24]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f89d 	bl	800698c <I2C_WaitOnTXISFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e02c      	b.n	80068b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d105      	bne.n	800686e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006862:	893b      	ldrh	r3, [r7, #8]
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
 800686c:	e015      	b.n	800689a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800686e:	893b      	ldrh	r3, [r7, #8]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	b29b      	uxth	r3, r3
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	69b9      	ldr	r1, [r7, #24]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f883 	bl	800698c <I2C_WaitOnTXISFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e012      	b.n	80068b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006890:	893b      	ldrh	r3, [r7, #8]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2200      	movs	r2, #0
 80068a2:	2140      	movs	r1, #64	; 0x40
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f831 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	80002000 	.word	0x80002000

080068c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d103      	bne.n	80068e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d007      	beq.n	8006900 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	619a      	str	r2, [r3, #24]
  }
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800691c:	e022      	b.n	8006964 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d01e      	beq.n	8006964 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fb fc73 	bl	8002210 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d113      	bne.n	8006964 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	f043 0220 	orr.w	r2, r3, #32
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e00f      	b.n	8006984 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	429a      	cmp	r2, r3
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	429a      	cmp	r2, r3
 8006980:	d0cd      	beq.n	800691e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006998:	e02c      	b.n	80069f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f870 	bl	8006a84 <I2C_IsAcknowledgeFailed>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e02a      	b.n	8006a04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d01e      	beq.n	80069f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b6:	f7fb fc2b 	bl	8002210 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d113      	bne.n	80069f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	f043 0220 	orr.w	r2, r3, #32
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e007      	b.n	8006a04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d1cb      	bne.n	800699a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a18:	e028      	b.n	8006a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f830 	bl	8006a84 <I2C_IsAcknowledgeFailed>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e026      	b.n	8006a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a2e:	f7fb fbef 	bl	8002210 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d302      	bcc.n	8006a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d113      	bne.n	8006a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e007      	b.n	8006a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d1cf      	bne.n	8006a1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d151      	bne.n	8006b42 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a9e:	e022      	b.n	8006ae6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d01e      	beq.n	8006ae6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa8:	f7fb fbb2 	bl	8002210 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d302      	bcc.n	8006abe <I2C_IsAcknowledgeFailed+0x3a>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d113      	bne.n	8006ae6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e02e      	b.n	8006b44 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d1d5      	bne.n	8006aa0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2210      	movs	r2, #16
 8006afa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2220      	movs	r2, #32
 8006b02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fedd 	bl	80068c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6859      	ldr	r1, [r3, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <I2C_IsAcknowledgeFailed+0xc8>)
 8006b16:	400b      	ands	r3, r1
 8006b18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	fe00e800 	.word	0xfe00e800

08006b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	817b      	strh	r3, [r7, #10]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	0d5b      	lsrs	r3, r3, #21
 8006b6c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <I2C_TransferConfig+0x58>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	43db      	mvns	r3, r3
 8006b76:	ea02 0103 	and.w	r1, r2, r3
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b80:	7a7b      	ldrb	r3, [r7, #9]
 8006b82:	041b      	lsls	r3, r3, #16
 8006b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	431a      	orrs	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	03ff63ff 	.word	0x03ff63ff

08006bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d138      	bne.n	8006c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e032      	b.n	8006c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6819      	ldr	r1, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d139      	bne.n	8006ccc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e033      	b.n	8006cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2224      	movs	r2, #36	; 0x24
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ce4:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <HAL_PWREx_ConfigSupply+0x70>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d00a      	beq.n	8006d06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cf0:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <HAL_PWREx_ConfigSupply+0x70>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d001      	beq.n	8006d02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e01f      	b.n	8006d42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	e01d      	b.n	8006d42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d06:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <HAL_PWREx_ConfigSupply+0x70>)
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f023 0207 	bic.w	r2, r3, #7
 8006d0e:	490f      	ldr	r1, [pc, #60]	; (8006d4c <HAL_PWREx_ConfigSupply+0x70>)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d16:	f7fb fa7b 	bl	8002210 <HAL_GetTick>
 8006d1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d1c:	e009      	b.n	8006d32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d1e:	f7fb fa77 	bl	8002210 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d2c:	d901      	bls.n	8006d32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e007      	b.n	8006d42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <HAL_PWREx_ConfigSupply+0x70>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3e:	d1ee      	bne.n	8006d1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	58024800 	.word	0x58024800

08006d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08c      	sub	sp, #48	; 0x30
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e3ff      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8087 	beq.w	8006e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d70:	4b99      	ldr	r3, [pc, #612]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d7a:	4b97      	ldr	r3, [pc, #604]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d007      	beq.n	8006d96 <HAL_RCC_OscConfig+0x46>
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2b18      	cmp	r3, #24
 8006d8a:	d110      	bne.n	8006dae <HAL_RCC_OscConfig+0x5e>
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d10b      	bne.n	8006dae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d96:	4b90      	ldr	r3, [pc, #576]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d06c      	beq.n	8006e7c <HAL_RCC_OscConfig+0x12c>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d168      	bne.n	8006e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e3d9      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db6:	d106      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x76>
 8006db8:	4b87      	ldr	r3, [pc, #540]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a86      	ldr	r2, [pc, #536]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e02e      	b.n	8006e24 <HAL_RCC_OscConfig+0xd4>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10c      	bne.n	8006de8 <HAL_RCC_OscConfig+0x98>
 8006dce:	4b82      	ldr	r3, [pc, #520]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a81      	ldr	r2, [pc, #516]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	4b7f      	ldr	r3, [pc, #508]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a7e      	ldr	r2, [pc, #504]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	e01d      	b.n	8006e24 <HAL_RCC_OscConfig+0xd4>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006df0:	d10c      	bne.n	8006e0c <HAL_RCC_OscConfig+0xbc>
 8006df2:	4b79      	ldr	r3, [pc, #484]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a78      	ldr	r2, [pc, #480]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	4b76      	ldr	r3, [pc, #472]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a75      	ldr	r2, [pc, #468]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e00b      	b.n	8006e24 <HAL_RCC_OscConfig+0xd4>
 8006e0c:	4b72      	ldr	r3, [pc, #456]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a71      	ldr	r2, [pc, #452]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	4b6f      	ldr	r3, [pc, #444]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a6e      	ldr	r2, [pc, #440]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d013      	beq.n	8006e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fb f9f0 	bl	8002210 <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e34:	f7fb f9ec 	bl	8002210 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b64      	cmp	r3, #100	; 0x64
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e38d      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e46:	4b64      	ldr	r3, [pc, #400]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0xe4>
 8006e52:	e014      	b.n	8006e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7fb f9dc 	bl	8002210 <HAL_GetTick>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e5c:	f7fb f9d8 	bl	8002210 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b64      	cmp	r3, #100	; 0x64
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e379      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e6e:	4b5a      	ldr	r3, [pc, #360]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f0      	bne.n	8006e5c <HAL_RCC_OscConfig+0x10c>
 8006e7a:	e000      	b.n	8006e7e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 80ae 	beq.w	8006fe8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e8c:	4b52      	ldr	r3, [pc, #328]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e96:	4b50      	ldr	r3, [pc, #320]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x162>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	2b18      	cmp	r3, #24
 8006ea6:	d13a      	bne.n	8006f1e <HAL_RCC_OscConfig+0x1ce>
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d135      	bne.n	8006f1e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eb2:	4b49      	ldr	r3, [pc, #292]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_RCC_OscConfig+0x17a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e34b      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eca:	f7fb f9cf 	bl	800226c <HAL_GetREVID>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d817      	bhi.n	8006f08 <HAL_RCC_OscConfig+0x1b8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d108      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x1a2>
 8006ee0:	4b3d      	ldr	r3, [pc, #244]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ee8:	4a3b      	ldr	r2, [pc, #236]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef0:	e07a      	b.n	8006fe8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	031b      	lsls	r3, r3, #12
 8006f00:	4935      	ldr	r1, [pc, #212]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f06:	e06f      	b.n	8006fe8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f08:	4b33      	ldr	r3, [pc, #204]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	4930      	ldr	r1, [pc, #192]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1c:	e064      	b.n	8006fe8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d045      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f26:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f023 0219 	bic.w	r2, r3, #25
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	4929      	ldr	r1, [pc, #164]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fb f96a 	bl	8002210 <HAL_GetTick>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f40:	f7fb f966 	bl	8002210 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e307      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0f0      	beq.n	8006f40 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5e:	f7fb f985 	bl	800226c <HAL_GetREVID>
 8006f62:	4602      	mov	r2, r0
 8006f64:	f241 0303 	movw	r3, #4099	; 0x1003
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d817      	bhi.n	8006f9c <HAL_RCC_OscConfig+0x24c>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d108      	bne.n	8006f86 <HAL_RCC_OscConfig+0x236>
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f7c:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f82:	6053      	str	r3, [r2, #4]
 8006f84:	e030      	b.n	8006fe8 <HAL_RCC_OscConfig+0x298>
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	031b      	lsls	r3, r3, #12
 8006f94:	4910      	ldr	r1, [pc, #64]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
 8006f9a:	e025      	b.n	8006fe8 <HAL_RCC_OscConfig+0x298>
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	490b      	ldr	r1, [pc, #44]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	604b      	str	r3, [r1, #4]
 8006fb0:	e01a      	b.n	8006fe8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <HAL_RCC_OscConfig+0x288>)
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbe:	f7fb f927 	bl	8002210 <HAL_GetTick>
 8006fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fc4:	e00a      	b.n	8006fdc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fc6:	f7fb f923 	bl	8002210 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d903      	bls.n	8006fdc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e2c4      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
 8006fd8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fdc:	4ba4      	ldr	r3, [pc, #656]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ee      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0310 	and.w	r3, r3, #16
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80a9 	beq.w	8007148 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ff6:	4b9e      	ldr	r3, [pc, #632]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ffe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007000:	4b9b      	ldr	r3, [pc, #620]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d007      	beq.n	800701c <HAL_RCC_OscConfig+0x2cc>
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b18      	cmp	r3, #24
 8007010:	d13a      	bne.n	8007088 <HAL_RCC_OscConfig+0x338>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d135      	bne.n	8007088 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800701c:	4b94      	ldr	r3, [pc, #592]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <HAL_RCC_OscConfig+0x2e4>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d001      	beq.n	8007034 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e296      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007034:	f7fb f91a 	bl	800226c <HAL_GetREVID>
 8007038:	4602      	mov	r2, r0
 800703a:	f241 0303 	movw	r3, #4099	; 0x1003
 800703e:	429a      	cmp	r2, r3
 8007040:	d817      	bhi.n	8007072 <HAL_RCC_OscConfig+0x322>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	2b20      	cmp	r3, #32
 8007048:	d108      	bne.n	800705c <HAL_RCC_OscConfig+0x30c>
 800704a:	4b89      	ldr	r3, [pc, #548]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007052:	4a87      	ldr	r2, [pc, #540]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007058:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800705a:	e075      	b.n	8007148 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800705c:	4b84      	ldr	r3, [pc, #528]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	069b      	lsls	r3, r3, #26
 800706a:	4981      	ldr	r1, [pc, #516]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800706c:	4313      	orrs	r3, r2
 800706e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007070:	e06a      	b.n	8007148 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007072:	4b7f      	ldr	r3, [pc, #508]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	497b      	ldr	r1, [pc, #492]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007082:	4313      	orrs	r3, r2
 8007084:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007086:	e05f      	b.n	8007148 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d042      	beq.n	8007116 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007090:	4b77      	ldr	r3, [pc, #476]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a76      	ldr	r2, [pc, #472]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709c:	f7fb f8b8 	bl	8002210 <HAL_GetTick>
 80070a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80070a4:	f7fb f8b4 	bl	8002210 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e255      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070b6:	4b6e      	ldr	r3, [pc, #440]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0f0      	beq.n	80070a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070c2:	f7fb f8d3 	bl	800226c <HAL_GetREVID>
 80070c6:	4602      	mov	r2, r0
 80070c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d817      	bhi.n	8007100 <HAL_RCC_OscConfig+0x3b0>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d108      	bne.n	80070ea <HAL_RCC_OscConfig+0x39a>
 80070d8:	4b65      	ldr	r3, [pc, #404]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070e0:	4a63      	ldr	r2, [pc, #396]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80070e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e6:	6053      	str	r3, [r2, #4]
 80070e8:	e02e      	b.n	8007148 <HAL_RCC_OscConfig+0x3f8>
 80070ea:	4b61      	ldr	r3, [pc, #388]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	069b      	lsls	r3, r3, #26
 80070f8:	495d      	ldr	r1, [pc, #372]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	604b      	str	r3, [r1, #4]
 80070fe:	e023      	b.n	8007148 <HAL_RCC_OscConfig+0x3f8>
 8007100:	4b5b      	ldr	r3, [pc, #364]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	4958      	ldr	r1, [pc, #352]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007110:	4313      	orrs	r3, r2
 8007112:	60cb      	str	r3, [r1, #12]
 8007114:	e018      	b.n	8007148 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007116:	4b56      	ldr	r3, [pc, #344]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a55      	ldr	r2, [pc, #340]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800711c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007122:	f7fb f875 	bl	8002210 <HAL_GetTick>
 8007126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800712a:	f7fb f871 	bl	8002210 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e212      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800713c:	4b4c      	ldr	r3, [pc, #304]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f0      	bne.n	800712a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d036      	beq.n	80071c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d019      	beq.n	8007190 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715c:	4b44      	ldr	r3, [pc, #272]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800715e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007160:	4a43      	ldr	r2, [pc, #268]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007168:	f7fb f852 	bl	8002210 <HAL_GetTick>
 800716c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007170:	f7fb f84e 	bl	8002210 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e1ef      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007182:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x420>
 800718e:	e018      	b.n	80071c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007190:	4b37      	ldr	r3, [pc, #220]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007194:	4a36      	ldr	r2, [pc, #216]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719c:	f7fb f838 	bl	8002210 <HAL_GetTick>
 80071a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071a4:	f7fb f834 	bl	8002210 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e1d5      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071b6:	4b2e      	ldr	r3, [pc, #184]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80071b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f0      	bne.n	80071a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d036      	beq.n	800723c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d019      	beq.n	800720a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071d6:	4b26      	ldr	r3, [pc, #152]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a25      	ldr	r2, [pc, #148]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80071dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071e2:	f7fb f815 	bl	8002210 <HAL_GetTick>
 80071e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071ea:	f7fb f811 	bl	8002210 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e1b2      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x49a>
 8007208:	e018      	b.n	800723c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800720a:	4b19      	ldr	r3, [pc, #100]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007214:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007216:	f7fa fffb 	bl	8002210 <HAL_GetTick>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800721c:	e008      	b.n	8007230 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800721e:	f7fa fff7 	bl	8002210 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e198      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <HAL_RCC_OscConfig+0x520>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f0      	bne.n	800721e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8085 	beq.w	8007354 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <HAL_RCC_OscConfig+0x524>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a09      	ldr	r2, [pc, #36]	; (8007274 <HAL_RCC_OscConfig+0x524>)
 8007250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007254:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007256:	f7fa ffdb 	bl	8002210 <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800725c:	e00c      	b.n	8007278 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800725e:	f7fa ffd7 	bl	8002210 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b64      	cmp	r3, #100	; 0x64
 800726a:	d905      	bls.n	8007278 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e178      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
 8007270:	58024400 	.word	0x58024400
 8007274:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007278:	4b96      	ldr	r3, [pc, #600]	; (80074d4 <HAL_RCC_OscConfig+0x784>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ec      	beq.n	800725e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d106      	bne.n	800729a <HAL_RCC_OscConfig+0x54a>
 800728c:	4b92      	ldr	r3, [pc, #584]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800728e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007290:	4a91      	ldr	r2, [pc, #580]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	6713      	str	r3, [r2, #112]	; 0x70
 8007298:	e02d      	b.n	80072f6 <HAL_RCC_OscConfig+0x5a6>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10c      	bne.n	80072bc <HAL_RCC_OscConfig+0x56c>
 80072a2:	4b8d      	ldr	r3, [pc, #564]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4a8c      	ldr	r2, [pc, #560]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	6713      	str	r3, [r2, #112]	; 0x70
 80072ae:	4b8a      	ldr	r3, [pc, #552]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	4a89      	ldr	r2, [pc, #548]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072b4:	f023 0304 	bic.w	r3, r3, #4
 80072b8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ba:	e01c      	b.n	80072f6 <HAL_RCC_OscConfig+0x5a6>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	d10c      	bne.n	80072de <HAL_RCC_OscConfig+0x58e>
 80072c4:	4b84      	ldr	r3, [pc, #528]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	4a83      	ldr	r2, [pc, #524]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072ca:	f043 0304 	orr.w	r3, r3, #4
 80072ce:	6713      	str	r3, [r2, #112]	; 0x70
 80072d0:	4b81      	ldr	r3, [pc, #516]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	4a80      	ldr	r2, [pc, #512]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6713      	str	r3, [r2, #112]	; 0x70
 80072dc:	e00b      	b.n	80072f6 <HAL_RCC_OscConfig+0x5a6>
 80072de:	4b7e      	ldr	r3, [pc, #504]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	4a7d      	ldr	r2, [pc, #500]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ea:	4b7b      	ldr	r3, [pc, #492]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	4a7a      	ldr	r2, [pc, #488]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80072f0:	f023 0304 	bic.w	r3, r3, #4
 80072f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d015      	beq.n	800732a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fe:	f7fa ff87 	bl	8002210 <HAL_GetTick>
 8007302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007304:	e00a      	b.n	800731c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007306:	f7fa ff83 	bl	8002210 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f241 3288 	movw	r2, #5000	; 0x1388
 8007314:	4293      	cmp	r3, r2
 8007316:	d901      	bls.n	800731c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e122      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800731c:	4b6e      	ldr	r3, [pc, #440]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0ee      	beq.n	8007306 <HAL_RCC_OscConfig+0x5b6>
 8007328:	e014      	b.n	8007354 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732a:	f7fa ff71 	bl	8002210 <HAL_GetTick>
 800732e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007330:	e00a      	b.n	8007348 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007332:	f7fa ff6d 	bl	8002210 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007340:	4293      	cmp	r3, r2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e10c      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007348:	4b63      	ldr	r3, [pc, #396]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ee      	bne.n	8007332 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8101 	beq.w	8007560 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800735e:	4b5e      	ldr	r3, [pc, #376]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007366:	2b18      	cmp	r3, #24
 8007368:	f000 80bc 	beq.w	80074e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b02      	cmp	r3, #2
 8007372:	f040 8095 	bne.w	80074a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007376:	4b58      	ldr	r3, [pc, #352]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a57      	ldr	r2, [pc, #348]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800737c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007382:	f7fa ff45 	bl	8002210 <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800738a:	f7fa ff41 	bl	8002210 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e0e2      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800739c:	4b4e      	ldr	r3, [pc, #312]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f0      	bne.n	800738a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a8:	4b4b      	ldr	r3, [pc, #300]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80073aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ac:	4b4b      	ldr	r3, [pc, #300]	; (80074dc <HAL_RCC_OscConfig+0x78c>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073b8:	0112      	lsls	r2, r2, #4
 80073ba:	430a      	orrs	r2, r1
 80073bc:	4946      	ldr	r1, [pc, #280]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	628b      	str	r3, [r1, #40]	; 0x28
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	3b01      	subs	r3, #1
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	3b01      	subs	r3, #1
 80073de:	041b      	lsls	r3, r3, #16
 80073e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	3b01      	subs	r3, #1
 80073ec:	061b      	lsls	r3, r3, #24
 80073ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073f2:	4939      	ldr	r1, [pc, #228]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80073f8:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a36      	ldr	r2, [pc, #216]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007404:	4b34      	ldr	r3, [pc, #208]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007408:	4b35      	ldr	r3, [pc, #212]	; (80074e0 <HAL_RCC_OscConfig+0x790>)
 800740a:	4013      	ands	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007410:	00d2      	lsls	r2, r2, #3
 8007412:	4931      	ldr	r1, [pc, #196]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007414:	4313      	orrs	r3, r2
 8007416:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007418:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	f023 020c 	bic.w	r2, r3, #12
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	492c      	ldr	r1, [pc, #176]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007426:	4313      	orrs	r3, r2
 8007428:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	f023 0202 	bic.w	r2, r3, #2
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	4928      	ldr	r1, [pc, #160]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007438:	4313      	orrs	r3, r2
 800743a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800743c:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4a25      	ldr	r2, [pc, #148]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007448:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800744e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007454:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	4a1f      	ldr	r2, [pc, #124]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800745a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800745e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007460:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800746c:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007478:	f7fa feca 	bl	8002210 <HAL_GetTick>
 800747c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007480:	f7fa fec6 	bl	8002210 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e067      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007492:	4b11      	ldr	r3, [pc, #68]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0f0      	beq.n	8007480 <HAL_RCC_OscConfig+0x730>
 800749e:	e05f      	b.n	8007560 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a0:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80074a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fa feb0 	bl	8002210 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fa feac 	bl	8002210 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e04d      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074c6:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <HAL_RCC_OscConfig+0x788>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x764>
 80074d2:	e045      	b.n	8007560 <HAL_RCC_OscConfig+0x810>
 80074d4:	58024800 	.word	0x58024800
 80074d8:	58024400 	.word	0x58024400
 80074dc:	fffffc0c 	.word	0xfffffc0c
 80074e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074e4:	4b21      	ldr	r3, [pc, #132]	; (800756c <HAL_RCC_OscConfig+0x81c>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_RCC_OscConfig+0x81c>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d031      	beq.n	800755c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f003 0203 	and.w	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d12a      	bne.n	800755c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	091b      	lsrs	r3, r3, #4
 800750a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	429a      	cmp	r2, r3
 8007514:	d122      	bne.n	800755c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007522:	429a      	cmp	r2, r3
 8007524:	d11a      	bne.n	800755c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	0a5b      	lsrs	r3, r3, #9
 800752a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007534:	429a      	cmp	r2, r3
 8007536:	d111      	bne.n	800755c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	0c1b      	lsrs	r3, r3, #16
 800753c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007546:	429a      	cmp	r2, r3
 8007548:	d108      	bne.n	800755c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	0e1b      	lsrs	r3, r3, #24
 800754e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007558:	429a      	cmp	r2, r3
 800755a:	d001      	beq.n	8007560 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3730      	adds	r7, #48	; 0x30
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	58024400 	.word	0x58024400

08007570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e19c      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007584:	4b8a      	ldr	r3, [pc, #552]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d910      	bls.n	80075b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007592:	4b87      	ldr	r3, [pc, #540]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f023 020f 	bic.w	r2, r3, #15
 800759a:	4985      	ldr	r1, [pc, #532]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	4313      	orrs	r3, r2
 80075a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075a2:	4b83      	ldr	r3, [pc, #524]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e184      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d010      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	4b7b      	ldr	r3, [pc, #492]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d908      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075d0:	4b78      	ldr	r3, [pc, #480]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	4975      	ldr	r1, [pc, #468]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695a      	ldr	r2, [r3, #20]
 80075f2:	4b70      	ldr	r3, [pc, #448]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d908      	bls.n	8007610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075fe:	4b6d      	ldr	r3, [pc, #436]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	496a      	ldr	r1, [pc, #424]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800760c:	4313      	orrs	r3, r2
 800760e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	4b64      	ldr	r3, [pc, #400]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007628:	429a      	cmp	r2, r3
 800762a:	d908      	bls.n	800763e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800762c:	4b61      	ldr	r3, [pc, #388]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	495e      	ldr	r1, [pc, #376]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800763a:	4313      	orrs	r3, r2
 800763c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d010      	beq.n	800766c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69da      	ldr	r2, [r3, #28]
 800764e:	4b59      	ldr	r3, [pc, #356]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007656:	429a      	cmp	r2, r3
 8007658:	d908      	bls.n	800766c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800765a:	4b56      	ldr	r3, [pc, #344]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	4953      	ldr	r1, [pc, #332]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007668:	4313      	orrs	r3, r2
 800766a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d010      	beq.n	800769a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	4b4d      	ldr	r3, [pc, #308]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	429a      	cmp	r2, r3
 8007686:	d908      	bls.n	800769a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007688:	4b4a      	ldr	r3, [pc, #296]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f023 020f 	bic.w	r2, r3, #15
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4947      	ldr	r1, [pc, #284]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007696:	4313      	orrs	r3, r2
 8007698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d055      	beq.n	8007752 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076a6:	4b43      	ldr	r3, [pc, #268]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	4940      	ldr	r1, [pc, #256]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d107      	bne.n	80076d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076c0:	4b3c      	ldr	r3, [pc, #240]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d121      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0f6      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d107      	bne.n	80076e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d8:	4b36      	ldr	r3, [pc, #216]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d115      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e0ea      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d107      	bne.n	8007700 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076f0:	4b30      	ldr	r3, [pc, #192]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0de      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007700:	4b2c      	ldr	r3, [pc, #176]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0d6      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f023 0207 	bic.w	r2, r3, #7
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4925      	ldr	r1, [pc, #148]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800771e:	4313      	orrs	r3, r2
 8007720:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007722:	f7fa fd75 	bl	8002210 <HAL_GetTick>
 8007726:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007728:	e00a      	b.n	8007740 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800772a:	f7fa fd71 	bl	8002210 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	f241 3288 	movw	r2, #5000	; 0x1388
 8007738:	4293      	cmp	r3, r2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e0be      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007740:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	429a      	cmp	r2, r3
 8007750:	d1eb      	bne.n	800772a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	429a      	cmp	r2, r3
 800776c:	d208      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800776e:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f023 020f 	bic.w	r2, r3, #15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	490e      	ldr	r1, [pc, #56]	; (80077b4 <HAL_RCC_ClockConfig+0x244>)
 800777c:	4313      	orrs	r3, r2
 800777e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d214      	bcs.n	80077b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f023 020f 	bic.w	r2, r3, #15
 8007796:	4906      	ldr	r1, [pc, #24]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	4313      	orrs	r3, r2
 800779c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800779e:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <HAL_RCC_ClockConfig+0x240>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d005      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e086      	b.n	80078be <HAL_RCC_ClockConfig+0x34e>
 80077b0:	52002000 	.word	0x52002000
 80077b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	4b3f      	ldr	r3, [pc, #252]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d208      	bcs.n	80077e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077d4:	4b3c      	ldr	r3, [pc, #240]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	4939      	ldr	r1, [pc, #228]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d010      	beq.n	8007814 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	4b34      	ldr	r3, [pc, #208]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077fe:	429a      	cmp	r2, r3
 8007800:	d208      	bcs.n	8007814 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007802:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	492e      	ldr	r1, [pc, #184]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007810:	4313      	orrs	r3, r2
 8007812:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b00      	cmp	r3, #0
 800781e:	d010      	beq.n	8007842 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	4b28      	ldr	r3, [pc, #160]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800782c:	429a      	cmp	r2, r3
 800782e:	d208      	bcs.n	8007842 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007830:	4b25      	ldr	r3, [pc, #148]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	4922      	ldr	r1, [pc, #136]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 800783e:	4313      	orrs	r3, r2
 8007840:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800785a:	429a      	cmp	r2, r3
 800785c:	d208      	bcs.n	8007870 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	4917      	ldr	r1, [pc, #92]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 800786c:	4313      	orrs	r3, r2
 800786e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007870:	f000 f89e 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007874:	4601      	mov	r1, r0
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	4a12      	ldr	r2, [pc, #72]	; (80078cc <HAL_RCC_ClockConfig+0x35c>)
 8007882:	5cd3      	ldrb	r3, [r2, r3]
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	fa21 f303 	lsr.w	r3, r1, r3
 800788c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <HAL_RCC_ClockConfig+0x358>)
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	4a0d      	ldr	r2, [pc, #52]	; (80078cc <HAL_RCC_ClockConfig+0x35c>)
 8007898:	5cd3      	ldrb	r3, [r2, r3]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
 80078a4:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <HAL_RCC_ClockConfig+0x360>)
 80078a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078a8:	4a0a      	ldr	r2, [pc, #40]	; (80078d4 <HAL_RCC_ClockConfig+0x364>)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <HAL_RCC_ClockConfig+0x368>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fa fc62 	bl	800217c <HAL_InitTick>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	58024400 	.word	0x58024400
 80078cc:	0800c7cc 	.word	0x0800c7cc
 80078d0:	2400000c 	.word	0x2400000c
 80078d4:	24000008 	.word	0x24000008
 80078d8:	24000068 	.word	0x24000068

080078dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08c      	sub	sp, #48	; 0x30
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d12a      	bne.n	8007944 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80078ee:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 80078f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078f4:	4a2b      	ldr	r2, [pc, #172]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078fe:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 8007900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800790c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007912:	2302      	movs	r3, #2
 8007914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007916:	2303      	movs	r3, #3
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800791e:	2300      	movs	r3, #0
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007922:	f107 031c 	add.w	r3, r7, #28
 8007926:	4619      	mov	r1, r3
 8007928:	481f      	ldr	r0, [pc, #124]	; (80079a8 <HAL_RCC_MCOConfig+0xcc>)
 800792a:	f7fe fbe9 	bl	8006100 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	430b      	orrs	r3, r1
 800793c:	4919      	ldr	r1, [pc, #100]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007942:	e02a      	b.n	800799a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007944:	4b17      	ldr	r3, [pc, #92]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 8007946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800794a:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 800794c:	f043 0304 	orr.w	r3, r3, #4
 8007950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007954:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 8007956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007968:	2302      	movs	r3, #2
 800796a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800796c:	2303      	movs	r3, #3
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007970:	2300      	movs	r3, #0
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007974:	2300      	movs	r3, #0
 8007976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007978:	f107 031c 	add.w	r3, r7, #28
 800797c:	4619      	mov	r1, r3
 800797e:	480b      	ldr	r0, [pc, #44]	; (80079ac <HAL_RCC_MCOConfig+0xd0>)
 8007980:	f7fe fbbe 	bl	8006100 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007984:	4b07      	ldr	r3, [pc, #28]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	01d9      	lsls	r1, r3, #7
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	430b      	orrs	r3, r1
 8007994:	4903      	ldr	r1, [pc, #12]	; (80079a4 <HAL_RCC_MCOConfig+0xc8>)
 8007996:	4313      	orrs	r3, r2
 8007998:	610b      	str	r3, [r1, #16]
}
 800799a:	bf00      	nop
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	58024400 	.word	0x58024400
 80079a8:	58020000 	.word	0x58020000
 80079ac:	58020800 	.word	0x58020800

080079b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b089      	sub	sp, #36	; 0x24
 80079b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b6:	4baf      	ldr	r3, [pc, #700]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079be:	2b18      	cmp	r3, #24
 80079c0:	f200 814e 	bhi.w	8007c60 <HAL_RCC_GetSysClockFreq+0x2b0>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a31 	.word	0x08007a31
 80079d0:	08007c61 	.word	0x08007c61
 80079d4:	08007c61 	.word	0x08007c61
 80079d8:	08007c61 	.word	0x08007c61
 80079dc:	08007c61 	.word	0x08007c61
 80079e0:	08007c61 	.word	0x08007c61
 80079e4:	08007c61 	.word	0x08007c61
 80079e8:	08007c61 	.word	0x08007c61
 80079ec:	08007a57 	.word	0x08007a57
 80079f0:	08007c61 	.word	0x08007c61
 80079f4:	08007c61 	.word	0x08007c61
 80079f8:	08007c61 	.word	0x08007c61
 80079fc:	08007c61 	.word	0x08007c61
 8007a00:	08007c61 	.word	0x08007c61
 8007a04:	08007c61 	.word	0x08007c61
 8007a08:	08007c61 	.word	0x08007c61
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	08007c61 	.word	0x08007c61
 8007a14:	08007c61 	.word	0x08007c61
 8007a18:	08007c61 	.word	0x08007c61
 8007a1c:	08007c61 	.word	0x08007c61
 8007a20:	08007c61 	.word	0x08007c61
 8007a24:	08007c61 	.word	0x08007c61
 8007a28:	08007c61 	.word	0x08007c61
 8007a2c:	08007a63 	.word	0x08007a63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a30:	4b90      	ldr	r3, [pc, #576]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a3c:	4b8d      	ldr	r3, [pc, #564]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	08db      	lsrs	r3, r3, #3
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	4a8c      	ldr	r2, [pc, #560]	; (8007c78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a4e:	e10a      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a50:	4b89      	ldr	r3, [pc, #548]	; (8007c78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007a52:	61bb      	str	r3, [r7, #24]
    break;
 8007a54:	e107      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a56:	4b89      	ldr	r3, [pc, #548]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007a58:	61bb      	str	r3, [r7, #24]
    break;
 8007a5a:	e104      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a5c:	4b88      	ldr	r3, [pc, #544]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007a5e:	61bb      	str	r3, [r7, #24]
    break;
 8007a60:	e101      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a62:	4b84      	ldr	r3, [pc, #528]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a6c:	4b81      	ldr	r3, [pc, #516]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	091b      	lsrs	r3, r3, #4
 8007a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a78:	4b7e      	ldr	r3, [pc, #504]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a82:	4b7c      	ldr	r3, [pc, #496]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80da 	beq.w	8007c5a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d05a      	beq.n	8007b62 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d302      	bcc.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x106>
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d078      	beq.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007ab4:	e099      	b.n	8007bea <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab6:	4b6f      	ldr	r3, [pc, #444]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d02d      	beq.n	8007b1e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ac2:	4b6c      	ldr	r3, [pc, #432]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	4a6a      	ldr	r2, [pc, #424]	; (8007c78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aec:	4b61      	ldr	r3, [pc, #388]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b00:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007b1c:	e087      	b.n	8007c2e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b28:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b30:	4b50      	ldr	r3, [pc, #320]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b38:	ee07 3a90 	vmov	s15, r3
 8007b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b44:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b60:	e065      	b.n	8007c2e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2dc>
 8007b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b74:	4b3f      	ldr	r3, [pc, #252]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b84:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b88:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba4:	e043      	b.n	8007c2e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb8:	4b2e      	ldr	r3, [pc, #184]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc0:	ee07 3a90 	vmov	s15, r3
 8007bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bcc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007be8:	e021      	b.n	8007c2e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007c8c <HAL_RCC_GetSysClockFreq+0x2dc>
 8007bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c10:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c2e:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	0a5b      	lsrs	r3, r3, #9
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	3301      	adds	r3, #1
 8007c3a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c52:	ee17 3a90 	vmov	r3, s15
 8007c56:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c58:	e005      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
    break;
 8007c5e:	e002      	b.n	8007c66 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007c62:	61bb      	str	r3, [r7, #24]
    break;
 8007c64:	bf00      	nop
  }

  return sysclockfreq;
 8007c66:	69bb      	ldr	r3, [r7, #24]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3724      	adds	r7, #36	; 0x24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	58024400 	.word	0x58024400
 8007c78:	03d09000 	.word	0x03d09000
 8007c7c:	003d0900 	.word	0x003d0900
 8007c80:	01e84800 	.word	0x01e84800
 8007c84:	46000000 	.word	0x46000000
 8007c88:	4c742400 	.word	0x4c742400
 8007c8c:	4a742400 	.word	0x4a742400
 8007c90:	4bf42400 	.word	0x4bf42400

08007c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c9a:	f7ff fe89 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	4b10      	ldr	r3, [pc, #64]	; (8007ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	0a1b      	lsrs	r3, r3, #8
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	4a0f      	ldr	r2, [pc, #60]	; (8007ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cac:	5cd3      	ldrb	r3, [r2, r3]
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8007cb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cc2:	5cd3      	ldrb	r3, [r2, r3]
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	fa22 f303 	lsr.w	r3, r2, r3
 8007cce:	4a07      	ldr	r2, [pc, #28]	; (8007cec <HAL_RCC_GetHCLKFreq+0x58>)
 8007cd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cd2:	4a07      	ldr	r2, [pc, #28]	; (8007cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <HAL_RCC_GetHCLKFreq+0x58>)
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	0800c7cc 	.word	0x0800c7cc
 8007cec:	2400000c 	.word	0x2400000c
 8007cf0:	24000008 	.word	0x24000008

08007cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cf8:	f7ff ffcc 	bl	8007c94 <HAL_RCC_GetHCLKFreq>
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	091b      	lsrs	r3, r3, #4
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d0a:	5cd3      	ldrb	r3, [r2, r3]
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	0800c7cc 	.word	0x0800c7cc

08007d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d24:	f7ff ffb6 	bl	8007c94 <HAL_RCC_GetHCLKFreq>
 8007d28:	4601      	mov	r1, r0
 8007d2a:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d36:	5cd3      	ldrb	r3, [r2, r3]
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	58024400 	.word	0x58024400
 8007d48:	0800c7cc 	.word	0x0800c7cc

08007d4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d54:	2300      	movs	r3, #0
 8007d56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d58:	2300      	movs	r3, #0
 8007d5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d03d      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d70:	d013      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d76:	d802      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007d7c:	e01f      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d82:	d013      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007d84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d88:	d01c      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007d8a:	e018      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8c:	4baf      	ldr	r3, [pc, #700]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4aae      	ldr	r2, [pc, #696]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d98:	e015      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	2102      	movs	r1, #2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 f96f 	bl	8009084 <RCCEx_PLL2_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007daa:	e00c      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3324      	adds	r3, #36	; 0x24
 8007db0:	2102      	movs	r1, #2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fa18 	bl	80091e8 <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dbc:	e003      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc2:	e000      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d109      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007dcc:	4b9f      	ldr	r3, [pc, #636]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd8:	499c      	ldr	r1, [pc, #624]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8007dde:	e001      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d03d      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d826      	bhi.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007e23 	.word	0x08007e23
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	08007e4d 	.word	0x08007e4d
 8007e10:	08007e4d 	.word	0x08007e4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e14:	4b8d      	ldr	r3, [pc, #564]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	4a8c      	ldr	r2, [pc, #560]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e20:	e015      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3304      	adds	r3, #4
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 f92b 	bl	8009084 <RCCEx_PLL2_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e32:	e00c      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3324      	adds	r3, #36	; 0x24
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 f9d4 	bl	80091e8 <RCCEx_PLL3_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4a:	e000      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e54:	4b7d      	ldr	r3, [pc, #500]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	f023 0207 	bic.w	r2, r3, #7
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	497a      	ldr	r1, [pc, #488]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	650b      	str	r3, [r1, #80]	; 0x50
 8007e66:	e001      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d03e      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	d01c      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007e80:	2b80      	cmp	r3, #128	; 0x80
 8007e82:	d804      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d008      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d00d      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007e8c:	e01e      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e90:	d01f      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e96:	d01e      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e98:	e018      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9a:	4b6c      	ldr	r3, [pc, #432]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	4a6b      	ldr	r2, [pc, #428]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ea6:	e017      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 f8e8 	bl	8009084 <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007eb8:	e00e      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3324      	adds	r3, #36	; 0x24
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 f991 	bl	80091e8 <RCCEx_PLL3_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007eca:	e005      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ede:	4b5b      	ldr	r3, [pc, #364]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	4958      	ldr	r1, [pc, #352]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	650b      	str	r3, [r1, #80]	; 0x50
 8007ef0:	e001      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d044      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f0c:	d01f      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f12:	d805      	bhi.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f1c:	d00e      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007f1e:	e01f      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007f20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f24:	d01f      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f2a:	d01e      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007f2c:	e018      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2e:	4b47      	ldr	r3, [pc, #284]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	4a46      	ldr	r2, [pc, #280]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f3a:	e017      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 f89e 	bl	8009084 <RCCEx_PLL2_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f4c:	e00e      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3324      	adds	r3, #36	; 0x24
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 f947 	bl	80091e8 <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f5e:	e005      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
      break;
 8007f64:	e002      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007f66:	bf00      	nop
 8007f68:	e000      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f72:	4b36      	ldr	r3, [pc, #216]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f76:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f80:	4932      	ldr	r1, [pc, #200]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	658b      	str	r3, [r1, #88]	; 0x58
 8007f86:	e001      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d044      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa2:	d01f      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa8:	d805      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007fae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007fb4:	e01f      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007fb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fba:	d01f      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fc0:	d01e      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007fc2:	e018      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc4:	4b21      	ldr	r3, [pc, #132]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4a20      	ldr	r2, [pc, #128]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fd0:	e017      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 f853 	bl	8009084 <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fe2:	e00e      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3324      	adds	r3, #36	; 0x24
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 f8fc 	bl	80091e8 <RCCEx_PLL3_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ff4:	e005      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffa:	e002      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007ffc:	bf00      	nop
 8007ffe:	e000      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008008:	4b10      	ldr	r3, [pc, #64]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800800a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008016:	490d      	ldr	r1, [pc, #52]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008018:	4313      	orrs	r3, r2
 800801a:	658b      	str	r3, [r1, #88]	; 0x58
 800801c:	e001      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d035      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008032:	2b10      	cmp	r3, #16
 8008034:	d00c      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008036:	2b10      	cmp	r3, #16
 8008038:	d802      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01b      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800803e:	e017      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d00c      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008044:	2b30      	cmp	r3, #48	; 0x30
 8008046:	d018      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008048:	e012      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008050:	4baf      	ldr	r3, [pc, #700]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	4aae      	ldr	r2, [pc, #696]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800805a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800805c:	e00e      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3304      	adds	r3, #4
 8008062:	2102      	movs	r1, #2
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f80d 	bl	8009084 <RCCEx_PLL2_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800806e:	e005      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
      break;
 8008074:	e002      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800807a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008082:	4ba3      	ldr	r3, [pc, #652]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008086:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808e:	49a0      	ldr	r1, [pc, #640]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008090:	4313      	orrs	r3, r2
 8008092:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008094:	e001      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d042      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ae:	d01f      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80080b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b4:	d805      	bhi.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080be:	d00e      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x392>
 80080c0:	e01f      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80080c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080c6:	d01f      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80080c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080cc:	d01e      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80080ce:	e018      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4b8f      	ldr	r3, [pc, #572]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4a8e      	ldr	r2, [pc, #568]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80080d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080dc:	e017      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 ffcd 	bl	8009084 <RCCEx_PLL2_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080ee:	e00e      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3324      	adds	r3, #36	; 0x24
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 f876 	bl	80091e8 <RCCEx_PLL3_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008100:	e005      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	75fb      	strb	r3, [r7, #23]
      break;
 8008106:	e002      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008108:	bf00      	nop
 800810a:	e000      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800810c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d109      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008114:	4b7e      	ldr	r3, [pc, #504]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008118:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008120:	497b      	ldr	r1, [pc, #492]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008122:	4313      	orrs	r3, r2
 8008124:	650b      	str	r3, [r1, #80]	; 0x50
 8008126:	e001      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d042      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008140:	d01b      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008146:	d805      	bhi.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d022      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800814c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008152:	e01b      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008154:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008158:	d01d      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800815a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800815e:	d01c      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008160:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008164:	d01b      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008166:	e011      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3304      	adds	r3, #4
 800816c:	2101      	movs	r1, #1
 800816e:	4618      	mov	r0, r3
 8008170:	f000 ff88 	bl	8009084 <RCCEx_PLL2_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008178:	e012      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3324      	adds	r3, #36	; 0x24
 800817e:	2101      	movs	r1, #1
 8008180:	4618      	mov	r0, r3
 8008182:	f001 f831 	bl	80091e8 <RCCEx_PLL3_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800818a:	e009      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	e006      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008192:	bf00      	nop
 8008194:	e004      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008196:	bf00      	nop
 8008198:	e002      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800819a:	bf00      	nop
 800819c:	e000      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800819e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081a6:	4b5a      	ldr	r3, [pc, #360]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b2:	4957      	ldr	r1, [pc, #348]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	650b      	str	r3, [r1, #80]	; 0x50
 80081b8:	e001      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d044      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d01b      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081da:	d805      	bhi.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d022      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80081e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e4:	d00a      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80081e6:	e01b      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80081e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ec:	d01d      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80081ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081f2:	d01c      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80081f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081f8:	d01b      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80081fa:	e011      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	2101      	movs	r1, #1
 8008202:	4618      	mov	r0, r3
 8008204:	f000 ff3e 	bl	8009084 <RCCEx_PLL2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800820c:	e012      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3324      	adds	r3, #36	; 0x24
 8008212:	2101      	movs	r1, #1
 8008214:	4618      	mov	r0, r3
 8008216:	f000 ffe7 	bl	80091e8 <RCCEx_PLL3_Config>
 800821a:	4603      	mov	r3, r0
 800821c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800821e:	e009      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]
      break;
 8008224:	e006      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008226:	bf00      	nop
 8008228:	e004      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800822a:	bf00      	nop
 800822c:	e002      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800822e:	bf00      	nop
 8008230:	e000      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800823a:	4b35      	ldr	r3, [pc, #212]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008248:	4931      	ldr	r1, [pc, #196]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800824a:	4313      	orrs	r3, r2
 800824c:	658b      	str	r3, [r1, #88]	; 0x58
 800824e:	e001      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02d      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008268:	d005      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800826e:	d009      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d013      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008274:	e00f      	b.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008276:	4b26      	ldr	r3, [pc, #152]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	4a25      	ldr	r2, [pc, #148]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800827c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008282:	e00c      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	2101      	movs	r1, #1
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fefa 	bl	8009084 <RCCEx_PLL2_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008294:	e003      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
      break;
 800829a:	e000      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800829c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b0:	4917      	ldr	r1, [pc, #92]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	650b      	str	r3, [r1, #80]	; 0x50
 80082b6:	e001      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d035      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d81b      	bhi.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	08008315 	.word	0x08008315
 80082dc:	080082e9 	.word	0x080082e9
 80082e0:	080082f7 	.word	0x080082f7
 80082e4:	08008315 	.word	0x08008315
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e8:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	4a08      	ldr	r2, [pc, #32]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80082f4:	e00f      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	2102      	movs	r1, #2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fec1 	bl	8009084 <RCCEx_PLL2_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008306:	e006      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
      break;
 800830c:	e003      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800830e:	bf00      	nop
 8008310:	58024400 	.word	0x58024400
      break;
 8008314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800831c:	4bba      	ldr	r3, [pc, #744]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800831e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008320:	f023 0203 	bic.w	r2, r3, #3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	49b7      	ldr	r1, [pc, #732]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800832a:	4313      	orrs	r3, r2
 800832c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800832e:	e001      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8086 	beq.w	800844e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008342:	4bb2      	ldr	r3, [pc, #712]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4ab1      	ldr	r2, [pc, #708]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800834c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800834e:	f7f9 ff5f 	bl	8002210 <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008354:	e009      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008356:	f7f9 ff5b 	bl	8002210 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b64      	cmp	r3, #100	; 0x64
 8008362:	d902      	bls.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	75fb      	strb	r3, [r7, #23]
        break;
 8008368:	e005      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800836a:	4ba8      	ldr	r3, [pc, #672]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0ef      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d166      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800837c:	4ba2      	ldr	r3, [pc, #648]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800837e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008386:	4053      	eors	r3, r2
 8008388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800838c:	2b00      	cmp	r3, #0
 800838e:	d013      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008390:	4b9d      	ldr	r3, [pc, #628]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008398:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800839a:	4b9b      	ldr	r3, [pc, #620]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800839c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839e:	4a9a      	ldr	r2, [pc, #616]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083a6:	4b98      	ldr	r3, [pc, #608]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083aa:	4a97      	ldr	r2, [pc, #604]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083b2:	4a95      	ldr	r2, [pc, #596]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c2:	d115      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c4:	f7f9 ff24 	bl	8002210 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ca:	e00b      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083cc:	f7f9 ff20 	bl	8002210 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083da:	4293      	cmp	r3, r2
 80083dc:	d902      	bls.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	75fb      	strb	r3, [r7, #23]
            break;
 80083e2:	e005      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083e4:	4b88      	ldr	r3, [pc, #544]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0ed      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d126      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008404:	d10d      	bne.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008406:	4b80      	ldr	r3, [pc, #512]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008414:	0919      	lsrs	r1, r3, #4
 8008416:	4b7e      	ldr	r3, [pc, #504]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008418:	400b      	ands	r3, r1
 800841a:	497b      	ldr	r1, [pc, #492]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800841c:	4313      	orrs	r3, r2
 800841e:	610b      	str	r3, [r1, #16]
 8008420:	e005      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008422:	4b79      	ldr	r3, [pc, #484]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	4a78      	ldr	r2, [pc, #480]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008428:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800842c:	6113      	str	r3, [r2, #16]
 800842e:	4b76      	ldr	r3, [pc, #472]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008430:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800843c:	4972      	ldr	r1, [pc, #456]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800843e:	4313      	orrs	r3, r2
 8008440:	670b      	str	r3, [r1, #112]	; 0x70
 8008442:	e004      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	75bb      	strb	r3, [r7, #22]
 8008448:	e001      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d07d      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845e:	2b28      	cmp	r3, #40	; 0x28
 8008460:	d866      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008462:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008468:	08008537 	.word	0x08008537
 800846c:	08008531 	.word	0x08008531
 8008470:	08008531 	.word	0x08008531
 8008474:	08008531 	.word	0x08008531
 8008478:	08008531 	.word	0x08008531
 800847c:	08008531 	.word	0x08008531
 8008480:	08008531 	.word	0x08008531
 8008484:	08008531 	.word	0x08008531
 8008488:	0800850d 	.word	0x0800850d
 800848c:	08008531 	.word	0x08008531
 8008490:	08008531 	.word	0x08008531
 8008494:	08008531 	.word	0x08008531
 8008498:	08008531 	.word	0x08008531
 800849c:	08008531 	.word	0x08008531
 80084a0:	08008531 	.word	0x08008531
 80084a4:	08008531 	.word	0x08008531
 80084a8:	0800851f 	.word	0x0800851f
 80084ac:	08008531 	.word	0x08008531
 80084b0:	08008531 	.word	0x08008531
 80084b4:	08008531 	.word	0x08008531
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008531 	.word	0x08008531
 80084c4:	08008531 	.word	0x08008531
 80084c8:	08008537 	.word	0x08008537
 80084cc:	08008531 	.word	0x08008531
 80084d0:	08008531 	.word	0x08008531
 80084d4:	08008531 	.word	0x08008531
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008531 	.word	0x08008531
 80084e0:	08008531 	.word	0x08008531
 80084e4:	08008531 	.word	0x08008531
 80084e8:	08008537 	.word	0x08008537
 80084ec:	08008531 	.word	0x08008531
 80084f0:	08008531 	.word	0x08008531
 80084f4:	08008531 	.word	0x08008531
 80084f8:	08008531 	.word	0x08008531
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008531 	.word	0x08008531
 8008504:	08008531 	.word	0x08008531
 8008508:	08008537 	.word	0x08008537
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	2101      	movs	r1, #1
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fdb6 	bl	8009084 <RCCEx_PLL2_Config>
 8008518:	4603      	mov	r3, r0
 800851a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800851c:	e00c      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3324      	adds	r3, #36	; 0x24
 8008522:	2101      	movs	r1, #1
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fe5f 	bl	80091e8 <RCCEx_PLL3_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800852e:	e003      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	75fb      	strb	r3, [r7, #23]
      break;
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800853e:	4b32      	ldr	r3, [pc, #200]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800854a:	492f      	ldr	r1, [pc, #188]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800854c:	4313      	orrs	r3, r2
 800854e:	654b      	str	r3, [r1, #84]	; 0x54
 8008550:	e001      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d037      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008566:	2b05      	cmp	r3, #5
 8008568:	d820      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	080085b3 	.word	0x080085b3
 8008574:	08008589 	.word	0x08008589
 8008578:	0800859b 	.word	0x0800859b
 800857c:	080085b3 	.word	0x080085b3
 8008580:	080085b3 	.word	0x080085b3
 8008584:	080085b3 	.word	0x080085b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fd78 	bl	8009084 <RCCEx_PLL2_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008598:	e00c      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3324      	adds	r3, #36	; 0x24
 800859e:	2101      	movs	r1, #1
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fe21 	bl	80091e8 <RCCEx_PLL3_Config>
 80085a6:	4603      	mov	r3, r0
 80085a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085aa:	e003      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
      break;
 80085b0:	e000      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80085b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085be:	f023 0207 	bic.w	r2, r3, #7
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c6:	4910      	ldr	r1, [pc, #64]	; (8008608 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	654b      	str	r3, [r1, #84]	; 0x54
 80085cc:	e001      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
 80085d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d040      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e4:	2b05      	cmp	r3, #5
 80085e6:	d827      	bhi.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	0800863f 	.word	0x0800863f
 80085f4:	08008615 	.word	0x08008615
 80085f8:	08008627 	.word	0x08008627
 80085fc:	0800863f 	.word	0x0800863f
 8008600:	0800863f 	.word	0x0800863f
 8008604:	0800863f 	.word	0x0800863f
 8008608:	58024400 	.word	0x58024400
 800860c:	58024800 	.word	0x58024800
 8008610:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	2101      	movs	r1, #1
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fd32 	bl	8009084 <RCCEx_PLL2_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008624:	e00c      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3324      	adds	r3, #36	; 0x24
 800862a:	2101      	movs	r1, #1
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fddb 	bl	80091e8 <RCCEx_PLL3_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008636:	e003      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	75fb      	strb	r3, [r7, #23]
      break;
 800863c:	e000      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800863e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10a      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008646:	4bb2      	ldr	r3, [pc, #712]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864a:	f023 0207 	bic.w	r2, r3, #7
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008654:	49ae      	ldr	r1, [pc, #696]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008656:	4313      	orrs	r3, r2
 8008658:	658b      	str	r3, [r1, #88]	; 0x58
 800865a:	e001      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d044      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008676:	d01b      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800867c:	d805      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d022      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008686:	d00a      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008688:	e01b      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800868a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868e:	d01d      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008694:	d01c      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008696:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800869a:	d01b      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800869c:	e011      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3304      	adds	r3, #4
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fced 	bl	8009084 <RCCEx_PLL2_Config>
 80086aa:	4603      	mov	r3, r0
 80086ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086ae:	e012      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fd96 	bl	80091e8 <RCCEx_PLL3_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086c0:	e009      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	75fb      	strb	r3, [r7, #23]
      break;
 80086c6:	e006      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80086c8:	bf00      	nop
 80086ca:	e004      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80086cc:	bf00      	nop
 80086ce:	e002      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80086d0:	bf00      	nop
 80086d2:	e000      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80086d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086dc:	4b8c      	ldr	r3, [pc, #560]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ea:	4989      	ldr	r1, [pc, #548]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	654b      	str	r3, [r1, #84]	; 0x54
 80086f0:	e001      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d044      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800870c:	d01b      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800870e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008712:	d805      	bhi.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d022      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800871c:	d00a      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800871e:	e01b      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008724:	d01d      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008726:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800872a:	d01c      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800872c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008730:	d01b      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008732:	e011      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fca2 	bl	8009084 <RCCEx_PLL2_Config>
 8008740:	4603      	mov	r3, r0
 8008742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008744:	e012      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3324      	adds	r3, #36	; 0x24
 800874a:	2102      	movs	r1, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fd4b 	bl	80091e8 <RCCEx_PLL3_Config>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008756:	e009      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
      break;
 800875c:	e006      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800875e:	bf00      	nop
 8008760:	e004      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800876a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008772:	4b67      	ldr	r3, [pc, #412]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008776:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008780:	4963      	ldr	r1, [pc, #396]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008782:	4313      	orrs	r3, r2
 8008784:	658b      	str	r3, [r1, #88]	; 0x58
 8008786:	e001      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008794:	2b00      	cmp	r3, #0
 8008796:	d044      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800879e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a2:	d01b      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80087a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a8:	d805      	bhi.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d022      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80087ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b2:	d00a      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80087b4:	e01b      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80087b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ba:	d01d      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80087bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087c0:	d01c      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80087c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087c6:	d01b      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80087c8:	e011      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3304      	adds	r3, #4
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fc57 	bl	8009084 <RCCEx_PLL2_Config>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80087da:	e012      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3324      	adds	r3, #36	; 0x24
 80087e0:	2102      	movs	r1, #2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fd00 	bl	80091e8 <RCCEx_PLL3_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80087ec:	e009      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
      break;
 80087f2:	e006      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80087f4:	bf00      	nop
 80087f6:	e004      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80087f8:	bf00      	nop
 80087fa:	e002      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80087fc:	bf00      	nop
 80087fe:	e000      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008808:	4b41      	ldr	r3, [pc, #260]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800880a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800880c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008816:	493e      	ldr	r1, [pc, #248]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008818:	4313      	orrs	r3, r2
 800881a:	658b      	str	r3, [r1, #88]	; 0x58
 800881c:	e001      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0308 	and.w	r3, r3, #8
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01a      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008838:	d10a      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3324      	adds	r3, #36	; 0x24
 800883e:	2102      	movs	r1, #2
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fcd1 	bl	80091e8 <RCCEx_PLL3_Config>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008850:	4b2f      	ldr	r3, [pc, #188]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800885e:	492c      	ldr	r1, [pc, #176]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008860:	4313      	orrs	r3, r2
 8008862:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01a      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887a:	d10a      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3324      	adds	r3, #36	; 0x24
 8008880:	2102      	movs	r1, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fcb0 	bl	80091e8 <RCCEx_PLL3_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008892:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088a0:	491b      	ldr	r1, [pc, #108]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d032      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088bc:	d00d      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80088be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c2:	d016      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d111      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3304      	adds	r3, #4
 80088cc:	2100      	movs	r1, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fbd8 	bl	8009084 <RCCEx_PLL2_Config>
 80088d4:	4603      	mov	r3, r0
 80088d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80088d8:	e00c      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3324      	adds	r3, #36	; 0x24
 80088de:	2102      	movs	r1, #2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fc81 	bl	80091e8 <RCCEx_PLL3_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80088ea:	e003      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	75fb      	strb	r3, [r7, #23]
      break;
 80088f0:	e000      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80088f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10c      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80088fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008908:	4901      	ldr	r1, [pc, #4]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800890a:	4313      	orrs	r3, r2
 800890c:	658b      	str	r3, [r1, #88]	; 0x58
 800890e:	e003      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d02f      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800892a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800892e:	d00c      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008934:	d015      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800893a:	d10f      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800893c:	4b79      	ldr	r3, [pc, #484]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	4a78      	ldr	r2, [pc, #480]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008948:	e00c      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2101      	movs	r1, #1
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc49 	bl	80091e8 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800895a:	e003      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
      break;
 8008960:	e000      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800896a:	4b6e      	ldr	r3, [pc, #440]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800896c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008978:	496a      	ldr	r1, [pc, #424]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800897a:	4313      	orrs	r3, r2
 800897c:	654b      	str	r3, [r1, #84]	; 0x54
 800897e:	e001      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d029      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d007      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800899e:	e00f      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089a0:	4b60      	ldr	r3, [pc, #384]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a5f      	ldr	r2, [pc, #380]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089ac:	e00b      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3304      	adds	r3, #4
 80089b2:	2102      	movs	r1, #2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fb65 	bl	8009084 <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089be:	e002      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
      break;
 80089c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089cc:	4b55      	ldr	r3, [pc, #340]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d8:	4952      	ldr	r1, [pc, #328]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80089de:	e001      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
 80089e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3324      	adds	r3, #36	; 0x24
 80089f4:	2102      	movs	r1, #2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fbf6 	bl	80091e8 <RCCEx_PLL3_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d02f      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1a:	d00c      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a20:	d802      	bhi.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d011      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008a26:	e00d      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a2c:	d00f      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a32:	d00e      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008a34:	e006      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a36:	4b3b      	ldr	r3, [pc, #236]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	4a3a      	ldr	r2, [pc, #232]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008a42:	e007      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]
      break;
 8008a48:	e004      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e002      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008a4e:	bf00      	nop
 8008a50:	e000      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a5a:	4b32      	ldr	r3, [pc, #200]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a66:	492f      	ldr	r1, [pc, #188]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	654b      	str	r3, [r1, #84]	; 0x54
 8008a6c:	e001      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d008      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a7e:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8a:	4926      	ldr	r1, [pc, #152]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a9c:	4b21      	ldr	r3, [pc, #132]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008aaa:	491e      	ldr	r1, [pc, #120]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008abc:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac8:	4916      	ldr	r1, [pc, #88]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ada:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	4a11      	ldr	r2, [pc, #68]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ae4:	6113      	str	r3, [r2, #16]
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008af0:	490c      	ldr	r1, [pc, #48]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da08      	bge.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0a:	4906      	ldr	r1, [pc, #24]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008b10:	7dbb      	ldrb	r3, [r7, #22]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	58024400 	.word	0x58024400

08008b28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b2c:	f7ff f8b2 	bl	8007c94 <HAL_RCC_GetHCLKFreq>
 8008b30:	4601      	mov	r1, r0
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	4a04      	ldr	r2, [pc, #16]	; (8008b50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b3e:	5cd3      	ldrb	r3, [r2, r3]
 8008b40:	f003 031f 	and.w	r3, r3, #31
 8008b44:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	58024400 	.word	0x58024400
 8008b50:	0800c7cc 	.word	0x0800c7cc

08008b54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b089      	sub	sp, #36	; 0x24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b5c:	4b9d      	ldr	r3, [pc, #628]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b66:	4b9b      	ldr	r3, [pc, #620]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	0b1b      	lsrs	r3, r3, #12
 8008b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b72:	4b98      	ldr	r3, [pc, #608]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	091b      	lsrs	r3, r3, #4
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b7e:	4b95      	ldr	r3, [pc, #596]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	08db      	lsrs	r3, r3, #3
 8008b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 810a 	beq.w	8008db6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d05a      	beq.n	8008c5e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d302      	bcc.n	8008bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d078      	beq.n	8008ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008bb0:	e099      	b.n	8008ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bb2:	4b88      	ldr	r3, [pc, #544]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d02d      	beq.n	8008c1a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bbe:	4b85      	ldr	r3, [pc, #532]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	08db      	lsrs	r3, r3, #3
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	4a83      	ldr	r2, [pc, #524]	; (8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be8:	4b7a      	ldr	r3, [pc, #488]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c14:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c18:	e087      	b.n	8008d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2c:	4b69      	ldr	r3, [pc, #420]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c40:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c5c:	e065      	b.n	8008d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	ee07 3a90 	vmov	s15, r3
 8008c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c70:	4b58      	ldr	r3, [pc, #352]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c78:	ee07 3a90 	vmov	s15, r3
 8008c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c84:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca0:	e043      	b.n	8008d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb4:	4b47      	ldr	r3, [pc, #284]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce4:	e021      	b.n	8008d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf8:	4b36      	ldr	r3, [pc, #216]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d28:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d2a:	4b2a      	ldr	r3, [pc, #168]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	0a5b      	lsrs	r3, r3, #9
 8008d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d50:	ee17 2a90 	vmov	r2, s15
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d58:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7e:	ee17 2a90 	vmov	r2, s15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	0e1b      	lsrs	r3, r3, #24
 8008d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d90:	ee07 3a90 	vmov	s15, r3
 8008d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dac:	ee17 2a90 	vmov	r2, s15
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008db4:	e008      	b.n	8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	609a      	str	r2, [r3, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	3724      	adds	r7, #36	; 0x24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	03d09000 	.word	0x03d09000
 8008ddc:	46000000 	.word	0x46000000
 8008de0:	4c742400 	.word	0x4c742400
 8008de4:	4a742400 	.word	0x4a742400
 8008de8:	4bf42400 	.word	0x4bf42400

08008dec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b089      	sub	sp, #36	; 0x24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008df4:	4b9d      	ldr	r3, [pc, #628]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0303 	and.w	r3, r3, #3
 8008dfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008dfe:	4b9b      	ldr	r3, [pc, #620]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	0d1b      	lsrs	r3, r3, #20
 8008e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e0a:	4b98      	ldr	r3, [pc, #608]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008e16:	4b95      	ldr	r3, [pc, #596]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	08db      	lsrs	r3, r3, #3
 8008e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 810a 	beq.w	800904e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d05a      	beq.n	8008ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d302      	bcc.n	8008e4a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d078      	beq.n	8008f3a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008e48:	e099      	b.n	8008f7e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e4a:	4b88      	ldr	r3, [pc, #544]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d02d      	beq.n	8008eb2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e56:	4b85      	ldr	r3, [pc, #532]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	08db      	lsrs	r3, r3, #3
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	4a83      	ldr	r2, [pc, #524]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008e62:	fa22 f303 	lsr.w	r3, r2, r3
 8008e66:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e80:	4b7a      	ldr	r3, [pc, #488]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e94:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008eb0:	e087      	b.n	8008fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec4:	4b69      	ldr	r3, [pc, #420]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ef4:	e065      	b.n	8008fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	ee07 3a90 	vmov	s15, r3
 8008efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800907c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f08:	4b58      	ldr	r3, [pc, #352]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f38:	e043      	b.n	8008fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4c:	4b47      	ldr	r3, [pc, #284]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f54:	ee07 3a90 	vmov	s15, r3
 8008f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f60:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f7c:	e021      	b.n	8008fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	ee07 3a90 	vmov	s15, r3
 8008f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f88:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800907c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f90:	4b36      	ldr	r3, [pc, #216]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f98:	ee07 3a90 	vmov	s15, r3
 8008f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fc0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008fc2:	4b2a      	ldr	r3, [pc, #168]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	0a5b      	lsrs	r3, r3, #9
 8008fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe8:	ee17 2a90 	vmov	r2, s15
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	0c1b      	lsrs	r3, r3, #16
 8008ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800900a:	edd7 6a07 	vldr	s13, [r7, #28]
 800900e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009016:	ee17 2a90 	vmov	r2, s15
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	0e1b      	lsrs	r3, r3, #24
 8009024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009038:	edd7 6a07 	vldr	s13, [r7, #28]
 800903c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009044:	ee17 2a90 	vmov	r2, s15
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800904c:	e008      	b.n	8009060 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	609a      	str	r2, [r3, #8]
}
 8009060:	bf00      	nop
 8009062:	3724      	adds	r7, #36	; 0x24
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	58024400 	.word	0x58024400
 8009070:	03d09000 	.word	0x03d09000
 8009074:	46000000 	.word	0x46000000
 8009078:	4c742400 	.word	0x4c742400
 800907c:	4a742400 	.word	0x4a742400
 8009080:	4bf42400 	.word	0x4bf42400

08009084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009092:	4b53      	ldr	r3, [pc, #332]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	2b03      	cmp	r3, #3
 800909c:	d101      	bne.n	80090a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e099      	b.n	80091d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80090a2:	4b4f      	ldr	r3, [pc, #316]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a4e      	ldr	r2, [pc, #312]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ae:	f7f9 f8af 	bl	8002210 <HAL_GetTick>
 80090b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090b4:	e008      	b.n	80090c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80090b6:	f7f9 f8ab 	bl	8002210 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e086      	b.n	80091d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090c8:	4b45      	ldr	r3, [pc, #276]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f0      	bne.n	80090b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090d4:	4b42      	ldr	r3, [pc, #264]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	031b      	lsls	r3, r3, #12
 80090e2:	493f      	ldr	r1, [pc, #252]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	628b      	str	r3, [r1, #40]	; 0x28
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	025b      	lsls	r3, r3, #9
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	041b      	lsls	r3, r3, #16
 8009106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800910a:	431a      	orrs	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	3b01      	subs	r3, #1
 8009112:	061b      	lsls	r3, r3, #24
 8009114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009118:	4931      	ldr	r1, [pc, #196]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800911a:	4313      	orrs	r3, r2
 800911c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800911e:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	492d      	ldr	r1, [pc, #180]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800912c:	4313      	orrs	r3, r2
 800912e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009130:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	f023 0220 	bic.w	r2, r3, #32
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	4928      	ldr	r1, [pc, #160]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800913e:	4313      	orrs	r3, r2
 8009140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009142:	4b27      	ldr	r3, [pc, #156]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009148:	f023 0310 	bic.w	r3, r3, #16
 800914c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800914e:	4b24      	ldr	r3, [pc, #144]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009152:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <RCCEx_PLL2_Config+0x160>)
 8009154:	4013      	ands	r3, r2
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	69d2      	ldr	r2, [r2, #28]
 800915a:	00d2      	lsls	r2, r2, #3
 800915c:	4920      	ldr	r1, [pc, #128]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800915e:	4313      	orrs	r3, r2
 8009160:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009162:	4b1f      	ldr	r3, [pc, #124]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009168:	f043 0310 	orr.w	r3, r3, #16
 800916c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009174:	4b1a      	ldr	r3, [pc, #104]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	4a19      	ldr	r2, [pc, #100]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800917a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800917e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009180:	e00f      	b.n	80091a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d106      	bne.n	8009196 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009188:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4a14      	ldr	r2, [pc, #80]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800918e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009194:	e005      	b.n	80091a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009196:	4b12      	ldr	r3, [pc, #72]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	4a11      	ldr	r2, [pc, #68]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 800919c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80091a2:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a0e      	ldr	r2, [pc, #56]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80091a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ae:	f7f9 f82f 	bl	8002210 <HAL_GetTick>
 80091b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091b4:	e008      	b.n	80091c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80091b6:	f7f9 f82b 	bl	8002210 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d901      	bls.n	80091c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e006      	b.n	80091d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <RCCEx_PLL2_Config+0x15c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d0f0      	beq.n	80091b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
 80091e4:	ffff0007 	.word	0xffff0007

080091e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091f6:	4b53      	ldr	r3, [pc, #332]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d101      	bne.n	8009206 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e099      	b.n	800933a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009206:	4b4f      	ldr	r3, [pc, #316]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a4e      	ldr	r2, [pc, #312]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800920c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009212:	f7f8 fffd 	bl	8002210 <HAL_GetTick>
 8009216:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009218:	e008      	b.n	800922c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800921a:	f7f8 fff9 	bl	8002210 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d901      	bls.n	800922c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e086      	b.n	800933a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800922c:	4b45      	ldr	r3, [pc, #276]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1f0      	bne.n	800921a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009238:	4b42      	ldr	r3, [pc, #264]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	051b      	lsls	r3, r3, #20
 8009246:	493f      	ldr	r1, [pc, #252]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009248:	4313      	orrs	r3, r2
 800924a:	628b      	str	r3, [r1, #40]	; 0x28
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	3b01      	subs	r3, #1
 8009252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	3b01      	subs	r3, #1
 800925c:	025b      	lsls	r3, r3, #9
 800925e:	b29b      	uxth	r3, r3
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	3b01      	subs	r3, #1
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	3b01      	subs	r3, #1
 8009276:	061b      	lsls	r3, r3, #24
 8009278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800927c:	4931      	ldr	r1, [pc, #196]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800927e:	4313      	orrs	r3, r2
 8009280:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009282:	4b30      	ldr	r3, [pc, #192]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	492d      	ldr	r1, [pc, #180]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009290:	4313      	orrs	r3, r2
 8009292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009294:	4b2b      	ldr	r3, [pc, #172]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	4928      	ldr	r1, [pc, #160]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80092a6:	4b27      	ldr	r3, [pc, #156]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	4a26      	ldr	r2, [pc, #152]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b6:	4b24      	ldr	r3, [pc, #144]	; (8009348 <RCCEx_PLL3_Config+0x160>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	69d2      	ldr	r2, [r2, #28]
 80092be:	00d2      	lsls	r2, r2, #3
 80092c0:	4920      	ldr	r1, [pc, #128]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092c6:	4b1f      	ldr	r3, [pc, #124]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	4a1e      	ldr	r2, [pc, #120]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092e4:	e00f      	b.n	8009306 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d106      	bne.n	80092fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092ec:	4b15      	ldr	r3, [pc, #84]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a14      	ldr	r2, [pc, #80]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092f8:	e005      	b.n	8009306 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	4a11      	ldr	r2, [pc, #68]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009306:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a0e      	ldr	r2, [pc, #56]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800930c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009312:	f7f8 ff7d 	bl	8002210 <HAL_GetTick>
 8009316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009318:	e008      	b.n	800932c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800931a:	f7f8 ff79 	bl	8002210 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e006      	b.n	800933a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <RCCEx_PLL3_Config+0x15c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f0      	beq.n	800931a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
 8009348:	ffff0007 	.word	0xffff0007

0800934c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009354:	2300      	movs	r3, #0
 8009356:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e0e2      	b.n	8009528 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a70      	ldr	r2, [pc, #448]	; (8009530 <HAL_SPI_Init+0x1e4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00f      	beq.n	8009392 <HAL_SPI_Init+0x46>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a6f      	ldr	r2, [pc, #444]	; (8009534 <HAL_SPI_Init+0x1e8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00a      	beq.n	8009392 <HAL_SPI_Init+0x46>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a6d      	ldr	r2, [pc, #436]	; (8009538 <HAL_SPI_Init+0x1ec>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d005      	beq.n	8009392 <HAL_SPI_Init+0x46>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	2b0f      	cmp	r3, #15
 800938c:	d901      	bls.n	8009392 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e0ca      	b.n	8009528 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8d2 	bl	800953c <SPI_GetPacketSize>
 8009398:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a64      	ldr	r2, [pc, #400]	; (8009530 <HAL_SPI_Init+0x1e4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00c      	beq.n	80093be <HAL_SPI_Init+0x72>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a62      	ldr	r2, [pc, #392]	; (8009534 <HAL_SPI_Init+0x1e8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <HAL_SPI_Init+0x72>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a61      	ldr	r2, [pc, #388]	; (8009538 <HAL_SPI_Init+0x1ec>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d002      	beq.n	80093be <HAL_SPI_Init+0x72>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b08      	cmp	r3, #8
 80093bc:	d811      	bhi.n	80093e2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80093c2:	4a5b      	ldr	r2, [pc, #364]	; (8009530 <HAL_SPI_Init+0x1e4>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d009      	beq.n	80093dc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a59      	ldr	r2, [pc, #356]	; (8009534 <HAL_SPI_Init+0x1e8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d004      	beq.n	80093dc <HAL_SPI_Init+0x90>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a58      	ldr	r2, [pc, #352]	; (8009538 <HAL_SPI_Init+0x1ec>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d104      	bne.n	80093e6 <HAL_SPI_Init+0x9a>
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d901      	bls.n	80093e6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e0a0      	b.n	8009528 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7f7 fdd4 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 0201 	bic.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009420:	d110      	bne.n	8009444 <HAL_SPI_Init+0xf8>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800942a:	d10b      	bne.n	8009444 <HAL_SPI_Init+0xf8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	d107      	bne.n	8009444 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009442:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009456:	ea42 0103 	orr.w	r1, r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a1b      	ldr	r3, [r3, #32]
 800948c:	431a      	orrs	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009498:	431a      	orrs	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	ea42 0103 	orr.w	r1, r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d113      	bne.n	80094e4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ce:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094e2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0201 	bic.w	r2, r2, #1
 80094f2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40013000 	.word	0x40013000
 8009534:	40003800 	.word	0x40003800
 8009538:	40003c00 	.word	0x40003c00

0800953c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	3301      	adds	r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	3301      	adds	r3, #1
 8009554:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	3307      	adds	r3, #7
 800955a:	08db      	lsrs	r3, r3, #3
 800955c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	fb02 f303 	mul.w	r3, r2, r3
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e049      	b.n	8009618 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d106      	bne.n	800959e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7f8 f835 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f000 fcc7 	bl	8009f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b01      	cmp	r3, #1
 8009632:	d001      	beq.n	8009638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e021      	b.n	800967c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <HAL_TIM_Base_Start_IT+0x68>)
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b06      	cmp	r3, #6
 8009660:	d00b      	beq.n	800967a <HAL_TIM_Base_Start_IT+0x5a>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d007      	beq.n	800967a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0201 	orr.w	r2, r2, #1
 8009678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	00010007 	.word	0x00010007

0800968c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e049      	b.n	8009732 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f841 	bl	800973a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	f000 fc3a 	bl	8009f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
	...

08009750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <HAL_TIM_PWM_Start+0x24>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	bf14      	ite	ne
 800976c:	2301      	movne	r3, #1
 800976e:	2300      	moveq	r3, #0
 8009770:	b2db      	uxtb	r3, r3
 8009772:	e03c      	b.n	80097ee <HAL_TIM_PWM_Start+0x9e>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b04      	cmp	r3, #4
 8009778:	d109      	bne.n	800978e <HAL_TIM_PWM_Start+0x3e>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b01      	cmp	r3, #1
 8009784:	bf14      	ite	ne
 8009786:	2301      	movne	r3, #1
 8009788:	2300      	moveq	r3, #0
 800978a:	b2db      	uxtb	r3, r3
 800978c:	e02f      	b.n	80097ee <HAL_TIM_PWM_Start+0x9e>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d109      	bne.n	80097a8 <HAL_TIM_PWM_Start+0x58>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b01      	cmp	r3, #1
 800979e:	bf14      	ite	ne
 80097a0:	2301      	movne	r3, #1
 80097a2:	2300      	moveq	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	e022      	b.n	80097ee <HAL_TIM_PWM_Start+0x9e>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b0c      	cmp	r3, #12
 80097ac:	d109      	bne.n	80097c2 <HAL_TIM_PWM_Start+0x72>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	bf14      	ite	ne
 80097ba:	2301      	movne	r3, #1
 80097bc:	2300      	moveq	r3, #0
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	e015      	b.n	80097ee <HAL_TIM_PWM_Start+0x9e>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d109      	bne.n	80097dc <HAL_TIM_PWM_Start+0x8c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	bf14      	ite	ne
 80097d4:	2301      	movne	r3, #1
 80097d6:	2300      	moveq	r3, #0
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	e008      	b.n	80097ee <HAL_TIM_PWM_Start+0x9e>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	bf14      	ite	ne
 80097e8:	2301      	movne	r3, #1
 80097ea:	2300      	moveq	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e06e      	b.n	80098d4 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <HAL_TIM_PWM_Start+0xb6>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009804:	e023      	b.n	800984e <HAL_TIM_PWM_Start+0xfe>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b04      	cmp	r3, #4
 800980a:	d104      	bne.n	8009816 <HAL_TIM_PWM_Start+0xc6>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009814:	e01b      	b.n	800984e <HAL_TIM_PWM_Start+0xfe>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b08      	cmp	r3, #8
 800981a:	d104      	bne.n	8009826 <HAL_TIM_PWM_Start+0xd6>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009824:	e013      	b.n	800984e <HAL_TIM_PWM_Start+0xfe>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b0c      	cmp	r3, #12
 800982a:	d104      	bne.n	8009836 <HAL_TIM_PWM_Start+0xe6>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009834:	e00b      	b.n	800984e <HAL_TIM_PWM_Start+0xfe>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b10      	cmp	r3, #16
 800983a:	d104      	bne.n	8009846 <HAL_TIM_PWM_Start+0xf6>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009844:	e003      	b.n	800984e <HAL_TIM_PWM_Start+0xfe>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2202      	movs	r2, #2
 800984a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2201      	movs	r2, #1
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 ff7a 	bl	800a750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1e      	ldr	r2, [pc, #120]	; (80098dc <HAL_TIM_PWM_Start+0x18c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d013      	beq.n	800988e <HAL_TIM_PWM_Start+0x13e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a1d      	ldr	r2, [pc, #116]	; (80098e0 <HAL_TIM_PWM_Start+0x190>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00e      	beq.n	800988e <HAL_TIM_PWM_Start+0x13e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a1b      	ldr	r2, [pc, #108]	; (80098e4 <HAL_TIM_PWM_Start+0x194>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d009      	beq.n	800988e <HAL_TIM_PWM_Start+0x13e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a1a      	ldr	r2, [pc, #104]	; (80098e8 <HAL_TIM_PWM_Start+0x198>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <HAL_TIM_PWM_Start+0x13e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a18      	ldr	r2, [pc, #96]	; (80098ec <HAL_TIM_PWM_Start+0x19c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d101      	bne.n	8009892 <HAL_TIM_PWM_Start+0x142>
 800988e:	2301      	movs	r3, #1
 8009890:	e000      	b.n	8009894 <HAL_TIM_PWM_Start+0x144>
 8009892:	2300      	movs	r3, #0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <HAL_TIM_PWM_Start+0x1a0>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b06      	cmp	r3, #6
 80098b8:	d00b      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x182>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c0:	d007      	beq.n	80098d2 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0201 	orr.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40010000 	.word	0x40010000
 80098e0:	40010400 	.word	0x40010400
 80098e4:	40014000 	.word	0x40014000
 80098e8:	40014400 	.word	0x40014400
 80098ec:	40014800 	.word	0x40014800
 80098f0:	00010007 	.word	0x00010007

080098f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	2b02      	cmp	r3, #2
 8009908:	d122      	bne.n	8009950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b02      	cmp	r3, #2
 8009916:	d11b      	bne.n	8009950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f06f 0202 	mvn.w	r2, #2
 8009920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fae6 	bl	8009f08 <HAL_TIM_IC_CaptureCallback>
 800993c:	e005      	b.n	800994a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fad8 	bl	8009ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fae9 	bl	8009f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b04      	cmp	r3, #4
 800995c:	d122      	bne.n	80099a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b04      	cmp	r3, #4
 800996a:	d11b      	bne.n	80099a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f06f 0204 	mvn.w	r2, #4
 8009974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fabc 	bl	8009f08 <HAL_TIM_IC_CaptureCallback>
 8009990:	e005      	b.n	800999e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 faae 	bl	8009ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fabf 	bl	8009f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b08      	cmp	r3, #8
 80099b0:	d122      	bne.n	80099f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d11b      	bne.n	80099f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f06f 0208 	mvn.w	r2, #8
 80099c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2204      	movs	r2, #4
 80099ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	f003 0303 	and.w	r3, r3, #3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa92 	bl	8009f08 <HAL_TIM_IC_CaptureCallback>
 80099e4:	e005      	b.n	80099f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa84 	bl	8009ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fa95 	bl	8009f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d122      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d11b      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f06f 0210 	mvn.w	r2, #16
 8009a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2208      	movs	r2, #8
 8009a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa68 	bl	8009f08 <HAL_TIM_IC_CaptureCallback>
 8009a38:	e005      	b.n	8009a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa5a 	bl	8009ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa6b 	bl	8009f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d10e      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d107      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f06f 0201 	mvn.w	r2, #1
 8009a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7f8 f812 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b80      	cmp	r3, #128	; 0x80
 8009a84:	d10e      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a90:	2b80      	cmp	r3, #128	; 0x80
 8009a92:	d107      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 ff8c 	bl	800a9bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab2:	d10e      	bne.n	8009ad2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abe:	2b80      	cmp	r3, #128	; 0x80
 8009ac0:	d107      	bne.n	8009ad2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 ff7f 	bl	800a9d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009adc:	2b40      	cmp	r3, #64	; 0x40
 8009ade:	d10e      	bne.n	8009afe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d107      	bne.n	8009afe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fa19 	bl	8009f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d10e      	bne.n	8009b2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	d107      	bne.n	8009b2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f06f 0220 	mvn.w	r2, #32
 8009b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 ff3f 	bl	800a9a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e0fd      	b.n	8009d4a <HAL_TIM_PWM_ConfigChannel+0x216>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b14      	cmp	r3, #20
 8009b5a:	f200 80f0 	bhi.w	8009d3e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009b5e:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009d3f 	.word	0x08009d3f
 8009b6c:	08009d3f 	.word	0x08009d3f
 8009b70:	08009d3f 	.word	0x08009d3f
 8009b74:	08009bf9 	.word	0x08009bf9
 8009b78:	08009d3f 	.word	0x08009d3f
 8009b7c:	08009d3f 	.word	0x08009d3f
 8009b80:	08009d3f 	.word	0x08009d3f
 8009b84:	08009c3b 	.word	0x08009c3b
 8009b88:	08009d3f 	.word	0x08009d3f
 8009b8c:	08009d3f 	.word	0x08009d3f
 8009b90:	08009d3f 	.word	0x08009d3f
 8009b94:	08009c7b 	.word	0x08009c7b
 8009b98:	08009d3f 	.word	0x08009d3f
 8009b9c:	08009d3f 	.word	0x08009d3f
 8009ba0:	08009d3f 	.word	0x08009d3f
 8009ba4:	08009cbd 	.word	0x08009cbd
 8009ba8:	08009d3f 	.word	0x08009d3f
 8009bac:	08009d3f 	.word	0x08009d3f
 8009bb0:	08009d3f 	.word	0x08009d3f
 8009bb4:	08009cfd 	.word	0x08009cfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fa5a 	bl	800a078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0208 	orr.w	r2, r2, #8
 8009bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0204 	bic.w	r2, r2, #4
 8009be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6999      	ldr	r1, [r3, #24]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	691a      	ldr	r2, [r3, #16]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	619a      	str	r2, [r3, #24]
      break;
 8009bf6:	e0a3      	b.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 faca 	bl	800a198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699a      	ldr	r2, [r3, #24]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6999      	ldr	r1, [r3, #24]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	021a      	lsls	r2, r3, #8
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	619a      	str	r2, [r3, #24]
      break;
 8009c38:	e082      	b.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fb33 	bl	800a2ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69da      	ldr	r2, [r3, #28]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 0208 	orr.w	r2, r2, #8
 8009c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69da      	ldr	r2, [r3, #28]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0204 	bic.w	r2, r2, #4
 8009c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69d9      	ldr	r1, [r3, #28]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	61da      	str	r2, [r3, #28]
      break;
 8009c78:	e062      	b.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fb99 	bl	800a3b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69da      	ldr	r2, [r3, #28]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69da      	ldr	r2, [r3, #28]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69d9      	ldr	r1, [r3, #28]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	021a      	lsls	r2, r3, #8
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	61da      	str	r2, [r3, #28]
      break;
 8009cba:	e041      	b.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68b9      	ldr	r1, [r7, #8]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fbe0 	bl	800a488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f042 0208 	orr.w	r2, r2, #8
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 0204 	bic.w	r2, r2, #4
 8009ce6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	691a      	ldr	r2, [r3, #16]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009cfa:	e021      	b.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fc22 	bl	800a54c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	021a      	lsls	r2, r3, #8
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009d3c:	e000      	b.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop

08009d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <HAL_TIM_ConfigClockSource+0x18>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e0b7      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x188>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4b57      	ldr	r3, [pc, #348]	; (8009ee4 <HAL_TIM_ConfigClockSource+0x190>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b70      	cmp	r3, #112	; 0x70
 8009da2:	d02e      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0xae>
 8009da4:	2b70      	cmp	r3, #112	; 0x70
 8009da6:	d812      	bhi.n	8009dce <HAL_TIM_ConfigClockSource+0x7a>
 8009da8:	2b30      	cmp	r3, #48	; 0x30
 8009daa:	f000 8084 	beq.w	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009dae:	2b30      	cmp	r3, #48	; 0x30
 8009db0:	d806      	bhi.n	8009dc0 <HAL_TIM_ConfigClockSource+0x6c>
 8009db2:	2b10      	cmp	r3, #16
 8009db4:	d07f      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009db6:	2b20      	cmp	r3, #32
 8009db8:	d07d      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d07b      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009dbe:	e084      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009dc0:	2b50      	cmp	r3, #80	; 0x50
 8009dc2:	d048      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x102>
 8009dc4:	2b60      	cmp	r3, #96	; 0x60
 8009dc6:	d056      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x122>
 8009dc8:	2b40      	cmp	r3, #64	; 0x40
 8009dca:	d064      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8009dcc:	e07d      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009dce:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009dd2:	d070      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009dd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009dd8:	d809      	bhi.n	8009dee <HAL_TIM_ConfigClockSource+0x9a>
 8009dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dde:	d027      	beq.n	8009e30 <HAL_TIM_ConfigClockSource+0xdc>
 8009de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de4:	d067      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dea:	d06d      	beq.n	8009ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dec:	e06d      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009dee:	4a3e      	ldr	r2, [pc, #248]	; (8009ee8 <HAL_TIM_ConfigClockSource+0x194>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d060      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009df4:	4a3d      	ldr	r2, [pc, #244]	; (8009eec <HAL_TIM_ConfigClockSource+0x198>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d05d      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
 8009dfa:	4a3d      	ldr	r2, [pc, #244]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x19c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d05a      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009e00:	e063      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6899      	ldr	r1, [r3, #8]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f000 fc7d 	bl	800a710 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	609a      	str	r2, [r3, #8]
      break;
 8009e2e:	e04c      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	6899      	ldr	r1, [r3, #8]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f000 fc66 	bl	800a710 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e52:	609a      	str	r2, [r3, #8]
      break;
 8009e54:	e039      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6818      	ldr	r0, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6859      	ldr	r1, [r3, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	461a      	mov	r2, r3
 8009e64:	f000 fbd6 	bl	800a614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2150      	movs	r1, #80	; 0x50
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fc30 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009e74:	e029      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6859      	ldr	r1, [r3, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	461a      	mov	r2, r3
 8009e84:	f000 fbf5 	bl	800a672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2160      	movs	r1, #96	; 0x60
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fc20 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009e94:	e019      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6859      	ldr	r1, [r3, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f000 fbb6 	bl	800a614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2140      	movs	r1, #64	; 0x40
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fc10 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009eb4:	e009      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f000 fc07 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009ec6:	e000      	b.n	8009eca <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009ec8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	ffceff88 	.word	0xffceff88
 8009ee8:	00100030 	.word	0x00100030
 8009eec:	00100040 	.word	0x00100040
 8009ef0:	00100020 	.word	0x00100020

08009ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a40      	ldr	r2, [pc, #256]	; (800a058 <TIM_Base_SetConfig+0x114>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d013      	beq.n	8009f84 <TIM_Base_SetConfig+0x40>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f62:	d00f      	beq.n	8009f84 <TIM_Base_SetConfig+0x40>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a3d      	ldr	r2, [pc, #244]	; (800a05c <TIM_Base_SetConfig+0x118>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00b      	beq.n	8009f84 <TIM_Base_SetConfig+0x40>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a3c      	ldr	r2, [pc, #240]	; (800a060 <TIM_Base_SetConfig+0x11c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d007      	beq.n	8009f84 <TIM_Base_SetConfig+0x40>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a3b      	ldr	r2, [pc, #236]	; (800a064 <TIM_Base_SetConfig+0x120>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_Base_SetConfig+0x40>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a3a      	ldr	r2, [pc, #232]	; (800a068 <TIM_Base_SetConfig+0x124>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d108      	bne.n	8009f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a2f      	ldr	r2, [pc, #188]	; (800a058 <TIM_Base_SetConfig+0x114>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d01f      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa4:	d01b      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a2c      	ldr	r2, [pc, #176]	; (800a05c <TIM_Base_SetConfig+0x118>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d017      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a2b      	ldr	r2, [pc, #172]	; (800a060 <TIM_Base_SetConfig+0x11c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d013      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a2a      	ldr	r2, [pc, #168]	; (800a064 <TIM_Base_SetConfig+0x120>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d00f      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a29      	ldr	r2, [pc, #164]	; (800a068 <TIM_Base_SetConfig+0x124>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00b      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a28      	ldr	r2, [pc, #160]	; (800a06c <TIM_Base_SetConfig+0x128>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d007      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a27      	ldr	r2, [pc, #156]	; (800a070 <TIM_Base_SetConfig+0x12c>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d003      	beq.n	8009fde <TIM_Base_SetConfig+0x9a>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a26      	ldr	r2, [pc, #152]	; (800a074 <TIM_Base_SetConfig+0x130>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d108      	bne.n	8009ff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a10      	ldr	r2, [pc, #64]	; (800a058 <TIM_Base_SetConfig+0x114>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d00f      	beq.n	800a03c <TIM_Base_SetConfig+0xf8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a12      	ldr	r2, [pc, #72]	; (800a068 <TIM_Base_SetConfig+0x124>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00b      	beq.n	800a03c <TIM_Base_SetConfig+0xf8>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a11      	ldr	r2, [pc, #68]	; (800a06c <TIM_Base_SetConfig+0x128>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d007      	beq.n	800a03c <TIM_Base_SetConfig+0xf8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a10      	ldr	r2, [pc, #64]	; (800a070 <TIM_Base_SetConfig+0x12c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d003      	beq.n	800a03c <TIM_Base_SetConfig+0xf8>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a0f      	ldr	r2, [pc, #60]	; (800a074 <TIM_Base_SetConfig+0x130>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d103      	bne.n	800a044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	615a      	str	r2, [r3, #20]
}
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	40010000 	.word	0x40010000
 800a05c:	40000400 	.word	0x40000400
 800a060:	40000800 	.word	0x40000800
 800a064:	40000c00 	.word	0x40000c00
 800a068:	40010400 	.word	0x40010400
 800a06c:	40014000 	.word	0x40014000
 800a070:	40014400 	.word	0x40014400
 800a074:	40014800 	.word	0x40014800

0800a078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	f023 0201 	bic.w	r2, r3, #1
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4b37      	ldr	r3, [pc, #220]	; (800a180 <TIM_OC1_SetConfig+0x108>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f023 0302 	bic.w	r3, r3, #2
 800a0c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a2d      	ldr	r2, [pc, #180]	; (800a184 <TIM_OC1_SetConfig+0x10c>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00f      	beq.n	800a0f4 <TIM_OC1_SetConfig+0x7c>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a2c      	ldr	r2, [pc, #176]	; (800a188 <TIM_OC1_SetConfig+0x110>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00b      	beq.n	800a0f4 <TIM_OC1_SetConfig+0x7c>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a2b      	ldr	r2, [pc, #172]	; (800a18c <TIM_OC1_SetConfig+0x114>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d007      	beq.n	800a0f4 <TIM_OC1_SetConfig+0x7c>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a2a      	ldr	r2, [pc, #168]	; (800a190 <TIM_OC1_SetConfig+0x118>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_OC1_SetConfig+0x7c>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a29      	ldr	r2, [pc, #164]	; (800a194 <TIM_OC1_SetConfig+0x11c>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d10c      	bne.n	800a10e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f023 0308 	bic.w	r3, r3, #8
 800a0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	4313      	orrs	r3, r2
 800a104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f023 0304 	bic.w	r3, r3, #4
 800a10c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <TIM_OC1_SetConfig+0x10c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00f      	beq.n	800a136 <TIM_OC1_SetConfig+0xbe>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a1b      	ldr	r2, [pc, #108]	; (800a188 <TIM_OC1_SetConfig+0x110>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00b      	beq.n	800a136 <TIM_OC1_SetConfig+0xbe>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a1a      	ldr	r2, [pc, #104]	; (800a18c <TIM_OC1_SetConfig+0x114>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d007      	beq.n	800a136 <TIM_OC1_SetConfig+0xbe>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a19      	ldr	r2, [pc, #100]	; (800a190 <TIM_OC1_SetConfig+0x118>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d003      	beq.n	800a136 <TIM_OC1_SetConfig+0xbe>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a18      	ldr	r2, [pc, #96]	; (800a194 <TIM_OC1_SetConfig+0x11c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d111      	bne.n	800a15a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	621a      	str	r2, [r3, #32]
}
 800a174:	bf00      	nop
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	fffeff8f 	.word	0xfffeff8f
 800a184:	40010000 	.word	0x40010000
 800a188:	40010400 	.word	0x40010400
 800a18c:	40014000 	.word	0x40014000
 800a190:	40014400 	.word	0x40014400
 800a194:	40014800 	.word	0x40014800

0800a198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f023 0210 	bic.w	r2, r3, #16
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4b34      	ldr	r3, [pc, #208]	; (800a294 <TIM_OC2_SetConfig+0xfc>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	021b      	lsls	r3, r3, #8
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f023 0320 	bic.w	r3, r3, #32
 800a1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a29      	ldr	r2, [pc, #164]	; (800a298 <TIM_OC2_SetConfig+0x100>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC2_SetConfig+0x68>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a28      	ldr	r2, [pc, #160]	; (800a29c <TIM_OC2_SetConfig+0x104>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10d      	bne.n	800a21c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a21a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a1e      	ldr	r2, [pc, #120]	; (800a298 <TIM_OC2_SetConfig+0x100>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00f      	beq.n	800a244 <TIM_OC2_SetConfig+0xac>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a1d      	ldr	r2, [pc, #116]	; (800a29c <TIM_OC2_SetConfig+0x104>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_OC2_SetConfig+0xac>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a1c      	ldr	r2, [pc, #112]	; (800a2a0 <TIM_OC2_SetConfig+0x108>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_OC2_SetConfig+0xac>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a1b      	ldr	r2, [pc, #108]	; (800a2a4 <TIM_OC2_SetConfig+0x10c>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC2_SetConfig+0xac>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a1a      	ldr	r2, [pc, #104]	; (800a2a8 <TIM_OC2_SetConfig+0x110>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d113      	bne.n	800a26c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a24a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	621a      	str	r2, [r3, #32]
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	feff8fff 	.word	0xfeff8fff
 800a298:	40010000 	.word	0x40010000
 800a29c:	40010400 	.word	0x40010400
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	40014400 	.word	0x40014400
 800a2a8:	40014800 	.word	0x40014800

0800a2ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a27      	ldr	r2, [pc, #156]	; (800a3a4 <TIM_OC3_SetConfig+0xf8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d003      	beq.n	800a312 <TIM_OC3_SetConfig+0x66>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a26      	ldr	r2, [pc, #152]	; (800a3a8 <TIM_OC3_SetConfig+0xfc>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d10d      	bne.n	800a32e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	4313      	orrs	r3, r2
 800a324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a1c      	ldr	r2, [pc, #112]	; (800a3a4 <TIM_OC3_SetConfig+0xf8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d00f      	beq.n	800a356 <TIM_OC3_SetConfig+0xaa>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a1b      	ldr	r2, [pc, #108]	; (800a3a8 <TIM_OC3_SetConfig+0xfc>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d00b      	beq.n	800a356 <TIM_OC3_SetConfig+0xaa>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a1a      	ldr	r2, [pc, #104]	; (800a3ac <TIM_OC3_SetConfig+0x100>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d007      	beq.n	800a356 <TIM_OC3_SetConfig+0xaa>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a19      	ldr	r2, [pc, #100]	; (800a3b0 <TIM_OC3_SetConfig+0x104>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d003      	beq.n	800a356 <TIM_OC3_SetConfig+0xaa>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a18      	ldr	r2, [pc, #96]	; (800a3b4 <TIM_OC3_SetConfig+0x108>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d113      	bne.n	800a37e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	621a      	str	r2, [r3, #32]
}
 800a398:	bf00      	nop
 800a39a:	371c      	adds	r7, #28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40010400 	.word	0x40010400
 800a3ac:	40014000 	.word	0x40014000
 800a3b0:	40014400 	.word	0x40014400
 800a3b4:	40014800 	.word	0x40014800

0800a3b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a18      	ldr	r2, [pc, #96]	; (800a474 <TIM_OC4_SetConfig+0xbc>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d00f      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <TIM_OC4_SetConfig+0xc0>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d00b      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a16      	ldr	r2, [pc, #88]	; (800a47c <TIM_OC4_SetConfig+0xc4>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d007      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a15      	ldr	r2, [pc, #84]	; (800a480 <TIM_OC4_SetConfig+0xc8>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d003      	beq.n	800a438 <TIM_OC4_SetConfig+0x80>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a14      	ldr	r2, [pc, #80]	; (800a484 <TIM_OC4_SetConfig+0xcc>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d109      	bne.n	800a44c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a43e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	019b      	lsls	r3, r3, #6
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40010000 	.word	0x40010000
 800a478:	40010400 	.word	0x40010400
 800a47c:	40014000 	.word	0x40014000
 800a480:	40014400 	.word	0x40014400
 800a484:	40014800 	.word	0x40014800

0800a488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	041b      	lsls	r3, r3, #16
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a17      	ldr	r2, [pc, #92]	; (800a538 <TIM_OC5_SetConfig+0xb0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d00f      	beq.n	800a4fe <TIM_OC5_SetConfig+0x76>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a16      	ldr	r2, [pc, #88]	; (800a53c <TIM_OC5_SetConfig+0xb4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d00b      	beq.n	800a4fe <TIM_OC5_SetConfig+0x76>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a15      	ldr	r2, [pc, #84]	; (800a540 <TIM_OC5_SetConfig+0xb8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d007      	beq.n	800a4fe <TIM_OC5_SetConfig+0x76>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a14      	ldr	r2, [pc, #80]	; (800a544 <TIM_OC5_SetConfig+0xbc>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d003      	beq.n	800a4fe <TIM_OC5_SetConfig+0x76>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a13      	ldr	r2, [pc, #76]	; (800a548 <TIM_OC5_SetConfig+0xc0>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d109      	bne.n	800a512 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	621a      	str	r2, [r3, #32]
}
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	40010000 	.word	0x40010000
 800a53c:	40010400 	.word	0x40010400
 800a540:	40014000 	.word	0x40014000
 800a544:	40014400 	.word	0x40014400
 800a548:	40014800 	.word	0x40014800

0800a54c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a58e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	051b      	lsls	r3, r3, #20
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a18      	ldr	r2, [pc, #96]	; (800a600 <TIM_OC6_SetConfig+0xb4>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00f      	beq.n	800a5c4 <TIM_OC6_SetConfig+0x78>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a17      	ldr	r2, [pc, #92]	; (800a604 <TIM_OC6_SetConfig+0xb8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00b      	beq.n	800a5c4 <TIM_OC6_SetConfig+0x78>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a16      	ldr	r2, [pc, #88]	; (800a608 <TIM_OC6_SetConfig+0xbc>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d007      	beq.n	800a5c4 <TIM_OC6_SetConfig+0x78>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a15      	ldr	r2, [pc, #84]	; (800a60c <TIM_OC6_SetConfig+0xc0>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d003      	beq.n	800a5c4 <TIM_OC6_SetConfig+0x78>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a14      	ldr	r2, [pc, #80]	; (800a610 <TIM_OC6_SetConfig+0xc4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d109      	bne.n	800a5d8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	029b      	lsls	r3, r3, #10
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	621a      	str	r2, [r3, #32]
}
 800a5f2:	bf00      	nop
 800a5f4:	371c      	adds	r7, #28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	40010000 	.word	0x40010000
 800a604:	40010400 	.word	0x40010400
 800a608:	40014000 	.word	0x40014000
 800a60c:	40014400 	.word	0x40014400
 800a610:	40014800 	.word	0x40014800

0800a614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	f023 0201 	bic.w	r2, r3, #1
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a63e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	4313      	orrs	r3, r2
 800a648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f023 030a 	bic.w	r3, r3, #10
 800a650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a672:	b480      	push	{r7}
 800a674:	b087      	sub	sp, #28
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f023 0210 	bic.w	r2, r3, #16
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a69c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	031b      	lsls	r3, r3, #12
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	011b      	lsls	r3, r3, #4
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	621a      	str	r2, [r3, #32]
}
 800a6c6:	bf00      	nop
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
	...

0800a6d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <TIM_ITRx_SetConfig+0x38>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	f043 0307 	orr.w	r3, r3, #7
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	609a      	str	r2, [r3, #8]
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	ffcfff8f 	.word	0xffcfff8f

0800a710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a72a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	021a      	lsls	r2, r3, #8
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	431a      	orrs	r2, r3
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4313      	orrs	r3, r2
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	609a      	str	r2, [r3, #8]
}
 800a744:	bf00      	nop
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f003 031f 	and.w	r3, r3, #31
 800a762:	2201      	movs	r2, #1
 800a764:	fa02 f303 	lsl.w	r3, r2, r3
 800a768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6a1a      	ldr	r2, [r3, #32]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	43db      	mvns	r3, r3
 800a772:	401a      	ands	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a1a      	ldr	r2, [r3, #32]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f003 031f 	and.w	r3, r3, #31
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	fa01 f303 	lsl.w	r3, r1, r3
 800a788:	431a      	orrs	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	621a      	str	r2, [r3, #32]
}
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d101      	bne.n	800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e068      	b.n	800a886 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a2e      	ldr	r2, [pc, #184]	; (800a894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d004      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a2d      	ldr	r2, [pc, #180]	; (800a898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d108      	bne.n	800a7fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a1e      	ldr	r2, [pc, #120]	; (800a894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d01d      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a826:	d018      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a1b      	ldr	r2, [pc, #108]	; (800a89c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d013      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a1a      	ldr	r2, [pc, #104]	; (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00e      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a18      	ldr	r2, [pc, #96]	; (800a8a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d009      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a13      	ldr	r2, [pc, #76]	; (800a898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d004      	beq.n	800a85a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a14      	ldr	r2, [pc, #80]	; (800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d10c      	bne.n	800a874 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	4313      	orrs	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	40010000 	.word	0x40010000
 800a898:	40010400 	.word	0x40010400
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40000800 	.word	0x40000800
 800a8a4:	40000c00 	.word	0x40000c00
 800a8a8:	40001800 	.word	0x40001800

0800a8ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d101      	bne.n	800a8c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	e065      	b.n	800a994 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4313      	orrs	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	4313      	orrs	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	041b      	lsls	r3, r3, #16
 800a93e:	4313      	orrs	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a16      	ldr	r2, [pc, #88]	; (800a9a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d004      	beq.n	800a956 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a14      	ldr	r2, [pc, #80]	; (800a9a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d115      	bne.n	800a982 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	051b      	lsls	r3, r3, #20
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	4313      	orrs	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	4313      	orrs	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40010400 	.word	0x40010400

0800a9a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e042      	b.n	800aa7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7f6 ff45 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2224      	movs	r2, #36	; 0x24
 800aa12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0201 	bic.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fb2e 	bl	800b088 <UART_SetConfig>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d101      	bne.n	800aa36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e022      	b.n	800aa7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 f8d2 	bl	800bbe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689a      	ldr	r2, [r3, #8]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 f959 	bl	800bd2c <UART_CheckIdleState>
 800aa7a:	4603      	mov	r3, r0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08a      	sub	sp, #40	; 0x28
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	4613      	mov	r3, r2
 800aa92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	f040 8083 	bne.w	800aba6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <HAL_UART_Transmit+0x28>
 800aaa6:	88fb      	ldrh	r3, [r7, #6]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e07b      	b.n	800aba8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <HAL_UART_Transmit+0x3a>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e074      	b.n	800aba8 <HAL_UART_Transmit+0x124>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2221      	movs	r2, #33	; 0x21
 800aad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800aad6:	f7f7 fb9b 	bl	8002210 <HAL_GetTick>
 800aada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	88fa      	ldrh	r2, [r7, #6]
 800aae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	88fa      	ldrh	r2, [r7, #6]
 800aae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf4:	d108      	bne.n	800ab08 <HAL_UART_Transmit+0x84>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d104      	bne.n	800ab08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	e003      	b.n	800ab10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ab18:	e02c      	b.n	800ab74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2200      	movs	r2, #0
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f001 f949 	bl	800bdbc <UART_WaitOnFlagUntilTimeout>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e039      	b.n	800aba8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10b      	bne.n	800ab52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	61bb      	str	r3, [r7, #24]
 800ab50:	e007      	b.n	800ab62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	781a      	ldrb	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1cc      	bne.n	800ab1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2200      	movs	r2, #0
 800ab88:	2140      	movs	r1, #64	; 0x40
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f001 f916 	bl	800bdbc <UART_WaitOnFlagUntilTimeout>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e006      	b.n	800aba8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e000      	b.n	800aba8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aba6:	2302      	movs	r3, #2
  }
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3720      	adds	r7, #32
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	4613      	mov	r3, r2
 800abbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abc4:	2b20      	cmp	r3, #32
 800abc6:	f040 80bc 	bne.w	800ad42 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <HAL_UART_Receive_IT+0x26>
 800abd0:	88fb      	ldrh	r3, [r7, #6]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e0b4      	b.n	800ad44 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <HAL_UART_Receive_IT+0x38>
 800abe4:	2302      	movs	r3, #2
 800abe6:	e0ad      	b.n	800ad44 <HAL_UART_Receive_IT+0x194>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	88fa      	ldrh	r2, [r7, #6]
 800abfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	88fa      	ldrh	r2, [r7, #6]
 800ac02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac14:	d10e      	bne.n	800ac34 <HAL_UART_Receive_IT+0x84>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d105      	bne.n	800ac2a <HAL_UART_Receive_IT+0x7a>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac28:	e02d      	b.n	800ac86 <HAL_UART_Receive_IT+0xd6>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	22ff      	movs	r2, #255	; 0xff
 800ac2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac32:	e028      	b.n	800ac86 <HAL_UART_Receive_IT+0xd6>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10d      	bne.n	800ac58 <HAL_UART_Receive_IT+0xa8>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d104      	bne.n	800ac4e <HAL_UART_Receive_IT+0x9e>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	22ff      	movs	r2, #255	; 0xff
 800ac48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac4c:	e01b      	b.n	800ac86 <HAL_UART_Receive_IT+0xd6>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	227f      	movs	r2, #127	; 0x7f
 800ac52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac56:	e016      	b.n	800ac86 <HAL_UART_Receive_IT+0xd6>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac60:	d10d      	bne.n	800ac7e <HAL_UART_Receive_IT+0xce>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d104      	bne.n	800ac74 <HAL_UART_Receive_IT+0xc4>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	227f      	movs	r2, #127	; 0x7f
 800ac6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac72:	e008      	b.n	800ac86 <HAL_UART_Receive_IT+0xd6>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	223f      	movs	r2, #63	; 0x3f
 800ac78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac7c:	e003      	b.n	800ac86 <HAL_UART_Receive_IT+0xd6>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2222      	movs	r2, #34	; 0x22
 800ac92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0201 	orr.w	r2, r2, #1
 800aca4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acae:	d12a      	bne.n	800ad06 <HAL_UART_Receive_IT+0x156>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d324      	bcc.n	800ad06 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc4:	d107      	bne.n	800acd6 <HAL_UART_Receive_IT+0x126>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d103      	bne.n	800acd6 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4a1f      	ldr	r2, [pc, #124]	; (800ad50 <HAL_UART_Receive_IT+0x1a0>)
 800acd2:	66da      	str	r2, [r3, #108]	; 0x6c
 800acd4:	e002      	b.n	800acdc <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	4a1e      	ldr	r2, [pc, #120]	; (800ad54 <HAL_UART_Receive_IT+0x1a4>)
 800acda:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acf2:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ad02:	609a      	str	r2, [r3, #8]
 800ad04:	e01b      	b.n	800ad3e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0e:	d107      	bne.n	800ad20 <HAL_UART_Receive_IT+0x170>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4a0f      	ldr	r2, [pc, #60]	; (800ad58 <HAL_UART_Receive_IT+0x1a8>)
 800ad1c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ad1e:	e002      	b.n	800ad26 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a0e      	ldr	r2, [pc, #56]	; (800ad5c <HAL_UART_Receive_IT+0x1ac>)
 800ad24:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ad3c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e000      	b.n	800ad44 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800ad42:	2302      	movs	r3, #2
  }
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	0800c1c1 	.word	0x0800c1c1
 800ad54:	0800c0b9 	.word	0x0800c0b9
 800ad58:	0800c00f 	.word	0x0800c00f
 800ad5c:	0800bf65 	.word	0x0800bf65

0800ad60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad86:	4013      	ands	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d118      	bne.n	800adc2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d013      	beq.n	800adc2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d104      	bne.n	800adae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 8145 	beq.w	800b042 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
      }
      return;
 800adc0:	e13f      	b.n	800b042 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f000 80e8 	beq.w	800af9a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4ba1      	ldr	r3, [pc, #644]	; (800b054 <HAL_UART_IRQHandler+0x2f4>)
 800adce:	4013      	ands	r3, r2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d105      	bne.n	800ade0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	4ba0      	ldr	r3, [pc, #640]	; (800b058 <HAL_UART_IRQHandler+0x2f8>)
 800add8:	4013      	ands	r3, r2
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 80dd 	beq.w	800af9a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d010      	beq.n	800ae0c <HAL_UART_IRQHandler+0xac>
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2201      	movs	r2, #1
 800adfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae02:	f043 0201 	orr.w	r2, r3, #1
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d010      	beq.n	800ae38 <HAL_UART_IRQHandler+0xd8>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00b      	beq.n	800ae38 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2202      	movs	r2, #2
 800ae26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2e:	f043 0204 	orr.w	r2, r3, #4
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	f003 0304 	and.w	r3, r3, #4
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d010      	beq.n	800ae64 <HAL_UART_IRQHandler+0x104>
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2204      	movs	r2, #4
 800ae52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5a:	f043 0202 	orr.w	r2, r3, #2
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d015      	beq.n	800ae9a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	f003 0320 	and.w	r3, r3, #32
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4b76      	ldr	r3, [pc, #472]	; (800b054 <HAL_UART_IRQHandler+0x2f4>)
 800ae7c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00b      	beq.n	800ae9a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2208      	movs	r2, #8
 800ae88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae90:	f043 0208 	orr.w	r2, r3, #8
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d011      	beq.n	800aec8 <HAL_UART_IRQHandler+0x168>
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00c      	beq.n	800aec8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aebe:	f043 0220 	orr.w	r2, r3, #32
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 80b9 	beq.w	800b046 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	f003 0320 	and.w	r3, r3, #32
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d011      	beq.n	800af02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	f003 0320 	and.w	r3, r3, #32
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d104      	bne.n	800aef2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af14:	2b40      	cmp	r3, #64	; 0x40
 800af16:	d004      	beq.n	800af22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d031      	beq.n	800af86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 ffca 	bl	800bebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af32:	2b40      	cmp	r3, #64	; 0x40
 800af34:	d123      	bne.n	800af7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d013      	beq.n	800af76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af52:	4a42      	ldr	r2, [pc, #264]	; (800b05c <HAL_UART_IRQHandler+0x2fc>)
 800af54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f8 feca 	bl	8003cf4 <HAL_DMA_Abort_IT>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d017      	beq.n	800af96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	e00f      	b.n	800af96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f87c 	bl	800b074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	e00b      	b.n	800af96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f878 	bl	800b074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	e007      	b.n	800af96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f874 	bl	800b074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800af94:	e057      	b.n	800b046 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af96:	bf00      	nop
    return;
 800af98:	e055      	b.n	800b046 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00d      	beq.n	800afc0 <HAL_UART_IRQHandler+0x260>
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d008      	beq.n	800afc0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800afb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f985 	bl	800c2c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afbe:	e045      	b.n	800b04c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d012      	beq.n	800aff0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d104      	bne.n	800afde <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d008      	beq.n	800aff0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d031      	beq.n	800b04a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
    }
    return;
 800afee:	e02c      	b.n	800b04a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d008      	beq.n	800b00c <HAL_UART_IRQHandler+0x2ac>
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d003      	beq.n	800b00c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 ff93 	bl	800bf30 <UART_EndTransmit_IT>
    return;
 800b00a:	e01f      	b.n	800b04c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d008      	beq.n	800b028 <HAL_UART_IRQHandler+0x2c8>
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 f965 	bl	800c2f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b026:	e011      	b.n	800b04c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00c      	beq.n	800b04c <HAL_UART_IRQHandler+0x2ec>
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	da09      	bge.n	800b04c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 f94f 	bl	800c2dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b03e:	bf00      	nop
 800b040:	e004      	b.n	800b04c <HAL_UART_IRQHandler+0x2ec>
      return;
 800b042:	bf00      	nop
 800b044:	e002      	b.n	800b04c <HAL_UART_IRQHandler+0x2ec>
    return;
 800b046:	bf00      	nop
 800b048:	e000      	b.n	800b04c <HAL_UART_IRQHandler+0x2ec>
    return;
 800b04a:	bf00      	nop
  }
}
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	10000001 	.word	0x10000001
 800b058:	04000120 	.word	0x04000120
 800b05c:	0800bf05 	.word	0x0800bf05

0800b060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b088:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b08c:	b08e      	sub	sp, #56	; 0x38
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689a      	ldr	r2, [r3, #8]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	4bc1      	ldr	r3, [pc, #772]	; (800b3c8 <UART_SetConfig+0x340>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	6812      	ldr	r2, [r2, #0]
 800b0c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4ab7      	ldr	r2, [pc, #732]	; (800b3cc <UART_SetConfig+0x344>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d004      	beq.n	800b0fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	4bb2      	ldr	r3, [pc, #712]	; (800b3d0 <UART_SetConfig+0x348>)
 800b106:	4013      	ands	r3, r2
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6812      	ldr	r2, [r2, #0]
 800b10c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b10e:	430b      	orrs	r3, r1
 800b110:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	f023 010f 	bic.w	r1, r3, #15
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4aa9      	ldr	r2, [pc, #676]	; (800b3d4 <UART_SetConfig+0x34c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d177      	bne.n	800b222 <UART_SetConfig+0x19a>
 800b132:	4ba9      	ldr	r3, [pc, #676]	; (800b3d8 <UART_SetConfig+0x350>)
 800b134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b13a:	2b28      	cmp	r3, #40	; 0x28
 800b13c:	d86c      	bhi.n	800b218 <UART_SetConfig+0x190>
 800b13e:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <UART_SetConfig+0xbc>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b1e9 	.word	0x0800b1e9
 800b148:	0800b219 	.word	0x0800b219
 800b14c:	0800b219 	.word	0x0800b219
 800b150:	0800b219 	.word	0x0800b219
 800b154:	0800b219 	.word	0x0800b219
 800b158:	0800b219 	.word	0x0800b219
 800b15c:	0800b219 	.word	0x0800b219
 800b160:	0800b219 	.word	0x0800b219
 800b164:	0800b1f1 	.word	0x0800b1f1
 800b168:	0800b219 	.word	0x0800b219
 800b16c:	0800b219 	.word	0x0800b219
 800b170:	0800b219 	.word	0x0800b219
 800b174:	0800b219 	.word	0x0800b219
 800b178:	0800b219 	.word	0x0800b219
 800b17c:	0800b219 	.word	0x0800b219
 800b180:	0800b219 	.word	0x0800b219
 800b184:	0800b1f9 	.word	0x0800b1f9
 800b188:	0800b219 	.word	0x0800b219
 800b18c:	0800b219 	.word	0x0800b219
 800b190:	0800b219 	.word	0x0800b219
 800b194:	0800b219 	.word	0x0800b219
 800b198:	0800b219 	.word	0x0800b219
 800b19c:	0800b219 	.word	0x0800b219
 800b1a0:	0800b219 	.word	0x0800b219
 800b1a4:	0800b201 	.word	0x0800b201
 800b1a8:	0800b219 	.word	0x0800b219
 800b1ac:	0800b219 	.word	0x0800b219
 800b1b0:	0800b219 	.word	0x0800b219
 800b1b4:	0800b219 	.word	0x0800b219
 800b1b8:	0800b219 	.word	0x0800b219
 800b1bc:	0800b219 	.word	0x0800b219
 800b1c0:	0800b219 	.word	0x0800b219
 800b1c4:	0800b209 	.word	0x0800b209
 800b1c8:	0800b219 	.word	0x0800b219
 800b1cc:	0800b219 	.word	0x0800b219
 800b1d0:	0800b219 	.word	0x0800b219
 800b1d4:	0800b219 	.word	0x0800b219
 800b1d8:	0800b219 	.word	0x0800b219
 800b1dc:	0800b219 	.word	0x0800b219
 800b1e0:	0800b219 	.word	0x0800b219
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e233      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	e22f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b1f8:	2308      	movs	r3, #8
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	e22b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b200:	2310      	movs	r3, #16
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e227      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b208:	2320      	movs	r3, #32
 800b20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20e:	e223      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b210:	2340      	movs	r3, #64	; 0x40
 800b212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b216:	e21f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b218:	2380      	movs	r3, #128	; 0x80
 800b21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21e:	bf00      	nop
 800b220:	e21a      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a6d      	ldr	r2, [pc, #436]	; (800b3dc <UART_SetConfig+0x354>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d132      	bne.n	800b292 <UART_SetConfig+0x20a>
 800b22c:	4b6a      	ldr	r3, [pc, #424]	; (800b3d8 <UART_SetConfig+0x350>)
 800b22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b230:	f003 0307 	and.w	r3, r3, #7
 800b234:	2b05      	cmp	r3, #5
 800b236:	d827      	bhi.n	800b288 <UART_SetConfig+0x200>
 800b238:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <UART_SetConfig+0x1b8>)
 800b23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23e:	bf00      	nop
 800b240:	0800b259 	.word	0x0800b259
 800b244:	0800b261 	.word	0x0800b261
 800b248:	0800b269 	.word	0x0800b269
 800b24c:	0800b271 	.word	0x0800b271
 800b250:	0800b279 	.word	0x0800b279
 800b254:	0800b281 	.word	0x0800b281
 800b258:	2300      	movs	r3, #0
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e1fb      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b260:	2304      	movs	r3, #4
 800b262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b266:	e1f7      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b268:	2308      	movs	r3, #8
 800b26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26e:	e1f3      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b270:	2310      	movs	r3, #16
 800b272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b276:	e1ef      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b278:	2320      	movs	r3, #32
 800b27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b27e:	e1eb      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b286:	e1e7      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b288:	2380      	movs	r3, #128	; 0x80
 800b28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28e:	bf00      	nop
 800b290:	e1e2      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a52      	ldr	r2, [pc, #328]	; (800b3e0 <UART_SetConfig+0x358>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d132      	bne.n	800b302 <UART_SetConfig+0x27a>
 800b29c:	4b4e      	ldr	r3, [pc, #312]	; (800b3d8 <UART_SetConfig+0x350>)
 800b29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a0:	f003 0307 	and.w	r3, r3, #7
 800b2a4:	2b05      	cmp	r3, #5
 800b2a6:	d827      	bhi.n	800b2f8 <UART_SetConfig+0x270>
 800b2a8:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <UART_SetConfig+0x228>)
 800b2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ae:	bf00      	nop
 800b2b0:	0800b2c9 	.word	0x0800b2c9
 800b2b4:	0800b2d1 	.word	0x0800b2d1
 800b2b8:	0800b2d9 	.word	0x0800b2d9
 800b2bc:	0800b2e1 	.word	0x0800b2e1
 800b2c0:	0800b2e9 	.word	0x0800b2e9
 800b2c4:	0800b2f1 	.word	0x0800b2f1
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	e1c3      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d6:	e1bf      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b2d8:	2308      	movs	r3, #8
 800b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2de:	e1bb      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2e6:	e1b7      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b2e8:	2320      	movs	r3, #32
 800b2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ee:	e1b3      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b2f0:	2340      	movs	r3, #64	; 0x40
 800b2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f6:	e1af      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b2f8:	2380      	movs	r3, #128	; 0x80
 800b2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fe:	bf00      	nop
 800b300:	e1aa      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a37      	ldr	r2, [pc, #220]	; (800b3e4 <UART_SetConfig+0x35c>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d132      	bne.n	800b372 <UART_SetConfig+0x2ea>
 800b30c:	4b32      	ldr	r3, [pc, #200]	; (800b3d8 <UART_SetConfig+0x350>)
 800b30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	2b05      	cmp	r3, #5
 800b316:	d827      	bhi.n	800b368 <UART_SetConfig+0x2e0>
 800b318:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0x298>)
 800b31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31e:	bf00      	nop
 800b320:	0800b339 	.word	0x0800b339
 800b324:	0800b341 	.word	0x0800b341
 800b328:	0800b349 	.word	0x0800b349
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b359 	.word	0x0800b359
 800b334:	0800b361 	.word	0x0800b361
 800b338:	2300      	movs	r3, #0
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e18b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b340:	2304      	movs	r3, #4
 800b342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b346:	e187      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b348:	2308      	movs	r3, #8
 800b34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34e:	e183      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b350:	2310      	movs	r3, #16
 800b352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b356:	e17f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b358:	2320      	movs	r3, #32
 800b35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35e:	e17b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b360:	2340      	movs	r3, #64	; 0x40
 800b362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b366:	e177      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b368:	2380      	movs	r3, #128	; 0x80
 800b36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36e:	bf00      	nop
 800b370:	e172      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a1c      	ldr	r2, [pc, #112]	; (800b3e8 <UART_SetConfig+0x360>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d144      	bne.n	800b406 <UART_SetConfig+0x37e>
 800b37c:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <UART_SetConfig+0x350>)
 800b37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	2b05      	cmp	r3, #5
 800b386:	d839      	bhi.n	800b3fc <UART_SetConfig+0x374>
 800b388:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <UART_SetConfig+0x308>)
 800b38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38e:	bf00      	nop
 800b390:	0800b3a9 	.word	0x0800b3a9
 800b394:	0800b3b1 	.word	0x0800b3b1
 800b398:	0800b3b9 	.word	0x0800b3b9
 800b39c:	0800b3c1 	.word	0x0800b3c1
 800b3a0:	0800b3ed 	.word	0x0800b3ed
 800b3a4:	0800b3f5 	.word	0x0800b3f5
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ae:	e153      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b6:	e14f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b3b8:	2308      	movs	r3, #8
 800b3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3be:	e14b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b3c0:	2310      	movs	r3, #16
 800b3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c6:	e147      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b3c8:	cfff69f3 	.word	0xcfff69f3
 800b3cc:	58000c00 	.word	0x58000c00
 800b3d0:	11fff4ff 	.word	0x11fff4ff
 800b3d4:	40011000 	.word	0x40011000
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	40004400 	.word	0x40004400
 800b3e0:	40004800 	.word	0x40004800
 800b3e4:	40004c00 	.word	0x40004c00
 800b3e8:	40005000 	.word	0x40005000
 800b3ec:	2320      	movs	r3, #32
 800b3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3f2:	e131      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b3f4:	2340      	movs	r3, #64	; 0x40
 800b3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fa:	e12d      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b3fc:	2380      	movs	r3, #128	; 0x80
 800b3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b402:	bf00      	nop
 800b404:	e128      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4ab6      	ldr	r2, [pc, #728]	; (800b6e4 <UART_SetConfig+0x65c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d178      	bne.n	800b502 <UART_SetConfig+0x47a>
 800b410:	4bb5      	ldr	r3, [pc, #724]	; (800b6e8 <UART_SetConfig+0x660>)
 800b412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b418:	2b28      	cmp	r3, #40	; 0x28
 800b41a:	d86d      	bhi.n	800b4f8 <UART_SetConfig+0x470>
 800b41c:	a201      	add	r2, pc, #4	; (adr r2, 800b424 <UART_SetConfig+0x39c>)
 800b41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b422:	bf00      	nop
 800b424:	0800b4c9 	.word	0x0800b4c9
 800b428:	0800b4f9 	.word	0x0800b4f9
 800b42c:	0800b4f9 	.word	0x0800b4f9
 800b430:	0800b4f9 	.word	0x0800b4f9
 800b434:	0800b4f9 	.word	0x0800b4f9
 800b438:	0800b4f9 	.word	0x0800b4f9
 800b43c:	0800b4f9 	.word	0x0800b4f9
 800b440:	0800b4f9 	.word	0x0800b4f9
 800b444:	0800b4d1 	.word	0x0800b4d1
 800b448:	0800b4f9 	.word	0x0800b4f9
 800b44c:	0800b4f9 	.word	0x0800b4f9
 800b450:	0800b4f9 	.word	0x0800b4f9
 800b454:	0800b4f9 	.word	0x0800b4f9
 800b458:	0800b4f9 	.word	0x0800b4f9
 800b45c:	0800b4f9 	.word	0x0800b4f9
 800b460:	0800b4f9 	.word	0x0800b4f9
 800b464:	0800b4d9 	.word	0x0800b4d9
 800b468:	0800b4f9 	.word	0x0800b4f9
 800b46c:	0800b4f9 	.word	0x0800b4f9
 800b470:	0800b4f9 	.word	0x0800b4f9
 800b474:	0800b4f9 	.word	0x0800b4f9
 800b478:	0800b4f9 	.word	0x0800b4f9
 800b47c:	0800b4f9 	.word	0x0800b4f9
 800b480:	0800b4f9 	.word	0x0800b4f9
 800b484:	0800b4e1 	.word	0x0800b4e1
 800b488:	0800b4f9 	.word	0x0800b4f9
 800b48c:	0800b4f9 	.word	0x0800b4f9
 800b490:	0800b4f9 	.word	0x0800b4f9
 800b494:	0800b4f9 	.word	0x0800b4f9
 800b498:	0800b4f9 	.word	0x0800b4f9
 800b49c:	0800b4f9 	.word	0x0800b4f9
 800b4a0:	0800b4f9 	.word	0x0800b4f9
 800b4a4:	0800b4e9 	.word	0x0800b4e9
 800b4a8:	0800b4f9 	.word	0x0800b4f9
 800b4ac:	0800b4f9 	.word	0x0800b4f9
 800b4b0:	0800b4f9 	.word	0x0800b4f9
 800b4b4:	0800b4f9 	.word	0x0800b4f9
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b4f9 	.word	0x0800b4f9
 800b4c0:	0800b4f9 	.word	0x0800b4f9
 800b4c4:	0800b4f1 	.word	0x0800b4f1
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ce:	e0c3      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4d6:	e0bf      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b4d8:	2308      	movs	r3, #8
 800b4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4de:	e0bb      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4e6:	e0b7      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b4e8:	2320      	movs	r3, #32
 800b4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ee:	e0b3      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b4f0:	2340      	movs	r3, #64	; 0x40
 800b4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f6:	e0af      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b4f8:	2380      	movs	r3, #128	; 0x80
 800b4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fe:	bf00      	nop
 800b500:	e0aa      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a79      	ldr	r2, [pc, #484]	; (800b6ec <UART_SetConfig+0x664>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d132      	bne.n	800b572 <UART_SetConfig+0x4ea>
 800b50c:	4b76      	ldr	r3, [pc, #472]	; (800b6e8 <UART_SetConfig+0x660>)
 800b50e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b510:	f003 0307 	and.w	r3, r3, #7
 800b514:	2b05      	cmp	r3, #5
 800b516:	d827      	bhi.n	800b568 <UART_SetConfig+0x4e0>
 800b518:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <UART_SetConfig+0x498>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b539 	.word	0x0800b539
 800b524:	0800b541 	.word	0x0800b541
 800b528:	0800b549 	.word	0x0800b549
 800b52c:	0800b551 	.word	0x0800b551
 800b530:	0800b559 	.word	0x0800b559
 800b534:	0800b561 	.word	0x0800b561
 800b538:	2300      	movs	r3, #0
 800b53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53e:	e08b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b540:	2304      	movs	r3, #4
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b546:	e087      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b548:	2308      	movs	r3, #8
 800b54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b54e:	e083      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b550:	2310      	movs	r3, #16
 800b552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b556:	e07f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b558:	2320      	movs	r3, #32
 800b55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b55e:	e07b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b560:	2340      	movs	r3, #64	; 0x40
 800b562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b566:	e077      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b568:	2380      	movs	r3, #128	; 0x80
 800b56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b56e:	bf00      	nop
 800b570:	e072      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a5e      	ldr	r2, [pc, #376]	; (800b6f0 <UART_SetConfig+0x668>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d132      	bne.n	800b5e2 <UART_SetConfig+0x55a>
 800b57c:	4b5a      	ldr	r3, [pc, #360]	; (800b6e8 <UART_SetConfig+0x660>)
 800b57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	2b05      	cmp	r3, #5
 800b586:	d827      	bhi.n	800b5d8 <UART_SetConfig+0x550>
 800b588:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <UART_SetConfig+0x508>)
 800b58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58e:	bf00      	nop
 800b590:	0800b5a9 	.word	0x0800b5a9
 800b594:	0800b5b1 	.word	0x0800b5b1
 800b598:	0800b5b9 	.word	0x0800b5b9
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c9 	.word	0x0800b5c9
 800b5a4:	0800b5d1 	.word	0x0800b5d1
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ae:	e053      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5b0:	2304      	movs	r3, #4
 800b5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5b6:	e04f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5b8:	2308      	movs	r3, #8
 800b5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5be:	e04b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5c0:	2310      	movs	r3, #16
 800b5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5c6:	e047      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5c8:	2320      	movs	r3, #32
 800b5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ce:	e043      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5d0:	2340      	movs	r3, #64	; 0x40
 800b5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5d6:	e03f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5d8:	2380      	movs	r3, #128	; 0x80
 800b5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5de:	bf00      	nop
 800b5e0:	e03a      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a43      	ldr	r2, [pc, #268]	; (800b6f4 <UART_SetConfig+0x66c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d132      	bne.n	800b652 <UART_SetConfig+0x5ca>
 800b5ec:	4b3e      	ldr	r3, [pc, #248]	; (800b6e8 <UART_SetConfig+0x660>)
 800b5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	2b05      	cmp	r3, #5
 800b5f6:	d827      	bhi.n	800b648 <UART_SetConfig+0x5c0>
 800b5f8:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <UART_SetConfig+0x578>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b619 	.word	0x0800b619
 800b604:	0800b621 	.word	0x0800b621
 800b608:	0800b629 	.word	0x0800b629
 800b60c:	0800b631 	.word	0x0800b631
 800b610:	0800b639 	.word	0x0800b639
 800b614:	0800b641 	.word	0x0800b641
 800b618:	2302      	movs	r3, #2
 800b61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b61e:	e01b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b620:	2304      	movs	r3, #4
 800b622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b626:	e017      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b628:	2308      	movs	r3, #8
 800b62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62e:	e013      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b630:	2310      	movs	r3, #16
 800b632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b636:	e00f      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b638:	2320      	movs	r3, #32
 800b63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b63e:	e00b      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b640:	2340      	movs	r3, #64	; 0x40
 800b642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b646:	e007      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b648:	2380      	movs	r3, #128	; 0x80
 800b64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b64e:	bf00      	nop
 800b650:	e002      	b.n	800b658 <UART_SetConfig+0x5d0>
 800b652:	2380      	movs	r3, #128	; 0x80
 800b654:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a25      	ldr	r2, [pc, #148]	; (800b6f4 <UART_SetConfig+0x66c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	f040 80b8 	bne.w	800b7d4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b668:	2b08      	cmp	r3, #8
 800b66a:	d019      	beq.n	800b6a0 <UART_SetConfig+0x618>
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	dc04      	bgt.n	800b67a <UART_SetConfig+0x5f2>
 800b670:	2b02      	cmp	r3, #2
 800b672:	d009      	beq.n	800b688 <UART_SetConfig+0x600>
 800b674:	2b04      	cmp	r3, #4
 800b676:	d00b      	beq.n	800b690 <UART_SetConfig+0x608>
 800b678:	e042      	b.n	800b700 <UART_SetConfig+0x678>
 800b67a:	2b20      	cmp	r3, #32
 800b67c:	d02b      	beq.n	800b6d6 <UART_SetConfig+0x64e>
 800b67e:	2b40      	cmp	r3, #64	; 0x40
 800b680:	d02c      	beq.n	800b6dc <UART_SetConfig+0x654>
 800b682:	2b10      	cmp	r3, #16
 800b684:	d014      	beq.n	800b6b0 <UART_SetConfig+0x628>
 800b686:	e03b      	b.n	800b700 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b688:	f7fd fa4e 	bl	8008b28 <HAL_RCCEx_GetD3PCLK1Freq>
 800b68c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b68e:	e03d      	b.n	800b70c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b690:	f107 0314 	add.w	r3, r7, #20
 800b694:	4618      	mov	r0, r3
 800b696:	f7fd fa5d 	bl	8008b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b69e:	e035      	b.n	800b70c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6a0:	f107 0308 	add.w	r3, r7, #8
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fd fba1 	bl	8008dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ae:	e02d      	b.n	800b70c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6b0:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <UART_SetConfig+0x660>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d009      	beq.n	800b6d0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6bc:	4b0a      	ldr	r3, [pc, #40]	; (800b6e8 <UART_SetConfig+0x660>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	08db      	lsrs	r3, r3, #3
 800b6c2:	f003 0303 	and.w	r3, r3, #3
 800b6c6:	4a0c      	ldr	r2, [pc, #48]	; (800b6f8 <UART_SetConfig+0x670>)
 800b6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6ce:	e01d      	b.n	800b70c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b6d0:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <UART_SetConfig+0x670>)
 800b6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6d4:	e01a      	b.n	800b70c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6d6:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <UART_SetConfig+0x674>)
 800b6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6da:	e017      	b.n	800b70c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e2:	e013      	b.n	800b70c <UART_SetConfig+0x684>
 800b6e4:	40011400 	.word	0x40011400
 800b6e8:	58024400 	.word	0x58024400
 800b6ec:	40007800 	.word	0x40007800
 800b6f0:	40007c00 	.word	0x40007c00
 800b6f4:	58000c00 	.word	0x58000c00
 800b6f8:	03d09000 	.word	0x03d09000
 800b6fc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b70a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f000 824d 	beq.w	800bbae <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	4aad      	ldr	r2, [pc, #692]	; (800b9d0 <UART_SetConfig+0x948>)
 800b71a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b71e:	461a      	mov	r2, r3
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	fbb3 f3f2 	udiv	r3, r3, r2
 800b726:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	6a3a      	ldr	r2, [r7, #32]
 800b734:	429a      	cmp	r2, r3
 800b736:	d305      	bcc.n	800b744 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b74a:	e230      	b.n	800bbae <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74e:	4618      	mov	r0, r3
 800b750:	f04f 0100 	mov.w	r1, #0
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	4a9d      	ldr	r2, [pc, #628]	; (800b9d0 <UART_SetConfig+0x948>)
 800b75a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	f04f 0400 	mov.w	r4, #0
 800b764:	461a      	mov	r2, r3
 800b766:	4623      	mov	r3, r4
 800b768:	f7f4 fdb6 	bl	80002d8 <__aeabi_uldivmod>
 800b76c:	4603      	mov	r3, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	4619      	mov	r1, r3
 800b772:	4622      	mov	r2, r4
 800b774:	f04f 0300 	mov.w	r3, #0
 800b778:	f04f 0400 	mov.w	r4, #0
 800b77c:	0214      	lsls	r4, r2, #8
 800b77e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b782:	020b      	lsls	r3, r1, #8
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	6852      	ldr	r2, [r2, #4]
 800b788:	0852      	lsrs	r2, r2, #1
 800b78a:	4611      	mov	r1, r2
 800b78c:	f04f 0200 	mov.w	r2, #0
 800b790:	eb13 0b01 	adds.w	fp, r3, r1
 800b794:	eb44 0c02 	adc.w	ip, r4, r2
 800b798:	4658      	mov	r0, fp
 800b79a:	4661      	mov	r1, ip
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f04f 0400 	mov.w	r4, #0
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	f7f4 fd96 	bl	80002d8 <__aeabi_uldivmod>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7b8:	d308      	bcc.n	800b7cc <UART_SetConfig+0x744>
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7c0:	d204      	bcs.n	800b7cc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7c8:	60da      	str	r2, [r3, #12]
 800b7ca:	e1f0      	b.n	800bbae <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b7d2:	e1ec      	b.n	800bbae <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7dc:	f040 8100 	bne.w	800b9e0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b7e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7e4:	2b40      	cmp	r3, #64	; 0x40
 800b7e6:	f200 80b7 	bhi.w	800b958 <UART_SetConfig+0x8d0>
 800b7ea:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <UART_SetConfig+0x768>)
 800b7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f0:	0800b8f5 	.word	0x0800b8f5
 800b7f4:	0800b8fd 	.word	0x0800b8fd
 800b7f8:	0800b959 	.word	0x0800b959
 800b7fc:	0800b959 	.word	0x0800b959
 800b800:	0800b905 	.word	0x0800b905
 800b804:	0800b959 	.word	0x0800b959
 800b808:	0800b959 	.word	0x0800b959
 800b80c:	0800b959 	.word	0x0800b959
 800b810:	0800b915 	.word	0x0800b915
 800b814:	0800b959 	.word	0x0800b959
 800b818:	0800b959 	.word	0x0800b959
 800b81c:	0800b959 	.word	0x0800b959
 800b820:	0800b959 	.word	0x0800b959
 800b824:	0800b959 	.word	0x0800b959
 800b828:	0800b959 	.word	0x0800b959
 800b82c:	0800b959 	.word	0x0800b959
 800b830:	0800b925 	.word	0x0800b925
 800b834:	0800b959 	.word	0x0800b959
 800b838:	0800b959 	.word	0x0800b959
 800b83c:	0800b959 	.word	0x0800b959
 800b840:	0800b959 	.word	0x0800b959
 800b844:	0800b959 	.word	0x0800b959
 800b848:	0800b959 	.word	0x0800b959
 800b84c:	0800b959 	.word	0x0800b959
 800b850:	0800b959 	.word	0x0800b959
 800b854:	0800b959 	.word	0x0800b959
 800b858:	0800b959 	.word	0x0800b959
 800b85c:	0800b959 	.word	0x0800b959
 800b860:	0800b959 	.word	0x0800b959
 800b864:	0800b959 	.word	0x0800b959
 800b868:	0800b959 	.word	0x0800b959
 800b86c:	0800b959 	.word	0x0800b959
 800b870:	0800b94b 	.word	0x0800b94b
 800b874:	0800b959 	.word	0x0800b959
 800b878:	0800b959 	.word	0x0800b959
 800b87c:	0800b959 	.word	0x0800b959
 800b880:	0800b959 	.word	0x0800b959
 800b884:	0800b959 	.word	0x0800b959
 800b888:	0800b959 	.word	0x0800b959
 800b88c:	0800b959 	.word	0x0800b959
 800b890:	0800b959 	.word	0x0800b959
 800b894:	0800b959 	.word	0x0800b959
 800b898:	0800b959 	.word	0x0800b959
 800b89c:	0800b959 	.word	0x0800b959
 800b8a0:	0800b959 	.word	0x0800b959
 800b8a4:	0800b959 	.word	0x0800b959
 800b8a8:	0800b959 	.word	0x0800b959
 800b8ac:	0800b959 	.word	0x0800b959
 800b8b0:	0800b959 	.word	0x0800b959
 800b8b4:	0800b959 	.word	0x0800b959
 800b8b8:	0800b959 	.word	0x0800b959
 800b8bc:	0800b959 	.word	0x0800b959
 800b8c0:	0800b959 	.word	0x0800b959
 800b8c4:	0800b959 	.word	0x0800b959
 800b8c8:	0800b959 	.word	0x0800b959
 800b8cc:	0800b959 	.word	0x0800b959
 800b8d0:	0800b959 	.word	0x0800b959
 800b8d4:	0800b959 	.word	0x0800b959
 800b8d8:	0800b959 	.word	0x0800b959
 800b8dc:	0800b959 	.word	0x0800b959
 800b8e0:	0800b959 	.word	0x0800b959
 800b8e4:	0800b959 	.word	0x0800b959
 800b8e8:	0800b959 	.word	0x0800b959
 800b8ec:	0800b959 	.word	0x0800b959
 800b8f0:	0800b951 	.word	0x0800b951
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8f4:	f7fc f9fe 	bl	8007cf4 <HAL_RCC_GetPCLK1Freq>
 800b8f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8fa:	e033      	b.n	800b964 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8fc:	f7fc fa10 	bl	8007d20 <HAL_RCC_GetPCLK2Freq>
 800b900:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b902:	e02f      	b.n	800b964 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b904:	f107 0314 	add.w	r3, r7, #20
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fd f923 	bl	8008b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b912:	e027      	b.n	800b964 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b914:	f107 0308 	add.w	r3, r7, #8
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fd fa67 	bl	8008dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b922:	e01f      	b.n	800b964 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b924:	4b2b      	ldr	r3, [pc, #172]	; (800b9d4 <UART_SetConfig+0x94c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b930:	4b28      	ldr	r3, [pc, #160]	; (800b9d4 <UART_SetConfig+0x94c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	08db      	lsrs	r3, r3, #3
 800b936:	f003 0303 	and.w	r3, r3, #3
 800b93a:	4a27      	ldr	r2, [pc, #156]	; (800b9d8 <UART_SetConfig+0x950>)
 800b93c:	fa22 f303 	lsr.w	r3, r2, r3
 800b940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b942:	e00f      	b.n	800b964 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b944:	4b24      	ldr	r3, [pc, #144]	; (800b9d8 <UART_SetConfig+0x950>)
 800b946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b948:	e00c      	b.n	800b964 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b94a:	4b24      	ldr	r3, [pc, #144]	; (800b9dc <UART_SetConfig+0x954>)
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b94e:	e009      	b.n	800b964 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b954:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b956:	e005      	b.n	800b964 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b958:	2300      	movs	r3, #0
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 8121 	beq.w	800bbae <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	4a17      	ldr	r2, [pc, #92]	; (800b9d0 <UART_SetConfig+0x948>)
 800b972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b976:	461a      	mov	r2, r3
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b97e:	005a      	lsls	r2, r3, #1
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	085b      	lsrs	r3, r3, #1
 800b986:	441a      	add	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b990:	b29b      	uxth	r3, r3
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	2b0f      	cmp	r3, #15
 800b998:	d916      	bls.n	800b9c8 <UART_SetConfig+0x940>
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a0:	d212      	bcs.n	800b9c8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f023 030f 	bic.w	r3, r3, #15
 800b9aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	085b      	lsrs	r3, r3, #1
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	f003 0307 	and.w	r3, r3, #7
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9c4:	60da      	str	r2, [r3, #12]
 800b9c6:	e0f2      	b.n	800bbae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b9ce:	e0ee      	b.n	800bbae <UART_SetConfig+0xb26>
 800b9d0:	0800c7e4 	.word	0x0800c7e4
 800b9d4:	58024400 	.word	0x58024400
 800b9d8:	03d09000 	.word	0x03d09000
 800b9dc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9e4:	2b40      	cmp	r3, #64	; 0x40
 800b9e6:	f200 80b7 	bhi.w	800bb58 <UART_SetConfig+0xad0>
 800b9ea:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <UART_SetConfig+0x968>)
 800b9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f0:	0800baf5 	.word	0x0800baf5
 800b9f4:	0800bafd 	.word	0x0800bafd
 800b9f8:	0800bb59 	.word	0x0800bb59
 800b9fc:	0800bb59 	.word	0x0800bb59
 800ba00:	0800bb05 	.word	0x0800bb05
 800ba04:	0800bb59 	.word	0x0800bb59
 800ba08:	0800bb59 	.word	0x0800bb59
 800ba0c:	0800bb59 	.word	0x0800bb59
 800ba10:	0800bb15 	.word	0x0800bb15
 800ba14:	0800bb59 	.word	0x0800bb59
 800ba18:	0800bb59 	.word	0x0800bb59
 800ba1c:	0800bb59 	.word	0x0800bb59
 800ba20:	0800bb59 	.word	0x0800bb59
 800ba24:	0800bb59 	.word	0x0800bb59
 800ba28:	0800bb59 	.word	0x0800bb59
 800ba2c:	0800bb59 	.word	0x0800bb59
 800ba30:	0800bb25 	.word	0x0800bb25
 800ba34:	0800bb59 	.word	0x0800bb59
 800ba38:	0800bb59 	.word	0x0800bb59
 800ba3c:	0800bb59 	.word	0x0800bb59
 800ba40:	0800bb59 	.word	0x0800bb59
 800ba44:	0800bb59 	.word	0x0800bb59
 800ba48:	0800bb59 	.word	0x0800bb59
 800ba4c:	0800bb59 	.word	0x0800bb59
 800ba50:	0800bb59 	.word	0x0800bb59
 800ba54:	0800bb59 	.word	0x0800bb59
 800ba58:	0800bb59 	.word	0x0800bb59
 800ba5c:	0800bb59 	.word	0x0800bb59
 800ba60:	0800bb59 	.word	0x0800bb59
 800ba64:	0800bb59 	.word	0x0800bb59
 800ba68:	0800bb59 	.word	0x0800bb59
 800ba6c:	0800bb59 	.word	0x0800bb59
 800ba70:	0800bb4b 	.word	0x0800bb4b
 800ba74:	0800bb59 	.word	0x0800bb59
 800ba78:	0800bb59 	.word	0x0800bb59
 800ba7c:	0800bb59 	.word	0x0800bb59
 800ba80:	0800bb59 	.word	0x0800bb59
 800ba84:	0800bb59 	.word	0x0800bb59
 800ba88:	0800bb59 	.word	0x0800bb59
 800ba8c:	0800bb59 	.word	0x0800bb59
 800ba90:	0800bb59 	.word	0x0800bb59
 800ba94:	0800bb59 	.word	0x0800bb59
 800ba98:	0800bb59 	.word	0x0800bb59
 800ba9c:	0800bb59 	.word	0x0800bb59
 800baa0:	0800bb59 	.word	0x0800bb59
 800baa4:	0800bb59 	.word	0x0800bb59
 800baa8:	0800bb59 	.word	0x0800bb59
 800baac:	0800bb59 	.word	0x0800bb59
 800bab0:	0800bb59 	.word	0x0800bb59
 800bab4:	0800bb59 	.word	0x0800bb59
 800bab8:	0800bb59 	.word	0x0800bb59
 800babc:	0800bb59 	.word	0x0800bb59
 800bac0:	0800bb59 	.word	0x0800bb59
 800bac4:	0800bb59 	.word	0x0800bb59
 800bac8:	0800bb59 	.word	0x0800bb59
 800bacc:	0800bb59 	.word	0x0800bb59
 800bad0:	0800bb59 	.word	0x0800bb59
 800bad4:	0800bb59 	.word	0x0800bb59
 800bad8:	0800bb59 	.word	0x0800bb59
 800badc:	0800bb59 	.word	0x0800bb59
 800bae0:	0800bb59 	.word	0x0800bb59
 800bae4:	0800bb59 	.word	0x0800bb59
 800bae8:	0800bb59 	.word	0x0800bb59
 800baec:	0800bb59 	.word	0x0800bb59
 800baf0:	0800bb51 	.word	0x0800bb51
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baf4:	f7fc f8fe 	bl	8007cf4 <HAL_RCC_GetPCLK1Freq>
 800baf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bafa:	e033      	b.n	800bb64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bafc:	f7fc f910 	bl	8007d20 <HAL_RCC_GetPCLK2Freq>
 800bb00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb02:	e02f      	b.n	800bb64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb04:	f107 0314 	add.w	r3, r7, #20
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fd f823 	bl	8008b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb12:	e027      	b.n	800bb64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb14:	f107 0308 	add.w	r3, r7, #8
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fd f967 	bl	8008dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb22:	e01f      	b.n	800bb64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb24:	4b2c      	ldr	r3, [pc, #176]	; (800bbd8 <UART_SetConfig+0xb50>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 0320 	and.w	r3, r3, #32
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d009      	beq.n	800bb44 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb30:	4b29      	ldr	r3, [pc, #164]	; (800bbd8 <UART_SetConfig+0xb50>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	08db      	lsrs	r3, r3, #3
 800bb36:	f003 0303 	and.w	r3, r3, #3
 800bb3a:	4a28      	ldr	r2, [pc, #160]	; (800bbdc <UART_SetConfig+0xb54>)
 800bb3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb42:	e00f      	b.n	800bb64 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800bb44:	4b25      	ldr	r3, [pc, #148]	; (800bbdc <UART_SetConfig+0xb54>)
 800bb46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb48:	e00c      	b.n	800bb64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb4a:	4b25      	ldr	r3, [pc, #148]	; (800bbe0 <UART_SetConfig+0xb58>)
 800bb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb4e:	e009      	b.n	800bb64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb56:	e005      	b.n	800bb64 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bb62:	bf00      	nop
    }

    if (pclk != 0U)
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d021      	beq.n	800bbae <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6e:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <UART_SetConfig+0xb5c>)
 800bb70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb74:	461a      	mov	r2, r3
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	085b      	lsrs	r3, r3, #1
 800bb82:	441a      	add	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb92:	2b0f      	cmp	r3, #15
 800bb94:	d908      	bls.n	800bba8 <UART_SetConfig+0xb20>
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb9c:	d204      	bcs.n	800bba8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bba4:	60da      	str	r2, [r3, #12]
 800bba6:	e002      	b.n	800bbae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bbca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3738      	adds	r7, #56	; 0x38
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bbd8:	58024400 	.word	0x58024400
 800bbdc:	03d09000 	.word	0x03d09000
 800bbe0:	003d0900 	.word	0x003d0900
 800bbe4:	0800c7e4 	.word	0x0800c7e4

0800bbe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc16:	f003 0302 	and.w	r3, r3, #2
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	430a      	orrs	r2, r1
 800bc32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	f003 0304 	and.w	r3, r3, #4
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00a      	beq.n	800bc56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	430a      	orrs	r2, r1
 800bc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5a:	f003 0308 	and.w	r3, r3, #8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00a      	beq.n	800bc78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7c:	f003 0310 	and.w	r3, r3, #16
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00a      	beq.n	800bc9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9e:	f003 0320 	and.w	r3, r3, #32
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d01a      	beq.n	800bcfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bce6:	d10a      	bne.n	800bcfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	605a      	str	r2, [r3, #4]
  }
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd3c:	f7f6 fa68 	bl	8002210 <HAL_GetTick>
 800bd40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b08      	cmp	r3, #8
 800bd4e:	d10e      	bne.n	800bd6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f82c 	bl	800bdbc <UART_WaitOnFlagUntilTimeout>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	e022      	b.n	800bdb4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b04      	cmp	r3, #4
 800bd7a:	d10e      	bne.n	800bd9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f816 	bl	800bdbc <UART_WaitOnFlagUntilTimeout>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e00c      	b.n	800bdb4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2220      	movs	r2, #32
 800bd9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2220      	movs	r2, #32
 800bda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdcc:	e062      	b.n	800be94 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d05e      	beq.n	800be94 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdd6:	f7f6 fa1b 	bl	8002210 <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d302      	bcc.n	800bdec <UART_WaitOnFlagUntilTimeout+0x30>
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d11d      	bne.n	800be28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdfa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	689a      	ldr	r2, [r3, #8]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f022 0201 	bic.w	r2, r2, #1
 800be0a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2220      	movs	r2, #32
 800be10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2220      	movs	r2, #32
 800be18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e045      	b.n	800beb4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	d02e      	beq.n	800be94 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be44:	d126      	bne.n	800be94 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be5e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	689a      	ldr	r2, [r3, #8]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f022 0201 	bic.w	r2, r2, #1
 800be6e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2220      	movs	r2, #32
 800be74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2220      	movs	r2, #32
 800be7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2220      	movs	r2, #32
 800be84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e00f      	b.n	800beb4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	69da      	ldr	r2, [r3, #28]
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	4013      	ands	r3, r2
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	bf0c      	ite	eq
 800bea4:	2301      	moveq	r3, #1
 800bea6:	2300      	movne	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	461a      	mov	r2, r3
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d08d      	beq.n	800bdce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bed2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6899      	ldr	r1, [r3, #8]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <UART_EndRxTransfer+0x44>)
 800bee0:	400b      	ands	r3, r1
 800bee2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2220      	movs	r2, #32
 800bee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bef2:	bf00      	nop
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	effffffe 	.word	0xeffffffe

0800bf04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f7ff f8a6 	bl	800b074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2220      	movs	r2, #32
 800bf4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff f882 	bl	800b060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf5c:	bf00      	nop
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf72:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf7a:	2b22      	cmp	r3, #34	; 0x22
 800bf7c:	d13b      	bne.n	800bff6 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf86:	89bb      	ldrh	r3, [r7, #12]
 800bf88:	b2d9      	uxtb	r1, r3
 800bf8a:	89fb      	ldrh	r3, [r7, #14]
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf92:	400a      	ands	r2, r1
 800bf94:	b2d2      	uxtb	r2, r2
 800bf96:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf9c:	1c5a      	adds	r2, r3, #1
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d122      	bne.n	800c006 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bfce:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	689a      	ldr	r2, [r3, #8]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f022 0201 	bic.w	r2, r2, #1
 800bfde:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7f4 fb14 	bl	800061c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bff4:	e007      	b.n	800c006 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	699a      	ldr	r2, [r3, #24]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f042 0208 	orr.w	r2, r2, #8
 800c004:	619a      	str	r2, [r3, #24]
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c01c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c024:	2b22      	cmp	r3, #34	; 0x22
 800c026:	d13b      	bne.n	800c0a0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c034:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c036:	89ba      	ldrh	r2, [r7, #12]
 800c038:	89fb      	ldrh	r3, [r7, #14]
 800c03a:	4013      	ands	r3, r2
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c046:	1c9a      	adds	r2, r3, #2
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c064:	b29b      	uxth	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d122      	bne.n	800c0b0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c078:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0201 	bic.w	r2, r2, #1
 800c088:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7f4 fabf 	bl	800061c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c09e:	e007      	b.n	800c0b0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	699a      	ldr	r2, [r3, #24]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f042 0208 	orr.w	r2, r2, #8
 800c0ae:	619a      	str	r2, [r3, #24]
}
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0c6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ce:	2b22      	cmp	r3, #34	; 0x22
 800c0d0:	d166      	bne.n	800c1a0 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0d8:	81fb      	strh	r3, [r7, #14]
 800c0da:	e03d      	b.n	800c158 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0e4:	893b      	ldrh	r3, [r7, #8]
 800c0e6:	b2d9      	uxtb	r1, r3
 800c0e8:	89bb      	ldrh	r3, [r7, #12]
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f0:	400a      	ands	r2, r1
 800c0f2:	b2d2      	uxtb	r2, r2
 800c0f4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c106:	b29b      	uxth	r3, r3
 800c108:	3b01      	subs	r3, #1
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d119      	bne.n	800c152 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c12c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6899      	ldr	r1, [r3, #8]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	4b1f      	ldr	r3, [pc, #124]	; (800c1b8 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c13a:	400b      	ands	r3, r1
 800c13c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7f4 fa65 	bl	800061c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c152:	89fb      	ldrh	r3, [r7, #14]
 800c154:	3b01      	subs	r3, #1
 800c156:	81fb      	strh	r3, [r7, #14]
 800c158:	89fb      	ldrh	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1be      	bne.n	800c0dc <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c164:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c166:	897b      	ldrh	r3, [r7, #10]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d021      	beq.n	800c1b0 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c172:	897a      	ldrh	r2, [r7, #10]
 800c174:	429a      	cmp	r2, r3
 800c176:	d21b      	bcs.n	800c1b0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	689a      	ldr	r2, [r3, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c186:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a0c      	ldr	r2, [pc, #48]	; (800c1bc <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c18c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 0220 	orr.w	r2, r2, #32
 800c19c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c19e:	e007      	b.n	800c1b0 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0208 	orr.w	r2, r2, #8
 800c1ae:	619a      	str	r2, [r3, #24]
}
 800c1b0:	bf00      	nop
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	effffffe 	.word	0xeffffffe
 800c1bc:	0800bf65 	.word	0x0800bf65

0800c1c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1ce:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1d6:	2b22      	cmp	r3, #34	; 0x22
 800c1d8:	d166      	bne.n	800c2a8 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1e0:	82fb      	strh	r3, [r7, #22]
 800c1e2:	e03d      	b.n	800c260 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ea:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c1f2:	8a3a      	ldrh	r2, [r7, #16]
 800c1f4:	8abb      	ldrh	r3, [r7, #20]
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c202:	1c9a      	adds	r2, r3, #2
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c20e:	b29b      	uxth	r3, r3
 800c210:	3b01      	subs	r3, #1
 800c212:	b29a      	uxth	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c220:	b29b      	uxth	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d119      	bne.n	800c25a <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c234:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6899      	ldr	r1, [r3, #8]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	4b1f      	ldr	r3, [pc, #124]	; (800c2c0 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c242:	400b      	ands	r3, r1
 800c244:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7f4 f9e1 	bl	800061c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c25a:	8afb      	ldrh	r3, [r7, #22]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	82fb      	strh	r3, [r7, #22]
 800c260:	8afb      	ldrh	r3, [r7, #22]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1be      	bne.n	800c1e4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c26c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c26e:	8a7b      	ldrh	r3, [r7, #18]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d021      	beq.n	800c2b8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c27a:	8a7a      	ldrh	r2, [r7, #18]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d21b      	bcs.n	800c2b8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c28e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a0c      	ldr	r2, [pc, #48]	; (800c2c4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c294:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f042 0220 	orr.w	r2, r2, #32
 800c2a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2a6:	e007      	b.n	800c2b8 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	699a      	ldr	r2, [r3, #24]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f042 0208 	orr.w	r2, r2, #8
 800c2b6:	619a      	str	r2, [r3, #24]
}
 800c2b8:	bf00      	nop
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	effffffe 	.word	0xeffffffe
 800c2c4:	0800c00f 	.word	0x0800c00f

0800c2c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c312:	2b01      	cmp	r3, #1
 800c314:	d101      	bne.n	800c31a <HAL_UARTEx_DisableFifoMode+0x16>
 800c316:	2302      	movs	r3, #2
 800c318:	e027      	b.n	800c36a <HAL_UARTEx_DisableFifoMode+0x66>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2224      	movs	r2, #36	; 0x24
 800c326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f022 0201 	bic.w	r2, r2, #1
 800c340:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c386:	2b01      	cmp	r3, #1
 800c388:	d101      	bne.n	800c38e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c38a:	2302      	movs	r3, #2
 800c38c:	e02d      	b.n	800c3ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2224      	movs	r2, #36	; 0x24
 800c39a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f022 0201 	bic.w	r2, r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f850 	bl	800c470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2220      	movs	r2, #32
 800c3dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c402:	2b01      	cmp	r3, #1
 800c404:	d101      	bne.n	800c40a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c406:	2302      	movs	r3, #2
 800c408:	e02d      	b.n	800c466 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2224      	movs	r2, #36	; 0x24
 800c416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f022 0201 	bic.w	r2, r2, #1
 800c430:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f812 	bl	800c470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2220      	movs	r2, #32
 800c458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
	...

0800c470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c470:	b480      	push	{r7}
 800c472:	b089      	sub	sp, #36	; 0x24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c478:	4a2f      	ldr	r2, [pc, #188]	; (800c538 <UARTEx_SetNbDataToProcess+0xc8>)
 800c47a:	f107 0314 	add.w	r3, r7, #20
 800c47e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c482:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c486:	4a2d      	ldr	r2, [pc, #180]	; (800c53c <UARTEx_SetNbDataToProcess+0xcc>)
 800c488:	f107 030c 	add.w	r3, r7, #12
 800c48c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c490:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d108      	bne.n	800c4ae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4ac:	e03d      	b.n	800c52a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4ae:	2310      	movs	r3, #16
 800c4b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4b2:	2310      	movs	r3, #16
 800c4b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	0e5b      	lsrs	r3, r3, #25
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	f003 0307 	and.w	r3, r3, #7
 800c4c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	0f5b      	lsrs	r3, r3, #29
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	f003 0307 	and.w	r3, r3, #7
 800c4d4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c4d6:	7fbb      	ldrb	r3, [r7, #30]
 800c4d8:	7f3a      	ldrb	r2, [r7, #28]
 800c4da:	f107 0120 	add.w	r1, r7, #32
 800c4de:	440a      	add	r2, r1
 800c4e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c4e4:	fb02 f303 	mul.w	r3, r2, r3
 800c4e8:	7f3a      	ldrb	r2, [r7, #28]
 800c4ea:	f107 0120 	add.w	r1, r7, #32
 800c4ee:	440a      	add	r2, r1
 800c4f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c500:	7ffb      	ldrb	r3, [r7, #31]
 800c502:	7f7a      	ldrb	r2, [r7, #29]
 800c504:	f107 0120 	add.w	r1, r7, #32
 800c508:	440a      	add	r2, r1
 800c50a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
 800c512:	7f7a      	ldrb	r2, [r7, #29]
 800c514:	f107 0120 	add.w	r1, r7, #32
 800c518:	440a      	add	r2, r1
 800c51a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c51e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c522:	b29a      	uxth	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c52a:	bf00      	nop
 800c52c:	3724      	adds	r7, #36	; 0x24
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	0800c7bc 	.word	0x0800c7bc
 800c53c:	0800c7c4 	.word	0x0800c7c4

0800c540 <initJY61P>:
  * @brief  初始JY61P.
  * @param  hi2c: I2C_HandleTypeDef结构体，表示JY61P使用的I2C端口
  * @retval None
  */
void initJY61P(I2C_HandleTypeDef *hi2c)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  mHi2c = hi2c;
 800c548:	4a04      	ldr	r2, [pc, #16]	; (800c55c <initJY61P+0x1c>)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6013      	str	r3, [r2, #0]
}
 800c54e:	bf00      	nop
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	2400a50c 	.word	0x2400a50c

0800c560 <readAngle>:
  * @brief  读取一个轴的角度值.
  * @param  axis: 表示希望读取的轴向，如：ROLL
  * @retval 角度值
  */
float readAngle(uint8_t axis)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af04      	add	r7, sp, #16
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2] = {0, 0};
 800c56a:	2300      	movs	r3, #0
 800c56c:	733b      	strb	r3, [r7, #12]
 800c56e:	2300      	movs	r3, #0
 800c570:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(mHi2c, JY_ADDR << 1, axis, 1, data, 2, 10000);
 800c572:	4b12      	ldr	r3, [pc, #72]	; (800c5bc <readAngle+0x5c>)
 800c574:	6818      	ldr	r0, [r3, #0]
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	b29a      	uxth	r2, r3
 800c57a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c57e:	9302      	str	r3, [sp, #8]
 800c580:	2302      	movs	r3, #2
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	f107 030c 	add.w	r3, r7, #12
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	2301      	movs	r3, #1
 800c58c:	21a0      	movs	r1, #160	; 0xa0
 800c58e:	f7fa f82b 	bl	80065e8 <HAL_I2C_Mem_Read>
  return ((data[1] << 8) | data[0]) / 32768.0f * 180;
 800c592:	7b7b      	ldrb	r3, [r7, #13]
 800c594:	021b      	lsls	r3, r3, #8
 800c596:	7b3a      	ldrb	r2, [r7, #12]
 800c598:	4313      	orrs	r3, r2
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5a2:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c5c0 <readAngle+0x60>
 800c5a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800c5c4 <readAngle+0x64>
 800c5ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c5b2:	eeb0 0a67 	vmov.f32	s0, s15
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	2400a50c 	.word	0x2400a50c
 800c5c0:	47000000 	.word	0x47000000
 800c5c4:	43340000 	.word	0x43340000

0800c5c8 <getAtti>:
/**
  * @brief  获取当前姿态.
  * @retval 当前姿态结构体.
  */
Atti getAtti()
{
 800c5c8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	jy61p.atti.pitch = jy61p.ReadAngle(PITCH);
 800c5d0:	4b2c      	ldr	r3, [pc, #176]	; (800c684 <getAtti+0xbc>)
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	203e      	movs	r0, #62	; 0x3e
 800c5d6:	4798      	blx	r3
 800c5d8:	eef0 7a40 	vmov.f32	s15, s0
 800c5dc:	4b29      	ldr	r3, [pc, #164]	; (800c684 <getAtti+0xbc>)
 800c5de:	edc3 7a05 	vstr	s15, [r3, #20]
	jy61p.atti.roll = jy61p.ReadAngle(ROLL);
 800c5e2:	4b28      	ldr	r3, [pc, #160]	; (800c684 <getAtti+0xbc>)
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	203d      	movs	r0, #61	; 0x3d
 800c5e8:	4798      	blx	r3
 800c5ea:	eef0 7a40 	vmov.f32	s15, s0
 800c5ee:	4b25      	ldr	r3, [pc, #148]	; (800c684 <getAtti+0xbc>)
 800c5f0:	edc3 7a04 	vstr	s15, [r3, #16]
  if(jy61p.atti.roll >= 180)
 800c5f4:	4b23      	ldr	r3, [pc, #140]	; (800c684 <getAtti+0xbc>)
 800c5f6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c5fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c688 <getAtti+0xc0>
 800c5fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c606:	db09      	blt.n	800c61c <getAtti+0x54>
    jy61p.atti.roll -= 360;
 800c608:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <getAtti+0xbc>)
 800c60a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c60e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c68c <getAtti+0xc4>
 800c612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c616:	4b1b      	ldr	r3, [pc, #108]	; (800c684 <getAtti+0xbc>)
 800c618:	edc3 7a04 	vstr	s15, [r3, #16]
  jy61p.atti.yaw = jy61p.ReadAngle(YAW);
 800c61c:	4b19      	ldr	r3, [pc, #100]	; (800c684 <getAtti+0xbc>)
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	203f      	movs	r0, #63	; 0x3f
 800c622:	4798      	blx	r3
 800c624:	eef0 7a40 	vmov.f32	s15, s0
 800c628:	4b16      	ldr	r3, [pc, #88]	; (800c684 <getAtti+0xbc>)
 800c62a:	edc3 7a03 	vstr	s15, [r3, #12]
  jy61p.atti.gx = jy61p.ReadAngle(GX);
 800c62e:	4b15      	ldr	r3, [pc, #84]	; (800c684 <getAtti+0xbc>)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	2037      	movs	r0, #55	; 0x37
 800c634:	4798      	blx	r3
 800c636:	eef0 7a40 	vmov.f32	s15, s0
 800c63a:	4b12      	ldr	r3, [pc, #72]	; (800c684 <getAtti+0xbc>)
 800c63c:	edc3 7a06 	vstr	s15, [r3, #24]
  jy61p.atti.gy = jy61p.ReadAngle(GY);
 800c640:	4b10      	ldr	r3, [pc, #64]	; (800c684 <getAtti+0xbc>)
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	2038      	movs	r0, #56	; 0x38
 800c646:	4798      	blx	r3
 800c648:	eef0 7a40 	vmov.f32	s15, s0
 800c64c:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <getAtti+0xbc>)
 800c64e:	edc3 7a07 	vstr	s15, [r3, #28]
  jy61p.atti.gz = jy61p.ReadAngle(GZ);
 800c652:	4b0c      	ldr	r3, [pc, #48]	; (800c684 <getAtti+0xbc>)
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	2039      	movs	r0, #57	; 0x39
 800c658:	4798      	blx	r3
 800c65a:	eef0 7a40 	vmov.f32	s15, s0
 800c65e:	4b09      	ldr	r3, [pc, #36]	; (800c684 <getAtti+0xbc>)
 800c660:	edc3 7a08 	vstr	s15, [r3, #32]
	return jy61p.atti;
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	4b07      	ldr	r3, [pc, #28]	; (800c684 <getAtti+0xbc>)
 800c668:	4615      	mov	r5, r2
 800c66a:	f103 040c 	add.w	r4, r3, #12
 800c66e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c672:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c676:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bdb0      	pop	{r4, r5, r7, pc}
 800c682:	bf00      	nop
 800c684:	24000070 	.word	0x24000070
 800c688:	43340000 	.word	0x43340000
 800c68c:	43b40000 	.word	0x43b40000

0800c690 <StartOV2640>:
		}
	}
}

void StartOV2640()//拍照的线程
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800c694:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <StartOV2640+0x38>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68da      	ldr	r2, [r3, #12]
 800c69c:	4b0a      	ldr	r3, [pc, #40]	; (800c6c8 <StartOV2640+0x38>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f042 0201 	orr.w	r2, r2, #1
 800c6a6:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800c6a8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	4807      	ldr	r0, [pc, #28]	; (800c6cc <StartOV2640+0x3c>)
 800c6b0:	f000 f870 	bl	800c794 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800c6b4:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <StartOV2640+0x38>)
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	4a04      	ldr	r2, [pc, #16]	; (800c6cc <StartOV2640+0x3c>)
 800c6ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c6be:	2102      	movs	r1, #2
 800c6c0:	f7f5 ff6a 	bl	8002598 <HAL_DCMI_Start_DMA>

}
 800c6c4:	bf00      	nop
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	2400a510 	.word	0x2400a510
 800c6cc:	240000b4 	.word	0x240000b4

0800c6d0 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800c6d8:	4b18      	ldr	r3, [pc, #96]	; (800c73c <HAL_DCMI_FrameEventCallback+0x6c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f6 f87d 	bl	80027dc <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800c6e2:	4b16      	ldr	r3, [pc, #88]	; (800c73c <HAL_DCMI_FrameEventCallback+0x6c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7f6 f818 	bl	800271c <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800c6ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c6f0:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800c6f2:	e009      	b.n	800c708 <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	4a11      	ldr	r2, [pc, #68]	; (800c740 <HAL_DCMI_FrameEventCallback+0x70>)
 800c6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3b01      	subs	r3, #1
 800c706:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	dcf2      	bgt.n	800c6f4 <HAL_DCMI_FrameEventCallback+0x24>
 800c70e:	e000      	b.n	800c712 <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800c710:	bf00      	nop
	}
	pictureLength*=4;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800c718:	4b0a      	ldr	r3, [pc, #40]	; (800c744 <HAL_DCMI_FrameEventCallback+0x74>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800c720:	4b08      	ldr	r3, [pc, #32]	; (800c744 <HAL_DCMI_FrameEventCallback+0x74>)
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	b29a      	uxth	r2, r3
 800c728:	4b07      	ldr	r3, [pc, #28]	; (800c748 <HAL_DCMI_FrameEventCallback+0x78>)
 800c72a:	4905      	ldr	r1, [pc, #20]	; (800c740 <HAL_DCMI_FrameEventCallback+0x70>)
 800c72c:	f7fe f9aa 	bl	800aa84 <HAL_UART_Transmit>

	StartOV2640();
 800c730:	f7ff ffae 	bl	800c690 <StartOV2640>
}
 800c734:	bf00      	nop
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	2400a510 	.word	0x2400a510
 800c740:	240000b4 	.word	0x240000b4
 800c744:	2400a514 	.word	0x2400a514
 800c748:	000186a0 	.word	0x000186a0

0800c74c <__libc_init_array>:
 800c74c:	b570      	push	{r4, r5, r6, lr}
 800c74e:	4e0d      	ldr	r6, [pc, #52]	; (800c784 <__libc_init_array+0x38>)
 800c750:	4c0d      	ldr	r4, [pc, #52]	; (800c788 <__libc_init_array+0x3c>)
 800c752:	1ba4      	subs	r4, r4, r6
 800c754:	10a4      	asrs	r4, r4, #2
 800c756:	2500      	movs	r5, #0
 800c758:	42a5      	cmp	r5, r4
 800c75a:	d109      	bne.n	800c770 <__libc_init_array+0x24>
 800c75c:	4e0b      	ldr	r6, [pc, #44]	; (800c78c <__libc_init_array+0x40>)
 800c75e:	4c0c      	ldr	r4, [pc, #48]	; (800c790 <__libc_init_array+0x44>)
 800c760:	f000 f820 	bl	800c7a4 <_init>
 800c764:	1ba4      	subs	r4, r4, r6
 800c766:	10a4      	asrs	r4, r4, #2
 800c768:	2500      	movs	r5, #0
 800c76a:	42a5      	cmp	r5, r4
 800c76c:	d105      	bne.n	800c77a <__libc_init_array+0x2e>
 800c76e:	bd70      	pop	{r4, r5, r6, pc}
 800c770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c774:	4798      	blx	r3
 800c776:	3501      	adds	r5, #1
 800c778:	e7ee      	b.n	800c758 <__libc_init_array+0xc>
 800c77a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c77e:	4798      	blx	r3
 800c780:	3501      	adds	r5, #1
 800c782:	e7f2      	b.n	800c76a <__libc_init_array+0x1e>
 800c784:	0800c804 	.word	0x0800c804
 800c788:	0800c804 	.word	0x0800c804
 800c78c:	0800c804 	.word	0x0800c804
 800c790:	0800c808 	.word	0x0800c808

0800c794 <memset>:
 800c794:	4402      	add	r2, r0
 800c796:	4603      	mov	r3, r0
 800c798:	4293      	cmp	r3, r2
 800c79a:	d100      	bne.n	800c79e <memset+0xa>
 800c79c:	4770      	bx	lr
 800c79e:	f803 1b01 	strb.w	r1, [r3], #1
 800c7a2:	e7f9      	b.n	800c798 <memset+0x4>

0800c7a4 <_init>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	bf00      	nop
 800c7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7aa:	bc08      	pop	{r3}
 800c7ac:	469e      	mov	lr, r3
 800c7ae:	4770      	bx	lr

0800c7b0 <_fini>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	bf00      	nop
 800c7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b6:	bc08      	pop	{r3}
 800c7b8:	469e      	mov	lr, r3
 800c7ba:	4770      	bx	lr
