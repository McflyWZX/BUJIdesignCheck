
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baec  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc4  0800bdc4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdc4  0800bdc4  0001bdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdcc  0800bdcc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdcc  0800bdcc  0001bdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  24000000  0800bdd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a3e8  24000020  0800bdf0  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2400a408  0800bdf0  0002a408  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fbda  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b06  00000000  00000000  0004fc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d8  00000000  00000000  00054730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  00055f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a1e3  00000000  00000000  000574f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019d1a  00000000  00000000  000916db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016919c  00000000  00000000  000ab3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00214591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b0  00000000  00000000  0021460c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bd6c 	.word	0x0800bd6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	0800bd6c 	.word	0x0800bd6c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_DCMI_Init+0x60>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_DCMI_Init+0x64>)
 80005f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_DCMI_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_DCMI_Init+0x60>)
 80005fa:	2220      	movs	r2, #32
 80005fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_DCMI_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_DCMI_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_DCMI_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DCMI_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DCMI_Init+0x60>)
 8000618:	2208      	movs	r2, #8
 800061a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_DCMI_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DCMI_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_DCMI_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_DCMI_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_DCMI_Init+0x60>)
 8000636:	f001 fa29 	bl	8001a8c <HAL_DCMI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 fc1c 	bl	8000e7c <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2400a0b8 	.word	0x2400a0b8
 800064c:	48020000 	.word	0x48020000

08000650 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a7a      	ldr	r2, [pc, #488]	; (8000858 <HAL_DCMI_MspInit+0x208>)
 800066e:	4293      	cmp	r3, r2
 8000670:	f040 80ed 	bne.w	800084e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000674:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	4a78      	ldr	r2, [pc, #480]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000684:	4b75      	ldr	r3, [pc, #468]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	623b      	str	r3, [r7, #32]
 8000690:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b72      	ldr	r3, [pc, #456]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	4a70      	ldr	r2, [pc, #448]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a2:	4b6e      	ldr	r3, [pc, #440]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	4a69      	ldr	r2, [pc, #420]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c0:	4b66      	ldr	r3, [pc, #408]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a61      	ldr	r2, [pc, #388]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a5a      	ldr	r2, [pc, #360]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b57      	ldr	r3, [pc, #348]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a52      	ldr	r2, [pc, #328]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000728:	2370      	movs	r3, #112	; 0x70
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000738:	230d      	movs	r3, #13
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4847      	ldr	r0, [pc, #284]	; (8000860 <HAL_DCMI_MspInit+0x210>)
 8000744:	f004 ffd0 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000748:	2350      	movs	r3, #80	; 0x50
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000758:	230d      	movs	r3, #13
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4840      	ldr	r0, [pc, #256]	; (8000864 <HAL_DCMI_MspInit+0x214>)
 8000764:	f004 ffc0 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000768:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800077a:	230d      	movs	r3, #13
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	4838      	ldr	r0, [pc, #224]	; (8000868 <HAL_DCMI_MspInit+0x218>)
 8000786:	f004 ffaf 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800078a:	2308      	movs	r3, #8
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800079a:	230d      	movs	r3, #13
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	4831      	ldr	r0, [pc, #196]	; (800086c <HAL_DCMI_MspInit+0x21c>)
 80007a6:	f004 ff9f 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007ba:	230d      	movs	r3, #13
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <HAL_DCMI_MspInit+0x220>)
 80007c6:	f004 ff8f 	bl	80056e8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007cc:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <HAL_DCMI_MspInit+0x228>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d2:	224b      	movs	r2, #75	; 0x4b
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000800:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000808:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800080c:	2204      	movs	r2, #4
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000812:	2203      	movs	r2, #3
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000824:	f001 fc76 	bl	8002114 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800082e:	f000 fb25 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000836:	649a      	str	r2, [r3, #72]	; 0x48
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	204e      	movs	r0, #78	; 0x4e
 8000844:	f001 f8ed 	bl	8001a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000848:	204e      	movs	r0, #78	; 0x4e
 800084a:	f001 f904 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3738      	adds	r7, #56	; 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	48020000 	.word	0x48020000
 800085c:	58024400 	.word	0x58024400
 8000860:	58021000 	.word	0x58021000
 8000864:	58020000 	.word	0x58020000
 8000868:	58020800 	.word	0x58020800
 800086c:	58020c00 	.word	0x58020c00
 8000870:	58020400 	.word	0x58020400
 8000874:	2400a040 	.word	0x2400a040
 8000878:	40020010 	.word	0x40020010

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_DMA_Init+0x3c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <MX_DMA_Init+0x3c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_DMA_Init+0x3c>)
 8000894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 f8bc 	bl	8001a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008aa:	200b      	movs	r0, #11
 80008ac:	f001 f8d3 	bl	8001a56 <HAL_NVIC_EnableIRQ>

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	4b6e      	ldr	r3, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a6c      	ldr	r2, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f0:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a65      	ldr	r2, [pc, #404]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a5d      	ldr	r2, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	4a56      	ldr	r2, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093c:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a4e      	ldr	r2, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2104      	movs	r1, #4
 800098a:	4841      	ldr	r0, [pc, #260]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 800098c:	f005 f85c 	bl	8005a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2120      	movs	r1, #32
 8000994:	483f      	ldr	r0, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x1d8>)
 8000996:	f005 f857 	bl	8005a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2103      	movs	r1, #3
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 80009a0:	f005 f852 	bl	8005a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009aa:	483b      	ldr	r0, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 80009ac:	f005 f84c 	bl	8005a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	4839      	ldr	r0, [pc, #228]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80009b6:	f005 f847 	bl	8005a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482f      	ldr	r0, [pc, #188]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 80009d2:	f004 fe89 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4829      	ldr	r0, [pc, #164]	; (8000a94 <MX_GPIO_Init+0x1d8>)
 80009ee:	f004 fe7b 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 80009f2:	f247 0303 	movw	r3, #28675	; 0x7003
 80009f6:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f004 fe6c 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a24:	f004 fe60 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a42:	f004 fe51 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 8000a64:	f004 fe40 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000a80:	f004 fe32 	bl	80056e8 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	58020000 	.word	0x58020000
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58020c00 	.word	0x58020c00

08000aa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	f004 ffce 	bl	8005a7c <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f9c9 	bl	8000e7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aee:	f005 f855 	bl	8005b9c <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f9c0 	bl	8000e7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000b00:	f005 f897 	bl	8005c32 <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f9b7 	bl	8000e7c <Error_Handler>
  }

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2400a108 	.word	0x2400a108
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	009034b6 	.word	0x009034b6

08000b20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_I2C2_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_I2C2_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b5c:	f004 ff8e 	bl	8005a7c <HAL_I2C_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f000 f989 	bl	8000e7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b6e:	f005 f815 	bl	8005b9c <HAL_I2CEx_ConfigAnalogFilter>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 f980 	bl	8000e7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b80:	f005 f857 	bl	8005c32 <HAL_I2CEx_ConfigDigitalFilter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f977 	bl	8000e7c <Error_Handler>
  }

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400a154 	.word	0x2400a154
 8000b98:	40005800 	.word	0x40005800
 8000b9c:	10c0ecff 	.word	0x10c0ecff

08000ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_I2C_MspInit+0xf4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12f      	bne.n	8000c22 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000be0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4827      	ldr	r0, [pc, #156]	; (8000c9c <HAL_I2C_MspInit+0xfc>)
 8000bfe:	f004 fd73 	bl	80056e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c20:	e033      	b.n	8000c8a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_I2C_MspInit+0x100>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d12e      	bne.n	8000c8a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_I2C_MspInit+0xfc>)
 8000c68:	f004 fd3e 	bl	80056e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40005400 	.word	0x40005400
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	40005800 	.word	0x40005800

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f000 fd42 	bl	8001730 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f820 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f7ff fe04 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb4:	f7ff fde2 	bl	800087c <MX_DMA_Init>
  MX_DCMI_Init();
 8000cb8:	f7ff fc96 	bl	80005e8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000cbc:	f7ff fef0 	bl	8000aa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cc0:	f7ff ff2e 	bl	8000b20 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cc4:	f000 f8e2 	bl	8000e8c <MX_SPI1_Init>
  MX_UART4_Init();
 8000cc8:	f000 fc6a 	bl	80015a0 <MX_UART4_Init>
  MX_TIM4_Init();
 8000ccc:	f000 fa8e 	bl	80011ec <MX_TIM4_Init>
  MX_TIM5_Init();
 8000cd0:	f000 fb1a 	bl	8001308 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init(&huart4, NULL);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <main+0x44>)
 8000cd8:	f00a f9ee 	bl	800b0b8 <GPS_Init>
  testGPS = get_GPS_INFO();
 8000cdc:	f00a fa0c 	bl	800b0f8 <get_GPS_INFO>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4b02      	ldr	r3, [pc, #8]	; (8000cec <main+0x48>)
 8000ce4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x42>
 8000ce8:	2400a2c4 	.word	0x2400a2c4
 8000cec:	2400a1a0 	.word	0x2400a1a0

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0cc      	sub	sp, #304	; 0x130
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cfa:	224c      	movs	r2, #76	; 0x4c
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00b f816 	bl	800bd30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00b f80f 	bl	800bd30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4618      	mov	r0, r3
 8000d18:	23bc      	movs	r3, #188	; 0xbc
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f00b f807 	bl	800bd30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f004 ffd2 	bl	8005ccc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <SystemClock_Config+0x184>)
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	4a50      	ldr	r2, [pc, #320]	; (8000e74 <SystemClock_Config+0x184>)
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <SystemClock_Config+0x184>)
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	f003 0201 	and.w	r2, r3, #1
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	4b4c      	ldr	r3, [pc, #304]	; (8000e78 <SystemClock_Config+0x188>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a4b      	ldr	r2, [pc, #300]	; (8000e78 <SystemClock_Config+0x188>)
 8000d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <SystemClock_Config+0x188>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d62:	bf00      	nop
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <SystemClock_Config+0x188>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d70:	d1f8      	bne.n	8000d64 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d72:	2303      	movs	r3, #3
 8000d74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000d9e:	23c8      	movs	r3, #200	; 0xc8
 8000da0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000db6:	2308      	movs	r3, #8
 8000db8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 ffb7 	bl	8005d40 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000dd8:	f000 f850 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	233f      	movs	r3, #63	; 0x3f
 8000dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dee:	2308      	movs	r3, #8
 8000df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dfa:	2340      	movs	r3, #64	; 0x40
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e08:	2340      	movs	r3, #64	; 0x40
 8000e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e12:	2102      	movs	r1, #2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fba3 	bl	8006560 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e20:	f000 f82c 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e2c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	2200      	movs	r2, #0
 8000e34:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 ff75 	bl	8006d3c <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e58:	f000 f810 	bl	8000e7c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000e5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f005 fd32 	bl	80068cc <HAL_RCC_MCOConfig>
}
 8000e68:	bf00      	nop
 8000e6a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58000400 	.word	0x58000400
 8000e78:	58024800 	.word	0x58024800

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000e92:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <MX_SPI1_Init+0xa8>)
 8000e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000e98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000eb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ebc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ec0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ec4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_SPI1_Init+0xa4>)
 8000f1e:	f007 fa0d 	bl	800833c <HAL_SPI_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f28:	f7ff ffa8 	bl	8000e7c <Error_Handler>
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2400a1a4 	.word	0x2400a1a4
 8000f34:	40013000 	.word	0x40013000

08000f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <HAL_SPI_MspInit+0xc8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d14d      	bne.n	8000ff6 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f60:	4a28      	ldr	r2, [pc, #160]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_SPI_MspInit+0xcc>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000fb4:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <HAL_SPI_MspInit+0xd0>)
 8000fd2:	f004 fb89 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <HAL_SPI_MspInit+0xd4>)
 8000ff2:	f004 fb79 	bl	80056e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40013000 	.word	0x40013000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020000 	.word	0x58020000
 800100c:	58020400 	.word	0x58020400

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 fbc0 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <DMA1_Stream0_IRQHandler+0x10>)
 800109e:	f002 fb61 	bl	8003764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400a040 	.word	0x2400a040

080010ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <UART4_IRQHandler+0x10>)
 80010b2:	f008 fc11 	bl	80098d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2400a2c4 	.word	0x2400a2c4

080010c0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DCMI_IRQHandler+0x10>)
 80010c6:	f000 fed5 	bl	8001e74 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400a0b8 	.word	0x2400a0b8

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <SystemInit+0xec>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <SystemInit+0xec>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <SystemInit+0xf0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	2b06      	cmp	r3, #6
 80010f2:	d807      	bhi.n	8001104 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <SystemInit+0xf0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 030f 	bic.w	r3, r3, #15
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <SystemInit+0xf0>)
 80010fe:	f043 0307 	orr.w	r3, r3, #7
 8001102:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <SystemInit+0xf4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <SystemInit+0xf4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <SystemInit+0xf4>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <SystemInit+0xf4>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	492b      	ldr	r1, [pc, #172]	; (80011c8 <SystemInit+0xf4>)
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <SystemInit+0xf8>)
 800111e:	4013      	ands	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <SystemInit+0xf0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	2b07      	cmp	r3, #7
 800112c:	d907      	bls.n	800113e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SystemInit+0xf0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 030f 	bic.w	r3, r3, #15
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <SystemInit+0xf0>)
 8001138:	f043 0307 	orr.w	r3, r3, #7
 800113c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <SystemInit+0xf4>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <SystemInit+0xf4>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemInit+0xf4>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <SystemInit+0xf4>)
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <SystemInit+0xfc>)
 8001154:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <SystemInit+0xf4>)
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <SystemInit+0x100>)
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <SystemInit+0xf4>)
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <SystemInit+0x104>)
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <SystemInit+0xf4>)
 8001164:	2200      	movs	r2, #0
 8001166:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <SystemInit+0xf4>)
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <SystemInit+0x104>)
 800116c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <SystemInit+0xf4>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <SystemInit+0xf4>)
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <SystemInit+0x104>)
 8001178:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <SystemInit+0xf4>)
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <SystemInit+0xf4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <SystemInit+0xf4>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <SystemInit+0xf4>)
 800118e:	2200      	movs	r2, #0
 8001190:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <SystemInit+0x108>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <SystemInit+0x10c>)
 8001198:	4013      	ands	r3, r2
 800119a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800119e:	d202      	bcs.n	80011a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <SystemInit+0x110>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <SystemInit+0x114>)
 80011a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SystemInit+0xec>)
 80011b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	52002000 	.word	0x52002000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d0:	02020200 	.word	0x02020200
 80011d4:	01ff0000 	.word	0x01ff0000
 80011d8:	01010280 	.word	0x01010280
 80011dc:	5c001000 	.word	0x5c001000
 80011e0:	ffff0000 	.word	0xffff0000
 80011e4:	51008108 	.word	0x51008108
 80011e8:	52004000 	.word	0x52004000

080011ec <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	; 0x38
 80011f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <MX_TIM4_Init+0x114>)
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <MX_TIM4_Init+0x118>)
 8001222:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <MX_TIM4_Init+0x114>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <MX_TIM4_Init+0x114>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <MX_TIM4_Init+0x114>)
 8001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001236:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM4_Init+0x114>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MX_TIM4_Init+0x114>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001244:	482e      	ldr	r0, [pc, #184]	; (8001300 <MX_TIM4_Init+0x114>)
 8001246:	f007 f98c 	bl	8008562 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001250:	f7ff fe14 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	4619      	mov	r1, r3
 8001260:	4827      	ldr	r0, [pc, #156]	; (8001300 <MX_TIM4_Init+0x114>)
 8001262:	f007 fc1d 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800126c:	f7ff fe06 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001270:	4823      	ldr	r0, [pc, #140]	; (8001300 <MX_TIM4_Init+0x114>)
 8001272:	f007 fa2e 	bl	80086d2 <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800127c:	f7ff fdfe 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	481c      	ldr	r0, [pc, #112]	; (8001300 <MX_TIM4_Init+0x114>)
 8001290:	f008 f8dc 	bl	800944c <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800129a:	f7ff fdef 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	; 0x60
 80012a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	4812      	ldr	r0, [pc, #72]	; (8001300 <MX_TIM4_Init+0x114>)
 80012b6:	f007 fae3 	bl	8008880 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012c0:	f7ff fddc 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	2204      	movs	r2, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM4_Init+0x114>)
 80012cc:	f007 fad8 	bl	8008880 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80012d6:	f7ff fdd1 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	2208      	movs	r2, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM4_Init+0x114>)
 80012e2:	f007 facd 	bl	8008880 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80012ec:	f7ff fdc6 	bl	8000e7c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM4_Init+0x114>)
 80012f2:	f000 f8cf 	bl	8001494 <HAL_TIM_MspPostInit>

}
 80012f6:	bf00      	nop
 80012f8:	3738      	adds	r7, #56	; 0x38
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2400a22c 	.word	0x2400a22c
 8001304:	40000800 	.word	0x40000800

08001308 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <MX_TIM5_Init+0x110>)
 800133c:	4a37      	ldr	r2, [pc, #220]	; (800141c <MX_TIM5_Init+0x114>)
 800133e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <MX_TIM5_Init+0x110>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <MX_TIM5_Init+0x110>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800134c:	4b32      	ldr	r3, [pc, #200]	; (8001418 <MX_TIM5_Init+0x110>)
 800134e:	f04f 32ff 	mov.w	r2, #4294967295
 8001352:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <MX_TIM5_Init+0x110>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <MX_TIM5_Init+0x110>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001360:	482d      	ldr	r0, [pc, #180]	; (8001418 <MX_TIM5_Init+0x110>)
 8001362:	f007 f8fe 	bl	8008562 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800136c:	f7ff fd86 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	4619      	mov	r1, r3
 800137c:	4826      	ldr	r0, [pc, #152]	; (8001418 <MX_TIM5_Init+0x110>)
 800137e:	f007 fb8f 	bl	8008aa0 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001388:	f7ff fd78 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800138c:	4822      	ldr	r0, [pc, #136]	; (8001418 <MX_TIM5_Init+0x110>)
 800138e:	f007 f93f 	bl	8008610 <HAL_TIM_OC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001398:	f7ff fd70 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <MX_TIM5_Init+0x110>)
 800139e:	f007 f998 	bl	80086d2 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 80013a8:	f7ff fd68 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <MX_TIM5_Init+0x110>)
 80013bc:	f008 f846 	bl	800944c <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 80013c6:	f7ff fd59 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	2208      	movs	r2, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_TIM5_Init+0x110>)
 80013e2:	f007 f9d7 	bl	8008794 <HAL_TIM_OC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 80013ec:	f7ff fd46 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	220c      	movs	r2, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <MX_TIM5_Init+0x110>)
 80013fc:	f007 fa40 	bl	8008880 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8001406:	f7ff fd39 	bl	8000e7c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <MX_TIM5_Init+0x110>)
 800140c:	f000 f842 	bl	8001494 <HAL_TIM_MspPostInit>

}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	; 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2400a278 	.word	0x2400a278
 800141c:	40000c00 	.word	0x40000c00

08001420 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a16      	ldr	r2, [pc, #88]	; (8001488 <HAL_TIM_Base_MspInit+0x68>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10f      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_TIM_Base_MspInit+0x6c>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_TIM_Base_MspInit+0x6c>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_TIM_Base_MspInit+0x6c>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001450:	e013      	b.n	800147a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM5)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_TIM_Base_MspInit+0x70>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d10e      	bne.n	800147a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_TIM_Base_MspInit+0x6c>)
 800145e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_TIM_Base_MspInit+0x6c>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_TIM_Base_MspInit+0x6c>)
 800146e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40000800 	.word	0x40000800
 800148c:	58024400 	.word	0x58024400
 8001490:	40000c00 	.word	0x40000c00

08001494 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a35      	ldr	r2, [pc, #212]	; (8001588 <HAL_TIM_MspPostInit+0xf4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d140      	bne.n	8001538 <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a2c      	ldr	r2, [pc, #176]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001504:	2302      	movs	r3, #2
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4820      	ldr	r0, [pc, #128]	; (8001590 <HAL_TIM_MspPostInit+0xfc>)
 8001510:	f004 f8ea 	bl	80056e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001526:	2302      	movs	r3, #2
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <HAL_TIM_MspPostInit+0x100>)
 8001532:	f004 f8d9 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001536:	e023      	b.n	8001580 <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM5)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_TIM_MspPostInit+0x104>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11e      	bne.n	8001580 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_TIM_MspPostInit+0xf8>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001560:	2308      	movs	r3, #8
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001570:	2302      	movs	r3, #2
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <HAL_TIM_MspPostInit+0x108>)
 800157c:	f004 f8b4 	bl	80056e8 <HAL_GPIO_Init>
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40000800 	.word	0x40000800
 800158c:	58024400 	.word	0x58024400
 8001590:	58020c00 	.word	0x58020c00
 8001594:	58020400 	.word	0x58020400
 8001598:	40000c00 	.word	0x40000c00
 800159c:	58020000 	.word	0x58020000

080015a0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_UART4_Init+0x90>)
 80015a6:	4a23      	ldr	r2, [pc, #140]	; (8001634 <MX_UART4_Init+0x94>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_UART4_Init+0x90>)
 80015ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_UART4_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_UART4_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_UART4_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_UART4_Init+0x90>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_UART4_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_UART4_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_UART4_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_UART4_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_UART4_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <MX_UART4_Init+0x90>)
 80015ea:	f007 ffb7 	bl	800955c <HAL_UART_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015f4:	f7ff fc42 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_UART4_Init+0x90>)
 80015fc:	f009 fc77 	bl	800aeee <HAL_UARTEx_SetTxFifoThreshold>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001606:	f7ff fc39 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <MX_UART4_Init+0x90>)
 800160e:	f009 fcac 	bl	800af6a <HAL_UARTEx_SetRxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001618:	f7ff fc30 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_UART4_Init+0x90>)
 800161e:	f009 fc2d 	bl	800ae7c <HAL_UARTEx_DisableFifoMode>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001628:	f7ff fc28 	bl	8000e7c <Error_Handler>
  }

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2400a2c4 	.word	0x2400a2c4
 8001634:	40004c00 	.word	0x40004c00

08001638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_UART_MspInit+0x98>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d135      	bne.n	80016c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_UART_MspInit+0x9c>)
 800165c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <HAL_UART_MspInit+0x9c>)
 8001662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001666:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_UART_MspInit+0x9c>)
 800166c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_UART_MspInit+0x9c>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x9c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_UART_MspInit+0x9c>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001696:	2303      	movs	r3, #3
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016a6:	2308      	movs	r3, #8
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <HAL_UART_MspInit+0xa0>)
 80016b2:	f004 f819 	bl	80056e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2034      	movs	r0, #52	; 0x34
 80016bc:	f000 f9b1 	bl	8001a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016c0:	2034      	movs	r0, #52	; 0x34
 80016c2:	f000 f9c8 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004c00 	.word	0x40004c00
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020000 	.word	0x58020000

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016e2:	e003      	b.n	80016ec <LoopCopyDataInit>

080016e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016ea:	3104      	adds	r1, #4

080016ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016f4:	d3f6      	bcc.n	80016e4 <CopyDataInit>
  ldr  r2, =_sbss
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016f8:	e002      	b.n	8001700 <LoopFillZerobss>

080016fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016fc:	f842 3b04 	str.w	r3, [r2], #4

08001700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001704:	d3f9      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001706:	f7ff fce5 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f00a faed 	bl	800bce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fac9 	bl	8000ca4 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001718:	0800bdd4 	.word	0x0800bdd4
  ldr  r0, =_sdata
 800171c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001720:	2400001c 	.word	0x2400001c
  ldr  r2, =_sbss
 8001724:	24000020 	.word	0x24000020
  ldr  r3, = _ebss
 8001728:	2400a408 	.word	0x2400a408

0800172c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC3_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f968 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800173c:	f005 f930 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 8001740:	4601      	mov	r1, r0
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_Init+0x68>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <HAL_Init+0x6c>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa21 f303 	lsr.w	r3, r1, r3
 8001758:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_Init+0x68>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_Init+0x6c>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_Init+0x70>)
 8001772:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_Init+0x74>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f814 	bl	80017a8 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e002      	b.n	8001790 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800178a:	f7ff fc41 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	58024400 	.word	0x58024400
 800179c:	0800bd94 	.word	0x0800bd94
 80017a0:	24000004 	.word	0x24000004
 80017a4:	24000000 	.word	0x24000000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_InitTick+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e021      	b.n	8001800 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_InitTick+0x64>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_InitTick+0x60>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f94d 	bl	8001a72 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f917 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x68>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2400000c 	.word	0x2400000c
 800180c:	24000000 	.word	0x24000000
 8001810:	24000008 	.word	0x24000008

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2400000c 	.word	0x2400000c
 8001838:	2400a350 	.word	0x2400a350

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2400a350 	.word	0x2400a350

08001854 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetREVID+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0c1b      	lsrs	r3, r3, #16
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	5c001000 	.word	0x5c001000

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <__NVIC_SetPriorityGrouping+0x40>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	4313      	orrs	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x40>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	05fa0000 	.word	0x05fa0000

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff29 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff40 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff33 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa4 	bl	80019c8 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e069      	b.n	8001b72 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fdd0 	bl	8000650 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_DCMI_Init+0xf0>)
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001aea:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001af6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001b02:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001b0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001b1a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d112      	bne.n	8001b52 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7f5b      	ldrb	r3, [r3, #29]
 8001b36:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b38:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7f9b      	ldrb	r3, [r3, #30]
 8001b3e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001b40:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7fdb      	ldrb	r3, [r3, #31]
 8001b48:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001b4e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001b50:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 021e 	orr.w	r2, r2, #30
 8001b60:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	ffe0f007 	.word	0xffe0f007

08001b80 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_DCMI_Start_DMA+0x1c>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e0ab      	b.n	8001cf4 <HAL_DCMI_Start_DMA+0x174>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bba:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0202 	bic.w	r2, r2, #2
 8001bca:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be0:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <HAL_DCMI_Start_DMA+0x17c>)
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be8:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <HAL_DCMI_Start_DMA+0x180>)
 8001bea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d219      	bcs.n	8001c48 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3328      	adds	r3, #40	; 0x28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	f000 fdd2 	bl	80027cc <HAL_DMA_Start_IT>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d055      	beq.n	8001cda <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2240      	movs	r2, #64	; 0x40
 8001c32:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e055      	b.n	8001cf4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <HAL_DCMI_Start_DMA+0x17c>)
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001c62:	e009      	b.n	8001c78 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	085a      	lsrs	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	005a      	lsls	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d2f0      	bcs.n	8001c64 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	1e9a      	subs	r2, r3, #2
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3328      	adds	r3, #40	; 0x28
 8001caa:	4619      	mov	r1, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	f003 f867 	bl	8004d88 <HAL_DMAEx_MultiBufferStart_IT>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00c      	b.n	8001cf4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	08001fb5 	.word	0x08001fb5
 8001d00:	080020db 	.word	0x080020db

08001d04 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_DCMI_Stop+0xb8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2b      	ldr	r2, [pc, #172]	; (8001dc0 <HAL_DCMI_Stop+0xbc>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_DCMI_Stop+0x30>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e03f      	b.n	8001db4 <HAL_DCMI_Stop+0xb0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d108      	bne.n	8001d72 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8001d70:	e006      	b.n	8001d80 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e9      	bne.n	8001d54 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 ff83 	bl	8002ca0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001db2:	7afb      	ldrb	r3, [r7, #11]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24000000 	.word	0x24000000
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_DCMI_Suspend+0xa8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_DCMI_Suspend+0xac>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_DCMI_Suspend+0x30>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e034      	b.n	8001e5e <HAL_DCMI_Suspend+0x9a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d125      	bne.n	8001e54 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10c      	bne.n	8001e46 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	72fb      	strb	r3, [r7, #11]
        break;
 8001e44:	e006      	b.n	8001e54 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e5      	bne.n	8001e20 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	24000000 	.word	0x24000000
 8001e70:	10624dd3 	.word	0x10624dd3

08001e74 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2204      	movs	r2, #4
 8001e94:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_DCMI_IRQHandler+0x100>)
 8001eb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 fa10 	bl	80032dc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <HAL_DCMI_IRQHandler+0x100>)
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 f9f4 	bl	80032dc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f840 	bl	8001f8c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f83e 	bl	8001fa0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01d      	beq.n	8001f6a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d107      	bne.n	8001f4c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 021e 	bic.w	r2, r2, #30
 8001f4a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f009 fbf5 	bl	800b754 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	080020db 	.word	0x080020db

08001f78 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d043      	beq.n	8002052 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d118      	bne.n	8002016 <DCMI_DMAXferCplt+0x62>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffc:	00da      	lsls	r2, r3, #3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4413      	add	r3, r2
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	f003 fa1d 	bl	8005444 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	1e5a      	subs	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
 8002014:	e044      	b.n	80020a0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13c      	bne.n	80020a0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	00da      	lsls	r2, r3, #3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4413      	add	r3, r2
 800203e:	2201      	movs	r2, #1
 8002040:	4619      	mov	r1, r3
 8002042:	f003 f9ff 	bl	8005444 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
 8002050:	e026      	b.n	80020a0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	e017      	b.n	80020a0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10f      	bne.n	80020a0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	440a      	add	r2, r1
 8002096:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d112      	bne.n	80020d2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d103      	bne.n	80020d2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d009      	beq.n	8002106 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff36 	bl	8001f78 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fb8e 	bl	800183c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e316      	b.n	800275a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_DMA_Init+0x1b8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d04a      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_DMA_Init+0x1bc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d045      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_DMA_Init+0x1c0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d040      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <HAL_DMA_Init+0x1c4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d03b      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a60      	ldr	r2, [pc, #384]	; (80022dc <HAL_DMA_Init+0x1c8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d036      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5f      	ldr	r2, [pc, #380]	; (80022e0 <HAL_DMA_Init+0x1cc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d031      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5d      	ldr	r2, [pc, #372]	; (80022e4 <HAL_DMA_Init+0x1d0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02c      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_DMA_Init+0x1d4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d027      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_DMA_Init+0x1d8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d022      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_DMA_Init+0x1dc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01d      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_DMA_Init+0x1e0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d018      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_DMA_Init+0x1e4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_DMA_Init+0x1e8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00e      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_DMA_Init+0x1ec>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_DMA_Init+0x1f0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_Init+0xb8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_DMA_Init+0x1f4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_DMA_Init+0xbc>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_Init+0xbe>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 813b 	beq.w	800244e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a37      	ldr	r2, [pc, #220]	; (80022cc <HAL_DMA_Init+0x1b8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d04a      	beq.n	8002288 <HAL_DMA_Init+0x174>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <HAL_DMA_Init+0x1bc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d045      	beq.n	8002288 <HAL_DMA_Init+0x174>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <HAL_DMA_Init+0x1c0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d040      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_DMA_Init+0x1c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d03b      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a31      	ldr	r2, [pc, #196]	; (80022dc <HAL_DMA_Init+0x1c8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d036      	beq.n	8002288 <HAL_DMA_Init+0x174>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <HAL_DMA_Init+0x1cc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d031      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <HAL_DMA_Init+0x1d0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02c      	beq.n	8002288 <HAL_DMA_Init+0x174>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_DMA_Init+0x1d4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d027      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <HAL_DMA_Init+0x1d8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d022      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_DMA_Init+0x1dc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d01d      	beq.n	8002288 <HAL_DMA_Init+0x174>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_DMA_Init+0x1e0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d018      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_DMA_Init+0x1e4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_DMA_Init+0x1e8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00e      	beq.n	8002288 <HAL_DMA_Init+0x174>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a24      	ldr	r2, [pc, #144]	; (8002300 <HAL_DMA_Init+0x1ec>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_DMA_Init+0x174>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_DMA_Init+0x1f0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_DMA_Init+0x174>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_DMA_Init+0x1f4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d108      	bne.n	800229a <HAL_DMA_Init+0x186>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e007      	b.n	80022aa <HAL_DMA_Init+0x196>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022aa:	e02f      	b.n	800230c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7ff fac6 	bl	800183c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d928      	bls.n	800230c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e246      	b.n	800275a <HAL_DMA_Init+0x646>
 80022cc:	40020010 	.word	0x40020010
 80022d0:	40020028 	.word	0x40020028
 80022d4:	40020040 	.word	0x40020040
 80022d8:	40020058 	.word	0x40020058
 80022dc:	40020070 	.word	0x40020070
 80022e0:	40020088 	.word	0x40020088
 80022e4:	400200a0 	.word	0x400200a0
 80022e8:	400200b8 	.word	0x400200b8
 80022ec:	40020410 	.word	0x40020410
 80022f0:	40020428 	.word	0x40020428
 80022f4:	40020440 	.word	0x40020440
 80022f8:	40020458 	.word	0x40020458
 80022fc:	40020470 	.word	0x40020470
 8002300:	40020488 	.word	0x40020488
 8002304:	400204a0 	.word	0x400204a0
 8002308:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1c8      	bne.n	80022ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4b83      	ldr	r3, [pc, #524]	; (8002534 <HAL_DMA_Init+0x420>)
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002332:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	2b04      	cmp	r3, #4
 800235e:	d107      	bne.n	8002370 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4313      	orrs	r3, r2
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002370:	4b71      	ldr	r3, [pc, #452]	; (8002538 <HAL_DMA_Init+0x424>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b71      	ldr	r3, [pc, #452]	; (800253c <HAL_DMA_Init+0x428>)
 8002376:	4013      	ands	r3, r2
 8002378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800237c:	d328      	bcc.n	80023d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b28      	cmp	r3, #40	; 0x28
 8002384:	d903      	bls.n	800238e <HAL_DMA_Init+0x27a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b2e      	cmp	r3, #46	; 0x2e
 800238c:	d917      	bls.n	80023be <HAL_DMA_Init+0x2aa>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b3e      	cmp	r3, #62	; 0x3e
 8002394:	d903      	bls.n	800239e <HAL_DMA_Init+0x28a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b42      	cmp	r3, #66	; 0x42
 800239c:	d90f      	bls.n	80023be <HAL_DMA_Init+0x2aa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b46      	cmp	r3, #70	; 0x46
 80023a4:	d903      	bls.n	80023ae <HAL_DMA_Init+0x29a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b48      	cmp	r3, #72	; 0x48
 80023ac:	d907      	bls.n	80023be <HAL_DMA_Init+0x2aa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b4e      	cmp	r3, #78	; 0x4e
 80023b4:	d905      	bls.n	80023c2 <HAL_DMA_Init+0x2ae>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b52      	cmp	r3, #82	; 0x52
 80023bc:	d801      	bhi.n	80023c2 <HAL_DMA_Init+0x2ae>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_DMA_Init+0x2b0>
 80023c2:	2300      	movs	r3, #0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0307 	bic.w	r3, r3, #7
 80023e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d117      	bne.n	800242a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f002 fb31 	bl	8004a74 <DMA_CheckFifoParam>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e197      	b.n	800275a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f002 fa6c 	bl	8004910 <DMA_CalcBaseAndBitshift>
 8002438:	4603      	mov	r3, r0
 800243a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	223f      	movs	r2, #63	; 0x3f
 8002446:	409a      	lsls	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	e0cd      	b.n	80025ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_DMA_Init+0x42c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d022      	beq.n	800249e <HAL_DMA_Init+0x38a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a39      	ldr	r2, [pc, #228]	; (8002544 <HAL_DMA_Init+0x430>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01d      	beq.n	800249e <HAL_DMA_Init+0x38a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_DMA_Init+0x434>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d018      	beq.n	800249e <HAL_DMA_Init+0x38a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a36      	ldr	r2, [pc, #216]	; (800254c <HAL_DMA_Init+0x438>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_DMA_Init+0x38a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a35      	ldr	r2, [pc, #212]	; (8002550 <HAL_DMA_Init+0x43c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00e      	beq.n	800249e <HAL_DMA_Init+0x38a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_DMA_Init+0x440>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_DMA_Init+0x38a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a32      	ldr	r2, [pc, #200]	; (8002558 <HAL_DMA_Init+0x444>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_DMA_Init+0x38a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_DMA_Init+0x448>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_Init+0x38e>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_DMA_Init+0x390>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8097 	beq.w	80025d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a24      	ldr	r2, [pc, #144]	; (8002540 <HAL_DMA_Init+0x42c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d021      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <HAL_DMA_Init+0x430>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01c      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a21      	ldr	r2, [pc, #132]	; (8002548 <HAL_DMA_Init+0x434>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d017      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_DMA_Init+0x438>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d012      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <HAL_DMA_Init+0x43c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00d      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_DMA_Init+0x440>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d008      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_DMA_Init+0x444>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d003      	beq.n	80024f8 <HAL_DMA_Init+0x3e4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_DMA_Init+0x448>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_DMA_Init+0x44c>)
 8002516:	4013      	ands	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d020      	beq.n	8002564 <HAL_DMA_Init+0x450>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b80      	cmp	r3, #128	; 0x80
 8002528:	d102      	bne.n	8002530 <HAL_DMA_Init+0x41c>
 800252a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800252e:	e01a      	b.n	8002566 <HAL_DMA_Init+0x452>
 8002530:	2300      	movs	r3, #0
 8002532:	e018      	b.n	8002566 <HAL_DMA_Init+0x452>
 8002534:	fe10803f 	.word	0xfe10803f
 8002538:	5c001000 	.word	0x5c001000
 800253c:	ffff0000 	.word	0xffff0000
 8002540:	58025408 	.word	0x58025408
 8002544:	5802541c 	.word	0x5802541c
 8002548:	58025430 	.word	0x58025430
 800254c:	58025444 	.word	0x58025444
 8002550:	58025458 	.word	0x58025458
 8002554:	5802546c 	.word	0x5802546c
 8002558:	58025480 	.word	0x58025480
 800255c:	58025494 	.word	0x58025494
 8002560:	fffe000f 	.word	0xfffe000f
 8002564:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800256c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800257c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800258c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002594:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b6e      	ldr	r3, [pc, #440]	; (8002764 <HAL_DMA_Init+0x650>)
 80025ac:	4413      	add	r3, r2
 80025ae:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_DMA_Init+0x654>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	009a      	lsls	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f002 f9a7 	bl	8004910 <DMA_CalcBaseAndBitshift>
 80025c2:	4603      	mov	r3, r0
 80025c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2201      	movs	r2, #1
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	e008      	b.n	80025ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0b7      	b.n	800275a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5f      	ldr	r2, [pc, #380]	; (800276c <HAL_DMA_Init+0x658>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d072      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <HAL_DMA_Init+0x65c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d06d      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a5c      	ldr	r2, [pc, #368]	; (8002774 <HAL_DMA_Init+0x660>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d068      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_DMA_Init+0x664>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d063      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a59      	ldr	r2, [pc, #356]	; (800277c <HAL_DMA_Init+0x668>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d05e      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a57      	ldr	r2, [pc, #348]	; (8002780 <HAL_DMA_Init+0x66c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d059      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a56      	ldr	r2, [pc, #344]	; (8002784 <HAL_DMA_Init+0x670>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d054      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_DMA_Init+0x674>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d04f      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a53      	ldr	r2, [pc, #332]	; (800278c <HAL_DMA_Init+0x678>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d04a      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_DMA_Init+0x67c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d045      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_DMA_Init+0x680>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d040      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_DMA_Init+0x684>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d03b      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_DMA_Init+0x688>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d036      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_DMA_Init+0x68c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a4a      	ldr	r2, [pc, #296]	; (80027a4 <HAL_DMA_Init+0x690>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d02c      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a48      	ldr	r2, [pc, #288]	; (80027a8 <HAL_DMA_Init+0x694>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d027      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a47      	ldr	r2, [pc, #284]	; (80027ac <HAL_DMA_Init+0x698>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a45      	ldr	r2, [pc, #276]	; (80027b0 <HAL_DMA_Init+0x69c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01d      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a44      	ldr	r2, [pc, #272]	; (80027b4 <HAL_DMA_Init+0x6a0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d018      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <HAL_DMA_Init+0x6a4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a41      	ldr	r2, [pc, #260]	; (80027bc <HAL_DMA_Init+0x6a8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a3f      	ldr	r2, [pc, #252]	; (80027c0 <HAL_DMA_Init+0x6ac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a3e      	ldr	r2, [pc, #248]	; (80027c4 <HAL_DMA_Init+0x6b0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d004      	beq.n	80026da <HAL_DMA_Init+0x5c6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3c      	ldr	r2, [pc, #240]	; (80027c8 <HAL_DMA_Init+0x6b4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_DMA_Init+0x5ca>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_DMA_Init+0x5cc>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d032      	beq.n	800274a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f002 fa41 	bl	8004b6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b80      	cmp	r3, #128	; 0x80
 80026f0:	d102      	bne.n	80026f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800270c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_DMA_Init+0x624>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b08      	cmp	r3, #8
 800271c:	d80c      	bhi.n	8002738 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f002 fabe 	bl	8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	e008      	b.n	800274a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	a7fdabf8 	.word	0xa7fdabf8
 8002768:	cccccccd 	.word	0xcccccccd
 800276c:	40020010 	.word	0x40020010
 8002770:	40020028 	.word	0x40020028
 8002774:	40020040 	.word	0x40020040
 8002778:	40020058 	.word	0x40020058
 800277c:	40020070 	.word	0x40020070
 8002780:	40020088 	.word	0x40020088
 8002784:	400200a0 	.word	0x400200a0
 8002788:	400200b8 	.word	0x400200b8
 800278c:	40020410 	.word	0x40020410
 8002790:	40020428 	.word	0x40020428
 8002794:	40020440 	.word	0x40020440
 8002798:	40020458 	.word	0x40020458
 800279c:	40020470 	.word	0x40020470
 80027a0:	40020488 	.word	0x40020488
 80027a4:	400204a0 	.word	0x400204a0
 80027a8:	400204b8 	.word	0x400204b8
 80027ac:	58025408 	.word	0x58025408
 80027b0:	5802541c 	.word	0x5802541c
 80027b4:	58025430 	.word	0x58025430
 80027b8:	58025444 	.word	0x58025444
 80027bc:	58025458 	.word	0x58025458
 80027c0:	5802546c 	.word	0x5802546c
 80027c4:	58025480 	.word	0x58025480
 80027c8:	58025494 	.word	0x58025494

080027cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e226      	b.n	8002c36 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Start_IT+0x2a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e21f      	b.n	8002c36 <HAL_DMA_Start_IT+0x46a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 820a 	bne.w	8002c20 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a68      	ldr	r2, [pc, #416]	; (80029c0 <HAL_DMA_Start_IT+0x1f4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d04a      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a66      	ldr	r2, [pc, #408]	; (80029c4 <HAL_DMA_Start_IT+0x1f8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d045      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a65      	ldr	r2, [pc, #404]	; (80029c8 <HAL_DMA_Start_IT+0x1fc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d040      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_DMA_Start_IT+0x200>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d03b      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a62      	ldr	r2, [pc, #392]	; (80029d0 <HAL_DMA_Start_IT+0x204>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d036      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a60      	ldr	r2, [pc, #384]	; (80029d4 <HAL_DMA_Start_IT+0x208>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5f      	ldr	r2, [pc, #380]	; (80029d8 <HAL_DMA_Start_IT+0x20c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d02c      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_DMA_Start_IT+0x210>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d027      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_DMA_Start_IT+0x214>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5a      	ldr	r2, [pc, #360]	; (80029e4 <HAL_DMA_Start_IT+0x218>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a59      	ldr	r2, [pc, #356]	; (80029e8 <HAL_DMA_Start_IT+0x21c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a57      	ldr	r2, [pc, #348]	; (80029ec <HAL_DMA_Start_IT+0x220>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_DMA_Start_IT+0x224>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a54      	ldr	r2, [pc, #336]	; (80029f4 <HAL_DMA_Start_IT+0x228>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a53      	ldr	r2, [pc, #332]	; (80029f8 <HAL_DMA_Start_IT+0x22c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_Start_IT+0xee>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_DMA_Start_IT+0x230>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d108      	bne.n	80028cc <HAL_DMA_Start_IT+0x100>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e007      	b.n	80028dc <HAL_DMA_Start_IT+0x110>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f001 fe68 	bl	80045b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_DMA_Start_IT+0x1f4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d04a      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <HAL_DMA_Start_IT+0x1f8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d045      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_DMA_Start_IT+0x1fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d040      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_DMA_Start_IT+0x200>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d03b      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <HAL_DMA_Start_IT+0x204>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d036      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2d      	ldr	r2, [pc, #180]	; (80029d4 <HAL_DMA_Start_IT+0x208>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d031      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <HAL_DMA_Start_IT+0x20c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02c      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <HAL_DMA_Start_IT+0x210>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d027      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <HAL_DMA_Start_IT+0x214>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d022      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_DMA_Start_IT+0x218>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d01d      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <HAL_DMA_Start_IT+0x21c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d018      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a24      	ldr	r2, [pc, #144]	; (80029ec <HAL_DMA_Start_IT+0x220>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_DMA_Start_IT+0x224>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_DMA_Start_IT+0x228>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_DMA_Start_IT+0x22c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_DMA_Start_IT+0x1bc>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_DMA_Start_IT+0x230>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_DMA_Start_IT+0x1c0>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_DMA_Start_IT+0x1c2>
 800298c:	2300      	movs	r3, #0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d036      	beq.n	8002a00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 021e 	bic.w	r2, r3, #30
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0216 	orr.w	r2, r2, #22
 80029a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d03e      	beq.n	8002a2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0208 	orr.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e035      	b.n	8002a2c <HAL_DMA_Start_IT+0x260>
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020e 	bic.w	r2, r3, #14
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 020a 	orr.w	r2, r2, #10
 8002a12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0204 	orr.w	r2, r2, #4
 8002a2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	; (8002c40 <HAL_DMA_Start_IT+0x474>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d072      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <HAL_DMA_Start_IT+0x478>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d06d      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a80      	ldr	r2, [pc, #512]	; (8002c48 <HAL_DMA_Start_IT+0x47c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d068      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7f      	ldr	r2, [pc, #508]	; (8002c4c <HAL_DMA_Start_IT+0x480>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d063      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7d      	ldr	r2, [pc, #500]	; (8002c50 <HAL_DMA_Start_IT+0x484>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d05e      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_DMA_Start_IT+0x488>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d059      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	; (8002c58 <HAL_DMA_Start_IT+0x48c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d054      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a79      	ldr	r2, [pc, #484]	; (8002c5c <HAL_DMA_Start_IT+0x490>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04f      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a77      	ldr	r2, [pc, #476]	; (8002c60 <HAL_DMA_Start_IT+0x494>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d04a      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a76      	ldr	r2, [pc, #472]	; (8002c64 <HAL_DMA_Start_IT+0x498>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d045      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a74      	ldr	r2, [pc, #464]	; (8002c68 <HAL_DMA_Start_IT+0x49c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d040      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_DMA_Start_IT+0x4a0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d03b      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a71      	ldr	r2, [pc, #452]	; (8002c70 <HAL_DMA_Start_IT+0x4a4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d036      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a70      	ldr	r2, [pc, #448]	; (8002c74 <HAL_DMA_Start_IT+0x4a8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d031      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_DMA_Start_IT+0x4ac>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02c      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6d      	ldr	r2, [pc, #436]	; (8002c7c <HAL_DMA_Start_IT+0x4b0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d027      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <HAL_DMA_Start_IT+0x4b4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d022      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6a      	ldr	r2, [pc, #424]	; (8002c84 <HAL_DMA_Start_IT+0x4b8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01d      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a68      	ldr	r2, [pc, #416]	; (8002c88 <HAL_DMA_Start_IT+0x4bc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a67      	ldr	r2, [pc, #412]	; (8002c8c <HAL_DMA_Start_IT+0x4c0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_DMA_Start_IT+0x4c4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a64      	ldr	r2, [pc, #400]	; (8002c94 <HAL_DMA_Start_IT+0x4c8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a62      	ldr	r2, [pc, #392]	; (8002c98 <HAL_DMA_Start_IT+0x4cc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Start_IT+0x350>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <HAL_DMA_Start_IT+0x4d0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Start_IT+0x354>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_Start_IT+0x356>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HAL_DMA_Start_IT+0x474>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <HAL_DMA_Start_IT+0x478>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d045      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <HAL_DMA_Start_IT+0x47c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d040      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a33      	ldr	r2, [pc, #204]	; (8002c4c <HAL_DMA_Start_IT+0x480>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d03b      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_DMA_Start_IT+0x484>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a30      	ldr	r2, [pc, #192]	; (8002c54 <HAL_DMA_Start_IT+0x488>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2e      	ldr	r2, [pc, #184]	; (8002c58 <HAL_DMA_Start_IT+0x48c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2d      	ldr	r2, [pc, #180]	; (8002c5c <HAL_DMA_Start_IT+0x490>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d027      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <HAL_DMA_Start_IT+0x494>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_DMA_Start_IT+0x498>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_DMA_Start_IT+0x49c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_DMA_Start_IT+0x4a0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_DMA_Start_IT+0x4a4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_DMA_Start_IT+0x4a8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_DMA_Start_IT+0x4ac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Start_IT+0x430>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_DMA_Start_IT+0x4b0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <HAL_DMA_Start_IT+0x442>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e012      	b.n	8002c34 <HAL_DMA_Start_IT+0x468>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e009      	b.n	8002c34 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40020010 	.word	0x40020010
 8002c44:	40020028 	.word	0x40020028
 8002c48:	40020040 	.word	0x40020040
 8002c4c:	40020058 	.word	0x40020058
 8002c50:	40020070 	.word	0x40020070
 8002c54:	40020088 	.word	0x40020088
 8002c58:	400200a0 	.word	0x400200a0
 8002c5c:	400200b8 	.word	0x400200b8
 8002c60:	40020410 	.word	0x40020410
 8002c64:	40020428 	.word	0x40020428
 8002c68:	40020440 	.word	0x40020440
 8002c6c:	40020458 	.word	0x40020458
 8002c70:	40020470 	.word	0x40020470
 8002c74:	40020488 	.word	0x40020488
 8002c78:	400204a0 	.word	0x400204a0
 8002c7c:	400204b8 	.word	0x400204b8
 8002c80:	58025408 	.word	0x58025408
 8002c84:	5802541c 	.word	0x5802541c
 8002c88:	58025430 	.word	0x58025430
 8002c8c:	58025444 	.word	0x58025444
 8002c90:	58025458 	.word	0x58025458
 8002c94:	5802546c 	.word	0x5802546c
 8002c98:	58025480 	.word	0x58025480
 8002c9c:	58025494 	.word	0x58025494

08002ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7fe fdc8 	bl	800183c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e2dc      	b.n	8003272 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d008      	beq.n	8002cd6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e2cd      	b.n	8003272 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a76      	ldr	r2, [pc, #472]	; (8002eb4 <HAL_DMA_Abort+0x214>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d04a      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <HAL_DMA_Abort+0x218>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d045      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a73      	ldr	r2, [pc, #460]	; (8002ebc <HAL_DMA_Abort+0x21c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d040      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_DMA_Abort+0x220>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d03b      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a70      	ldr	r2, [pc, #448]	; (8002ec4 <HAL_DMA_Abort+0x224>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d036      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_DMA_Abort+0x228>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d031      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6d      	ldr	r2, [pc, #436]	; (8002ecc <HAL_DMA_Abort+0x22c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d02c      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6b      	ldr	r2, [pc, #428]	; (8002ed0 <HAL_DMA_Abort+0x230>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d027      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_DMA_Abort+0x234>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a68      	ldr	r2, [pc, #416]	; (8002ed8 <HAL_DMA_Abort+0x238>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01d      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a67      	ldr	r2, [pc, #412]	; (8002edc <HAL_DMA_Abort+0x23c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_DMA_Abort+0x240>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a64      	ldr	r2, [pc, #400]	; (8002ee4 <HAL_DMA_Abort+0x244>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a62      	ldr	r2, [pc, #392]	; (8002ee8 <HAL_DMA_Abort+0x248>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a61      	ldr	r2, [pc, #388]	; (8002eec <HAL_DMA_Abort+0x24c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_DMA_Abort+0xd6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5f      	ldr	r2, [pc, #380]	; (8002ef0 <HAL_DMA_Abort+0x250>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Abort+0xda>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_DMA_Abort+0xdc>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 021e 	bic.w	r2, r2, #30
 8002d8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e00a      	b.n	8002dbe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 020e 	bic.w	r2, r2, #14
 8002db6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_DMA_Abort+0x214>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d072      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3a      	ldr	r2, [pc, #232]	; (8002eb8 <HAL_DMA_Abort+0x218>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d06d      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_DMA_Abort+0x21c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d068      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <HAL_DMA_Abort+0x220>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d063      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <HAL_DMA_Abort+0x224>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05e      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_DMA_Abort+0x228>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d059      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <HAL_DMA_Abort+0x22c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d054      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_DMA_Abort+0x230>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d04f      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <HAL_DMA_Abort+0x234>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_DMA_Abort+0x238>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HAL_DMA_Abort+0x23c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <HAL_DMA_Abort+0x240>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_DMA_Abort+0x244>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_DMA_Abort+0x248>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <HAL_DMA_Abort+0x24c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_DMA_Abort+0x250>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_DMA_Abort+0x254>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_DMA_Abort+0x258>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a21      	ldr	r2, [pc, #132]	; (8002efc <HAL_DMA_Abort+0x25c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_DMA_Abort+0x260>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_DMA_Abort+0x264>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_DMA_Abort+0x268>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <HAL_DMA_Abort+0x26c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_Abort+0x20e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_DMA_Abort+0x270>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d132      	bne.n	8002f14 <HAL_DMA_Abort+0x274>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e031      	b.n	8002f16 <HAL_DMA_Abort+0x276>
 8002eb2:	bf00      	nop
 8002eb4:	40020010 	.word	0x40020010
 8002eb8:	40020028 	.word	0x40020028
 8002ebc:	40020040 	.word	0x40020040
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	40020070 	.word	0x40020070
 8002ec8:	40020088 	.word	0x40020088
 8002ecc:	400200a0 	.word	0x400200a0
 8002ed0:	400200b8 	.word	0x400200b8
 8002ed4:	40020410 	.word	0x40020410
 8002ed8:	40020428 	.word	0x40020428
 8002edc:	40020440 	.word	0x40020440
 8002ee0:	40020458 	.word	0x40020458
 8002ee4:	40020470 	.word	0x40020470
 8002ee8:	40020488 	.word	0x40020488
 8002eec:	400204a0 	.word	0x400204a0
 8002ef0:	400204b8 	.word	0x400204b8
 8002ef4:	58025408 	.word	0x58025408
 8002ef8:	5802541c 	.word	0x5802541c
 8002efc:	58025430 	.word	0x58025430
 8002f00:	58025444 	.word	0x58025444
 8002f04:	58025458 	.word	0x58025458
 8002f08:	5802546c 	.word	0x5802546c
 8002f0c:	58025480 	.word	0x58025480
 8002f10:	58025494 	.word	0x58025494
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6d      	ldr	r2, [pc, #436]	; (80030e4 <HAL_DMA_Abort+0x444>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04a      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <HAL_DMA_Abort+0x448>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d045      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6a      	ldr	r2, [pc, #424]	; (80030ec <HAL_DMA_Abort+0x44c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d040      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a68      	ldr	r2, [pc, #416]	; (80030f0 <HAL_DMA_Abort+0x450>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03b      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a67      	ldr	r2, [pc, #412]	; (80030f4 <HAL_DMA_Abort+0x454>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a65      	ldr	r2, [pc, #404]	; (80030f8 <HAL_DMA_Abort+0x458>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a64      	ldr	r2, [pc, #400]	; (80030fc <HAL_DMA_Abort+0x45c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02c      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a62      	ldr	r2, [pc, #392]	; (8003100 <HAL_DMA_Abort+0x460>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a61      	ldr	r2, [pc, #388]	; (8003104 <HAL_DMA_Abort+0x464>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5f      	ldr	r2, [pc, #380]	; (8003108 <HAL_DMA_Abort+0x468>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_DMA_Abort+0x46c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5c      	ldr	r2, [pc, #368]	; (8003110 <HAL_DMA_Abort+0x470>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	; (8003114 <HAL_DMA_Abort+0x474>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a59      	ldr	r2, [pc, #356]	; (8003118 <HAL_DMA_Abort+0x478>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_DMA_Abort+0x47c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_DMA_Abort+0x32a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a56      	ldr	r2, [pc, #344]	; (8003120 <HAL_DMA_Abort+0x480>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <HAL_DMA_Abort+0x33c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <HAL_DMA_Abort+0x34c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fec:	e013      	b.n	8003016 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fee:	f7fe fc25 	bl	800183c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d90c      	bls.n	8003016 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e12d      	b.n	8003272 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e5      	bne.n	8002fee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2f      	ldr	r2, [pc, #188]	; (80030e4 <HAL_DMA_Abort+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04a      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2d      	ldr	r2, [pc, #180]	; (80030e8 <HAL_DMA_Abort+0x448>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <HAL_DMA_Abort+0x44c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_DMA_Abort+0x450>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d03b      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <HAL_DMA_Abort+0x454>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d036      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_DMA_Abort+0x458>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_DMA_Abort+0x45c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d02c      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <HAL_DMA_Abort+0x460>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a23      	ldr	r2, [pc, #140]	; (8003104 <HAL_DMA_Abort+0x464>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_DMA_Abort+0x468>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a20      	ldr	r2, [pc, #128]	; (800310c <HAL_DMA_Abort+0x46c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_DMA_Abort+0x470>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_DMA_Abort+0x474>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_DMA_Abort+0x478>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1a      	ldr	r2, [pc, #104]	; (800311c <HAL_DMA_Abort+0x47c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort+0x422>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_DMA_Abort+0x480>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Abort+0x426>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_Abort+0x428>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02b      	beq.n	8003124 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	223f      	movs	r2, #63	; 0x3f
 80030dc:	409a      	lsls	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e02a      	b.n	800313a <HAL_DMA_Abort+0x49a>
 80030e4:	40020010 	.word	0x40020010
 80030e8:	40020028 	.word	0x40020028
 80030ec:	40020040 	.word	0x40020040
 80030f0:	40020058 	.word	0x40020058
 80030f4:	40020070 	.word	0x40020070
 80030f8:	40020088 	.word	0x40020088
 80030fc:	400200a0 	.word	0x400200a0
 8003100:	400200b8 	.word	0x400200b8
 8003104:	40020410 	.word	0x40020410
 8003108:	40020428 	.word	0x40020428
 800310c:	40020440 	.word	0x40020440
 8003110:	40020458 	.word	0x40020458
 8003114:	40020470 	.word	0x40020470
 8003118:	40020488 	.word	0x40020488
 800311c:	400204a0 	.word	0x400204a0
 8003120:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2201      	movs	r2, #1
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_DMA_Abort+0x5dc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d072      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <HAL_DMA_Abort+0x5e0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d06d      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4c      	ldr	r2, [pc, #304]	; (8003284 <HAL_DMA_Abort+0x5e4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d068      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4a      	ldr	r2, [pc, #296]	; (8003288 <HAL_DMA_Abort+0x5e8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d063      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a49      	ldr	r2, [pc, #292]	; (800328c <HAL_DMA_Abort+0x5ec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d05e      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a47      	ldr	r2, [pc, #284]	; (8003290 <HAL_DMA_Abort+0x5f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d059      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a46      	ldr	r2, [pc, #280]	; (8003294 <HAL_DMA_Abort+0x5f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d054      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a44      	ldr	r2, [pc, #272]	; (8003298 <HAL_DMA_Abort+0x5f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04f      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a43      	ldr	r2, [pc, #268]	; (800329c <HAL_DMA_Abort+0x5fc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <HAL_DMA_Abort+0x600>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <HAL_DMA_Abort+0x604>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a3e      	ldr	r2, [pc, #248]	; (80032a8 <HAL_DMA_Abort+0x608>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <HAL_DMA_Abort+0x60c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3b      	ldr	r2, [pc, #236]	; (80032b0 <HAL_DMA_Abort+0x610>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_DMA_Abort+0x614>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_DMA_Abort+0x618>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_DMA_Abort+0x61c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_DMA_Abort+0x620>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_DMA_Abort+0x624>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <HAL_DMA_Abort+0x628>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <HAL_DMA_Abort+0x62c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <HAL_DMA_Abort+0x630>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2e      	ldr	r2, [pc, #184]	; (80032d4 <HAL_DMA_Abort+0x634>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_Abort+0x58a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <HAL_DMA_Abort+0x638>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_DMA_Abort+0x58e>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_DMA_Abort+0x590>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800323c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00c      	beq.n	8003260 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003254:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800325e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	58025408 	.word	0x58025408
 80032c0:	5802541c 	.word	0x5802541c
 80032c4:	58025430 	.word	0x58025430
 80032c8:	58025444 	.word	0x58025444
 80032cc:	58025458 	.word	0x58025458
 80032d0:	5802546c 	.word	0x5802546c
 80032d4:	58025480 	.word	0x58025480
 80032d8:	58025494 	.word	0x58025494

080032dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e205      	b.n	80036fa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e1fa      	b.n	80036fa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a8c      	ldr	r2, [pc, #560]	; (800353c <HAL_DMA_Abort_IT+0x260>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04a      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a8b      	ldr	r2, [pc, #556]	; (8003540 <HAL_DMA_Abort_IT+0x264>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d045      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a89      	ldr	r2, [pc, #548]	; (8003544 <HAL_DMA_Abort_IT+0x268>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a88      	ldr	r2, [pc, #544]	; (8003548 <HAL_DMA_Abort_IT+0x26c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03b      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a86      	ldr	r2, [pc, #536]	; (800354c <HAL_DMA_Abort_IT+0x270>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a85      	ldr	r2, [pc, #532]	; (8003550 <HAL_DMA_Abort_IT+0x274>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	; (8003554 <HAL_DMA_Abort_IT+0x278>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_DMA_Abort_IT+0x27c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a80      	ldr	r2, [pc, #512]	; (800355c <HAL_DMA_Abort_IT+0x280>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7f      	ldr	r2, [pc, #508]	; (8003560 <HAL_DMA_Abort_IT+0x284>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_DMA_Abort_IT+0x288>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_DMA_Abort_IT+0x28c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7a      	ldr	r2, [pc, #488]	; (800356c <HAL_DMA_Abort_IT+0x290>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a79      	ldr	r2, [pc, #484]	; (8003570 <HAL_DMA_Abort_IT+0x294>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_DMA_Abort_IT+0x298>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a76      	ldr	r2, [pc, #472]	; (8003578 <HAL_DMA_Abort_IT+0x29c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA_Abort_IT+0xcc>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_DMA_Abort_IT+0xce>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d065      	beq.n	800347a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a60      	ldr	r2, [pc, #384]	; (800353c <HAL_DMA_Abort_IT+0x260>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5e      	ldr	r2, [pc, #376]	; (8003540 <HAL_DMA_Abort_IT+0x264>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <HAL_DMA_Abort_IT+0x268>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5b      	ldr	r2, [pc, #364]	; (8003548 <HAL_DMA_Abort_IT+0x26c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5a      	ldr	r2, [pc, #360]	; (800354c <HAL_DMA_Abort_IT+0x270>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_DMA_Abort_IT+0x274>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a57      	ldr	r2, [pc, #348]	; (8003554 <HAL_DMA_Abort_IT+0x278>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a55      	ldr	r2, [pc, #340]	; (8003558 <HAL_DMA_Abort_IT+0x27c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_DMA_Abort_IT+0x280>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_DMA_Abort_IT+0x284>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_DMA_Abort_IT+0x288>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_DMA_Abort_IT+0x28c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4e      	ldr	r2, [pc, #312]	; (800356c <HAL_DMA_Abort_IT+0x290>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <HAL_DMA_Abort_IT+0x294>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4b      	ldr	r2, [pc, #300]	; (8003574 <HAL_DMA_Abort_IT+0x298>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_Abort_IT+0x17a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a49      	ldr	r2, [pc, #292]	; (8003578 <HAL_DMA_Abort_IT+0x29c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d108      	bne.n	8003468 <HAL_DMA_Abort_IT+0x18c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0201 	bic.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e147      	b.n	80036f8 <HAL_DMA_Abort_IT+0x41c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e13e      	b.n	80036f8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 020e 	bic.w	r2, r2, #14
 8003488:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_DMA_Abort_IT+0x260>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d04a      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_DMA_Abort_IT+0x264>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d045      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a28      	ldr	r2, [pc, #160]	; (8003544 <HAL_DMA_Abort_IT+0x268>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d040      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_DMA_Abort_IT+0x26c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d03b      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a25      	ldr	r2, [pc, #148]	; (800354c <HAL_DMA_Abort_IT+0x270>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d036      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_DMA_Abort_IT+0x274>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d031      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a22      	ldr	r2, [pc, #136]	; (8003554 <HAL_DMA_Abort_IT+0x278>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d02c      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <HAL_DMA_Abort_IT+0x27c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d027      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_DMA_Abort_IT+0x280>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_DMA_Abort_IT+0x284>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01d      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_DMA_Abort_IT+0x288>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d018      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_DMA_Abort_IT+0x28c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_DMA_Abort_IT+0x290>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_DMA_Abort_IT+0x294>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_DMA_Abort_IT+0x298>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_DMA_Abort_IT+0x24e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_DMA_Abort_IT+0x29c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d128      	bne.n	800357c <HAL_DMA_Abort_IT+0x2a0>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e027      	b.n	800358c <HAL_DMA_Abort_IT+0x2b0>
 800353c:	40020010 	.word	0x40020010
 8003540:	40020028 	.word	0x40020028
 8003544:	40020040 	.word	0x40020040
 8003548:	40020058 	.word	0x40020058
 800354c:	40020070 	.word	0x40020070
 8003550:	40020088 	.word	0x40020088
 8003554:	400200a0 	.word	0x400200a0
 8003558:	400200b8 	.word	0x400200b8
 800355c:	40020410 	.word	0x40020410
 8003560:	40020428 	.word	0x40020428
 8003564:	40020440 	.word	0x40020440
 8003568:	40020458 	.word	0x40020458
 800356c:	40020470 	.word	0x40020470
 8003570:	40020488 	.word	0x40020488
 8003574:	400204a0 	.word	0x400204a0
 8003578:	400204b8 	.word	0x400204b8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <HAL_DMA_Abort_IT+0x428>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d072      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_DMA_Abort_IT+0x42c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d06d      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a59      	ldr	r2, [pc, #356]	; (800370c <HAL_DMA_Abort_IT+0x430>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d068      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_DMA_Abort_IT+0x434>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d063      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_DMA_Abort_IT+0x438>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d05e      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_DMA_Abort_IT+0x43c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d059      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a53      	ldr	r2, [pc, #332]	; (800371c <HAL_DMA_Abort_IT+0x440>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d054      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_DMA_Abort_IT+0x444>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04f      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_DMA_Abort_IT+0x448>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a4f      	ldr	r2, [pc, #316]	; (8003728 <HAL_DMA_Abort_IT+0x44c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4d      	ldr	r2, [pc, #308]	; (800372c <HAL_DMA_Abort_IT+0x450>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <HAL_DMA_Abort_IT+0x454>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_DMA_Abort_IT+0x458>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a49      	ldr	r2, [pc, #292]	; (8003738 <HAL_DMA_Abort_IT+0x45c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a47      	ldr	r2, [pc, #284]	; (800373c <HAL_DMA_Abort_IT+0x460>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a46      	ldr	r2, [pc, #280]	; (8003740 <HAL_DMA_Abort_IT+0x464>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a44      	ldr	r2, [pc, #272]	; (8003744 <HAL_DMA_Abort_IT+0x468>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_DMA_Abort_IT+0x46c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a41      	ldr	r2, [pc, #260]	; (800374c <HAL_DMA_Abort_IT+0x470>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <HAL_DMA_Abort_IT+0x474>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3e      	ldr	r2, [pc, #248]	; (8003754 <HAL_DMA_Abort_IT+0x478>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_DMA_Abort_IT+0x47c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_DMA_Abort_IT+0x480>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_Abort_IT+0x3a0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_DMA_Abort_IT+0x484>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_DMA_Abort_IT+0x3a4>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_DMA_Abort_IT+0x3a6>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d028      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494

08003764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_DMA_IRQHandler+0x1ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_DMA_IRQHandler+0x1b0>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5f      	ldr	r2, [pc, #380]	; (8003918 <HAL_DMA_IRQHandler+0x1b4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_DMA_IRQHandler+0x1b8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <HAL_DMA_IRQHandler+0x1bc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5a      	ldr	r2, [pc, #360]	; (8003924 <HAL_DMA_IRQHandler+0x1c0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a59      	ldr	r2, [pc, #356]	; (8003928 <HAL_DMA_IRQHandler+0x1c4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a57      	ldr	r2, [pc, #348]	; (800392c <HAL_DMA_IRQHandler+0x1c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a56      	ldr	r2, [pc, #344]	; (8003930 <HAL_DMA_IRQHandler+0x1cc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a54      	ldr	r2, [pc, #336]	; (8003934 <HAL_DMA_IRQHandler+0x1d0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a53      	ldr	r2, [pc, #332]	; (8003938 <HAL_DMA_IRQHandler+0x1d4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a51      	ldr	r2, [pc, #324]	; (800393c <HAL_DMA_IRQHandler+0x1d8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a50      	ldr	r2, [pc, #320]	; (8003940 <HAL_DMA_IRQHandler+0x1dc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4e      	ldr	r2, [pc, #312]	; (8003944 <HAL_DMA_IRQHandler+0x1e0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4d      	ldr	r2, [pc, #308]	; (8003948 <HAL_DMA_IRQHandler+0x1e4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_DMA_IRQHandler+0x1e8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_DMA_IRQHandler+0x1ec>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_IRQHandler+0xd2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_DMA_IRQHandler+0x1f0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_DMA_IRQHandler+0xd6>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_DMA_IRQHandler+0xd8>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 842b 	beq.w	8004098 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2208      	movs	r2, #8
 800384c:	409a      	lsls	r2, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a2 	beq.w	800399c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <HAL_DMA_IRQHandler+0x1b4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d04a      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2d      	ldr	r2, [pc, #180]	; (800391c <HAL_DMA_IRQHandler+0x1b8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d045      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <HAL_DMA_IRQHandler+0x1bc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d040      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <HAL_DMA_IRQHandler+0x1c0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d03b      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <HAL_DMA_IRQHandler+0x1c4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d036      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <HAL_DMA_IRQHandler+0x1c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d031      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <HAL_DMA_IRQHandler+0x1cc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02c      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a24      	ldr	r2, [pc, #144]	; (8003934 <HAL_DMA_IRQHandler+0x1d0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_DMA_IRQHandler+0x1d4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d022      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_DMA_IRQHandler+0x1d8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <HAL_DMA_IRQHandler+0x1dc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_DMA_IRQHandler+0x1e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_DMA_IRQHandler+0x1e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_DMA_IRQHandler+0x1e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_DMA_IRQHandler+0x1ec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x194>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_DMA_IRQHandler+0x1f0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d12f      	bne.n	8003958 <HAL_DMA_IRQHandler+0x1f4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e02e      	b.n	800396c <HAL_DMA_IRQHandler+0x208>
 800390e:	bf00      	nop
 8003910:	24000000 	.word	0x24000000
 8003914:	1b4e81b5 	.word	0x1b4e81b5
 8003918:	40020010 	.word	0x40020010
 800391c:	40020028 	.word	0x40020028
 8003920:	40020040 	.word	0x40020040
 8003924:	40020058 	.word	0x40020058
 8003928:	40020070 	.word	0x40020070
 800392c:	40020088 	.word	0x40020088
 8003930:	400200a0 	.word	0x400200a0
 8003934:	400200b8 	.word	0x400200b8
 8003938:	40020410 	.word	0x40020410
 800393c:	40020428 	.word	0x40020428
 8003940:	40020440 	.word	0x40020440
 8003944:	40020458 	.word	0x40020458
 8003948:	40020470 	.word	0x40020470
 800394c:	40020488 	.word	0x40020488
 8003950:	400204a0 	.word	0x400204a0
 8003954:	400204b8 	.word	0x400204b8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2208      	movs	r2, #8
 800398a:	409a      	lsls	r2, r3
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06e      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a69      	ldr	r2, [pc, #420]	; (8003b5c <HAL_DMA_IRQHandler+0x3f8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_DMA_IRQHandler+0x3fc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a66      	ldr	r2, [pc, #408]	; (8003b64 <HAL_DMA_IRQHandler+0x400>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a64      	ldr	r2, [pc, #400]	; (8003b68 <HAL_DMA_IRQHandler+0x404>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a63      	ldr	r2, [pc, #396]	; (8003b6c <HAL_DMA_IRQHandler+0x408>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a61      	ldr	r2, [pc, #388]	; (8003b70 <HAL_DMA_IRQHandler+0x40c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a60      	ldr	r2, [pc, #384]	; (8003b74 <HAL_DMA_IRQHandler+0x410>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_DMA_IRQHandler+0x414>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <HAL_DMA_IRQHandler+0x418>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <HAL_DMA_IRQHandler+0x41c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_DMA_IRQHandler+0x420>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_DMA_IRQHandler+0x424>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_DMA_IRQHandler+0x428>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a55      	ldr	r2, [pc, #340]	; (8003b90 <HAL_DMA_IRQHandler+0x42c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a54      	ldr	r2, [pc, #336]	; (8003b94 <HAL_DMA_IRQHandler+0x430>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x2ee>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_DMA_IRQHandler+0x434>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10a      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x304>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e003      	b.n	8003a70 <HAL_DMA_IRQHandler+0x30c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2204      	movs	r2, #4
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 808f 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <HAL_DMA_IRQHandler+0x3f8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d04a      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_DMA_IRQHandler+0x3fc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d045      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <HAL_DMA_IRQHandler+0x400>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d040      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMA_IRQHandler+0x404>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03b      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_DMA_IRQHandler+0x408>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d036      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_DMA_IRQHandler+0x40c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <HAL_DMA_IRQHandler+0x410>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d02c      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_DMA_IRQHandler+0x414>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d027      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <HAL_DMA_IRQHandler+0x418>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_DMA_IRQHandler+0x41c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_DMA_IRQHandler+0x420>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d018      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_DMA_IRQHandler+0x424>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_DMA_IRQHandler+0x428>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_DMA_IRQHandler+0x42c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_DMA_IRQHandler+0x430>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x3e2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <HAL_DMA_IRQHandler+0x434>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d12a      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x438>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e023      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x440>
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2210      	movs	r2, #16
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a6 	beq.w	8003d26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a85      	ldr	r2, [pc, #532]	; (8003df4 <HAL_DMA_IRQHandler+0x690>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <HAL_DMA_IRQHandler+0x694>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a82      	ldr	r2, [pc, #520]	; (8003dfc <HAL_DMA_IRQHandler+0x698>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_DMA_IRQHandler+0x69c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7f      	ldr	r2, [pc, #508]	; (8003e04 <HAL_DMA_IRQHandler+0x6a0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_DMA_IRQHandler+0x6a4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <HAL_DMA_IRQHandler+0x6a8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7a      	ldr	r2, [pc, #488]	; (8003e10 <HAL_DMA_IRQHandler+0x6ac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a79      	ldr	r2, [pc, #484]	; (8003e14 <HAL_DMA_IRQHandler+0x6b0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <HAL_DMA_IRQHandler+0x6b4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a76      	ldr	r2, [pc, #472]	; (8003e1c <HAL_DMA_IRQHandler+0x6b8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a74      	ldr	r2, [pc, #464]	; (8003e20 <HAL_DMA_IRQHandler+0x6bc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a73      	ldr	r2, [pc, #460]	; (8003e24 <HAL_DMA_IRQHandler+0x6c0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a71      	ldr	r2, [pc, #452]	; (8003e28 <HAL_DMA_IRQHandler+0x6c4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	; (8003e2c <HAL_DMA_IRQHandler+0x6c8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x516>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_DMA_IRQHandler+0x6cc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10a      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x52c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e009      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x540>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d03e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d024      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
 8003ce4:	e01f      	b.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
 8003cf6:	e016      	b.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2220      	movs	r2, #32
 8003d30:	409a      	lsls	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8110 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <HAL_DMA_IRQHandler+0x690>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_DMA_IRQHandler+0x694>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <HAL_DMA_IRQHandler+0x698>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <HAL_DMA_IRQHandler+0x69c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_DMA_IRQHandler+0x6a0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_DMA_IRQHandler+0x6a4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <HAL_DMA_IRQHandler+0x6a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_DMA_IRQHandler+0x6ac>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <HAL_DMA_IRQHandler+0x6b0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_DMA_IRQHandler+0x6b4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_DMA_IRQHandler+0x6b8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <HAL_DMA_IRQHandler+0x6bc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <HAL_DMA_IRQHandler+0x6c0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_DMA_IRQHandler+0x6c4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_DMA_IRQHandler+0x6c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x678>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <HAL_DMA_IRQHandler+0x6cc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d12b      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x6d0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02a      	b.n	8003e48 <HAL_DMA_IRQHandler+0x6e4>
 8003df2:	bf00      	nop
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8087 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2220      	movs	r2, #32
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d139      	bne.n	8003ede <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0216 	bic.w	r2, r2, #22
 8003e78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x736>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	223f      	movs	r2, #63	; 0x3f
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 834a 	beq.w	8004568 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
          }
          return;
 8003edc:	e344      	b.n	8004568 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02c      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	e027      	b.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	e01e      	b.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0210 	bic.w	r2, r2, #16
 8003f3a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8306 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8088 	beq.w	8004084 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2204      	movs	r2, #4
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7a      	ldr	r2, [pc, #488]	; (800416c <HAL_DMA_IRQHandler+0xa08>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04a      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a79      	ldr	r2, [pc, #484]	; (8004170 <HAL_DMA_IRQHandler+0xa0c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d045      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a77      	ldr	r2, [pc, #476]	; (8004174 <HAL_DMA_IRQHandler+0xa10>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d040      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a76      	ldr	r2, [pc, #472]	; (8004178 <HAL_DMA_IRQHandler+0xa14>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d03b      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a74      	ldr	r2, [pc, #464]	; (800417c <HAL_DMA_IRQHandler+0xa18>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d036      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a73      	ldr	r2, [pc, #460]	; (8004180 <HAL_DMA_IRQHandler+0xa1c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d031      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a71      	ldr	r2, [pc, #452]	; (8004184 <HAL_DMA_IRQHandler+0xa20>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a70      	ldr	r2, [pc, #448]	; (8004188 <HAL_DMA_IRQHandler+0xa24>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_DMA_IRQHandler+0xa28>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	; (8004190 <HAL_DMA_IRQHandler+0xa2c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d01d      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6b      	ldr	r2, [pc, #428]	; (8004194 <HAL_DMA_IRQHandler+0xa30>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6a      	ldr	r2, [pc, #424]	; (8004198 <HAL_DMA_IRQHandler+0xa34>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a68      	ldr	r2, [pc, #416]	; (800419c <HAL_DMA_IRQHandler+0xa38>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a67      	ldr	r2, [pc, #412]	; (80041a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_DMA_IRQHandler+0xa40>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_DMA_IRQHandler+0x8b8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <HAL_DMA_IRQHandler+0xa44>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <HAL_DMA_IRQHandler+0x8ca>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e007      	b.n	800403e <HAL_DMA_IRQHandler+0x8da>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004046:	429a      	cmp	r2, r3
 8004048:	d307      	bcc.n	800405a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f2      	bne.n	800403e <HAL_DMA_IRQHandler+0x8da>
 8004058:	e000      	b.n	800405c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800405a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2203      	movs	r2, #3
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800407a:	e003      	b.n	8004084 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8272 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e26c      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a43      	ldr	r2, [pc, #268]	; (80041ac <HAL_DMA_IRQHandler+0xa48>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <HAL_DMA_IRQHandler+0xa4c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a40      	ldr	r2, [pc, #256]	; (80041b4 <HAL_DMA_IRQHandler+0xa50>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3f      	ldr	r2, [pc, #252]	; (80041b8 <HAL_DMA_IRQHandler+0xa54>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3d      	ldr	r2, [pc, #244]	; (80041bc <HAL_DMA_IRQHandler+0xa58>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3c      	ldr	r2, [pc, #240]	; (80041c0 <HAL_DMA_IRQHandler+0xa5c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_DMA_IRQHandler+0xa60>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x984>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a39      	ldr	r2, [pc, #228]	; (80041c8 <HAL_DMA_IRQHandler+0xa64>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_IRQHandler+0x988>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_DMA_IRQHandler+0x98a>
 80040ec:	2300      	movs	r3, #0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 823f 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2204      	movs	r2, #4
 8004106:	409a      	lsls	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80cd 	beq.w	80042ac <HAL_DMA_IRQHandler+0xb48>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80c7 	beq.w	80042ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2204      	movs	r2, #4
 8004128:	409a      	lsls	r2, r3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d049      	beq.n	80041cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8210 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004154:	e20a      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8206 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004168:	e200      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
 800416a:	bf00      	nop
 800416c:	40020010 	.word	0x40020010
 8004170:	40020028 	.word	0x40020028
 8004174:	40020040 	.word	0x40020040
 8004178:	40020058 	.word	0x40020058
 800417c:	40020070 	.word	0x40020070
 8004180:	40020088 	.word	0x40020088
 8004184:	400200a0 	.word	0x400200a0
 8004188:	400200b8 	.word	0x400200b8
 800418c:	40020410 	.word	0x40020410
 8004190:	40020428 	.word	0x40020428
 8004194:	40020440 	.word	0x40020440
 8004198:	40020458 	.word	0x40020458
 800419c:	40020470 	.word	0x40020470
 80041a0:	40020488 	.word	0x40020488
 80041a4:	400204a0 	.word	0x400204a0
 80041a8:	400204b8 	.word	0x400204b8
 80041ac:	58025408 	.word	0x58025408
 80041b0:	5802541c 	.word	0x5802541c
 80041b4:	58025430 	.word	0x58025430
 80041b8:	58025444 	.word	0x58025444
 80041bc:	58025458 	.word	0x58025458
 80041c0:	5802546c 	.word	0x5802546c
 80041c4:	58025480 	.word	0x58025480
 80041c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d160      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a8c      	ldr	r2, [pc, #560]	; (800440c <HAL_DMA_IRQHandler+0xca8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d04a      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a8a      	ldr	r2, [pc, #552]	; (8004410 <HAL_DMA_IRQHandler+0xcac>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a89      	ldr	r2, [pc, #548]	; (8004414 <HAL_DMA_IRQHandler+0xcb0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d040      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a87      	ldr	r2, [pc, #540]	; (8004418 <HAL_DMA_IRQHandler+0xcb4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d03b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a86      	ldr	r2, [pc, #536]	; (800441c <HAL_DMA_IRQHandler+0xcb8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d036      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a84      	ldr	r2, [pc, #528]	; (8004420 <HAL_DMA_IRQHandler+0xcbc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a83      	ldr	r2, [pc, #524]	; (8004424 <HAL_DMA_IRQHandler+0xcc0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d02c      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a81      	ldr	r2, [pc, #516]	; (8004428 <HAL_DMA_IRQHandler+0xcc4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d027      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a80      	ldr	r2, [pc, #512]	; (800442c <HAL_DMA_IRQHandler+0xcc8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7e      	ldr	r2, [pc, #504]	; (8004430 <HAL_DMA_IRQHandler+0xccc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <HAL_DMA_IRQHandler+0xcd0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d018      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7b      	ldr	r2, [pc, #492]	; (8004438 <HAL_DMA_IRQHandler+0xcd4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7a      	ldr	r2, [pc, #488]	; (800443c <HAL_DMA_IRQHandler+0xcd8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a78      	ldr	r2, [pc, #480]	; (8004440 <HAL_DMA_IRQHandler+0xcdc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a77      	ldr	r2, [pc, #476]	; (8004444 <HAL_DMA_IRQHandler+0xce0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_IRQHandler+0xb12>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a75      	ldr	r2, [pc, #468]	; (8004448 <HAL_DMA_IRQHandler+0xce4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <HAL_DMA_IRQHandler+0xb24>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0208 	bic.w	r2, r2, #8
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <HAL_DMA_IRQHandler+0xb34>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8165 	beq.w	800456c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042aa:	e15f      	b.n	800456c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2202      	movs	r2, #2
 80042b6:	409a      	lsls	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80c5 	beq.w	800444c <HAL_DMA_IRQHandler+0xce8>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80bf 	beq.w	800444c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2202      	movs	r2, #2
 80042d8:	409a      	lsls	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 813a 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004304:	e134      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8130 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004318:	e12a      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d168      	bne.n	80043f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a38      	ldr	r2, [pc, #224]	; (800440c <HAL_DMA_IRQHandler+0xca8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d04a      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a37      	ldr	r2, [pc, #220]	; (8004410 <HAL_DMA_IRQHandler+0xcac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d045      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a35      	ldr	r2, [pc, #212]	; (8004414 <HAL_DMA_IRQHandler+0xcb0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d040      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a34      	ldr	r2, [pc, #208]	; (8004418 <HAL_DMA_IRQHandler+0xcb4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d03b      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_DMA_IRQHandler+0xcb8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d036      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a31      	ldr	r2, [pc, #196]	; (8004420 <HAL_DMA_IRQHandler+0xcbc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d031      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <HAL_DMA_IRQHandler+0xcc0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02c      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <HAL_DMA_IRQHandler+0xcc4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d027      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2c      	ldr	r2, [pc, #176]	; (800442c <HAL_DMA_IRQHandler+0xcc8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <HAL_DMA_IRQHandler+0xccc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d01d      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_DMA_IRQHandler+0xcd0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a28      	ldr	r2, [pc, #160]	; (8004438 <HAL_DMA_IRQHandler+0xcd4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_DMA_IRQHandler+0xcd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a25      	ldr	r2, [pc, #148]	; (8004440 <HAL_DMA_IRQHandler+0xcdc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_DMA_IRQHandler+0xce0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xc60>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a22      	ldr	r2, [pc, #136]	; (8004448 <HAL_DMA_IRQHandler+0xce4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d108      	bne.n	80043d6 <HAL_DMA_IRQHandler+0xc72>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0214 	bic.w	r2, r2, #20
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e007      	b.n	80043e6 <HAL_DMA_IRQHandler+0xc82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020a 	bic.w	r2, r2, #10
 80043e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80b8 	beq.w	8004570 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004408:	e0b2      	b.n	8004570 <HAL_DMA_IRQHandler+0xe0c>
 800440a:	bf00      	nop
 800440c:	40020010 	.word	0x40020010
 8004410:	40020028 	.word	0x40020028
 8004414:	40020040 	.word	0x40020040
 8004418:	40020058 	.word	0x40020058
 800441c:	40020070 	.word	0x40020070
 8004420:	40020088 	.word	0x40020088
 8004424:	400200a0 	.word	0x400200a0
 8004428:	400200b8 	.word	0x400200b8
 800442c:	40020410 	.word	0x40020410
 8004430:	40020428 	.word	0x40020428
 8004434:	40020440 	.word	0x40020440
 8004438:	40020458 	.word	0x40020458
 800443c:	40020470 	.word	0x40020470
 8004440:	40020488 	.word	0x40020488
 8004444:	400204a0 	.word	0x400204a0
 8004448:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2208      	movs	r2, #8
 8004456:	409a      	lsls	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8088 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8082 	beq.w	8004572 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a41      	ldr	r2, [pc, #260]	; (8004578 <HAL_DMA_IRQHandler+0xe14>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3f      	ldr	r2, [pc, #252]	; (800457c <HAL_DMA_IRQHandler+0xe18>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3e      	ldr	r2, [pc, #248]	; (8004580 <HAL_DMA_IRQHandler+0xe1c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <HAL_DMA_IRQHandler+0xe20>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <HAL_DMA_IRQHandler+0xe24>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a39      	ldr	r2, [pc, #228]	; (800458c <HAL_DMA_IRQHandler+0xe28>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_DMA_IRQHandler+0xe2c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a36      	ldr	r2, [pc, #216]	; (8004594 <HAL_DMA_IRQHandler+0xe30>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a35      	ldr	r2, [pc, #212]	; (8004598 <HAL_DMA_IRQHandler+0xe34>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a33      	ldr	r2, [pc, #204]	; (800459c <HAL_DMA_IRQHandler+0xe38>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a32      	ldr	r2, [pc, #200]	; (80045a0 <HAL_DMA_IRQHandler+0xe3c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a30      	ldr	r2, [pc, #192]	; (80045a4 <HAL_DMA_IRQHandler+0xe40>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2f      	ldr	r2, [pc, #188]	; (80045a8 <HAL_DMA_IRQHandler+0xe44>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_DMA_IRQHandler+0xe48>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_DMA_IRQHandler+0xdaa>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <HAL_DMA_IRQHandler+0xe50>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <HAL_DMA_IRQHandler+0xdbc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 021c 	bic.w	r2, r2, #28
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e007      	b.n	8004530 <HAL_DMA_IRQHandler+0xdcc>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 020e 	bic.w	r2, r2, #14
 800452e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e004      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004570:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004572:	3728      	adds	r7, #40	; 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8

080045b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a84      	ldr	r2, [pc, #528]	; (80047e8 <DMA_SetConfig+0x230>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d072      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a82      	ldr	r2, [pc, #520]	; (80047ec <DMA_SetConfig+0x234>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d06d      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a81      	ldr	r2, [pc, #516]	; (80047f0 <DMA_SetConfig+0x238>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d068      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7f      	ldr	r2, [pc, #508]	; (80047f4 <DMA_SetConfig+0x23c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d063      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7e      	ldr	r2, [pc, #504]	; (80047f8 <DMA_SetConfig+0x240>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d05e      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7c      	ldr	r2, [pc, #496]	; (80047fc <DMA_SetConfig+0x244>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d059      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a7b      	ldr	r2, [pc, #492]	; (8004800 <DMA_SetConfig+0x248>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d054      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a79      	ldr	r2, [pc, #484]	; (8004804 <DMA_SetConfig+0x24c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04f      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a78      	ldr	r2, [pc, #480]	; (8004808 <DMA_SetConfig+0x250>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a76      	ldr	r2, [pc, #472]	; (800480c <DMA_SetConfig+0x254>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	; (8004810 <DMA_SetConfig+0x258>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a73      	ldr	r2, [pc, #460]	; (8004814 <DMA_SetConfig+0x25c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a72      	ldr	r2, [pc, #456]	; (8004818 <DMA_SetConfig+0x260>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a70      	ldr	r2, [pc, #448]	; (800481c <DMA_SetConfig+0x264>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6f      	ldr	r2, [pc, #444]	; (8004820 <DMA_SetConfig+0x268>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6d      	ldr	r2, [pc, #436]	; (8004824 <DMA_SetConfig+0x26c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6c      	ldr	r2, [pc, #432]	; (8004828 <DMA_SetConfig+0x270>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6a      	ldr	r2, [pc, #424]	; (800482c <DMA_SetConfig+0x274>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a69      	ldr	r2, [pc, #420]	; (8004830 <DMA_SetConfig+0x278>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a67      	ldr	r2, [pc, #412]	; (8004834 <DMA_SetConfig+0x27c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a66      	ldr	r2, [pc, #408]	; (8004838 <DMA_SetConfig+0x280>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a64      	ldr	r2, [pc, #400]	; (800483c <DMA_SetConfig+0x284>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a63      	ldr	r2, [pc, #396]	; (8004840 <DMA_SetConfig+0x288>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <DMA_SetConfig+0x10a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a61      	ldr	r2, [pc, #388]	; (8004844 <DMA_SetConfig+0x28c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d101      	bne.n	80046c6 <DMA_SetConfig+0x10e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <DMA_SetConfig+0x110>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3e      	ldr	r2, [pc, #248]	; (80047e8 <DMA_SetConfig+0x230>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04a      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3d      	ldr	r2, [pc, #244]	; (80047ec <DMA_SetConfig+0x234>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d045      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <DMA_SetConfig+0x238>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3a      	ldr	r2, [pc, #232]	; (80047f4 <DMA_SetConfig+0x23c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03b      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <DMA_SetConfig+0x240>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d036      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a37      	ldr	r2, [pc, #220]	; (80047fc <DMA_SetConfig+0x244>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d031      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	; (8004800 <DMA_SetConfig+0x248>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a34      	ldr	r2, [pc, #208]	; (8004804 <DMA_SetConfig+0x24c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a32      	ldr	r2, [pc, #200]	; (8004808 <DMA_SetConfig+0x250>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a31      	ldr	r2, [pc, #196]	; (800480c <DMA_SetConfig+0x254>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <DMA_SetConfig+0x258>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <DMA_SetConfig+0x25c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <DMA_SetConfig+0x260>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2b      	ldr	r2, [pc, #172]	; (800481c <DMA_SetConfig+0x264>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a29      	ldr	r2, [pc, #164]	; (8004820 <DMA_SetConfig+0x268>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <DMA_SetConfig+0x1d0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a28      	ldr	r2, [pc, #160]	; (8004824 <DMA_SetConfig+0x26c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <DMA_SetConfig+0x1d4>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <DMA_SetConfig+0x1d6>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d05a      	beq.n	8004848 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	223f      	movs	r2, #63	; 0x3f
 800479c:	409a      	lsls	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d108      	bne.n	80047d4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047d2:	e087      	b.n	80048e4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	e07e      	b.n	80048e4 <DMA_SetConfig+0x32c>
 80047e6:	bf00      	nop
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
 8004828:	58025408 	.word	0x58025408
 800482c:	5802541c 	.word	0x5802541c
 8004830:	58025430 	.word	0x58025430
 8004834:	58025444 	.word	0x58025444
 8004838:	58025458 	.word	0x58025458
 800483c:	5802546c 	.word	0x5802546c
 8004840:	58025480 	.word	0x58025480
 8004844:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <DMA_SetConfig+0x338>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d022      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <DMA_SetConfig+0x33c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01d      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <DMA_SetConfig+0x340>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a24      	ldr	r2, [pc, #144]	; (80048fc <DMA_SetConfig+0x344>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a22      	ldr	r2, [pc, #136]	; (8004900 <DMA_SetConfig+0x348>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <DMA_SetConfig+0x34c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <DMA_SetConfig+0x350>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <DMA_SetConfig+0x2e0>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <DMA_SetConfig+0x354>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d101      	bne.n	800489c <DMA_SetConfig+0x2e4>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <DMA_SetConfig+0x2e6>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d020      	beq.n	80048e4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2201      	movs	r2, #1
 80048ac:	409a      	lsls	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d108      	bne.n	80048d4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	60da      	str	r2, [r3, #12]
}
 80048d2:	e007      	b.n	80048e4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	58025408 	.word	0x58025408
 80048f4:	5802541c 	.word	0x5802541c
 80048f8:	58025430 	.word	0x58025430
 80048fc:	58025444 	.word	0x58025444
 8004900:	58025458 	.word	0x58025458
 8004904:	5802546c 	.word	0x5802546c
 8004908:	58025480 	.word	0x58025480
 800490c:	58025494 	.word	0x58025494

08004910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a42      	ldr	r2, [pc, #264]	; (8004a28 <DMA_CalcBaseAndBitshift+0x118>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d04a      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a41      	ldr	r2, [pc, #260]	; (8004a2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d045      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3f      	ldr	r2, [pc, #252]	; (8004a30 <DMA_CalcBaseAndBitshift+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d040      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3e      	ldr	r2, [pc, #248]	; (8004a34 <DMA_CalcBaseAndBitshift+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d03b      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3c      	ldr	r2, [pc, #240]	; (8004a38 <DMA_CalcBaseAndBitshift+0x128>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d036      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a3b      	ldr	r2, [pc, #236]	; (8004a3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d031      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a39      	ldr	r2, [pc, #228]	; (8004a40 <DMA_CalcBaseAndBitshift+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02c      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a38      	ldr	r2, [pc, #224]	; (8004a44 <DMA_CalcBaseAndBitshift+0x134>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d027      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a36      	ldr	r2, [pc, #216]	; (8004a48 <DMA_CalcBaseAndBitshift+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a35      	ldr	r2, [pc, #212]	; (8004a4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a33      	ldr	r2, [pc, #204]	; (8004a50 <DMA_CalcBaseAndBitshift+0x140>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <DMA_CalcBaseAndBitshift+0x144>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a30      	ldr	r2, [pc, #192]	; (8004a58 <DMA_CalcBaseAndBitshift+0x148>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <DMA_CalcBaseAndBitshift+0x14c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <DMA_CalcBaseAndBitshift+0x150>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <DMA_CalcBaseAndBitshift+0x154>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <DMA_CalcBaseAndBitshift+0xac>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <DMA_CalcBaseAndBitshift+0xae>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d024      	beq.n	8004a0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3b10      	subs	r3, #16
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <DMA_CalcBaseAndBitshift+0x158>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <DMA_CalcBaseAndBitshift+0x15c>)
 80049dc:	5cd3      	ldrb	r3, [r2, r3]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d908      	bls.n	80049fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <DMA_CalcBaseAndBitshift+0x160>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	659a      	str	r2, [r3, #88]	; 0x58
 80049fa:	e00d      	b.n	8004a18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <DMA_CalcBaseAndBitshift+0x160>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
 8004a0a:	e005      	b.n	8004a18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	40020010 	.word	0x40020010
 8004a2c:	40020028 	.word	0x40020028
 8004a30:	40020040 	.word	0x40020040
 8004a34:	40020058 	.word	0x40020058
 8004a38:	40020070 	.word	0x40020070
 8004a3c:	40020088 	.word	0x40020088
 8004a40:	400200a0 	.word	0x400200a0
 8004a44:	400200b8 	.word	0x400200b8
 8004a48:	40020410 	.word	0x40020410
 8004a4c:	40020428 	.word	0x40020428
 8004a50:	40020440 	.word	0x40020440
 8004a54:	40020458 	.word	0x40020458
 8004a58:	40020470 	.word	0x40020470
 8004a5c:	40020488 	.word	0x40020488
 8004a60:	400204a0 	.word	0x400204a0
 8004a64:	400204b8 	.word	0x400204b8
 8004a68:	aaaaaaab 	.word	0xaaaaaaab
 8004a6c:	0800bda4 	.word	0x0800bda4
 8004a70:	fffffc00 	.word	0xfffffc00

08004a74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d120      	bne.n	8004aca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d858      	bhi.n	8004b42 <DMA_CheckFifoParam+0xce>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <DMA_CheckFifoParam+0x24>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004abb 	.word	0x08004abb
 8004aa0:	08004aa9 	.word	0x08004aa9
 8004aa4:	08004b43 	.word	0x08004b43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d048      	beq.n	8004b46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ab8:	e045      	b.n	8004b46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ac2:	d142      	bne.n	8004b4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac8:	e03f      	b.n	8004b4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad2:	d123      	bne.n	8004b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d838      	bhi.n	8004b4e <DMA_CheckFifoParam+0xda>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <DMA_CheckFifoParam+0x70>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afb 	.word	0x08004afb
 8004aec:	08004af5 	.word	0x08004af5
 8004af0:	08004b0d 	.word	0x08004b0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
        break;
 8004af8:	e030      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d025      	beq.n	8004b52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b0a:	e022      	b.n	8004b52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b1a:	e01c      	b.n	8004b56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d902      	bls.n	8004b2a <DMA_CheckFifoParam+0xb6>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b28:	e018      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2e:	e015      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b40:	e00b      	b.n	8004b5a <DMA_CheckFifoParam+0xe6>
        break;
 8004b42:	bf00      	nop
 8004b44:	e00a      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b46:	bf00      	nop
 8004b48:	e008      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b4a:	bf00      	nop
 8004b4c:	e006      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
        break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
    break;
 8004b5a:	bf00      	nop
    }
  }

  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a38      	ldr	r2, [pc, #224]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a36      	ldr	r2, [pc, #216]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01d      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a32      	ldr	r2, [pc, #200]	; (8004c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	; (8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01a      	beq.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3b08      	subs	r3, #8
 8004bdc:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c08:	e024      	b.n	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3b10      	subs	r3, #16
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d806      	bhi.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d902      	bls.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	58025408 	.word	0x58025408
 8004c64:	5802541c 	.word	0x5802541c
 8004c68:	58025430 	.word	0x58025430
 8004c6c:	58025444 	.word	0x58025444
 8004c70:	58025458 	.word	0x58025458
 8004c74:	5802546c 	.word	0x5802546c
 8004c78:	58025480 	.word	0x58025480
 8004c7c:	58025494 	.word	0x58025494
 8004c80:	cccccccd 	.word	0xcccccccd
 8004c84:	16009600 	.word	0x16009600
 8004c88:	58025880 	.word	0x58025880
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
 8004c90:	400204b8 	.word	0x400204b8
 8004c94:	4002040f 	.word	0x4002040f
 8004c98:	10008200 	.word	0x10008200
 8004c9c:	40020880 	.word	0x40020880

08004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04a      	beq.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d847      	bhi.n	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a24      	ldr	r2, [pc, #144]	; (8004d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d28:	671a      	str	r2, [r3, #112]	; 0x70
 8004d2a:	e009      	b.n	8004d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	5802541c 	.word	0x5802541c
 8004d60:	58025430 	.word	0x58025430
 8004d64:	58025444 	.word	0x58025444
 8004d68:	58025458 	.word	0x58025458
 8004d6c:	5802546c 	.word	0x5802546c
 8004d70:	58025480 	.word	0x58025480
 8004d74:	58025494 	.word	0x58025494
 8004d78:	1600963f 	.word	0x1600963f
 8004d7c:	58025940 	.word	0x58025940
 8004d80:	1000823f 	.word	0x1000823f
 8004d84:	40020940 	.word	0x40020940

08004d88 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b80      	cmp	r3, #128	; 0x80
 8004da0:	d105      	bne.n	8004dae <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e325      	b.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e31e      	b.n	80053fa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 830d 	bne.w	80053ec <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a82      	ldr	r2, [pc, #520]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04a      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a81      	ldr	r2, [pc, #516]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d045      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7f      	ldr	r2, [pc, #508]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d040      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a7e      	ldr	r2, [pc, #504]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d03b      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a7c      	ldr	r2, [pc, #496]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d036      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a7b      	ldr	r2, [pc, #492]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d031      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a79      	ldr	r2, [pc, #484]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02c      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a78      	ldr	r2, [pc, #480]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d027      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a76      	ldr	r2, [pc, #472]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d022      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a75      	ldr	r2, [pc, #468]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01d      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a73      	ldr	r2, [pc, #460]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a72      	ldr	r2, [pc, #456]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a70      	ldr	r2, [pc, #448]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6f      	ldr	r2, [pc, #444]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6d      	ldr	r2, [pc, #436]	; (8005028 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6c      	ldr	r2, [pc, #432]	; (800502c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004e84:	2300      	movs	r3, #0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d018      	beq.n	8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e98:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	223f      	movs	r2, #63	; 0x3f
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e018      	b.n	8004eee <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	f248 0320 	movw	r3, #32800	; 0x8020
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	3304      	adds	r3, #4
 8004edc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb41 	bl	800557c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d072      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3a      	ldr	r2, [pc, #232]	; (8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d06d      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d068      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a37      	ldr	r2, [pc, #220]	; (8004ffc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d063      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d05e      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a34      	ldr	r2, [pc, #208]	; (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d059      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a33      	ldr	r2, [pc, #204]	; (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d054      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a31      	ldr	r2, [pc, #196]	; (800500c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d04f      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a30      	ldr	r2, [pc, #192]	; (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d04a      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d045      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d040      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2b      	ldr	r2, [pc, #172]	; (800501c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d03b      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d036      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a28      	ldr	r2, [pc, #160]	; (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d031      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a27      	ldr	r2, [pc, #156]	; (8005028 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d02c      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d027      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a24      	ldr	r2, [pc, #144]	; (8005030 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d022      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01d      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a21      	ldr	r2, [pc, #132]	; (8005038 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d018      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	; (8005040 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00e      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d009      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d004      	beq.n	8004fea <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	; (800504c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d132      	bne.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e031      	b.n	8005052 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004fee:	bf00      	nop
 8004ff0:	40020010 	.word	0x40020010
 8004ff4:	40020028 	.word	0x40020028
 8004ff8:	40020040 	.word	0x40020040
 8004ffc:	40020058 	.word	0x40020058
 8005000:	40020070 	.word	0x40020070
 8005004:	40020088 	.word	0x40020088
 8005008:	400200a0 	.word	0x400200a0
 800500c:	400200b8 	.word	0x400200b8
 8005010:	40020410 	.word	0x40020410
 8005014:	40020428 	.word	0x40020428
 8005018:	40020440 	.word	0x40020440
 800501c:	40020458 	.word	0x40020458
 8005020:	40020470 	.word	0x40020470
 8005024:	40020488 	.word	0x40020488
 8005028:	400204a0 	.word	0x400204a0
 800502c:	400204b8 	.word	0x400204b8
 8005030:	58025408 	.word	0x58025408
 8005034:	5802541c 	.word	0x5802541c
 8005038:	58025430 	.word	0x58025430
 800503c:	58025444 	.word	0x58025444
 8005040:	58025458 	.word	0x58025458
 8005044:	5802546c 	.word	0x5802546c
 8005048:	58025480 	.word	0x58025480
 800504c:	58025494 	.word	0x58025494
 8005050:	2300      	movs	r3, #0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800505e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005070:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a85      	ldr	r2, [pc, #532]	; (800528c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d04a      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a83      	ldr	r2, [pc, #524]	; (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d045      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a82      	ldr	r2, [pc, #520]	; (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d040      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a80      	ldr	r2, [pc, #512]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d03b      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7f      	ldr	r2, [pc, #508]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d036      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a7d      	ldr	r2, [pc, #500]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d031      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7c      	ldr	r2, [pc, #496]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d02c      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7a      	ldr	r2, [pc, #488]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d027      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a79      	ldr	r2, [pc, #484]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a77      	ldr	r2, [pc, #476]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01d      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a76      	ldr	r2, [pc, #472]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a74      	ldr	r2, [pc, #464]	; (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a73      	ldr	r2, [pc, #460]	; (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a70      	ldr	r2, [pc, #448]	; (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a6e      	ldr	r2, [pc, #440]	; (80052c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005116:	2300      	movs	r3, #0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d022      	beq.n	8005162 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 021e 	bic.w	r2, r3, #30
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0216 	orr.w	r2, r2, #22
 800512e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800513e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514c:	2b00      	cmp	r3, #0
 800514e:	d022      	beq.n	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e019      	b.n	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 020e 	bic.w	r2, r3, #14
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 020a 	orr.w	r2, r2, #10
 8005174:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0204 	orr.w	r2, r2, #4
 8005194:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3c      	ldr	r2, [pc, #240]	; (800528c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d072      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d06d      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a39      	ldr	r2, [pc, #228]	; (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d068      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a37      	ldr	r2, [pc, #220]	; (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d063      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a36      	ldr	r2, [pc, #216]	; (800529c <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d05e      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a34      	ldr	r2, [pc, #208]	; (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d059      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a33      	ldr	r2, [pc, #204]	; (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d054      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a31      	ldr	r2, [pc, #196]	; (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04f      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a30      	ldr	r2, [pc, #192]	; (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04a      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2e      	ldr	r2, [pc, #184]	; (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d045      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2d      	ldr	r2, [pc, #180]	; (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d040      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2b      	ldr	r2, [pc, #172]	; (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d03b      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d036      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a28      	ldr	r2, [pc, #160]	; (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d031      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a27      	ldr	r2, [pc, #156]	; (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d02c      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a25      	ldr	r2, [pc, #148]	; (80052c8 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d027      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a24      	ldr	r2, [pc, #144]	; (80052cc <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01d      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a21      	ldr	r2, [pc, #132]	; (80052d4 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d132      	bne.n	80052ec <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005286:	2301      	movs	r3, #1
 8005288:	e031      	b.n	80052ee <HAL_DMAEx_MultiBufferStart_IT+0x566>
 800528a:	bf00      	nop
 800528c:	40020010 	.word	0x40020010
 8005290:	40020028 	.word	0x40020028
 8005294:	40020040 	.word	0x40020040
 8005298:	40020058 	.word	0x40020058
 800529c:	40020070 	.word	0x40020070
 80052a0:	40020088 	.word	0x40020088
 80052a4:	400200a0 	.word	0x400200a0
 80052a8:	400200b8 	.word	0x400200b8
 80052ac:	40020410 	.word	0x40020410
 80052b0:	40020428 	.word	0x40020428
 80052b4:	40020440 	.word	0x40020440
 80052b8:	40020458 	.word	0x40020458
 80052bc:	40020470 	.word	0x40020470
 80052c0:	40020488 	.word	0x40020488
 80052c4:	400204a0 	.word	0x400204a0
 80052c8:	400204b8 	.word	0x400204b8
 80052cc:	58025408 	.word	0x58025408
 80052d0:	5802541c 	.word	0x5802541c
 80052d4:	58025430 	.word	0x58025430
 80052d8:	58025444 	.word	0x58025444
 80052dc:	58025458 	.word	0x58025458
 80052e0:	5802546c 	.word	0x5802546c
 80052e4:	58025480 	.word	0x58025480
 80052e8:	58025494 	.word	0x58025494
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01a      	beq.n	8005328 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005326:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a35      	ldr	r2, [pc, #212]	; (8005404 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d04a      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a34      	ldr	r2, [pc, #208]	; (8005408 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d045      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a32      	ldr	r2, [pc, #200]	; (800540c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d040      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a31      	ldr	r2, [pc, #196]	; (8005410 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d03b      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2f      	ldr	r2, [pc, #188]	; (8005414 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d036      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2e      	ldr	r2, [pc, #184]	; (8005418 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d031      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2c      	ldr	r2, [pc, #176]	; (800541c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02c      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2b      	ldr	r2, [pc, #172]	; (8005420 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d027      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a29      	ldr	r2, [pc, #164]	; (8005424 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a28      	ldr	r2, [pc, #160]	; (8005428 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a26      	ldr	r2, [pc, #152]	; (800542c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a25      	ldr	r2, [pc, #148]	; (8005430 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a23      	ldr	r2, [pc, #140]	; (8005434 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a20      	ldr	r2, [pc, #128]	; (800543c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d108      	bne.n	80053da <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e00e      	b.n	80053f8 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e005      	b.n	80053f8 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40020010 	.word	0x40020010
 8005408:	40020028 	.word	0x40020028
 800540c:	40020040 	.word	0x40020040
 8005410:	40020058 	.word	0x40020058
 8005414:	40020070 	.word	0x40020070
 8005418:	40020088 	.word	0x40020088
 800541c:	400200a0 	.word	0x400200a0
 8005420:	400200b8 	.word	0x400200b8
 8005424:	40020410 	.word	0x40020410
 8005428:	40020428 	.word	0x40020428
 800542c:	40020440 	.word	0x40020440
 8005430:	40020458 	.word	0x40020458
 8005434:	40020470 	.word	0x40020470
 8005438:	40020488 	.word	0x40020488
 800543c:	400204a0 	.word	0x400204a0
 8005440:	400204b8 	.word	0x400204b8

08005444 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a39      	ldr	r2, [pc, #228]	; (800553c <HAL_DMAEx_ChangeMemory+0xf8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a37      	ldr	r2, [pc, #220]	; (8005540 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_DMAEx_ChangeMemory+0x100>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a34      	ldr	r2, [pc, #208]	; (8005548 <HAL_DMAEx_ChangeMemory+0x104>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_DMAEx_ChangeMemory+0x108>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	; (8005550 <HAL_DMAEx_ChangeMemory+0x10c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_DMAEx_ChangeMemory+0x110>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	; (8005558 <HAL_DMAEx_ChangeMemory+0x114>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2d      	ldr	r2, [pc, #180]	; (800555c <HAL_DMAEx_ChangeMemory+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <HAL_DMAEx_ChangeMemory+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <HAL_DMAEx_ChangeMemory+0x120>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <HAL_DMAEx_ChangeMemory+0x124>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <HAL_DMAEx_ChangeMemory+0x128>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_DMAEx_ChangeMemory+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a24      	ldr	r2, [pc, #144]	; (8005574 <HAL_DMAEx_ChangeMemory+0x130>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMAEx_ChangeMemory+0xae>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_DMAEx_ChangeMemory+0x134>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <HAL_DMAEx_ChangeMemory+0xb2>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_DMAEx_ChangeMemory+0xb4>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e010      	b.n	800552e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	611a      	str	r2, [r3, #16]
 8005514:	e00b      	b.n	800552e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e003      	b.n	800552e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40020010 	.word	0x40020010
 8005540:	40020028 	.word	0x40020028
 8005544:	40020040 	.word	0x40020040
 8005548:	40020058 	.word	0x40020058
 800554c:	40020070 	.word	0x40020070
 8005550:	40020088 	.word	0x40020088
 8005554:	400200a0 	.word	0x400200a0
 8005558:	400200b8 	.word	0x400200b8
 800555c:	40020410 	.word	0x40020410
 8005560:	40020428 	.word	0x40020428
 8005564:	40020440 	.word	0x40020440
 8005568:	40020458 	.word	0x40020458
 800556c:	40020470 	.word	0x40020470
 8005570:	40020488 	.word	0x40020488
 8005574:	400204a0 	.word	0x400204a0
 8005578:	400204b8 	.word	0x400204b8

0800557c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a46      	ldr	r2, [pc, #280]	; (80056a8 <DMA_MultiBufferSetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04a      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a44      	ldr	r2, [pc, #272]	; (80056ac <DMA_MultiBufferSetConfig+0x130>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d045      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a43      	ldr	r2, [pc, #268]	; (80056b0 <DMA_MultiBufferSetConfig+0x134>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a41      	ldr	r2, [pc, #260]	; (80056b4 <DMA_MultiBufferSetConfig+0x138>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d03b      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a40      	ldr	r2, [pc, #256]	; (80056b8 <DMA_MultiBufferSetConfig+0x13c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d036      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3e      	ldr	r2, [pc, #248]	; (80056bc <DMA_MultiBufferSetConfig+0x140>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3d      	ldr	r2, [pc, #244]	; (80056c0 <DMA_MultiBufferSetConfig+0x144>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d02c      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a3b      	ldr	r2, [pc, #236]	; (80056c4 <DMA_MultiBufferSetConfig+0x148>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d027      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a3a      	ldr	r2, [pc, #232]	; (80056c8 <DMA_MultiBufferSetConfig+0x14c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a38      	ldr	r2, [pc, #224]	; (80056cc <DMA_MultiBufferSetConfig+0x150>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <DMA_MultiBufferSetConfig+0x154>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a35      	ldr	r2, [pc, #212]	; (80056d4 <DMA_MultiBufferSetConfig+0x158>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a34      	ldr	r2, [pc, #208]	; (80056d8 <DMA_MultiBufferSetConfig+0x15c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a32      	ldr	r2, [pc, #200]	; (80056dc <DMA_MultiBufferSetConfig+0x160>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a31      	ldr	r2, [pc, #196]	; (80056e0 <DMA_MultiBufferSetConfig+0x164>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <DMA_MultiBufferSetConfig+0xae>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2f      	ldr	r2, [pc, #188]	; (80056e4 <DMA_MultiBufferSetConfig+0x168>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <DMA_MultiBufferSetConfig+0xb2>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <DMA_MultiBufferSetConfig+0xb4>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d019      	beq.n	8005668 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d108      	bne.n	8005656 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005654:	e021      	b.n	800569a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	60da      	str	r2, [r3, #12]
}
 8005666:	e018      	b.n	800569a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d108      	bne.n	800568a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	60da      	str	r2, [r3, #12]
}
 8005688:	e007      	b.n	800569a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40020010 	.word	0x40020010
 80056ac:	40020028 	.word	0x40020028
 80056b0:	40020040 	.word	0x40020040
 80056b4:	40020058 	.word	0x40020058
 80056b8:	40020070 	.word	0x40020070
 80056bc:	40020088 	.word	0x40020088
 80056c0:	400200a0 	.word	0x400200a0
 80056c4:	400200b8 	.word	0x400200b8
 80056c8:	40020410 	.word	0x40020410
 80056cc:	40020428 	.word	0x40020428
 80056d0:	40020440 	.word	0x40020440
 80056d4:	40020458 	.word	0x40020458
 80056d8:	40020470 	.word	0x40020470
 80056dc:	40020488 	.word	0x40020488
 80056e0:	400204a0 	.word	0x400204a0
 80056e4:	400204b8 	.word	0x400204b8

080056e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056f6:	4b89      	ldr	r3, [pc, #548]	; (800591c <HAL_GPIO_Init+0x234>)
 80056f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056fa:	e194      	b.n	8005a26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	2101      	movs	r1, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa01 f303 	lsl.w	r3, r1, r3
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8186 	beq.w	8005a20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d00b      	beq.n	8005734 <HAL_GPIO_Init+0x4c>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d007      	beq.n	8005734 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005728:	2b11      	cmp	r3, #17
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b12      	cmp	r3, #18
 8005732:	d130      	bne.n	8005796 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	2203      	movs	r2, #3
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800576a:	2201      	movs	r2, #1
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4013      	ands	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 0201 	and.w	r2, r3, #1
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	2203      	movs	r2, #3
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_Init+0xee>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b12      	cmp	r3, #18
 80057d4:	d123      	bne.n	800581e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	08da      	lsrs	r2, r3, #3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3208      	adds	r2, #8
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 0203 	and.w	r2, r3, #3
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80e0 	beq.w	8005a20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005860:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <HAL_GPIO_Init+0x238>)
 8005862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <HAL_GPIO_Init+0x238>)
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005870:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <HAL_GPIO_Init+0x238>)
 8005872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800587e:	4a29      	ldr	r2, [pc, #164]	; (8005924 <HAL_GPIO_Init+0x23c>)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	3302      	adds	r3, #2
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	220f      	movs	r2, #15
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a20      	ldr	r2, [pc, #128]	; (8005928 <HAL_GPIO_Init+0x240>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d052      	beq.n	8005950 <HAL_GPIO_Init+0x268>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_GPIO_Init+0x244>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d031      	beq.n	8005916 <HAL_GPIO_Init+0x22e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_GPIO_Init+0x248>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <HAL_GPIO_Init+0x22a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_GPIO_Init+0x24c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d025      	beq.n	800590e <HAL_GPIO_Init+0x226>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_GPIO_Init+0x250>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <HAL_GPIO_Init+0x222>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <HAL_GPIO_Init+0x254>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d019      	beq.n	8005906 <HAL_GPIO_Init+0x21e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <HAL_GPIO_Init+0x258>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_GPIO_Init+0x21a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_GPIO_Init+0x25c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00d      	beq.n	80058fe <HAL_GPIO_Init+0x216>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_GPIO_Init+0x260>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_GPIO_Init+0x212>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a17      	ldr	r2, [pc, #92]	; (800594c <HAL_GPIO_Init+0x264>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_GPIO_Init+0x20e>
 80058f2:	2309      	movs	r3, #9
 80058f4:	e02d      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 80058f6:	230a      	movs	r3, #10
 80058f8:	e02b      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 80058fa:	2308      	movs	r3, #8
 80058fc:	e029      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 80058fe:	2307      	movs	r3, #7
 8005900:	e027      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005902:	2306      	movs	r3, #6
 8005904:	e025      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005906:	2305      	movs	r3, #5
 8005908:	e023      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 800590a:	2304      	movs	r3, #4
 800590c:	e021      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 800590e:	2303      	movs	r3, #3
 8005910:	e01f      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005912:	2302      	movs	r3, #2
 8005914:	e01d      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005916:	2301      	movs	r3, #1
 8005918:	e01b      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 800591a:	bf00      	nop
 800591c:	58000080 	.word	0x58000080
 8005920:	58024400 	.word	0x58024400
 8005924:	58000400 	.word	0x58000400
 8005928:	58020000 	.word	0x58020000
 800592c:	58020400 	.word	0x58020400
 8005930:	58020800 	.word	0x58020800
 8005934:	58020c00 	.word	0x58020c00
 8005938:	58021000 	.word	0x58021000
 800593c:	58021400 	.word	0x58021400
 8005940:	58021800 	.word	0x58021800
 8005944:	58021c00 	.word	0x58021c00
 8005948:	58022000 	.word	0x58022000
 800594c:	58022400 	.word	0x58022400
 8005950:	2300      	movs	r3, #0
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	f002 0203 	and.w	r2, r2, #3
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	4093      	lsls	r3, r2
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005962:	4938      	ldr	r1, [pc, #224]	; (8005a44 <HAL_GPIO_Init+0x35c>)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3301      	adds	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f ae63 	bne.w	80056fc <HAL_GPIO_Init+0x14>
  }
}
 8005a36:	bf00      	nop
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	58000400 	.word	0x58000400

08005a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	807b      	strh	r3, [r7, #2]
 8005a54:	4613      	mov	r3, r2
 8005a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a58:	787b      	ldrb	r3, [r7, #1]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a5e:	887a      	ldrh	r2, [r7, #2]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a64:	e003      	b.n	8005a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a66:	887b      	ldrh	r3, [r7, #2]
 8005a68:	041a      	lsls	r2, r3, #16
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	619a      	str	r2, [r3, #24]
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e07f      	b.n	8005b8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb f87c 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	; 0x24
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005acc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005adc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	e006      	b.n	8005b04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d104      	bne.n	8005b16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6859      	ldr	r1, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <HAL_I2C_Init+0x11c>)
 8005b22:	430b      	orrs	r3, r1
 8005b24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	ea42 0103 	orr.w	r1, r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	021a      	lsls	r2, r3, #8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69d9      	ldr	r1, [r3, #28]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1a      	ldr	r2, [r3, #32]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	02008000 	.word	0x02008000

08005b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d138      	bne.n	8005c24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e032      	b.n	8005c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2224      	movs	r2, #36	; 0x24
 8005bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6819      	ldr	r1, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d139      	bne.n	8005cbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e033      	b.n	8005cbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2224      	movs	r2, #36	; 0x24
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005cd4:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_PWREx_ConfigSupply+0x70>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d00a      	beq.n	8005cf6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ce0:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <HAL_PWREx_ConfigSupply+0x70>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d001      	beq.n	8005cf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e01f      	b.n	8005d32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e01d      	b.n	8005d32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <HAL_PWREx_ConfigSupply+0x70>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f023 0207 	bic.w	r2, r3, #7
 8005cfe:	490f      	ldr	r1, [pc, #60]	; (8005d3c <HAL_PWREx_ConfigSupply+0x70>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d06:	f7fb fd99 	bl	800183c <HAL_GetTick>
 8005d0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d0c:	e009      	b.n	8005d22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d0e:	f7fb fd95 	bl	800183c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d1c:	d901      	bls.n	8005d22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e007      	b.n	8005d32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_PWREx_ConfigSupply+0x70>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2e:	d1ee      	bne.n	8005d0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	58024800 	.word	0x58024800

08005d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08c      	sub	sp, #48	; 0x30
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e3ff      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8087 	beq.w	8005e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d60:	4b99      	ldr	r3, [pc, #612]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d6a:	4b97      	ldr	r3, [pc, #604]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d007      	beq.n	8005d86 <HAL_RCC_OscConfig+0x46>
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	2b18      	cmp	r3, #24
 8005d7a:	d110      	bne.n	8005d9e <HAL_RCC_OscConfig+0x5e>
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d10b      	bne.n	8005d9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d86:	4b90      	ldr	r3, [pc, #576]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d06c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x12c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d168      	bne.n	8005e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e3d9      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da6:	d106      	bne.n	8005db6 <HAL_RCC_OscConfig+0x76>
 8005da8:	4b87      	ldr	r3, [pc, #540]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a86      	ldr	r2, [pc, #536]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e02e      	b.n	8005e14 <HAL_RCC_OscConfig+0xd4>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x98>
 8005dbe:	4b82      	ldr	r3, [pc, #520]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a81      	ldr	r2, [pc, #516]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b7f      	ldr	r3, [pc, #508]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a7e      	ldr	r2, [pc, #504]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e01d      	b.n	8005e14 <HAL_RCC_OscConfig+0xd4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCC_OscConfig+0xbc>
 8005de2:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a78      	ldr	r2, [pc, #480]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	4b76      	ldr	r3, [pc, #472]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a75      	ldr	r2, [pc, #468]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e00b      	b.n	8005e14 <HAL_RCC_OscConfig+0xd4>
 8005dfc:	4b72      	ldr	r3, [pc, #456]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a71      	ldr	r2, [pc, #452]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	4b6f      	ldr	r3, [pc, #444]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a6e      	ldr	r2, [pc, #440]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d013      	beq.n	8005e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fb fd0e 	bl	800183c <HAL_GetTick>
 8005e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e24:	f7fb fd0a 	bl	800183c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	; 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e38d      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e36:	4b64      	ldr	r3, [pc, #400]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0xe4>
 8005e42:	e014      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fb fcfa 	bl	800183c <HAL_GetTick>
 8005e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e4c:	f7fb fcf6 	bl	800183c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b64      	cmp	r3, #100	; 0x64
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e379      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e5e:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x10c>
 8005e6a:	e000      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80ae 	beq.w	8005fd8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7c:	4b52      	ldr	r3, [pc, #328]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e86:	4b50      	ldr	r3, [pc, #320]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x162>
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	2b18      	cmp	r3, #24
 8005e96:	d13a      	bne.n	8005f0e <HAL_RCC_OscConfig+0x1ce>
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d135      	bne.n	8005f0e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x17a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e34b      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	f7fb fccb 	bl	8001854 <HAL_GetREVID>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d817      	bhi.n	8005ef8 <HAL_RCC_OscConfig+0x1b8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x1a2>
 8005ed0:	4b3d      	ldr	r3, [pc, #244]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ed8:	4a3b      	ldr	r2, [pc, #236]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee0:	e07a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	031b      	lsls	r3, r3, #12
 8005ef0:	4935      	ldr	r1, [pc, #212]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef6:	e06f      	b.n	8005fd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	4930      	ldr	r1, [pc, #192]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0c:	e064      	b.n	8005fd8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d045      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f16:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 0219 	bic.w	r2, r3, #25
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4929      	ldr	r1, [pc, #164]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fb fc88 	bl	800183c <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f30:	f7fb fc84 	bl	800183c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e307      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f42:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4e:	f7fb fc81 	bl	8001854 <HAL_GetREVID>
 8005f52:	4602      	mov	r2, r0
 8005f54:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d817      	bhi.n	8005f8c <HAL_RCC_OscConfig+0x24c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d108      	bne.n	8005f76 <HAL_RCC_OscConfig+0x236>
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f6c:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	6053      	str	r3, [r2, #4]
 8005f74:	e030      	b.n	8005fd8 <HAL_RCC_OscConfig+0x298>
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	4910      	ldr	r1, [pc, #64]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
 8005f8a:	e025      	b.n	8005fd8 <HAL_RCC_OscConfig+0x298>
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	061b      	lsls	r3, r3, #24
 8005f9a:	490b      	ldr	r1, [pc, #44]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]
 8005fa0:	e01a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fae:	f7fb fc45 	bl	800183c <HAL_GetTick>
 8005fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fb6:	f7fb fc41 	bl	800183c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d903      	bls.n	8005fcc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e2c4      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
 8005fc8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fcc:	4ba4      	ldr	r3, [pc, #656]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ee      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80a9 	beq.w	8006138 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe6:	4b9e      	ldr	r3, [pc, #632]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ff0:	4b9b      	ldr	r3, [pc, #620]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d007      	beq.n	800600c <HAL_RCC_OscConfig+0x2cc>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b18      	cmp	r3, #24
 8006000:	d13a      	bne.n	8006078 <HAL_RCC_OscConfig+0x338>
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d135      	bne.n	8006078 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800600c:	4b94      	ldr	r3, [pc, #592]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_OscConfig+0x2e4>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2b80      	cmp	r3, #128	; 0x80
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e296      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006024:	f7fb fc16 	bl	8001854 <HAL_GetREVID>
 8006028:	4602      	mov	r2, r0
 800602a:	f241 0303 	movw	r3, #4099	; 0x1003
 800602e:	429a      	cmp	r2, r3
 8006030:	d817      	bhi.n	8006062 <HAL_RCC_OscConfig+0x322>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	2b20      	cmp	r3, #32
 8006038:	d108      	bne.n	800604c <HAL_RCC_OscConfig+0x30c>
 800603a:	4b89      	ldr	r3, [pc, #548]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006042:	4a87      	ldr	r2, [pc, #540]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006048:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800604a:	e075      	b.n	8006138 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604c:	4b84      	ldr	r3, [pc, #528]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	069b      	lsls	r3, r3, #26
 800605a:	4981      	ldr	r1, [pc, #516]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800605c:	4313      	orrs	r3, r2
 800605e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006060:	e06a      	b.n	8006138 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006062:	4b7f      	ldr	r3, [pc, #508]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	061b      	lsls	r3, r3, #24
 8006070:	497b      	ldr	r1, [pc, #492]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006072:	4313      	orrs	r3, r2
 8006074:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006076:	e05f      	b.n	8006138 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d042      	beq.n	8006106 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006080:	4b77      	ldr	r3, [pc, #476]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a76      	ldr	r2, [pc, #472]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fb fbd6 	bl	800183c <HAL_GetTick>
 8006090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006094:	f7fb fbd2 	bl	800183c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e255      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a6:	4b6e      	ldr	r3, [pc, #440]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b2:	f7fb fbcf 	bl	8001854 <HAL_GetREVID>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80060bc:	429a      	cmp	r2, r3
 80060be:	d817      	bhi.n	80060f0 <HAL_RCC_OscConfig+0x3b0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d108      	bne.n	80060da <HAL_RCC_OscConfig+0x39a>
 80060c8:	4b65      	ldr	r3, [pc, #404]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060d0:	4a63      	ldr	r2, [pc, #396]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80060d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d6:	6053      	str	r3, [r2, #4]
 80060d8:	e02e      	b.n	8006138 <HAL_RCC_OscConfig+0x3f8>
 80060da:	4b61      	ldr	r3, [pc, #388]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	069b      	lsls	r3, r3, #26
 80060e8:	495d      	ldr	r1, [pc, #372]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
 80060ee:	e023      	b.n	8006138 <HAL_RCC_OscConfig+0x3f8>
 80060f0:	4b5b      	ldr	r3, [pc, #364]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	061b      	lsls	r3, r3, #24
 80060fe:	4958      	ldr	r1, [pc, #352]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006100:	4313      	orrs	r3, r2
 8006102:	60cb      	str	r3, [r1, #12]
 8006104:	e018      	b.n	8006138 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006106:	4b56      	ldr	r3, [pc, #344]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a55      	ldr	r2, [pc, #340]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800610c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fb fb93 	bl	800183c <HAL_GetTick>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800611a:	f7fb fb8f 	bl	800183c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e212      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800612c:	4b4c      	ldr	r3, [pc, #304]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d036      	beq.n	80061b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d019      	beq.n	8006180 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614c:	4b44      	ldr	r3, [pc, #272]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 800614e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006150:	4a43      	ldr	r2, [pc, #268]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fb fb70 	bl	800183c <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006160:	f7fb fb6c 	bl	800183c <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e1ef      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006172:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x420>
 800617e:	e018      	b.n	80061b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	4a36      	ldr	r2, [pc, #216]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fb fb56 	bl	800183c <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006194:	f7fb fb52 	bl	800183c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e1d5      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061a6:	4b2e      	ldr	r3, [pc, #184]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80061a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d036      	beq.n	800622c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d019      	beq.n	80061fa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061c6:	4b26      	ldr	r3, [pc, #152]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a25      	ldr	r2, [pc, #148]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80061cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061d2:	f7fb fb33 	bl	800183c <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061da:	f7fb fb2f 	bl	800183c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e1b2      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ec:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0x49a>
 80061f8:	e018      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061fa:	4b19      	ldr	r3, [pc, #100]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006206:	f7fb fb19 	bl	800183c <HAL_GetTick>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800620e:	f7fb fb15 	bl	800183c <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e198      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006220:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <HAL_RCC_OscConfig+0x520>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f0      	bne.n	800620e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8085 	beq.w	8006344 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <HAL_RCC_OscConfig+0x524>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a09      	ldr	r2, [pc, #36]	; (8006264 <HAL_RCC_OscConfig+0x524>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006246:	f7fb faf9 	bl	800183c <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624c:	e00c      	b.n	8006268 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fb faf5 	bl	800183c <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	; 0x64
 800625a:	d905      	bls.n	8006268 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e178      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
 8006260:	58024400 	.word	0x58024400
 8006264:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006268:	4b96      	ldr	r3, [pc, #600]	; (80064c4 <HAL_RCC_OscConfig+0x784>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0ec      	beq.n	800624e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x54a>
 800627c:	4b92      	ldr	r3, [pc, #584]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a91      	ldr	r2, [pc, #580]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	e02d      	b.n	80062e6 <HAL_RCC_OscConfig+0x5a6>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x56c>
 8006292:	4b8d      	ldr	r3, [pc, #564]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	4a8c      	ldr	r2, [pc, #560]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	6713      	str	r3, [r2, #112]	; 0x70
 800629e:	4b8a      	ldr	r3, [pc, #552]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	4a89      	ldr	r2, [pc, #548]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	6713      	str	r3, [r2, #112]	; 0x70
 80062aa:	e01c      	b.n	80062e6 <HAL_RCC_OscConfig+0x5a6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d10c      	bne.n	80062ce <HAL_RCC_OscConfig+0x58e>
 80062b4:	4b84      	ldr	r3, [pc, #528]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	4a83      	ldr	r2, [pc, #524]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	6713      	str	r3, [r2, #112]	; 0x70
 80062c0:	4b81      	ldr	r3, [pc, #516]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a80      	ldr	r2, [pc, #512]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
 80062cc:	e00b      	b.n	80062e6 <HAL_RCC_OscConfig+0x5a6>
 80062ce:	4b7e      	ldr	r3, [pc, #504]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a7d      	ldr	r2, [pc, #500]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
 80062da:	4b7b      	ldr	r3, [pc, #492]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a7a      	ldr	r2, [pc, #488]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d015      	beq.n	800631a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ee:	f7fb faa5 	bl	800183c <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f4:	e00a      	b.n	800630c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f6:	f7fb faa1 	bl	800183c <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f241 3288 	movw	r2, #5000	; 0x1388
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e122      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800630c:	4b6e      	ldr	r3, [pc, #440]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ee      	beq.n	80062f6 <HAL_RCC_OscConfig+0x5b6>
 8006318:	e014      	b.n	8006344 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631a:	f7fb fa8f 	bl	800183c <HAL_GetTick>
 800631e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006320:	e00a      	b.n	8006338 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fb fa8b 	bl	800183c <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e10c      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006338:	4b63      	ldr	r3, [pc, #396]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ee      	bne.n	8006322 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8101 	beq.w	8006550 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800634e:	4b5e      	ldr	r3, [pc, #376]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006356:	2b18      	cmp	r3, #24
 8006358:	f000 80bc 	beq.w	80064d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b02      	cmp	r3, #2
 8006362:	f040 8095 	bne.w	8006490 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006366:	4b58      	ldr	r3, [pc, #352]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a57      	ldr	r2, [pc, #348]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800636c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fb fa63 	bl	800183c <HAL_GetTick>
 8006376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800637a:	f7fb fa5f 	bl	800183c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e0e2      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638c:	4b4e      	ldr	r3, [pc, #312]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f0      	bne.n	800637a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006398:	4b4b      	ldr	r3, [pc, #300]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800639a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639c:	4b4b      	ldr	r3, [pc, #300]	; (80064cc <HAL_RCC_OscConfig+0x78c>)
 800639e:	4013      	ands	r3, r2
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063a8:	0112      	lsls	r2, r2, #4
 80063aa:	430a      	orrs	r2, r1
 80063ac:	4946      	ldr	r1, [pc, #280]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	628b      	str	r3, [r1, #40]	; 0x28
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	3b01      	subs	r3, #1
 80063b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	3b01      	subs	r3, #1
 80063c2:	025b      	lsls	r3, r3, #9
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	3b01      	subs	r3, #1
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063da:	3b01      	subs	r3, #1
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063e2:	4939      	ldr	r1, [pc, #228]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80063e8:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a36      	ldr	r2, [pc, #216]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063f4:	4b34      	ldr	r3, [pc, #208]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80063f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f8:	4b35      	ldr	r3, [pc, #212]	; (80064d0 <HAL_RCC_OscConfig+0x790>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006400:	00d2      	lsls	r2, r2, #3
 8006402:	4931      	ldr	r1, [pc, #196]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006404:	4313      	orrs	r3, r2
 8006406:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006408:	4b2f      	ldr	r3, [pc, #188]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f023 020c 	bic.w	r2, r3, #12
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	492c      	ldr	r1, [pc, #176]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006416:	4313      	orrs	r3, r2
 8006418:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800641a:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	f023 0202 	bic.w	r2, r3, #2
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	4928      	ldr	r1, [pc, #160]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006428:	4313      	orrs	r3, r2
 800642a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800642c:	4b26      	ldr	r3, [pc, #152]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	4a25      	ldr	r2, [pc, #148]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006438:	4b23      	ldr	r3, [pc, #140]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	4a22      	ldr	r2, [pc, #136]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800643e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006444:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800644a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800644e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006450:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800645c:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006468:	f7fb f9e8 	bl	800183c <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006470:	f7fb f9e4 	bl	800183c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e067      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x730>
 800648e:	e05f      	b.n	8006550 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 8006496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800649a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fb f9ce 	bl	800183c <HAL_GetTick>
 80064a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fb f9ca 	bl	800183c <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e04d      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064b6:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <HAL_RCC_OscConfig+0x788>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x764>
 80064c2:	e045      	b.n	8006550 <HAL_RCC_OscConfig+0x810>
 80064c4:	58024800 	.word	0x58024800
 80064c8:	58024400 	.word	0x58024400
 80064cc:	fffffc0c 	.word	0xfffffc0c
 80064d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064d4:	4b21      	ldr	r3, [pc, #132]	; (800655c <HAL_RCC_OscConfig+0x81c>)
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064da:	4b20      	ldr	r3, [pc, #128]	; (800655c <HAL_RCC_OscConfig+0x81c>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d031      	beq.n	800654c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0203 	and.w	r2, r3, #3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d12a      	bne.n	800654c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d122      	bne.n	800654c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d11a      	bne.n	800654c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	0a5b      	lsrs	r3, r3, #9
 800651a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d111      	bne.n	800654c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d108      	bne.n	800654c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	0e1b      	lsrs	r3, r3, #24
 800653e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3730      	adds	r7, #48	; 0x30
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400

08006560 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e19c      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006574:	4b8a      	ldr	r3, [pc, #552]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d910      	bls.n	80065a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006582:	4b87      	ldr	r3, [pc, #540]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f023 020f 	bic.w	r2, r3, #15
 800658a:	4985      	ldr	r1, [pc, #532]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	4313      	orrs	r3, r2
 8006590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006592:	4b83      	ldr	r3, [pc, #524]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e184      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	4b7b      	ldr	r3, [pc, #492]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065bc:	429a      	cmp	r2, r3
 80065be:	d908      	bls.n	80065d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065c0:	4b78      	ldr	r3, [pc, #480]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	4975      	ldr	r1, [pc, #468]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	4b70      	ldr	r3, [pc, #448]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d908      	bls.n	8006600 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ee:	4b6d      	ldr	r3, [pc, #436]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	496a      	ldr	r1, [pc, #424]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0310 	and.w	r3, r3, #16
 8006608:	2b00      	cmp	r3, #0
 800660a:	d010      	beq.n	800662e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	4b64      	ldr	r3, [pc, #400]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006618:	429a      	cmp	r2, r3
 800661a:	d908      	bls.n	800662e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800661c:	4b61      	ldr	r3, [pc, #388]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	495e      	ldr	r1, [pc, #376]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800662a:	4313      	orrs	r3, r2
 800662c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	4b59      	ldr	r3, [pc, #356]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006646:	429a      	cmp	r2, r3
 8006648:	d908      	bls.n	800665c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800664a:	4b56      	ldr	r3, [pc, #344]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4953      	ldr	r1, [pc, #332]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006658:	4313      	orrs	r3, r2
 800665a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	4b4d      	ldr	r3, [pc, #308]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	429a      	cmp	r2, r3
 8006676:	d908      	bls.n	800668a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006678:	4b4a      	ldr	r3, [pc, #296]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f023 020f 	bic.w	r2, r3, #15
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4947      	ldr	r1, [pc, #284]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006686:	4313      	orrs	r3, r2
 8006688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d055      	beq.n	8006742 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006696:	4b43      	ldr	r3, [pc, #268]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4940      	ldr	r1, [pc, #256]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d107      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066b0:	4b3c      	ldr	r3, [pc, #240]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d121      	bne.n	8006700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0f6      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d107      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c8:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d115      	bne.n	8006700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0ea      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d107      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066e0:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d109      	bne.n	8006700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0de      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066f0:	4b2c      	ldr	r3, [pc, #176]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0d6      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006700:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f023 0207 	bic.w	r2, r3, #7
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4925      	ldr	r1, [pc, #148]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800670e:	4313      	orrs	r3, r2
 8006710:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006712:	f7fb f893 	bl	800183c <HAL_GetTick>
 8006716:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006718:	e00a      	b.n	8006730 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800671a:	f7fb f88f 	bl	800183c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	f241 3288 	movw	r2, #5000	; 0x1388
 8006728:	4293      	cmp	r3, r2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e0be      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006730:	4b1c      	ldr	r3, [pc, #112]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	429a      	cmp	r2, r3
 8006740:	d1eb      	bne.n	800671a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d010      	beq.n	8006770 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	429a      	cmp	r2, r3
 800675c:	d208      	bcs.n	8006770 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f023 020f 	bic.w	r2, r3, #15
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	490e      	ldr	r1, [pc, #56]	; (80067a4 <HAL_RCC_ClockConfig+0x244>)
 800676c:	4313      	orrs	r3, r2
 800676e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d214      	bcs.n	80067a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f023 020f 	bic.w	r2, r3, #15
 8006786:	4906      	ldr	r1, [pc, #24]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	4313      	orrs	r3, r2
 800678c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678e:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <HAL_RCC_ClockConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d005      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e086      	b.n	80068ae <HAL_RCC_ClockConfig+0x34e>
 80067a0:	52002000 	.word	0x52002000
 80067a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d010      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	4b3f      	ldr	r3, [pc, #252]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d208      	bcs.n	80067d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067c4:	4b3c      	ldr	r3, [pc, #240]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	4939      	ldr	r1, [pc, #228]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	4b34      	ldr	r3, [pc, #208]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d208      	bcs.n	8006804 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067f2:	4b31      	ldr	r3, [pc, #196]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	492e      	ldr	r1, [pc, #184]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006800:	4313      	orrs	r3, r2
 8006802:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d010      	beq.n	8006832 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800681c:	429a      	cmp	r2, r3
 800681e:	d208      	bcs.n	8006832 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006820:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	4922      	ldr	r1, [pc, #136]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 800682e:	4313      	orrs	r3, r2
 8006830:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d010      	beq.n	8006860 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800684a:	429a      	cmp	r2, r3
 800684c:	d208      	bcs.n	8006860 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800684e:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	4917      	ldr	r1, [pc, #92]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 800685c:	4313      	orrs	r3, r2
 800685e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006860:	f000 f89e 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 8006864:	4601      	mov	r1, r0
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	4a12      	ldr	r2, [pc, #72]	; (80068bc <HAL_RCC_ClockConfig+0x35c>)
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	fa21 f303 	lsr.w	r3, r1, r3
 800687c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <HAL_RCC_ClockConfig+0x358>)
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <HAL_RCC_ClockConfig+0x35c>)
 8006888:	5cd3      	ldrb	r3, [r2, r3]
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
 8006894:	4a0a      	ldr	r2, [pc, #40]	; (80068c0 <HAL_RCC_ClockConfig+0x360>)
 8006896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006898:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <HAL_RCC_ClockConfig+0x364>)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <HAL_RCC_ClockConfig+0x368>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fa ff80 	bl	80017a8 <HAL_InitTick>
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	58024400 	.word	0x58024400
 80068bc:	0800bd94 	.word	0x0800bd94
 80068c0:	24000004 	.word	0x24000004
 80068c4:	24000000 	.word	0x24000000
 80068c8:	24000008 	.word	0x24000008

080068cc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08c      	sub	sp, #48	; 0x30
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d12a      	bne.n	8006934 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80068de:	4b2d      	ldr	r3, [pc, #180]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 80068e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068e4:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068ee:	4b29      	ldr	r3, [pc, #164]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 80068f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80068fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006902:	2302      	movs	r3, #2
 8006904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006906:	2303      	movs	r3, #3
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800690e:	2300      	movs	r3, #0
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006912:	f107 031c 	add.w	r3, r7, #28
 8006916:	4619      	mov	r1, r3
 8006918:	481f      	ldr	r0, [pc, #124]	; (8006998 <HAL_RCC_MCOConfig+0xcc>)
 800691a:	f7fe fee5 	bl	80056e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800691e:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	430b      	orrs	r3, r1
 800692c:	4919      	ldr	r1, [pc, #100]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 800692e:	4313      	orrs	r3, r2
 8006930:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006932:	e02a      	b.n	800698a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006934:	4b17      	ldr	r3, [pc, #92]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 8006936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800693a:	4a16      	ldr	r2, [pc, #88]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 800693c:	f043 0304 	orr.w	r3, r3, #4
 8006940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006944:	4b13      	ldr	r3, [pc, #76]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 8006946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006958:	2302      	movs	r3, #2
 800695a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695c:	2303      	movs	r3, #3
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006964:	2300      	movs	r3, #0
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006968:	f107 031c 	add.w	r3, r7, #28
 800696c:	4619      	mov	r1, r3
 800696e:	480b      	ldr	r0, [pc, #44]	; (800699c <HAL_RCC_MCOConfig+0xd0>)
 8006970:	f7fe feba 	bl	80056e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006974:	4b07      	ldr	r3, [pc, #28]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	01d9      	lsls	r1, r3, #7
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	430b      	orrs	r3, r1
 8006984:	4903      	ldr	r1, [pc, #12]	; (8006994 <HAL_RCC_MCOConfig+0xc8>)
 8006986:	4313      	orrs	r3, r2
 8006988:	610b      	str	r3, [r1, #16]
}
 800698a:	bf00      	nop
 800698c:	3730      	adds	r7, #48	; 0x30
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	58024400 	.word	0x58024400
 8006998:	58020000 	.word	0x58020000
 800699c:	58020800 	.word	0x58020800

080069a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b089      	sub	sp, #36	; 0x24
 80069a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069a6:	4baf      	ldr	r3, [pc, #700]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ae:	2b18      	cmp	r3, #24
 80069b0:	f200 814e 	bhi.w	8006c50 <HAL_RCC_GetSysClockFreq+0x2b0>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	08006a21 	.word	0x08006a21
 80069c0:	08006c51 	.word	0x08006c51
 80069c4:	08006c51 	.word	0x08006c51
 80069c8:	08006c51 	.word	0x08006c51
 80069cc:	08006c51 	.word	0x08006c51
 80069d0:	08006c51 	.word	0x08006c51
 80069d4:	08006c51 	.word	0x08006c51
 80069d8:	08006c51 	.word	0x08006c51
 80069dc:	08006a47 	.word	0x08006a47
 80069e0:	08006c51 	.word	0x08006c51
 80069e4:	08006c51 	.word	0x08006c51
 80069e8:	08006c51 	.word	0x08006c51
 80069ec:	08006c51 	.word	0x08006c51
 80069f0:	08006c51 	.word	0x08006c51
 80069f4:	08006c51 	.word	0x08006c51
 80069f8:	08006c51 	.word	0x08006c51
 80069fc:	08006a4d 	.word	0x08006a4d
 8006a00:	08006c51 	.word	0x08006c51
 8006a04:	08006c51 	.word	0x08006c51
 8006a08:	08006c51 	.word	0x08006c51
 8006a0c:	08006c51 	.word	0x08006c51
 8006a10:	08006c51 	.word	0x08006c51
 8006a14:	08006c51 	.word	0x08006c51
 8006a18:	08006c51 	.word	0x08006c51
 8006a1c:	08006a53 	.word	0x08006a53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a20:	4b90      	ldr	r3, [pc, #576]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a2c:	4b8d      	ldr	r3, [pc, #564]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a8c      	ldr	r2, [pc, #560]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a3e:	e10a      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a40:	4b89      	ldr	r3, [pc, #548]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a42:	61bb      	str	r3, [r7, #24]
    break;
 8006a44:	e107      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a46:	4b89      	ldr	r3, [pc, #548]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006a48:	61bb      	str	r3, [r7, #24]
    break;
 8006a4a:	e104      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a4c:	4b88      	ldr	r3, [pc, #544]	; (8006c70 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006a4e:	61bb      	str	r3, [r7, #24]
    break;
 8006a50:	e101      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a52:	4b84      	ldr	r3, [pc, #528]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a5c:	4b81      	ldr	r3, [pc, #516]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a68:	4b7e      	ldr	r3, [pc, #504]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a72:	4b7c      	ldr	r3, [pc, #496]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a76:	08db      	lsrs	r3, r3, #3
 8006a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80da 	beq.w	8006c4a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d05a      	beq.n	8006b52 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d302      	bcc.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x106>
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d078      	beq.n	8006b96 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006aa4:	e099      	b.n	8006bda <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa6:	4b6f      	ldr	r3, [pc, #444]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d02d      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ab2:	4b6c      	ldr	r3, [pc, #432]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	08db      	lsrs	r3, r3, #3
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	4a6a      	ldr	r2, [pc, #424]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006abe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	ee07 3a90 	vmov	s15, r3
 8006ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006adc:	4b61      	ldr	r3, [pc, #388]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b0c:	e087      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b18:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006c78 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b20:	4b50      	ldr	r3, [pc, #320]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b30:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b34:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b50:	e065      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	ee07 3a90 	vmov	s15, r3
 8006b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b64:	4b3f      	ldr	r3, [pc, #252]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6c:	ee07 3a90 	vmov	s15, r3
 8006b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b74:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b78:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b94:	e043      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006c80 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba8:	4b2e      	ldr	r3, [pc, #184]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bbc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd8:	e021      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006c7c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c00:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c1c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	0a5b      	lsrs	r3, r3, #9
 8006c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c28:	3301      	adds	r3, #1
 8006c2a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c42:	ee17 3a90 	vmov	r3, s15
 8006c46:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c48:	e005      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
    break;
 8006c4e:	e002      	b.n	8006c56 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c52:	61bb      	str	r3, [r7, #24]
    break;
 8006c54:	bf00      	nop
  }

  return sysclockfreq;
 8006c56:	69bb      	ldr	r3, [r7, #24]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3724      	adds	r7, #36	; 0x24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	58024400 	.word	0x58024400
 8006c68:	03d09000 	.word	0x03d09000
 8006c6c:	003d0900 	.word	0x003d0900
 8006c70:	01e84800 	.word	0x01e84800
 8006c74:	46000000 	.word	0x46000000
 8006c78:	4c742400 	.word	0x4c742400
 8006c7c:	4a742400 	.word	0x4a742400
 8006c80:	4bf42400 	.word	0x4bf42400

08006c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c8a:	f7ff fe89 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 8006c8e:	4601      	mov	r1, r0
 8006c90:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	4a0f      	ldr	r2, [pc, #60]	; (8006cd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c9c:	5cd3      	ldrb	r3, [r2, r3]
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ca6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	4a09      	ldr	r2, [pc, #36]	; (8006cd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cb2:	5cd3      	ldrb	r3, [r2, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	4a07      	ldr	r2, [pc, #28]	; (8006cdc <HAL_RCC_GetHCLKFreq+0x58>)
 8006cc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cc2:	4a07      	ldr	r2, [pc, #28]	; (8006ce0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <HAL_RCC_GetHCLKFreq+0x58>)
 8006cca:	681b      	ldr	r3, [r3, #0]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	0800bd94 	.word	0x0800bd94
 8006cdc:	24000004 	.word	0x24000004
 8006ce0:	24000000 	.word	0x24000000

08006ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ce8:	f7ff ffcc 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8006cec:	4601      	mov	r1, r0
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	091b      	lsrs	r3, r3, #4
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cfa:	5cd3      	ldrb	r3, [r2, r3]
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	0800bd94 	.word	0x0800bd94

08006d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d14:	f7ff ffb6 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	4a04      	ldr	r2, [pc, #16]	; (8006d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d26:	5cd3      	ldrb	r3, [r2, r3]
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	58024400 	.word	0x58024400
 8006d38:	0800bd94 	.word	0x0800bd94

08006d3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d44:	2300      	movs	r3, #0
 8006d46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d48:	2300      	movs	r3, #0
 8006d4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d03d      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d60:	d013      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d802      	bhi.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006d6c:	e01f      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d72:	d013      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d78:	d01c      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006d7a:	e018      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7c:	4baf      	ldr	r3, [pc, #700]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	4aae      	ldr	r2, [pc, #696]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d88:	e015      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f96f 	bl	8008074 <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d9a:	e00c      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3324      	adds	r3, #36	; 0x24
 8006da0:	2102      	movs	r1, #2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fa18 	bl	80081d8 <RCCEx_PLL3_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
      break;
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dbc:	4b9f      	ldr	r3, [pc, #636]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc8:	499c      	ldr	r1, [pc, #624]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8006dce:	e001      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d03d      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d826      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e05 	.word	0x08006e05
 8006df4:	08006e13 	.word	0x08006e13
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	08006e3d 	.word	0x08006e3d
 8006e00:	08006e3d 	.word	0x08006e3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4b8d      	ldr	r3, [pc, #564]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a8c      	ldr	r2, [pc, #560]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e10:	e015      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3304      	adds	r3, #4
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 f92b 	bl	8008074 <RCCEx_PLL2_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e22:	e00c      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3324      	adds	r3, #36	; 0x24
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f9d4 	bl	80081d8 <RCCEx_PLL3_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e34:	e003      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3a:	e000      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d109      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e44:	4b7d      	ldr	r3, [pc, #500]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e48:	f023 0207 	bic.w	r2, r3, #7
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	497a      	ldr	r1, [pc, #488]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	650b      	str	r3, [r1, #80]	; 0x50
 8006e56:	e001      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d03e      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d01c      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006e70:	2b80      	cmp	r3, #128	; 0x80
 8006e72:	d804      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d00d      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006e7c:	e01e      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e80:	d01f      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e86:	d01e      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e88:	e018      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8a:	4b6c      	ldr	r3, [pc, #432]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	4a6b      	ldr	r2, [pc, #428]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e96:	e017      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 f8e8 	bl	8008074 <RCCEx_PLL2_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ea8:	e00e      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3324      	adds	r3, #36	; 0x24
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 f991 	bl	80081d8 <RCCEx_PLL3_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eba:	e005      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	e002      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ece:	4b5b      	ldr	r3, [pc, #364]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eda:	4958      	ldr	r1, [pc, #352]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	650b      	str	r3, [r1, #80]	; 0x50
 8006ee0:	e001      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d044      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006efc:	d01f      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f02:	d805      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0c:	d00e      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006f0e:	e01f      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006f10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f14:	d01f      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006f16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f1a:	d01e      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f1c:	e018      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1e:	4b47      	ldr	r3, [pc, #284]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	4a46      	ldr	r2, [pc, #280]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f2a:	e017      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f89e 	bl	8008074 <RCCEx_PLL2_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f3c:	e00e      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3324      	adds	r3, #36	; 0x24
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 f947 	bl	80081d8 <RCCEx_PLL3_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f4e:	e005      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	75fb      	strb	r3, [r7, #23]
      break;
 8006f54:	e002      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006f56:	bf00      	nop
 8006f58:	e000      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f62:	4b36      	ldr	r3, [pc, #216]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f70:	4932      	ldr	r1, [pc, #200]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	658b      	str	r3, [r1, #88]	; 0x58
 8006f76:	e001      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d044      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f92:	d01f      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f98:	d805      	bhi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006f9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fa4:	e01f      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006fa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006faa:	d01f      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fb0:	d01e      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006fb2:	e018      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb4:	4b21      	ldr	r3, [pc, #132]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	4a20      	ldr	r2, [pc, #128]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc0:	e017      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 f853 	bl	8008074 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006fd2:	e00e      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f8fc 	bl	80081d8 <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fe4:	e005      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fea:	e002      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ff8:	4b10      	ldr	r3, [pc, #64]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007006:	490d      	ldr	r1, [pc, #52]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007008:	4313      	orrs	r3, r2
 800700a:	658b      	str	r3, [r1, #88]	; 0x58
 800700c:	e001      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d035      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007022:	2b10      	cmp	r3, #16
 8007024:	d00c      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007026:	2b10      	cmp	r3, #16
 8007028:	d802      	bhi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01b      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800702e:	e017      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007030:	2b20      	cmp	r3, #32
 8007032:	d00c      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007034:	2b30      	cmp	r3, #48	; 0x30
 8007036:	d018      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007038:	e012      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4baf      	ldr	r3, [pc, #700]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4aae      	ldr	r2, [pc, #696]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800704c:	e00e      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3304      	adds	r3, #4
 8007052:	2102      	movs	r1, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f80d 	bl	8008074 <RCCEx_PLL2_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800705e:	e005      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
      break;
 8007064:	e002      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800706a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007072:	4ba3      	ldr	r3, [pc, #652]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007076:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707e:	49a0      	ldr	r1, [pc, #640]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007080:	4313      	orrs	r3, r2
 8007082:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007084:	e001      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d042      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709e:	d01f      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80070a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a4:	d805      	bhi.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ae:	d00e      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x392>
 80070b0:	e01f      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80070b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070b6:	d01f      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80070b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070bc:	d01e      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80070be:	e018      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c0:	4b8f      	ldr	r3, [pc, #572]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	4a8e      	ldr	r2, [pc, #568]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070cc:	e017      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 ffcd 	bl	8008074 <RCCEx_PLL2_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070de:	e00e      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 f876 	bl	80081d8 <RCCEx_PLL3_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070f0:	e005      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]
      break;
 80070f6:	e002      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80070f8:	bf00      	nop
 80070fa:	e000      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80070fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007104:	4b7e      	ldr	r3, [pc, #504]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007108:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007110:	497b      	ldr	r1, [pc, #492]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	650b      	str	r3, [r1, #80]	; 0x50
 8007116:	e001      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d042      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007130:	d01b      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007136:	d805      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007138:	2b00      	cmp	r3, #0
 800713a:	d022      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007142:	e01b      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007144:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007148:	d01d      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800714a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800714e:	d01c      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007150:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007154:	d01b      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007156:	e011      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3304      	adds	r3, #4
 800715c:	2101      	movs	r1, #1
 800715e:	4618      	mov	r0, r3
 8007160:	f000 ff88 	bl	8008074 <RCCEx_PLL2_Config>
 8007164:	4603      	mov	r3, r0
 8007166:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007168:	e012      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3324      	adds	r3, #36	; 0x24
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f001 f831 	bl	80081d8 <RCCEx_PLL3_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800717a:	e009      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
      break;
 8007180:	e006      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007182:	bf00      	nop
 8007184:	e004      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007186:	bf00      	nop
 8007188:	e002      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800718e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007196:	4b5a      	ldr	r3, [pc, #360]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a2:	4957      	ldr	r1, [pc, #348]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	650b      	str	r3, [r1, #80]	; 0x50
 80071a8:	e001      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d044      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071c4:	d01b      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80071c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ca:	d805      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d022      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80071d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d4:	d00a      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80071d6:	e01b      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071dc:	d01d      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80071de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071e2:	d01c      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80071e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071e8:	d01b      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80071ea:	e011      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3304      	adds	r3, #4
 80071f0:	2101      	movs	r1, #1
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 ff3e 	bl	8008074 <RCCEx_PLL2_Config>
 80071f8:	4603      	mov	r3, r0
 80071fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80071fc:	e012      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3324      	adds	r3, #36	; 0x24
 8007202:	2101      	movs	r1, #1
 8007204:	4618      	mov	r0, r3
 8007206:	f000 ffe7 	bl	80081d8 <RCCEx_PLL3_Config>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800720e:	e009      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	75fb      	strb	r3, [r7, #23]
      break;
 8007214:	e006      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007216:	bf00      	nop
 8007218:	e004      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800722a:	4b35      	ldr	r3, [pc, #212]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007238:	4931      	ldr	r1, [pc, #196]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800723a:	4313      	orrs	r3, r2
 800723c:	658b      	str	r3, [r1, #88]	; 0x58
 800723e:	e001      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02d      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007258:	d005      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725e:	d009      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007264:	e00f      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007266:	4b26      	ldr	r3, [pc, #152]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	4a25      	ldr	r2, [pc, #148]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800726c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007270:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007272:	e00c      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	2101      	movs	r1, #1
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fefa 	bl	8008074 <RCCEx_PLL2_Config>
 8007280:	4603      	mov	r3, r0
 8007282:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007284:	e003      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
      break;
 800728a:	e000      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800728c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007298:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a0:	4917      	ldr	r1, [pc, #92]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	650b      	str	r3, [r1, #80]	; 0x50
 80072a6:	e001      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d035      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d81b      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	08007305 	.word	0x08007305
 80072cc:	080072d9 	.word	0x080072d9
 80072d0:	080072e7 	.word	0x080072e7
 80072d4:	08007305 	.word	0x08007305
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80072e4:	e00f      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2102      	movs	r1, #2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fec1 	bl	8008074 <RCCEx_PLL2_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80072f6:	e006      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
      break;
 80072fc:	e003      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400
      break;
 8007304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d109      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800730c:	4bba      	ldr	r3, [pc, #744]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800730e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007310:	f023 0203 	bic.w	r2, r3, #3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	49b7      	ldr	r1, [pc, #732]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800731a:	4313      	orrs	r3, r2
 800731c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800731e:	e001      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8086 	beq.w	800743e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007332:	4bb2      	ldr	r3, [pc, #712]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4ab1      	ldr	r2, [pc, #708]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800733e:	f7fa fa7d 	bl	800183c <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007344:	e009      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007346:	f7fa fa79 	bl	800183c <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b64      	cmp	r3, #100	; 0x64
 8007352:	d902      	bls.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	75fb      	strb	r3, [r7, #23]
        break;
 8007358:	e005      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800735a:	4ba8      	ldr	r3, [pc, #672]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0ef      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d166      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800736c:	4ba2      	ldr	r3, [pc, #648]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800736e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007376:	4053      	eors	r3, r2
 8007378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737c:	2b00      	cmp	r3, #0
 800737e:	d013      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007380:	4b9d      	ldr	r3, [pc, #628]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007388:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800738a:	4b9b      	ldr	r3, [pc, #620]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738e:	4a9a      	ldr	r2, [pc, #616]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007394:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007396:	4b98      	ldr	r3, [pc, #608]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	4a97      	ldr	r2, [pc, #604]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800739c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073a2:	4a95      	ldr	r2, [pc, #596]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b2:	d115      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b4:	f7fa fa42 	bl	800183c <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ba:	e00b      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073bc:	f7fa fa3e 	bl	800183c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d902      	bls.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	75fb      	strb	r3, [r7, #23]
            break;
 80073d2:	e005      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d4:	4b88      	ldr	r3, [pc, #544]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0ed      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d126      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f4:	d10d      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80073f6:	4b80      	ldr	r3, [pc, #512]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007404:	0919      	lsrs	r1, r3, #4
 8007406:	4b7e      	ldr	r3, [pc, #504]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007408:	400b      	ands	r3, r1
 800740a:	497b      	ldr	r1, [pc, #492]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800740c:	4313      	orrs	r3, r2
 800740e:	610b      	str	r3, [r1, #16]
 8007410:	e005      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007412:	4b79      	ldr	r3, [pc, #484]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	4a78      	ldr	r2, [pc, #480]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007418:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800741c:	6113      	str	r3, [r2, #16]
 800741e:	4b76      	ldr	r3, [pc, #472]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800742c:	4972      	ldr	r1, [pc, #456]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800742e:	4313      	orrs	r3, r2
 8007430:	670b      	str	r3, [r1, #112]	; 0x70
 8007432:	e004      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	75bb      	strb	r3, [r7, #22]
 8007438:	e001      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d07d      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744e:	2b28      	cmp	r3, #40	; 0x28
 8007450:	d866      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007527 	.word	0x08007527
 800745c:	08007521 	.word	0x08007521
 8007460:	08007521 	.word	0x08007521
 8007464:	08007521 	.word	0x08007521
 8007468:	08007521 	.word	0x08007521
 800746c:	08007521 	.word	0x08007521
 8007470:	08007521 	.word	0x08007521
 8007474:	08007521 	.word	0x08007521
 8007478:	080074fd 	.word	0x080074fd
 800747c:	08007521 	.word	0x08007521
 8007480:	08007521 	.word	0x08007521
 8007484:	08007521 	.word	0x08007521
 8007488:	08007521 	.word	0x08007521
 800748c:	08007521 	.word	0x08007521
 8007490:	08007521 	.word	0x08007521
 8007494:	08007521 	.word	0x08007521
 8007498:	0800750f 	.word	0x0800750f
 800749c:	08007521 	.word	0x08007521
 80074a0:	08007521 	.word	0x08007521
 80074a4:	08007521 	.word	0x08007521
 80074a8:	08007521 	.word	0x08007521
 80074ac:	08007521 	.word	0x08007521
 80074b0:	08007521 	.word	0x08007521
 80074b4:	08007521 	.word	0x08007521
 80074b8:	08007527 	.word	0x08007527
 80074bc:	08007521 	.word	0x08007521
 80074c0:	08007521 	.word	0x08007521
 80074c4:	08007521 	.word	0x08007521
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007521 	.word	0x08007521
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007521 	.word	0x08007521
 80074d8:	08007527 	.word	0x08007527
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007521 	.word	0x08007521
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007521 	.word	0x08007521
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007521 	.word	0x08007521
 80074f8:	08007527 	.word	0x08007527
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f000 fdb6 	bl	8008074 <RCCEx_PLL2_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800750c:	e00c      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3324      	adds	r3, #36	; 0x24
 8007512:	2101      	movs	r1, #1
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fe5f 	bl	80081d8 <RCCEx_PLL3_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800751e:	e003      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	75fb      	strb	r3, [r7, #23]
      break;
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800752e:	4b32      	ldr	r3, [pc, #200]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007532:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800753a:	492f      	ldr	r1, [pc, #188]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800753c:	4313      	orrs	r3, r2
 800753e:	654b      	str	r3, [r1, #84]	; 0x54
 8007540:	e001      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d037      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007556:	2b05      	cmp	r3, #5
 8007558:	d820      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	080075a3 	.word	0x080075a3
 8007564:	08007579 	.word	0x08007579
 8007568:	0800758b 	.word	0x0800758b
 800756c:	080075a3 	.word	0x080075a3
 8007570:	080075a3 	.word	0x080075a3
 8007574:	080075a3 	.word	0x080075a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	2101      	movs	r1, #1
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fd78 	bl	8008074 <RCCEx_PLL2_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007588:	e00c      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3324      	adds	r3, #36	; 0x24
 800758e:	2101      	movs	r1, #1
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fe21 	bl	80081d8 <RCCEx_PLL3_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800759a:	e003      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
      break;
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80075a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075aa:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f023 0207 	bic.w	r2, r3, #7
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b6:	4910      	ldr	r1, [pc, #64]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	654b      	str	r3, [r1, #84]	; 0x54
 80075bc:	e001      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d040      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d827      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	0800762f 	.word	0x0800762f
 80075e4:	08007605 	.word	0x08007605
 80075e8:	08007617 	.word	0x08007617
 80075ec:	0800762f 	.word	0x0800762f
 80075f0:	0800762f 	.word	0x0800762f
 80075f4:	0800762f 	.word	0x0800762f
 80075f8:	58024400 	.word	0x58024400
 80075fc:	58024800 	.word	0x58024800
 8007600:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fd32 	bl	8008074 <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007614:	e00c      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	2101      	movs	r1, #1
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fddb 	bl	80081d8 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007626:	e003      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	75fb      	strb	r3, [r7, #23]
      break;
 800762c:	e000      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800762e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007636:	4bb2      	ldr	r3, [pc, #712]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763a:	f023 0207 	bic.w	r2, r3, #7
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007644:	49ae      	ldr	r1, [pc, #696]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007646:	4313      	orrs	r3, r2
 8007648:	658b      	str	r3, [r1, #88]	; 0x58
 800764a:	e001      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d044      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007666:	d01b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766c:	d805      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d022      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007678:	e01b      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767e:	d01d      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007684:	d01c      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800768a:	d01b      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800768c:	e011      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fced 	bl	8008074 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800769e:	e012      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3324      	adds	r3, #36	; 0x24
 80076a4:	2102      	movs	r1, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fd96 	bl	80081d8 <RCCEx_PLL3_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076b0:	e009      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	75fb      	strb	r3, [r7, #23]
      break;
 80076b6:	e006      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80076b8:	bf00      	nop
 80076ba:	e004      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80076bc:	bf00      	nop
 80076be:	e002      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80076c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076cc:	4b8c      	ldr	r3, [pc, #560]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076da:	4989      	ldr	r1, [pc, #548]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	654b      	str	r3, [r1, #84]	; 0x54
 80076e0:	e001      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d044      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fc:	d01b      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80076fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007702:	d805      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d022      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770c:	d00a      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800770e:	e01b      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007714:	d01d      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007716:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800771a:	d01c      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800771c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007720:	d01b      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007722:	e011      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fca2 	bl	8008074 <RCCEx_PLL2_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007734:	e012      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3324      	adds	r3, #36	; 0x24
 800773a:	2102      	movs	r1, #2
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fd4b 	bl	80081d8 <RCCEx_PLL3_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007746:	e009      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]
      break;
 800774c:	e006      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800774e:	bf00      	nop
 8007750:	e004      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007752:	bf00      	nop
 8007754:	e002      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800775a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007762:	4b67      	ldr	r3, [pc, #412]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007770:	4963      	ldr	r1, [pc, #396]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007772:	4313      	orrs	r3, r2
 8007774:	658b      	str	r3, [r1, #88]	; 0x58
 8007776:	e001      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007784:	2b00      	cmp	r3, #0
 8007786:	d044      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800778e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007792:	d01b      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007798:	d805      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d022      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d00a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80077a4:	e01b      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80077a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077aa:	d01d      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80077ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077b0:	d01c      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80077b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077b6:	d01b      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80077b8:	e011      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3304      	adds	r3, #4
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fc57 	bl	8008074 <RCCEx_PLL2_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077ca:	e012      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	2102      	movs	r1, #2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fd00 	bl	80081d8 <RCCEx_PLL3_Config>
 80077d8:	4603      	mov	r3, r0
 80077da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80077dc:	e009      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
      break;
 80077e2:	e006      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077e4:	bf00      	nop
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077e8:	bf00      	nop
 80077ea:	e002      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80077f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077f8:	4b41      	ldr	r3, [pc, #260]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007806:	493e      	ldr	r1, [pc, #248]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007808:	4313      	orrs	r3, r2
 800780a:	658b      	str	r3, [r1, #88]	; 0x58
 800780c:	e001      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01a      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3324      	adds	r3, #36	; 0x24
 800782e:	2102      	movs	r1, #2
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fcd1 	bl	80081d8 <RCCEx_PLL3_Config>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007840:	4b2f      	ldr	r3, [pc, #188]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800784e:	492c      	ldr	r1, [pc, #176]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007850:	4313      	orrs	r3, r2
 8007852:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	d10a      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3324      	adds	r3, #36	; 0x24
 8007870:	2102      	movs	r1, #2
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fcb0 	bl	80081d8 <RCCEx_PLL3_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007882:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007890:	491b      	ldr	r1, [pc, #108]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007892:	4313      	orrs	r3, r2
 8007894:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d032      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ac:	d00d      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80078ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b2:	d016      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d111      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	2100      	movs	r1, #0
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fbd8 	bl	8008074 <RCCEx_PLL2_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80078c8:	e00c      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3324      	adds	r3, #36	; 0x24
 80078ce:	2102      	movs	r1, #2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fc81 	bl	80081d8 <RCCEx_PLL3_Config>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	75fb      	strb	r3, [r7, #23]
      break;
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80078e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10c      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078f8:	4901      	ldr	r1, [pc, #4]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	658b      	str	r3, [r1, #88]	; 0x58
 80078fe:	e003      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d02f      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800791a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800791e:	d00c      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007924:	d015      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792a:	d10f      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792c:	4b79      	ldr	r3, [pc, #484]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a78      	ldr	r2, [pc, #480]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007938:	e00c      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3324      	adds	r3, #36	; 0x24
 800793e:	2101      	movs	r1, #1
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fc49 	bl	80081d8 <RCCEx_PLL3_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800794a:	e003      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	e000      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800795a:	4b6e      	ldr	r3, [pc, #440]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007968:	496a      	ldr	r1, [pc, #424]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800796a:	4313      	orrs	r3, r2
 800796c:	654b      	str	r3, [r1, #84]	; 0x54
 800796e:	e001      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d029      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d007      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800798e:	e00f      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007990:	4b60      	ldr	r3, [pc, #384]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	4a5f      	ldr	r2, [pc, #380]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800799c:	e00b      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3304      	adds	r3, #4
 80079a2:	2102      	movs	r1, #2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fb65 	bl	8008074 <RCCEx_PLL2_Config>
 80079aa:	4603      	mov	r3, r0
 80079ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80079ae:	e002      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
      break;
 80079b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079bc:	4b55      	ldr	r3, [pc, #340]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c8:	4952      	ldr	r1, [pc, #328]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079ce:	e001      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00a      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3324      	adds	r3, #36	; 0x24
 80079e4:	2102      	movs	r1, #2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fbf6 	bl	80081d8 <RCCEx_PLL3_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02f      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0a:	d00c      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a10:	d802      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d011      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007a16:	e00d      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1c:	d00f      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a22:	d00e      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a26:	4b3b      	ldr	r3, [pc, #236]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a3a      	ldr	r2, [pc, #232]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007a32:	e007      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
      break;
 8007a38:	e004      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a3a:	bf00      	nop
 8007a3c:	e002      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a3e:	bf00      	nop
 8007a40:	e000      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a4a:	4b32      	ldr	r3, [pc, #200]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a56:	492f      	ldr	r1, [pc, #188]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	654b      	str	r3, [r1, #84]	; 0x54
 8007a5c:	e001      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a6e:	4b29      	ldr	r3, [pc, #164]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7a:	4926      	ldr	r1, [pc, #152]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d009      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a8c:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a9a:	491e      	ldr	r1, [pc, #120]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007aac:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab8:	4916      	ldr	r1, [pc, #88]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00d      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ad0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ad4:	6113      	str	r3, [r2, #16]
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ae0:	490c      	ldr	r1, [pc, #48]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da08      	bge.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007aee:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afa:	4906      	ldr	r1, [pc, #24]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007b00:	7dbb      	ldrb	r3, [r7, #22]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	58024400 	.word	0x58024400

08007b18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b1c:	f7ff f8b2 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8007b20:	4601      	mov	r1, r0
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	091b      	lsrs	r3, r3, #4
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	4a04      	ldr	r2, [pc, #16]	; (8007b40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b2e:	5cd3      	ldrb	r3, [r2, r3]
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	0800bd94 	.word	0x0800bd94

08007b44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b089      	sub	sp, #36	; 0x24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b4c:	4b9d      	ldr	r3, [pc, #628]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007b56:	4b9b      	ldr	r3, [pc, #620]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	0b1b      	lsrs	r3, r3, #12
 8007b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b62:	4b98      	ldr	r3, [pc, #608]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	091b      	lsrs	r3, r3, #4
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007b6e:	4b95      	ldr	r3, [pc, #596]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b72:	08db      	lsrs	r3, r3, #3
 8007b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 810a 	beq.w	8007da6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d05a      	beq.n	8007c4e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d302      	bcc.n	8007ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d078      	beq.n	8007c92 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007ba0:	e099      	b.n	8007cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ba2:	4b88      	ldr	r3, [pc, #544]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d02d      	beq.n	8007c0a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bae:	4b85      	ldr	r3, [pc, #532]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	4a83      	ldr	r2, [pc, #524]	; (8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007bba:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	ee07 3a90 	vmov	s15, r3
 8007bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd8:	4b7a      	ldr	r3, [pc, #488]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be0:	ee07 3a90 	vmov	s15, r3
 8007be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c04:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c08:	e087      	b.n	8007d1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1c:	4b69      	ldr	r3, [pc, #420]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c24:	ee07 3a90 	vmov	s15, r3
 8007c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c30:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c4c:	e065      	b.n	8007d1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c60:	4b58      	ldr	r3, [pc, #352]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c74:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c90:	e043      	b.n	8007d1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca4:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cd4:	e021      	b.n	8007d1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	ee07 3a90 	vmov	s15, r3
 8007cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce8:	4b36      	ldr	r3, [pc, #216]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cfc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d18:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007d1a:	4b2a      	ldr	r3, [pc, #168]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	0a5b      	lsrs	r3, r3, #9
 8007d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d40:	ee17 2a90 	vmov	r2, s15
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d6e:	ee17 2a90 	vmov	r2, s15
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d76:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	0e1b      	lsrs	r3, r3, #24
 8007d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d9c:	ee17 2a90 	vmov	r2, s15
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007da4:	e008      	b.n	8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	609a      	str	r2, [r3, #8]
}
 8007db8:	bf00      	nop
 8007dba:	3724      	adds	r7, #36	; 0x24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	58024400 	.word	0x58024400
 8007dc8:	03d09000 	.word	0x03d09000
 8007dcc:	46000000 	.word	0x46000000
 8007dd0:	4c742400 	.word	0x4c742400
 8007dd4:	4a742400 	.word	0x4a742400
 8007dd8:	4bf42400 	.word	0x4bf42400

08007ddc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b089      	sub	sp, #36	; 0x24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007de4:	4b9d      	ldr	r3, [pc, #628]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007dee:	4b9b      	ldr	r3, [pc, #620]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df2:	0d1b      	lsrs	r3, r3, #20
 8007df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007df8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dfa:	4b98      	ldr	r3, [pc, #608]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007e06:	4b95      	ldr	r3, [pc, #596]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	08db      	lsrs	r3, r3, #3
 8007e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 810a 	beq.w	800803e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d05a      	beq.n	8007ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d302      	bcc.n	8007e3a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d078      	beq.n	8007f2a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007e38:	e099      	b.n	8007f6e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e3a:	4b88      	ldr	r3, [pc, #544]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d02d      	beq.n	8007ea2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e46:	4b85      	ldr	r3, [pc, #532]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	08db      	lsrs	r3, r3, #3
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	4a83      	ldr	r2, [pc, #524]	; (8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007e52:	fa22 f303 	lsr.w	r3, r2, r3
 8007e56:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e70:	4b7a      	ldr	r3, [pc, #488]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e78:	ee07 3a90 	vmov	s15, r3
 8007e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ea0:	e087      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb4:	4b69      	ldr	r3, [pc, #420]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ec8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee4:	e065      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ef8:	4b58      	ldr	r3, [pc, #352]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f28:	e043      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3c:	4b47      	ldr	r3, [pc, #284]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f44:	ee07 3a90 	vmov	s15, r3
 8007f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f6c:	e021      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800806c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f80:	4b36      	ldr	r3, [pc, #216]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fb0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007fb2:	4b2a      	ldr	r3, [pc, #168]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	0a5b      	lsrs	r3, r3, #9
 8007fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd8:	ee17 2a90 	vmov	r2, s15
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007fe0:	4b1e      	ldr	r3, [pc, #120]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008006:	ee17 2a90 	vmov	r2, s15
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	0e1b      	lsrs	r3, r3, #24
 8008014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008018:	ee07 3a90 	vmov	s15, r3
 800801c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008028:	edd7 6a07 	vldr	s13, [r7, #28]
 800802c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008034:	ee17 2a90 	vmov	r2, s15
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800803c:	e008      	b.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	609a      	str	r2, [r3, #8]
}
 8008050:	bf00      	nop
 8008052:	3724      	adds	r7, #36	; 0x24
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	58024400 	.word	0x58024400
 8008060:	03d09000 	.word	0x03d09000
 8008064:	46000000 	.word	0x46000000
 8008068:	4c742400 	.word	0x4c742400
 800806c:	4a742400 	.word	0x4a742400
 8008070:	4bf42400 	.word	0x4bf42400

08008074 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008082:	4b53      	ldr	r3, [pc, #332]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	f003 0303 	and.w	r3, r3, #3
 800808a:	2b03      	cmp	r3, #3
 800808c:	d101      	bne.n	8008092 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e099      	b.n	80081c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008092:	4b4f      	ldr	r3, [pc, #316]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a4e      	ldr	r2, [pc, #312]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800809c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809e:	f7f9 fbcd 	bl	800183c <HAL_GetTick>
 80080a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080a4:	e008      	b.n	80080b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080a6:	f7f9 fbc9 	bl	800183c <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e086      	b.n	80081c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b8:	4b45      	ldr	r3, [pc, #276]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080c4:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	031b      	lsls	r3, r3, #12
 80080d2:	493f      	ldr	r1, [pc, #252]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	628b      	str	r3, [r1, #40]	; 0x28
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	3b01      	subs	r3, #1
 80080de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	025b      	lsls	r3, r3, #9
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	3b01      	subs	r3, #1
 8008102:	061b      	lsls	r3, r3, #24
 8008104:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008108:	4931      	ldr	r1, [pc, #196]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800810a:	4313      	orrs	r3, r2
 800810c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800810e:	4b30      	ldr	r3, [pc, #192]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	492d      	ldr	r1, [pc, #180]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800811c:	4313      	orrs	r3, r2
 800811e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008120:	4b2b      	ldr	r3, [pc, #172]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	f023 0220 	bic.w	r2, r3, #32
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	4928      	ldr	r1, [pc, #160]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008132:	4b27      	ldr	r3, [pc, #156]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008138:	f023 0310 	bic.w	r3, r3, #16
 800813c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008142:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <RCCEx_PLL2_Config+0x160>)
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	69d2      	ldr	r2, [r2, #28]
 800814a:	00d2      	lsls	r2, r2, #3
 800814c:	4920      	ldr	r1, [pc, #128]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800814e:	4313      	orrs	r3, r2
 8008150:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008152:	4b1f      	ldr	r3, [pc, #124]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008158:	f043 0310 	orr.w	r3, r3, #16
 800815c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008164:	4b1a      	ldr	r3, [pc, #104]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	4a19      	ldr	r2, [pc, #100]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800816a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008170:	e00f      	b.n	8008192 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d106      	bne.n	8008186 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008178:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a14      	ldr	r2, [pc, #80]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800817e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008184:	e005      	b.n	8008192 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008186:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 800818c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008190:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008192:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a0e      	ldr	r2, [pc, #56]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 8008198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800819c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819e:	f7f9 fb4d 	bl	800183c <HAL_GetTick>
 80081a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081a4:	e008      	b.n	80081b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081a6:	f7f9 fb49 	bl	800183c <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d901      	bls.n	80081b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e006      	b.n	80081c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <RCCEx_PLL2_Config+0x15c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f0      	beq.n	80081a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
 80081d4:	ffff0007 	.word	0xffff0007

080081d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081e6:	4b53      	ldr	r3, [pc, #332]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d101      	bne.n	80081f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e099      	b.n	800832a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081f6:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a4e      	ldr	r2, [pc, #312]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008202:	f7f9 fb1b 	bl	800183c <HAL_GetTick>
 8008206:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008208:	e008      	b.n	800821c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800820a:	f7f9 fb17 	bl	800183c <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d901      	bls.n	800821c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e086      	b.n	800832a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800821c:	4b45      	ldr	r3, [pc, #276]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f0      	bne.n	800820a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008228:	4b42      	ldr	r3, [pc, #264]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	051b      	lsls	r3, r3, #20
 8008236:	493f      	ldr	r1, [pc, #252]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 8008238:	4313      	orrs	r3, r2
 800823a:	628b      	str	r3, [r1, #40]	; 0x28
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	3b01      	subs	r3, #1
 8008242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	3b01      	subs	r3, #1
 800824c:	025b      	lsls	r3, r3, #9
 800824e:	b29b      	uxth	r3, r3
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	3b01      	subs	r3, #1
 8008258:	041b      	lsls	r3, r3, #16
 800825a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	3b01      	subs	r3, #1
 8008266:	061b      	lsls	r3, r3, #24
 8008268:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800826c:	4931      	ldr	r1, [pc, #196]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 800826e:	4313      	orrs	r3, r2
 8008270:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008272:	4b30      	ldr	r3, [pc, #192]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 8008274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008276:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	492d      	ldr	r1, [pc, #180]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 8008280:	4313      	orrs	r3, r2
 8008282:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008284:	4b2b      	ldr	r3, [pc, #172]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	4928      	ldr	r1, [pc, #160]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 8008292:	4313      	orrs	r3, r2
 8008294:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008296:	4b27      	ldr	r3, [pc, #156]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	4a26      	ldr	r2, [pc, #152]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 800829c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a6:	4b24      	ldr	r3, [pc, #144]	; (8008338 <RCCEx_PLL3_Config+0x160>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	69d2      	ldr	r2, [r2, #28]
 80082ae:	00d2      	lsls	r2, r2, #3
 80082b0:	4920      	ldr	r1, [pc, #128]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082b6:	4b1f      	ldr	r3, [pc, #124]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	4a1e      	ldr	r2, [pc, #120]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	4a19      	ldr	r2, [pc, #100]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082d4:	e00f      	b.n	80082f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d106      	bne.n	80082ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082dc:	4b15      	ldr	r3, [pc, #84]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	4a14      	ldr	r2, [pc, #80]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082e8:	e005      	b.n	80082f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	4a11      	ldr	r2, [pc, #68]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a0e      	ldr	r2, [pc, #56]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008302:	f7f9 fa9b 	bl	800183c <HAL_GetTick>
 8008306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008308:	e008      	b.n	800831c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800830a:	f7f9 fa97 	bl	800183c <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e006      	b.n	800832a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <RCCEx_PLL3_Config+0x15c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0f0      	beq.n	800830a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	58024400 	.word	0x58024400
 8008338:	ffff0007 	.word	0xffff0007

0800833c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e0e2      	b.n	8008518 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a70      	ldr	r2, [pc, #448]	; (8008520 <HAL_SPI_Init+0x1e4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00f      	beq.n	8008382 <HAL_SPI_Init+0x46>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a6f      	ldr	r2, [pc, #444]	; (8008524 <HAL_SPI_Init+0x1e8>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00a      	beq.n	8008382 <HAL_SPI_Init+0x46>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a6d      	ldr	r2, [pc, #436]	; (8008528 <HAL_SPI_Init+0x1ec>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d005      	beq.n	8008382 <HAL_SPI_Init+0x46>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b0f      	cmp	r3, #15
 800837c:	d901      	bls.n	8008382 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e0ca      	b.n	8008518 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f8d2 	bl	800852c <SPI_GetPacketSize>
 8008388:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a64      	ldr	r2, [pc, #400]	; (8008520 <HAL_SPI_Init+0x1e4>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00c      	beq.n	80083ae <HAL_SPI_Init+0x72>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a62      	ldr	r2, [pc, #392]	; (8008524 <HAL_SPI_Init+0x1e8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d007      	beq.n	80083ae <HAL_SPI_Init+0x72>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a61      	ldr	r2, [pc, #388]	; (8008528 <HAL_SPI_Init+0x1ec>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d002      	beq.n	80083ae <HAL_SPI_Init+0x72>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b08      	cmp	r3, #8
 80083ac:	d811      	bhi.n	80083d2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083b2:	4a5b      	ldr	r2, [pc, #364]	; (8008520 <HAL_SPI_Init+0x1e4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d009      	beq.n	80083cc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a59      	ldr	r2, [pc, #356]	; (8008524 <HAL_SPI_Init+0x1e8>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d004      	beq.n	80083cc <HAL_SPI_Init+0x90>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a58      	ldr	r2, [pc, #352]	; (8008528 <HAL_SPI_Init+0x1ec>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d104      	bne.n	80083d6 <HAL_SPI_Init+0x9a>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d901      	bls.n	80083d6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e0a0      	b.n	8008518 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7f8 fda4 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0201 	bic.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008410:	d110      	bne.n	8008434 <HAL_SPI_Init+0xf8>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800841a:	d10b      	bne.n	8008434 <HAL_SPI_Init+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d107      	bne.n	8008434 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008432:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	431a      	orrs	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	ea42 0103 	orr.w	r1, r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	431a      	orrs	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008494:	ea42 0103 	orr.w	r1, r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d113      	bne.n	80084d4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084be:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0201 	bic.w	r2, r2, #1
 80084e2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40013000 	.word	0x40013000
 8008524:	40003800 	.word	0x40003800
 8008528:	40003c00 	.word	0x40003c00

0800852c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008538:	095b      	lsrs	r3, r3, #5
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	3307      	adds	r3, #7
 800854a:	08db      	lsrs	r3, r3, #3
 800854c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	fb02 f303 	mul.w	r3, r2, r3
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e049      	b.n	8008608 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7f8 ff49 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f000 fb4d 	bl	8008c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e049      	b.n	80086b6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d106      	bne.n	800863c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f841 	bl	80086be <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3304      	adds	r3, #4
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f000 faf6 	bl	8008c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e049      	b.n	8008778 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f841 	bl	8008780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2202      	movs	r2, #2
 8008702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3304      	adds	r3, #4
 800870e:	4619      	mov	r1, r3
 8008710:	4610      	mov	r0, r2
 8008712:	f000 fa95 	bl	8008c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_TIM_OC_ConfigChannel+0x1a>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e064      	b.n	8008878 <HAL_TIM_OC_ConfigChannel+0xe4>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b14      	cmp	r3, #20
 80087ba:	d857      	bhi.n	800886c <HAL_TIM_OC_ConfigChannel+0xd8>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <HAL_TIM_OC_ConfigChannel+0x30>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	08008819 	.word	0x08008819
 80087c8:	0800886d 	.word	0x0800886d
 80087cc:	0800886d 	.word	0x0800886d
 80087d0:	0800886d 	.word	0x0800886d
 80087d4:	08008827 	.word	0x08008827
 80087d8:	0800886d 	.word	0x0800886d
 80087dc:	0800886d 	.word	0x0800886d
 80087e0:	0800886d 	.word	0x0800886d
 80087e4:	08008835 	.word	0x08008835
 80087e8:	0800886d 	.word	0x0800886d
 80087ec:	0800886d 	.word	0x0800886d
 80087f0:	0800886d 	.word	0x0800886d
 80087f4:	08008843 	.word	0x08008843
 80087f8:	0800886d 	.word	0x0800886d
 80087fc:	0800886d 	.word	0x0800886d
 8008800:	0800886d 	.word	0x0800886d
 8008804:	08008851 	.word	0x08008851
 8008808:	0800886d 	.word	0x0800886d
 800880c:	0800886d 	.word	0x0800886d
 8008810:	0800886d 	.word	0x0800886d
 8008814:	0800885f 	.word	0x0800885f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 faa8 	bl	8008d74 <TIM_OC1_SetConfig>
      break;
 8008824:	e023      	b.n	800886e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 fb31 	bl	8008e94 <TIM_OC2_SetConfig>
      break;
 8008832:	e01c      	b.n	800886e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fbb4 	bl	8008fa8 <TIM_OC3_SetConfig>
      break;
 8008840:	e015      	b.n	800886e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fc33 	bl	80090b4 <TIM_OC4_SetConfig>
      break;
 800884e:	e00e      	b.n	800886e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fc94 	bl	8009184 <TIM_OC5_SetConfig>
      break;
 800885c:	e007      	b.n	800886e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fcef 	bl	8009248 <TIM_OC6_SetConfig>
      break;
 800886a:	e000      	b.n	800886e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800886c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008892:	2b01      	cmp	r3, #1
 8008894:	d101      	bne.n	800889a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008896:	2302      	movs	r3, #2
 8008898:	e0fd      	b.n	8008a96 <HAL_TIM_PWM_ConfigChannel+0x216>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b14      	cmp	r3, #20
 80088a6:	f200 80f0 	bhi.w	8008a8a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	08008905 	.word	0x08008905
 80088b4:	08008a8b 	.word	0x08008a8b
 80088b8:	08008a8b 	.word	0x08008a8b
 80088bc:	08008a8b 	.word	0x08008a8b
 80088c0:	08008945 	.word	0x08008945
 80088c4:	08008a8b 	.word	0x08008a8b
 80088c8:	08008a8b 	.word	0x08008a8b
 80088cc:	08008a8b 	.word	0x08008a8b
 80088d0:	08008987 	.word	0x08008987
 80088d4:	08008a8b 	.word	0x08008a8b
 80088d8:	08008a8b 	.word	0x08008a8b
 80088dc:	08008a8b 	.word	0x08008a8b
 80088e0:	080089c7 	.word	0x080089c7
 80088e4:	08008a8b 	.word	0x08008a8b
 80088e8:	08008a8b 	.word	0x08008a8b
 80088ec:	08008a8b 	.word	0x08008a8b
 80088f0:	08008a09 	.word	0x08008a09
 80088f4:	08008a8b 	.word	0x08008a8b
 80088f8:	08008a8b 	.word	0x08008a8b
 80088fc:	08008a8b 	.word	0x08008a8b
 8008900:	08008a49 	.word	0x08008a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fa32 	bl	8008d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699a      	ldr	r2, [r3, #24]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0208 	orr.w	r2, r2, #8
 800891e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699a      	ldr	r2, [r3, #24]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0204 	bic.w	r2, r2, #4
 800892e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6999      	ldr	r1, [r3, #24]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	619a      	str	r2, [r3, #24]
      break;
 8008942:	e0a3      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 faa2 	bl	8008e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699a      	ldr	r2, [r3, #24]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6999      	ldr	r1, [r3, #24]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	021a      	lsls	r2, r3, #8
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	619a      	str	r2, [r3, #24]
      break;
 8008984:	e082      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fb0b 	bl	8008fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0208 	orr.w	r2, r2, #8
 80089a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 0204 	bic.w	r2, r2, #4
 80089b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69d9      	ldr	r1, [r3, #28]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	61da      	str	r2, [r3, #28]
      break;
 80089c4:	e062      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fb71 	bl	80090b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69da      	ldr	r2, [r3, #28]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69da      	ldr	r2, [r3, #28]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69d9      	ldr	r1, [r3, #28]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	021a      	lsls	r2, r3, #8
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	61da      	str	r2, [r3, #28]
      break;
 8008a06:	e041      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fbb8 	bl	8009184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0208 	orr.w	r2, r2, #8
 8008a22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0204 	bic.w	r2, r2, #4
 8008a32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	691a      	ldr	r2, [r3, #16]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a46:	e021      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fbfa 	bl	8009248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	021a      	lsls	r2, r3, #8
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a88:	e000      	b.n	8008a8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008a8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop

08008aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_TIM_ConfigClockSource+0x18>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0b7      	b.n	8008c28 <HAL_TIM_ConfigClockSource+0x188>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4b57      	ldr	r3, [pc, #348]	; (8008c30 <HAL_TIM_ConfigClockSource+0x190>)
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ade:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b70      	cmp	r3, #112	; 0x70
 8008aee:	d02e      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0xae>
 8008af0:	2b70      	cmp	r3, #112	; 0x70
 8008af2:	d812      	bhi.n	8008b1a <HAL_TIM_ConfigClockSource+0x7a>
 8008af4:	2b30      	cmp	r3, #48	; 0x30
 8008af6:	f000 8084 	beq.w	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008afa:	2b30      	cmp	r3, #48	; 0x30
 8008afc:	d806      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x6c>
 8008afe:	2b10      	cmp	r3, #16
 8008b00:	d07f      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008b02:	2b20      	cmp	r3, #32
 8008b04:	d07d      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d07b      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008b0a:	e084      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b0c:	2b50      	cmp	r3, #80	; 0x50
 8008b0e:	d048      	beq.n	8008ba2 <HAL_TIM_ConfigClockSource+0x102>
 8008b10:	2b60      	cmp	r3, #96	; 0x60
 8008b12:	d056      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x122>
 8008b14:	2b40      	cmp	r3, #64	; 0x40
 8008b16:	d064      	beq.n	8008be2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008b18:	e07d      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b1a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b1e:	d070      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008b20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b24:	d809      	bhi.n	8008b3a <HAL_TIM_ConfigClockSource+0x9a>
 8008b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2a:	d027      	beq.n	8008b7c <HAL_TIM_ConfigClockSource+0xdc>
 8008b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b30:	d067      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	d06d      	beq.n	8008c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b38:	e06d      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b3a:	4a3e      	ldr	r2, [pc, #248]	; (8008c34 <HAL_TIM_ConfigClockSource+0x194>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d060      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008b40:	4a3d      	ldr	r2, [pc, #244]	; (8008c38 <HAL_TIM_ConfigClockSource+0x198>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d05d      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
 8008b46:	4a3d      	ldr	r2, [pc, #244]	; (8008c3c <HAL_TIM_ConfigClockSource+0x19c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d05a      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008b4c:	e063      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6899      	ldr	r1, [r3, #8]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f000 fc55 	bl	800940c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	609a      	str	r2, [r3, #8]
      break;
 8008b7a:	e04c      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6899      	ldr	r1, [r3, #8]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f000 fc3e 	bl	800940c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b9e:	609a      	str	r2, [r3, #8]
      break;
 8008ba0:	e039      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	6859      	ldr	r1, [r3, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f000 fbae 	bl	8009310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2150      	movs	r1, #80	; 0x50
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fc08 	bl	80093d0 <TIM_ITRx_SetConfig>
      break;
 8008bc0:	e029      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6859      	ldr	r1, [r3, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f000 fbcd 	bl	800936e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2160      	movs	r1, #96	; 0x60
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fbf8 	bl	80093d0 <TIM_ITRx_SetConfig>
      break;
 8008be0:	e019      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	6859      	ldr	r1, [r3, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f000 fb8e 	bl	8009310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2140      	movs	r1, #64	; 0x40
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fbe8 	bl	80093d0 <TIM_ITRx_SetConfig>
      break;
 8008c00:	e009      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f000 fbdf 	bl	80093d0 <TIM_ITRx_SetConfig>
      break;
 8008c12:	e000      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008c14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	ffceff88 	.word	0xffceff88
 8008c34:	00100030 	.word	0x00100030
 8008c38:	00100040 	.word	0x00100040
 8008c3c:	00100020 	.word	0x00100020

08008c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a40      	ldr	r2, [pc, #256]	; (8008d54 <TIM_Base_SetConfig+0x114>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d013      	beq.n	8008c80 <TIM_Base_SetConfig+0x40>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5e:	d00f      	beq.n	8008c80 <TIM_Base_SetConfig+0x40>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a3d      	ldr	r2, [pc, #244]	; (8008d58 <TIM_Base_SetConfig+0x118>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00b      	beq.n	8008c80 <TIM_Base_SetConfig+0x40>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a3c      	ldr	r2, [pc, #240]	; (8008d5c <TIM_Base_SetConfig+0x11c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d007      	beq.n	8008c80 <TIM_Base_SetConfig+0x40>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a3b      	ldr	r2, [pc, #236]	; (8008d60 <TIM_Base_SetConfig+0x120>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d003      	beq.n	8008c80 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a3a      	ldr	r2, [pc, #232]	; (8008d64 <TIM_Base_SetConfig+0x124>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d108      	bne.n	8008c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a2f      	ldr	r2, [pc, #188]	; (8008d54 <TIM_Base_SetConfig+0x114>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d01f      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca0:	d01b      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a2c      	ldr	r2, [pc, #176]	; (8008d58 <TIM_Base_SetConfig+0x118>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d017      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2b      	ldr	r2, [pc, #172]	; (8008d5c <TIM_Base_SetConfig+0x11c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a2a      	ldr	r2, [pc, #168]	; (8008d60 <TIM_Base_SetConfig+0x120>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00f      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a29      	ldr	r2, [pc, #164]	; (8008d64 <TIM_Base_SetConfig+0x124>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00b      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a28      	ldr	r2, [pc, #160]	; (8008d68 <TIM_Base_SetConfig+0x128>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a27      	ldr	r2, [pc, #156]	; (8008d6c <TIM_Base_SetConfig+0x12c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <TIM_Base_SetConfig+0x9a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a26      	ldr	r2, [pc, #152]	; (8008d70 <TIM_Base_SetConfig+0x130>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d108      	bne.n	8008cec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <TIM_Base_SetConfig+0x114>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00f      	beq.n	8008d38 <TIM_Base_SetConfig+0xf8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a12      	ldr	r2, [pc, #72]	; (8008d64 <TIM_Base_SetConfig+0x124>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00b      	beq.n	8008d38 <TIM_Base_SetConfig+0xf8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a11      	ldr	r2, [pc, #68]	; (8008d68 <TIM_Base_SetConfig+0x128>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <TIM_Base_SetConfig+0xf8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <TIM_Base_SetConfig+0x12c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_Base_SetConfig+0xf8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a0f      	ldr	r2, [pc, #60]	; (8008d70 <TIM_Base_SetConfig+0x130>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d103      	bne.n	8008d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	615a      	str	r2, [r3, #20]
}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40014400 	.word	0x40014400
 8008d70:	40014800 	.word	0x40014800

08008d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	f023 0201 	bic.w	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4b37      	ldr	r3, [pc, #220]	; (8008e7c <TIM_OC1_SetConfig+0x108>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f023 0302 	bic.w	r3, r3, #2
 8008dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a2d      	ldr	r2, [pc, #180]	; (8008e80 <TIM_OC1_SetConfig+0x10c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00f      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a2c      	ldr	r2, [pc, #176]	; (8008e84 <TIM_OC1_SetConfig+0x110>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a2b      	ldr	r2, [pc, #172]	; (8008e88 <TIM_OC1_SetConfig+0x114>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <TIM_OC1_SetConfig+0x118>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_OC1_SetConfig+0x7c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a29      	ldr	r2, [pc, #164]	; (8008e90 <TIM_OC1_SetConfig+0x11c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d10c      	bne.n	8008e0a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f023 0308 	bic.w	r3, r3, #8
 8008df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f023 0304 	bic.w	r3, r3, #4
 8008e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <TIM_OC1_SetConfig+0x10c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00f      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1b      	ldr	r2, [pc, #108]	; (8008e84 <TIM_OC1_SetConfig+0x110>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00b      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1a      	ldr	r2, [pc, #104]	; (8008e88 <TIM_OC1_SetConfig+0x114>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d007      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a19      	ldr	r2, [pc, #100]	; (8008e8c <TIM_OC1_SetConfig+0x118>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d003      	beq.n	8008e32 <TIM_OC1_SetConfig+0xbe>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a18      	ldr	r2, [pc, #96]	; (8008e90 <TIM_OC1_SetConfig+0x11c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d111      	bne.n	8008e56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	621a      	str	r2, [r3, #32]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	fffeff8f 	.word	0xfffeff8f
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40010400 	.word	0x40010400
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40014400 	.word	0x40014400
 8008e90:	40014800 	.word	0x40014800

08008e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f023 0210 	bic.w	r2, r3, #16
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	4b34      	ldr	r3, [pc, #208]	; (8008f90 <TIM_OC2_SetConfig+0xfc>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f023 0320 	bic.w	r3, r3, #32
 8008ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a29      	ldr	r2, [pc, #164]	; (8008f94 <TIM_OC2_SetConfig+0x100>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC2_SetConfig+0x68>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a28      	ldr	r2, [pc, #160]	; (8008f98 <TIM_OC2_SetConfig+0x104>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d10d      	bne.n	8008f18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <TIM_OC2_SetConfig+0x100>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00f      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a1d      	ldr	r2, [pc, #116]	; (8008f98 <TIM_OC2_SetConfig+0x104>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00b      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a1c      	ldr	r2, [pc, #112]	; (8008f9c <TIM_OC2_SetConfig+0x108>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d007      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <TIM_OC2_SetConfig+0x10c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_OC2_SetConfig+0xac>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1a      	ldr	r2, [pc, #104]	; (8008fa4 <TIM_OC2_SetConfig+0x110>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d113      	bne.n	8008f68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	621a      	str	r2, [r3, #32]
}
 8008f82:	bf00      	nop
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	feff8fff 	.word	0xfeff8fff
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40014400 	.word	0x40014400
 8008fa4:	40014800 	.word	0x40014800

08008fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a27      	ldr	r2, [pc, #156]	; (80090a0 <TIM_OC3_SetConfig+0xf8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d003      	beq.n	800900e <TIM_OC3_SetConfig+0x66>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a26      	ldr	r2, [pc, #152]	; (80090a4 <TIM_OC3_SetConfig+0xfc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d10d      	bne.n	800902a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a1c      	ldr	r2, [pc, #112]	; (80090a0 <TIM_OC3_SetConfig+0xf8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00f      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a1b      	ldr	r2, [pc, #108]	; (80090a4 <TIM_OC3_SetConfig+0xfc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00b      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1a      	ldr	r2, [pc, #104]	; (80090a8 <TIM_OC3_SetConfig+0x100>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d007      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a19      	ldr	r2, [pc, #100]	; (80090ac <TIM_OC3_SetConfig+0x104>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d003      	beq.n	8009052 <TIM_OC3_SetConfig+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <TIM_OC3_SetConfig+0x108>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d113      	bne.n	800907a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	621a      	str	r2, [r3, #32]
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	40010000 	.word	0x40010000
 80090a4:	40010400 	.word	0x40010400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400
 80090b0:	40014800 	.word	0x40014800

080090b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	031b      	lsls	r3, r3, #12
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a18      	ldr	r2, [pc, #96]	; (8009170 <TIM_OC4_SetConfig+0xbc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00f      	beq.n	8009134 <TIM_OC4_SetConfig+0x80>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a17      	ldr	r2, [pc, #92]	; (8009174 <TIM_OC4_SetConfig+0xc0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00b      	beq.n	8009134 <TIM_OC4_SetConfig+0x80>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a16      	ldr	r2, [pc, #88]	; (8009178 <TIM_OC4_SetConfig+0xc4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d007      	beq.n	8009134 <TIM_OC4_SetConfig+0x80>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a15      	ldr	r2, [pc, #84]	; (800917c <TIM_OC4_SetConfig+0xc8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d003      	beq.n	8009134 <TIM_OC4_SetConfig+0x80>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a14      	ldr	r2, [pc, #80]	; (8009180 <TIM_OC4_SetConfig+0xcc>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d109      	bne.n	8009148 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800913a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	019b      	lsls	r3, r3, #6
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	4313      	orrs	r3, r2
 8009146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000
 8009174:	40010400 	.word	0x40010400
 8009178:	40014000 	.word	0x40014000
 800917c:	40014400 	.word	0x40014400
 8009180:	40014800 	.word	0x40014800

08009184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	041b      	lsls	r3, r3, #16
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a17      	ldr	r2, [pc, #92]	; (8009234 <TIM_OC5_SetConfig+0xb0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00f      	beq.n	80091fa <TIM_OC5_SetConfig+0x76>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a16      	ldr	r2, [pc, #88]	; (8009238 <TIM_OC5_SetConfig+0xb4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d00b      	beq.n	80091fa <TIM_OC5_SetConfig+0x76>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a15      	ldr	r2, [pc, #84]	; (800923c <TIM_OC5_SetConfig+0xb8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d007      	beq.n	80091fa <TIM_OC5_SetConfig+0x76>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a14      	ldr	r2, [pc, #80]	; (8009240 <TIM_OC5_SetConfig+0xbc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d003      	beq.n	80091fa <TIM_OC5_SetConfig+0x76>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a13      	ldr	r2, [pc, #76]	; (8009244 <TIM_OC5_SetConfig+0xc0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d109      	bne.n	800920e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009200:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	021b      	lsls	r3, r3, #8
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	4313      	orrs	r3, r2
 800920c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	621a      	str	r2, [r3, #32]
}
 8009228:	bf00      	nop
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	40010000 	.word	0x40010000
 8009238:	40010400 	.word	0x40010400
 800923c:	40014000 	.word	0x40014000
 8009240:	40014400 	.word	0x40014400
 8009244:	40014800 	.word	0x40014800

08009248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800928a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	051b      	lsls	r3, r3, #20
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a18      	ldr	r2, [pc, #96]	; (80092fc <TIM_OC6_SetConfig+0xb4>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00f      	beq.n	80092c0 <TIM_OC6_SetConfig+0x78>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a17      	ldr	r2, [pc, #92]	; (8009300 <TIM_OC6_SetConfig+0xb8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00b      	beq.n	80092c0 <TIM_OC6_SetConfig+0x78>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a16      	ldr	r2, [pc, #88]	; (8009304 <TIM_OC6_SetConfig+0xbc>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d007      	beq.n	80092c0 <TIM_OC6_SetConfig+0x78>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a15      	ldr	r2, [pc, #84]	; (8009308 <TIM_OC6_SetConfig+0xc0>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_OC6_SetConfig+0x78>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a14      	ldr	r2, [pc, #80]	; (800930c <TIM_OC6_SetConfig+0xc4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d109      	bne.n	80092d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	029b      	lsls	r3, r3, #10
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	621a      	str	r2, [r3, #32]
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40010000 	.word	0x40010000
 8009300:	40010400 	.word	0x40010400
 8009304:	40014000 	.word	0x40014000
 8009308:	40014400 	.word	0x40014400
 800930c:	40014800 	.word	0x40014800

08009310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800933a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 030a 	bic.w	r3, r3, #10
 800934c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	621a      	str	r2, [r3, #32]
}
 8009362:	bf00      	nop
 8009364:	371c      	adds	r7, #28
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936e:	b480      	push	{r7}
 8009370:	b087      	sub	sp, #28
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0210 	bic.w	r2, r3, #16
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	031b      	lsls	r3, r3, #12
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
	...

080093d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <TIM_ITRx_SetConfig+0x38>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f043 0307 	orr.w	r3, r3, #7
 80093f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	609a      	str	r2, [r3, #8]
}
 80093fa:	bf00      	nop
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	ffcfff8f 	.word	0xffcfff8f

0800940c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	021a      	lsls	r2, r3, #8
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	431a      	orrs	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4313      	orrs	r3, r2
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4313      	orrs	r3, r2
 8009438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	609a      	str	r2, [r3, #8]
}
 8009440:	bf00      	nop
 8009442:	371c      	adds	r7, #28
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945c:	2b01      	cmp	r3, #1
 800945e:	d101      	bne.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009460:	2302      	movs	r3, #2
 8009462:	e068      	b.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a2e      	ldr	r2, [pc, #184]	; (8009544 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d004      	beq.n	8009498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a2d      	ldr	r2, [pc, #180]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d108      	bne.n	80094aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800949e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d01d      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d6:	d018      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1b      	ldr	r2, [pc, #108]	; (800954c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d013      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a1a      	ldr	r2, [pc, #104]	; (8009550 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d00e      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a18      	ldr	r2, [pc, #96]	; (8009554 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d009      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a13      	ldr	r2, [pc, #76]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d004      	beq.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a14      	ldr	r2, [pc, #80]	; (8009558 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d10c      	bne.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	4313      	orrs	r3, r2
 800951a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	40010000 	.word	0x40010000
 8009548:	40010400 	.word	0x40010400
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40001800 	.word	0x40001800

0800955c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e042      	b.n	80095f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7f8 f859 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2224      	movs	r2, #36	; 0x24
 800958a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb2e 	bl	8009c00 <UART_SetConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e022      	b.n	80095f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 f8d2 	bl	800a760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 f959 	bl	800a8a4 <UART_CheckIdleState>
 80095f2:	4603      	mov	r3, r0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08a      	sub	sp, #40	; 0x28
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	4613      	mov	r3, r2
 800960a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009612:	2b20      	cmp	r3, #32
 8009614:	f040 8083 	bne.w	800971e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <HAL_UART_Transmit+0x28>
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e07b      	b.n	8009720 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_UART_Transmit+0x3a>
 8009632:	2302      	movs	r3, #2
 8009634:	e074      	b.n	8009720 <HAL_UART_Transmit+0x124>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2221      	movs	r2, #33	; 0x21
 800964a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800964e:	f7f8 f8f5 	bl	800183c <HAL_GetTick>
 8009652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	88fa      	ldrh	r2, [r7, #6]
 8009660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800966c:	d108      	bne.n	8009680 <HAL_UART_Transmit+0x84>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d104      	bne.n	8009680 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e003      	b.n	8009688 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009690:	e02c      	b.n	80096ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2200      	movs	r2, #0
 800969a:	2180      	movs	r1, #128	; 0x80
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f001 f949 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e039      	b.n	8009720 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10b      	bne.n	80096ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	3302      	adds	r3, #2
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	e007      	b.n	80096da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	781a      	ldrb	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	3301      	adds	r3, #1
 80096d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1cc      	bne.n	8009692 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2200      	movs	r2, #0
 8009700:	2140      	movs	r1, #64	; 0x40
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f001 f916 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e006      	b.n	8009720 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	e000      	b.n	8009720 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800971e:	2302      	movs	r3, #2
  }
}
 8009720:	4618      	mov	r0, r3
 8009722:	3720      	adds	r7, #32
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4613      	mov	r3, r2
 8009734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800973c:	2b20      	cmp	r3, #32
 800973e:	f040 80bc 	bne.w	80098ba <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <HAL_UART_Receive_IT+0x26>
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e0b4      	b.n	80098bc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_UART_Receive_IT+0x38>
 800975c:	2302      	movs	r3, #2
 800975e:	e0ad      	b.n	80098bc <HAL_UART_Receive_IT+0x194>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	88fa      	ldrh	r2, [r7, #6]
 8009772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800978c:	d10e      	bne.n	80097ac <HAL_UART_Receive_IT+0x84>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <HAL_UART_Receive_IT+0x7a>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f240 12ff 	movw	r2, #511	; 0x1ff
 800979c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097a0:	e02d      	b.n	80097fe <HAL_UART_Receive_IT+0xd6>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	22ff      	movs	r2, #255	; 0xff
 80097a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097aa:	e028      	b.n	80097fe <HAL_UART_Receive_IT+0xd6>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10d      	bne.n	80097d0 <HAL_UART_Receive_IT+0xa8>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <HAL_UART_Receive_IT+0x9e>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	22ff      	movs	r2, #255	; 0xff
 80097c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097c4:	e01b      	b.n	80097fe <HAL_UART_Receive_IT+0xd6>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	227f      	movs	r2, #127	; 0x7f
 80097ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097ce:	e016      	b.n	80097fe <HAL_UART_Receive_IT+0xd6>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097d8:	d10d      	bne.n	80097f6 <HAL_UART_Receive_IT+0xce>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d104      	bne.n	80097ec <HAL_UART_Receive_IT+0xc4>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	227f      	movs	r2, #127	; 0x7f
 80097e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097ea:	e008      	b.n	80097fe <HAL_UART_Receive_IT+0xd6>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	223f      	movs	r2, #63	; 0x3f
 80097f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097f4:	e003      	b.n	80097fe <HAL_UART_Receive_IT+0xd6>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2222      	movs	r2, #34	; 0x22
 800980a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0201 	orr.w	r2, r2, #1
 800981c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009826:	d12a      	bne.n	800987e <HAL_UART_Receive_IT+0x156>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	429a      	cmp	r2, r3
 8009832:	d324      	bcc.n	800987e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800983c:	d107      	bne.n	800984e <HAL_UART_Receive_IT+0x126>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4a1f      	ldr	r2, [pc, #124]	; (80098c8 <HAL_UART_Receive_IT+0x1a0>)
 800984a:	66da      	str	r2, [r3, #108]	; 0x6c
 800984c:	e002      	b.n	8009854 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <HAL_UART_Receive_IT+0x1a4>)
 8009852:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800986a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	e01b      	b.n	80098b6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009886:	d107      	bne.n	8009898 <HAL_UART_Receive_IT+0x170>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d103      	bne.n	8009898 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a0f      	ldr	r2, [pc, #60]	; (80098d0 <HAL_UART_Receive_IT+0x1a8>)
 8009894:	66da      	str	r2, [r3, #108]	; 0x6c
 8009896:	e002      	b.n	800989e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4a0e      	ldr	r2, [pc, #56]	; (80098d4 <HAL_UART_Receive_IT+0x1ac>)
 800989c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80098b4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80098ba:	2302      	movs	r3, #2
  }
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	0800ad39 	.word	0x0800ad39
 80098cc:	0800ac31 	.word	0x0800ac31
 80098d0:	0800ab87 	.word	0x0800ab87
 80098d4:	0800aadd 	.word	0x0800aadd

080098d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80098fe:	4013      	ands	r3, r2
 8009900:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d118      	bne.n	800993a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d013      	beq.n	800993a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8145 	beq.w	8009bba <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
      }
      return;
 8009938:	e13f      	b.n	8009bba <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80e8 	beq.w	8009b12 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4ba1      	ldr	r3, [pc, #644]	; (8009bcc <HAL_UART_IRQHandler+0x2f4>)
 8009946:	4013      	ands	r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d105      	bne.n	8009958 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	4ba0      	ldr	r3, [pc, #640]	; (8009bd0 <HAL_UART_IRQHandler+0x2f8>)
 8009950:	4013      	ands	r3, r2
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 80dd 	beq.w	8009b12 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d010      	beq.n	8009984 <HAL_UART_IRQHandler+0xac>
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00b      	beq.n	8009984 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2201      	movs	r2, #1
 8009972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	f043 0201 	orr.w	r2, r3, #1
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d010      	beq.n	80099b0 <HAL_UART_IRQHandler+0xd8>
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2202      	movs	r2, #2
 800999e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a6:	f043 0204 	orr.w	r2, r3, #4
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <HAL_UART_IRQHandler+0x104>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2204      	movs	r2, #4
 80099ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099d2:	f043 0202 	orr.w	r2, r3, #2
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f003 0308 	and.w	r3, r3, #8
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d015      	beq.n	8009a12 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d104      	bne.n	80099fa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	4b76      	ldr	r3, [pc, #472]	; (8009bcc <HAL_UART_IRQHandler+0x2f4>)
 80099f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2208      	movs	r2, #8
 8009a00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a08:	f043 0208 	orr.w	r2, r3, #8
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d011      	beq.n	8009a40 <HAL_UART_IRQHandler+0x168>
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00c      	beq.n	8009a40 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a36:	f043 0220 	orr.w	r2, r3, #32
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 80b9 	beq.w	8009bbe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d011      	beq.n	8009a7a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a80:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d004      	beq.n	8009a9a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d031      	beq.n	8009afe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 ffca 	bl	800aa34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aaa:	2b40      	cmp	r3, #64	; 0x40
 8009aac:	d123      	bne.n	8009af6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009abc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d013      	beq.n	8009aee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aca:	4a42      	ldr	r2, [pc, #264]	; (8009bd4 <HAL_UART_IRQHandler+0x2fc>)
 8009acc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f9 fc02 	bl	80032dc <HAL_DMA_Abort_IT>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d017      	beq.n	8009b0e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aec:	e00f      	b.n	8009b0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f87c 	bl	8009bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af4:	e00b      	b.n	8009b0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f878 	bl	8009bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afc:	e007      	b.n	8009b0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f874 	bl	8009bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009b0c:	e057      	b.n	8009bbe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0e:	bf00      	nop
    return;
 8009b10:	e055      	b.n	8009bbe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00d      	beq.n	8009b38 <HAL_UART_IRQHandler+0x260>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d008      	beq.n	8009b38 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 f985 	bl	800ae40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b36:	e045      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d012      	beq.n	8009b68 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d031      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
    }
    return;
 8009b66:	e02c      	b.n	8009bc2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <HAL_UART_IRQHandler+0x2ac>
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 ff93 	bl	800aaa8 <UART_EndTransmit_IT>
    return;
 8009b82:	e01f      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d008      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x2c8>
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 f965 	bl	800ae68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b9e:	e011      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00c      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	da09      	bge.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f94f 	bl	800ae54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bb6:	bf00      	nop
 8009bb8:	e004      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009bc2:	bf00      	nop
  }
}
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	10000001 	.word	0x10000001
 8009bd0:	04000120 	.word	0x04000120
 8009bd4:	0800aa7d 	.word	0x0800aa7d

08009bd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009c04:	b08e      	sub	sp, #56	; 0x38
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	4bc1      	ldr	r3, [pc, #772]	; (8009f40 <UART_SetConfig+0x340>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6812      	ldr	r2, [r2, #0]
 8009c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c42:	430b      	orrs	r3, r1
 8009c44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4ab7      	ldr	r2, [pc, #732]	; (8009f44 <UART_SetConfig+0x344>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c72:	4313      	orrs	r3, r2
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	4bb2      	ldr	r3, [pc, #712]	; (8009f48 <UART_SetConfig+0x348>)
 8009c7e:	4013      	ands	r3, r2
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	6812      	ldr	r2, [r2, #0]
 8009c84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c86:	430b      	orrs	r3, r1
 8009c88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	f023 010f 	bic.w	r1, r3, #15
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4aa9      	ldr	r2, [pc, #676]	; (8009f4c <UART_SetConfig+0x34c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d177      	bne.n	8009d9a <UART_SetConfig+0x19a>
 8009caa:	4ba9      	ldr	r3, [pc, #676]	; (8009f50 <UART_SetConfig+0x350>)
 8009cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cb2:	2b28      	cmp	r3, #40	; 0x28
 8009cb4:	d86c      	bhi.n	8009d90 <UART_SetConfig+0x190>
 8009cb6:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <UART_SetConfig+0xbc>)
 8009cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbc:	08009d61 	.word	0x08009d61
 8009cc0:	08009d91 	.word	0x08009d91
 8009cc4:	08009d91 	.word	0x08009d91
 8009cc8:	08009d91 	.word	0x08009d91
 8009ccc:	08009d91 	.word	0x08009d91
 8009cd0:	08009d91 	.word	0x08009d91
 8009cd4:	08009d91 	.word	0x08009d91
 8009cd8:	08009d91 	.word	0x08009d91
 8009cdc:	08009d69 	.word	0x08009d69
 8009ce0:	08009d91 	.word	0x08009d91
 8009ce4:	08009d91 	.word	0x08009d91
 8009ce8:	08009d91 	.word	0x08009d91
 8009cec:	08009d91 	.word	0x08009d91
 8009cf0:	08009d91 	.word	0x08009d91
 8009cf4:	08009d91 	.word	0x08009d91
 8009cf8:	08009d91 	.word	0x08009d91
 8009cfc:	08009d71 	.word	0x08009d71
 8009d00:	08009d91 	.word	0x08009d91
 8009d04:	08009d91 	.word	0x08009d91
 8009d08:	08009d91 	.word	0x08009d91
 8009d0c:	08009d91 	.word	0x08009d91
 8009d10:	08009d91 	.word	0x08009d91
 8009d14:	08009d91 	.word	0x08009d91
 8009d18:	08009d91 	.word	0x08009d91
 8009d1c:	08009d79 	.word	0x08009d79
 8009d20:	08009d91 	.word	0x08009d91
 8009d24:	08009d91 	.word	0x08009d91
 8009d28:	08009d91 	.word	0x08009d91
 8009d2c:	08009d91 	.word	0x08009d91
 8009d30:	08009d91 	.word	0x08009d91
 8009d34:	08009d91 	.word	0x08009d91
 8009d38:	08009d91 	.word	0x08009d91
 8009d3c:	08009d81 	.word	0x08009d81
 8009d40:	08009d91 	.word	0x08009d91
 8009d44:	08009d91 	.word	0x08009d91
 8009d48:	08009d91 	.word	0x08009d91
 8009d4c:	08009d91 	.word	0x08009d91
 8009d50:	08009d91 	.word	0x08009d91
 8009d54:	08009d91 	.word	0x08009d91
 8009d58:	08009d91 	.word	0x08009d91
 8009d5c:	08009d89 	.word	0x08009d89
 8009d60:	2301      	movs	r3, #1
 8009d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d66:	e233      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d68:	2304      	movs	r3, #4
 8009d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6e:	e22f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d70:	2308      	movs	r3, #8
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e22b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d78:	2310      	movs	r3, #16
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e227      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d80:	2320      	movs	r3, #32
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e223      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e21f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d90:	2380      	movs	r3, #128	; 0x80
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	bf00      	nop
 8009d98:	e21a      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a6d      	ldr	r2, [pc, #436]	; (8009f54 <UART_SetConfig+0x354>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d132      	bne.n	8009e0a <UART_SetConfig+0x20a>
 8009da4:	4b6a      	ldr	r3, [pc, #424]	; (8009f50 <UART_SetConfig+0x350>)
 8009da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da8:	f003 0307 	and.w	r3, r3, #7
 8009dac:	2b05      	cmp	r3, #5
 8009dae:	d827      	bhi.n	8009e00 <UART_SetConfig+0x200>
 8009db0:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <UART_SetConfig+0x1b8>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009dd1 	.word	0x08009dd1
 8009dbc:	08009dd9 	.word	0x08009dd9
 8009dc0:	08009de1 	.word	0x08009de1
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e1fb      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009dd8:	2304      	movs	r3, #4
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e1f7      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009de0:	2308      	movs	r3, #8
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e1f3      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009de8:	2310      	movs	r3, #16
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e1ef      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009df0:	2320      	movs	r3, #32
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e1eb      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009df8:	2340      	movs	r3, #64	; 0x40
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e1e7      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e00:	2380      	movs	r3, #128	; 0x80
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	bf00      	nop
 8009e08:	e1e2      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a52      	ldr	r2, [pc, #328]	; (8009f58 <UART_SetConfig+0x358>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d132      	bne.n	8009e7a <UART_SetConfig+0x27a>
 8009e14:	4b4e      	ldr	r3, [pc, #312]	; (8009f50 <UART_SetConfig+0x350>)
 8009e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	2b05      	cmp	r3, #5
 8009e1e:	d827      	bhi.n	8009e70 <UART_SetConfig+0x270>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x228>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e41 	.word	0x08009e41
 8009e2c:	08009e49 	.word	0x08009e49
 8009e30:	08009e51 	.word	0x08009e51
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	2300      	movs	r3, #0
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e1c3      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4e:	e1bf      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e56:	e1bb      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5e:	e1b7      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e60:	2320      	movs	r3, #32
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e1b3      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e68:	2340      	movs	r3, #64	; 0x40
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e1af      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e70:	2380      	movs	r3, #128	; 0x80
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	bf00      	nop
 8009e78:	e1aa      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a37      	ldr	r2, [pc, #220]	; (8009f5c <UART_SetConfig+0x35c>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d132      	bne.n	8009eea <UART_SetConfig+0x2ea>
 8009e84:	4b32      	ldr	r3, [pc, #200]	; (8009f50 <UART_SetConfig+0x350>)
 8009e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	2b05      	cmp	r3, #5
 8009e8e:	d827      	bhi.n	8009ee0 <UART_SetConfig+0x2e0>
 8009e90:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <UART_SetConfig+0x298>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009eb9 	.word	0x08009eb9
 8009ea0:	08009ec1 	.word	0x08009ec1
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e18b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e187      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e183      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e17f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e17b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e177      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	bf00      	nop
 8009ee8:	e172      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a1c      	ldr	r2, [pc, #112]	; (8009f60 <UART_SetConfig+0x360>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d144      	bne.n	8009f7e <UART_SetConfig+0x37e>
 8009ef4:	4b16      	ldr	r3, [pc, #88]	; (8009f50 <UART_SetConfig+0x350>)
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	2b05      	cmp	r3, #5
 8009efe:	d839      	bhi.n	8009f74 <UART_SetConfig+0x374>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x308>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f21 	.word	0x08009f21
 8009f0c:	08009f29 	.word	0x08009f29
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f6d 	.word	0x08009f6d
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f26:	e153      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2e:	e14f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f36:	e14b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3e:	e147      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f40:	cfff69f3 	.word	0xcfff69f3
 8009f44:	58000c00 	.word	0x58000c00
 8009f48:	11fff4ff 	.word	0x11fff4ff
 8009f4c:	40011000 	.word	0x40011000
 8009f50:	58024400 	.word	0x58024400
 8009f54:	40004400 	.word	0x40004400
 8009f58:	40004800 	.word	0x40004800
 8009f5c:	40004c00 	.word	0x40004c00
 8009f60:	40005000 	.word	0x40005000
 8009f64:	2320      	movs	r3, #32
 8009f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6a:	e131      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f6c:	2340      	movs	r3, #64	; 0x40
 8009f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f72:	e12d      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7a:	bf00      	nop
 8009f7c:	e128      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4ab6      	ldr	r2, [pc, #728]	; (800a25c <UART_SetConfig+0x65c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d178      	bne.n	800a07a <UART_SetConfig+0x47a>
 8009f88:	4bb5      	ldr	r3, [pc, #724]	; (800a260 <UART_SetConfig+0x660>)
 8009f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f90:	2b28      	cmp	r3, #40	; 0x28
 8009f92:	d86d      	bhi.n	800a070 <UART_SetConfig+0x470>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <UART_SetConfig+0x39c>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	0800a041 	.word	0x0800a041
 8009fa0:	0800a071 	.word	0x0800a071
 8009fa4:	0800a071 	.word	0x0800a071
 8009fa8:	0800a071 	.word	0x0800a071
 8009fac:	0800a071 	.word	0x0800a071
 8009fb0:	0800a071 	.word	0x0800a071
 8009fb4:	0800a071 	.word	0x0800a071
 8009fb8:	0800a071 	.word	0x0800a071
 8009fbc:	0800a049 	.word	0x0800a049
 8009fc0:	0800a071 	.word	0x0800a071
 8009fc4:	0800a071 	.word	0x0800a071
 8009fc8:	0800a071 	.word	0x0800a071
 8009fcc:	0800a071 	.word	0x0800a071
 8009fd0:	0800a071 	.word	0x0800a071
 8009fd4:	0800a071 	.word	0x0800a071
 8009fd8:	0800a071 	.word	0x0800a071
 8009fdc:	0800a051 	.word	0x0800a051
 8009fe0:	0800a071 	.word	0x0800a071
 8009fe4:	0800a071 	.word	0x0800a071
 8009fe8:	0800a071 	.word	0x0800a071
 8009fec:	0800a071 	.word	0x0800a071
 8009ff0:	0800a071 	.word	0x0800a071
 8009ff4:	0800a071 	.word	0x0800a071
 8009ff8:	0800a071 	.word	0x0800a071
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a071 	.word	0x0800a071
 800a004:	0800a071 	.word	0x0800a071
 800a008:	0800a071 	.word	0x0800a071
 800a00c:	0800a071 	.word	0x0800a071
 800a010:	0800a071 	.word	0x0800a071
 800a014:	0800a071 	.word	0x0800a071
 800a018:	0800a071 	.word	0x0800a071
 800a01c:	0800a061 	.word	0x0800a061
 800a020:	0800a071 	.word	0x0800a071
 800a024:	0800a071 	.word	0x0800a071
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a071 	.word	0x0800a071
 800a030:	0800a071 	.word	0x0800a071
 800a034:	0800a071 	.word	0x0800a071
 800a038:	0800a071 	.word	0x0800a071
 800a03c:	0800a069 	.word	0x0800a069
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a046:	e0c3      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a048:	2304      	movs	r3, #4
 800a04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04e:	e0bf      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a050:	2308      	movs	r3, #8
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e0bb      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a058:	2310      	movs	r3, #16
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e0b7      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a060:	2320      	movs	r3, #32
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	e0b3      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a068:	2340      	movs	r3, #64	; 0x40
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e0af      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a070:	2380      	movs	r3, #128	; 0x80
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	bf00      	nop
 800a078:	e0aa      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a79      	ldr	r2, [pc, #484]	; (800a264 <UART_SetConfig+0x664>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d132      	bne.n	800a0ea <UART_SetConfig+0x4ea>
 800a084:	4b76      	ldr	r3, [pc, #472]	; (800a260 <UART_SetConfig+0x660>)
 800a086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	2b05      	cmp	r3, #5
 800a08e:	d827      	bhi.n	800a0e0 <UART_SetConfig+0x4e0>
 800a090:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <UART_SetConfig+0x498>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a0b1 	.word	0x0800a0b1
 800a09c:	0800a0b9 	.word	0x0800a0b9
 800a0a0:	0800a0c1 	.word	0x0800a0c1
 800a0a4:	0800a0c9 	.word	0x0800a0c9
 800a0a8:	0800a0d1 	.word	0x0800a0d1
 800a0ac:	0800a0d9 	.word	0x0800a0d9
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e08b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0be:	e087      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0c0:	2308      	movs	r3, #8
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c6:	e083      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0c8:	2310      	movs	r3, #16
 800a0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ce:	e07f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0d0:	2320      	movs	r3, #32
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d6:	e07b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0de:	e077      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0e0:	2380      	movs	r3, #128	; 0x80
 800a0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e6:	bf00      	nop
 800a0e8:	e072      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a5e      	ldr	r2, [pc, #376]	; (800a268 <UART_SetConfig+0x668>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d132      	bne.n	800a15a <UART_SetConfig+0x55a>
 800a0f4:	4b5a      	ldr	r3, [pc, #360]	; (800a260 <UART_SetConfig+0x660>)
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d827      	bhi.n	800a150 <UART_SetConfig+0x550>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <UART_SetConfig+0x508>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a121 	.word	0x0800a121
 800a10c:	0800a129 	.word	0x0800a129
 800a110:	0800a131 	.word	0x0800a131
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a141 	.word	0x0800a141
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2300      	movs	r3, #0
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e053      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e04f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e04b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e047      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e043      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	e03f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	bf00      	nop
 800a158:	e03a      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a43      	ldr	r2, [pc, #268]	; (800a26c <UART_SetConfig+0x66c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d132      	bne.n	800a1ca <UART_SetConfig+0x5ca>
 800a164:	4b3e      	ldr	r3, [pc, #248]	; (800a260 <UART_SetConfig+0x660>)
 800a166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	2b05      	cmp	r3, #5
 800a16e:	d827      	bhi.n	800a1c0 <UART_SetConfig+0x5c0>
 800a170:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <UART_SetConfig+0x578>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a191 	.word	0x0800a191
 800a17c:	0800a199 	.word	0x0800a199
 800a180:	0800a1a1 	.word	0x0800a1a1
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1b1 	.word	0x0800a1b1
 800a18c:	0800a1b9 	.word	0x0800a1b9
 800a190:	2302      	movs	r3, #2
 800a192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a196:	e01b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a198:	2304      	movs	r3, #4
 800a19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19e:	e017      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a6:	e013      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ae:	e00f      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a1b0:	2320      	movs	r3, #32
 800a1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b6:	e00b      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a1b8:	2340      	movs	r3, #64	; 0x40
 800a1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1be:	e007      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a1c0:	2380      	movs	r3, #128	; 0x80
 800a1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c6:	bf00      	nop
 800a1c8:	e002      	b.n	800a1d0 <UART_SetConfig+0x5d0>
 800a1ca:	2380      	movs	r3, #128	; 0x80
 800a1cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a25      	ldr	r2, [pc, #148]	; (800a26c <UART_SetConfig+0x66c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	f040 80b8 	bne.w	800a34c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1e0:	2b08      	cmp	r3, #8
 800a1e2:	d019      	beq.n	800a218 <UART_SetConfig+0x618>
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	dc04      	bgt.n	800a1f2 <UART_SetConfig+0x5f2>
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d009      	beq.n	800a200 <UART_SetConfig+0x600>
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d00b      	beq.n	800a208 <UART_SetConfig+0x608>
 800a1f0:	e042      	b.n	800a278 <UART_SetConfig+0x678>
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	d02b      	beq.n	800a24e <UART_SetConfig+0x64e>
 800a1f6:	2b40      	cmp	r3, #64	; 0x40
 800a1f8:	d02c      	beq.n	800a254 <UART_SetConfig+0x654>
 800a1fa:	2b10      	cmp	r3, #16
 800a1fc:	d014      	beq.n	800a228 <UART_SetConfig+0x628>
 800a1fe:	e03b      	b.n	800a278 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a200:	f7fd fc8a 	bl	8007b18 <HAL_RCCEx_GetD3PCLK1Freq>
 800a204:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a206:	e03d      	b.n	800a284 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a208:	f107 0314 	add.w	r3, r7, #20
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fd fc99 	bl	8007b44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a216:	e035      	b.n	800a284 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a218:	f107 0308 	add.w	r3, r7, #8
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fd fddd 	bl	8007ddc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a226:	e02d      	b.n	800a284 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a228:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <UART_SetConfig+0x660>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a234:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <UART_SetConfig+0x660>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	08db      	lsrs	r3, r3, #3
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	4a0c      	ldr	r2, [pc, #48]	; (800a270 <UART_SetConfig+0x670>)
 800a240:	fa22 f303 	lsr.w	r3, r2, r3
 800a244:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a246:	e01d      	b.n	800a284 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a248:	4b09      	ldr	r3, [pc, #36]	; (800a270 <UART_SetConfig+0x670>)
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24c:	e01a      	b.n	800a284 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a24e:	4b09      	ldr	r3, [pc, #36]	; (800a274 <UART_SetConfig+0x674>)
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a252:	e017      	b.n	800a284 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a25a:	e013      	b.n	800a284 <UART_SetConfig+0x684>
 800a25c:	40011400 	.word	0x40011400
 800a260:	58024400 	.word	0x58024400
 800a264:	40007800 	.word	0x40007800
 800a268:	40007c00 	.word	0x40007c00
 800a26c:	58000c00 	.word	0x58000c00
 800a270:	03d09000 	.word	0x03d09000
 800a274:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a282:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 824d 	beq.w	800a726 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	4aad      	ldr	r2, [pc, #692]	; (800a548 <UART_SetConfig+0x948>)
 800a292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a296:	461a      	mov	r2, r3
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	4413      	add	r3, r2
 800a2aa:	6a3a      	ldr	r2, [r7, #32]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d305      	bcc.n	800a2bc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d903      	bls.n	800a2c4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a2c2:	e230      	b.n	800a726 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f04f 0100 	mov.w	r1, #0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	4a9d      	ldr	r2, [pc, #628]	; (800a548 <UART_SetConfig+0x948>)
 800a2d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	f04f 0400 	mov.w	r4, #0
 800a2dc:	461a      	mov	r2, r3
 800a2de:	4623      	mov	r3, r4
 800a2e0:	f7f6 f802 	bl	80002e8 <__aeabi_uldivmod>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	f04f 0300 	mov.w	r3, #0
 800a2f0:	f04f 0400 	mov.w	r4, #0
 800a2f4:	0214      	lsls	r4, r2, #8
 800a2f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a2fa:	020b      	lsls	r3, r1, #8
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6852      	ldr	r2, [r2, #4]
 800a300:	0852      	lsrs	r2, r2, #1
 800a302:	4611      	mov	r1, r2
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	eb13 0b01 	adds.w	fp, r3, r1
 800a30c:	eb44 0c02 	adc.w	ip, r4, r2
 800a310:	4658      	mov	r0, fp
 800a312:	4661      	mov	r1, ip
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f04f 0400 	mov.w	r4, #0
 800a31c:	461a      	mov	r2, r3
 800a31e:	4623      	mov	r3, r4
 800a320:	f7f5 ffe2 	bl	80002e8 <__aeabi_uldivmod>
 800a324:	4603      	mov	r3, r0
 800a326:	460c      	mov	r4, r1
 800a328:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a330:	d308      	bcc.n	800a344 <UART_SetConfig+0x744>
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a338:	d204      	bcs.n	800a344 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a340:	60da      	str	r2, [r3, #12]
 800a342:	e1f0      	b.n	800a726 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a34a:	e1ec      	b.n	800a726 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a354:	f040 8100 	bne.w	800a558 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a358:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a35c:	2b40      	cmp	r3, #64	; 0x40
 800a35e:	f200 80b7 	bhi.w	800a4d0 <UART_SetConfig+0x8d0>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x768>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a46d 	.word	0x0800a46d
 800a36c:	0800a475 	.word	0x0800a475
 800a370:	0800a4d1 	.word	0x0800a4d1
 800a374:	0800a4d1 	.word	0x0800a4d1
 800a378:	0800a47d 	.word	0x0800a47d
 800a37c:	0800a4d1 	.word	0x0800a4d1
 800a380:	0800a4d1 	.word	0x0800a4d1
 800a384:	0800a4d1 	.word	0x0800a4d1
 800a388:	0800a48d 	.word	0x0800a48d
 800a38c:	0800a4d1 	.word	0x0800a4d1
 800a390:	0800a4d1 	.word	0x0800a4d1
 800a394:	0800a4d1 	.word	0x0800a4d1
 800a398:	0800a4d1 	.word	0x0800a4d1
 800a39c:	0800a4d1 	.word	0x0800a4d1
 800a3a0:	0800a4d1 	.word	0x0800a4d1
 800a3a4:	0800a4d1 	.word	0x0800a4d1
 800a3a8:	0800a49d 	.word	0x0800a49d
 800a3ac:	0800a4d1 	.word	0x0800a4d1
 800a3b0:	0800a4d1 	.word	0x0800a4d1
 800a3b4:	0800a4d1 	.word	0x0800a4d1
 800a3b8:	0800a4d1 	.word	0x0800a4d1
 800a3bc:	0800a4d1 	.word	0x0800a4d1
 800a3c0:	0800a4d1 	.word	0x0800a4d1
 800a3c4:	0800a4d1 	.word	0x0800a4d1
 800a3c8:	0800a4d1 	.word	0x0800a4d1
 800a3cc:	0800a4d1 	.word	0x0800a4d1
 800a3d0:	0800a4d1 	.word	0x0800a4d1
 800a3d4:	0800a4d1 	.word	0x0800a4d1
 800a3d8:	0800a4d1 	.word	0x0800a4d1
 800a3dc:	0800a4d1 	.word	0x0800a4d1
 800a3e0:	0800a4d1 	.word	0x0800a4d1
 800a3e4:	0800a4d1 	.word	0x0800a4d1
 800a3e8:	0800a4c3 	.word	0x0800a4c3
 800a3ec:	0800a4d1 	.word	0x0800a4d1
 800a3f0:	0800a4d1 	.word	0x0800a4d1
 800a3f4:	0800a4d1 	.word	0x0800a4d1
 800a3f8:	0800a4d1 	.word	0x0800a4d1
 800a3fc:	0800a4d1 	.word	0x0800a4d1
 800a400:	0800a4d1 	.word	0x0800a4d1
 800a404:	0800a4d1 	.word	0x0800a4d1
 800a408:	0800a4d1 	.word	0x0800a4d1
 800a40c:	0800a4d1 	.word	0x0800a4d1
 800a410:	0800a4d1 	.word	0x0800a4d1
 800a414:	0800a4d1 	.word	0x0800a4d1
 800a418:	0800a4d1 	.word	0x0800a4d1
 800a41c:	0800a4d1 	.word	0x0800a4d1
 800a420:	0800a4d1 	.word	0x0800a4d1
 800a424:	0800a4d1 	.word	0x0800a4d1
 800a428:	0800a4d1 	.word	0x0800a4d1
 800a42c:	0800a4d1 	.word	0x0800a4d1
 800a430:	0800a4d1 	.word	0x0800a4d1
 800a434:	0800a4d1 	.word	0x0800a4d1
 800a438:	0800a4d1 	.word	0x0800a4d1
 800a43c:	0800a4d1 	.word	0x0800a4d1
 800a440:	0800a4d1 	.word	0x0800a4d1
 800a444:	0800a4d1 	.word	0x0800a4d1
 800a448:	0800a4d1 	.word	0x0800a4d1
 800a44c:	0800a4d1 	.word	0x0800a4d1
 800a450:	0800a4d1 	.word	0x0800a4d1
 800a454:	0800a4d1 	.word	0x0800a4d1
 800a458:	0800a4d1 	.word	0x0800a4d1
 800a45c:	0800a4d1 	.word	0x0800a4d1
 800a460:	0800a4d1 	.word	0x0800a4d1
 800a464:	0800a4d1 	.word	0x0800a4d1
 800a468:	0800a4c9 	.word	0x0800a4c9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a46c:	f7fc fc3a 	bl	8006ce4 <HAL_RCC_GetPCLK1Freq>
 800a470:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a472:	e033      	b.n	800a4dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a474:	f7fc fc4c 	bl	8006d10 <HAL_RCC_GetPCLK2Freq>
 800a478:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a47a:	e02f      	b.n	800a4dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a47c:	f107 0314 	add.w	r3, r7, #20
 800a480:	4618      	mov	r0, r3
 800a482:	f7fd fb5f 	bl	8007b44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a48a:	e027      	b.n	800a4dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4618      	mov	r0, r3
 800a492:	f7fd fca3 	bl	8007ddc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a49a:	e01f      	b.n	800a4dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a49c:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <UART_SetConfig+0x94c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d009      	beq.n	800a4bc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4a8:	4b28      	ldr	r3, [pc, #160]	; (800a54c <UART_SetConfig+0x94c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	08db      	lsrs	r3, r3, #3
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	4a27      	ldr	r2, [pc, #156]	; (800a550 <UART_SetConfig+0x950>)
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4ba:	e00f      	b.n	800a4dc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a4bc:	4b24      	ldr	r3, [pc, #144]	; (800a550 <UART_SetConfig+0x950>)
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4c0:	e00c      	b.n	800a4dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4c2:	4b24      	ldr	r3, [pc, #144]	; (800a554 <UART_SetConfig+0x954>)
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4c6:	e009      	b.n	800a4dc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4ce:	e005      	b.n	800a4dc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 8121 	beq.w	800a726 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	4a17      	ldr	r2, [pc, #92]	; (800a548 <UART_SetConfig+0x948>)
 800a4ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f6:	005a      	lsls	r2, r3, #1
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	441a      	add	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	fbb2 f3f3 	udiv	r3, r2, r3
 800a508:	b29b      	uxth	r3, r3
 800a50a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	2b0f      	cmp	r3, #15
 800a510:	d916      	bls.n	800a540 <UART_SetConfig+0x940>
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a518:	d212      	bcs.n	800a540 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	f023 030f 	bic.w	r3, r3, #15
 800a522:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	085b      	lsrs	r3, r3, #1
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f003 0307 	and.w	r3, r3, #7
 800a52e:	b29a      	uxth	r2, r3
 800a530:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a532:	4313      	orrs	r3, r2
 800a534:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a53c:	60da      	str	r2, [r3, #12]
 800a53e:	e0f2      	b.n	800a726 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a546:	e0ee      	b.n	800a726 <UART_SetConfig+0xb26>
 800a548:	0800bdac 	.word	0x0800bdac
 800a54c:	58024400 	.word	0x58024400
 800a550:	03d09000 	.word	0x03d09000
 800a554:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a55c:	2b40      	cmp	r3, #64	; 0x40
 800a55e:	f200 80b7 	bhi.w	800a6d0 <UART_SetConfig+0xad0>
 800a562:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <UART_SetConfig+0x968>)
 800a564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a568:	0800a66d 	.word	0x0800a66d
 800a56c:	0800a675 	.word	0x0800a675
 800a570:	0800a6d1 	.word	0x0800a6d1
 800a574:	0800a6d1 	.word	0x0800a6d1
 800a578:	0800a67d 	.word	0x0800a67d
 800a57c:	0800a6d1 	.word	0x0800a6d1
 800a580:	0800a6d1 	.word	0x0800a6d1
 800a584:	0800a6d1 	.word	0x0800a6d1
 800a588:	0800a68d 	.word	0x0800a68d
 800a58c:	0800a6d1 	.word	0x0800a6d1
 800a590:	0800a6d1 	.word	0x0800a6d1
 800a594:	0800a6d1 	.word	0x0800a6d1
 800a598:	0800a6d1 	.word	0x0800a6d1
 800a59c:	0800a6d1 	.word	0x0800a6d1
 800a5a0:	0800a6d1 	.word	0x0800a6d1
 800a5a4:	0800a6d1 	.word	0x0800a6d1
 800a5a8:	0800a69d 	.word	0x0800a69d
 800a5ac:	0800a6d1 	.word	0x0800a6d1
 800a5b0:	0800a6d1 	.word	0x0800a6d1
 800a5b4:	0800a6d1 	.word	0x0800a6d1
 800a5b8:	0800a6d1 	.word	0x0800a6d1
 800a5bc:	0800a6d1 	.word	0x0800a6d1
 800a5c0:	0800a6d1 	.word	0x0800a6d1
 800a5c4:	0800a6d1 	.word	0x0800a6d1
 800a5c8:	0800a6d1 	.word	0x0800a6d1
 800a5cc:	0800a6d1 	.word	0x0800a6d1
 800a5d0:	0800a6d1 	.word	0x0800a6d1
 800a5d4:	0800a6d1 	.word	0x0800a6d1
 800a5d8:	0800a6d1 	.word	0x0800a6d1
 800a5dc:	0800a6d1 	.word	0x0800a6d1
 800a5e0:	0800a6d1 	.word	0x0800a6d1
 800a5e4:	0800a6d1 	.word	0x0800a6d1
 800a5e8:	0800a6c3 	.word	0x0800a6c3
 800a5ec:	0800a6d1 	.word	0x0800a6d1
 800a5f0:	0800a6d1 	.word	0x0800a6d1
 800a5f4:	0800a6d1 	.word	0x0800a6d1
 800a5f8:	0800a6d1 	.word	0x0800a6d1
 800a5fc:	0800a6d1 	.word	0x0800a6d1
 800a600:	0800a6d1 	.word	0x0800a6d1
 800a604:	0800a6d1 	.word	0x0800a6d1
 800a608:	0800a6d1 	.word	0x0800a6d1
 800a60c:	0800a6d1 	.word	0x0800a6d1
 800a610:	0800a6d1 	.word	0x0800a6d1
 800a614:	0800a6d1 	.word	0x0800a6d1
 800a618:	0800a6d1 	.word	0x0800a6d1
 800a61c:	0800a6d1 	.word	0x0800a6d1
 800a620:	0800a6d1 	.word	0x0800a6d1
 800a624:	0800a6d1 	.word	0x0800a6d1
 800a628:	0800a6d1 	.word	0x0800a6d1
 800a62c:	0800a6d1 	.word	0x0800a6d1
 800a630:	0800a6d1 	.word	0x0800a6d1
 800a634:	0800a6d1 	.word	0x0800a6d1
 800a638:	0800a6d1 	.word	0x0800a6d1
 800a63c:	0800a6d1 	.word	0x0800a6d1
 800a640:	0800a6d1 	.word	0x0800a6d1
 800a644:	0800a6d1 	.word	0x0800a6d1
 800a648:	0800a6d1 	.word	0x0800a6d1
 800a64c:	0800a6d1 	.word	0x0800a6d1
 800a650:	0800a6d1 	.word	0x0800a6d1
 800a654:	0800a6d1 	.word	0x0800a6d1
 800a658:	0800a6d1 	.word	0x0800a6d1
 800a65c:	0800a6d1 	.word	0x0800a6d1
 800a660:	0800a6d1 	.word	0x0800a6d1
 800a664:	0800a6d1 	.word	0x0800a6d1
 800a668:	0800a6c9 	.word	0x0800a6c9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a66c:	f7fc fb3a 	bl	8006ce4 <HAL_RCC_GetPCLK1Freq>
 800a670:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a672:	e033      	b.n	800a6dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a674:	f7fc fb4c 	bl	8006d10 <HAL_RCC_GetPCLK2Freq>
 800a678:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a67a:	e02f      	b.n	800a6dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67c:	f107 0314 	add.w	r3, r7, #20
 800a680:	4618      	mov	r0, r3
 800a682:	f7fd fa5f 	bl	8007b44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a68a:	e027      	b.n	800a6dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a68c:	f107 0308 	add.w	r3, r7, #8
 800a690:	4618      	mov	r0, r3
 800a692:	f7fd fba3 	bl	8007ddc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a69a:	e01f      	b.n	800a6dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a69c:	4b2c      	ldr	r3, [pc, #176]	; (800a750 <UART_SetConfig+0xb50>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0320 	and.w	r3, r3, #32
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6a8:	4b29      	ldr	r3, [pc, #164]	; (800a750 <UART_SetConfig+0xb50>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	08db      	lsrs	r3, r3, #3
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	4a28      	ldr	r2, [pc, #160]	; (800a754 <UART_SetConfig+0xb54>)
 800a6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6ba:	e00f      	b.n	800a6dc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a6bc:	4b25      	ldr	r3, [pc, #148]	; (800a754 <UART_SetConfig+0xb54>)
 800a6be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c0:	e00c      	b.n	800a6dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6c2:	4b25      	ldr	r3, [pc, #148]	; (800a758 <UART_SetConfig+0xb58>)
 800a6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c6:	e009      	b.n	800a6dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6ce:	e005      	b.n	800a6dc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a6da:	bf00      	nop
    }

    if (pclk != 0U)
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d021      	beq.n	800a726 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	4a1d      	ldr	r2, [pc, #116]	; (800a75c <UART_SetConfig+0xb5c>)
 800a6e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	085b      	lsrs	r3, r3, #1
 800a6fa:	441a      	add	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	fbb2 f3f3 	udiv	r3, r2, r3
 800a704:	b29b      	uxth	r3, r3
 800a706:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	2b0f      	cmp	r3, #15
 800a70c:	d908      	bls.n	800a720 <UART_SetConfig+0xb20>
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a714:	d204      	bcs.n	800a720 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a71c:	60da      	str	r2, [r3, #12]
 800a71e:	e002      	b.n	800a726 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a746:	4618      	mov	r0, r3
 800a748:	3738      	adds	r7, #56	; 0x38
 800a74a:	46bd      	mov	sp, r7
 800a74c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a750:	58024400 	.word	0x58024400
 800a754:	03d09000 	.word	0x03d09000
 800a758:	003d0900 	.word	0x003d0900
 800a75c:	0800bdac 	.word	0x0800bdac

0800a760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00a      	beq.n	800a78a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00a      	beq.n	800a7ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d2:	f003 0308 	and.w	r3, r3, #8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f4:	f003 0310 	and.w	r3, r3, #16
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	430a      	orrs	r2, r1
 800a832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d01a      	beq.n	800a876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a85e:	d10a      	bne.n	800a876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00a      	beq.n	800a898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	605a      	str	r2, [r3, #4]
  }
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a8b4:	f7f6 ffc2 	bl	800183c <HAL_GetTick>
 800a8b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0308 	and.w	r3, r3, #8
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d10e      	bne.n	800a8e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f82c 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e022      	b.n	800a92c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d10e      	bne.n	800a912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f816 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e00c      	b.n	800a92c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2220      	movs	r2, #32
 800a91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	4613      	mov	r3, r2
 800a942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a944:	e062      	b.n	800aa0c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d05e      	beq.n	800aa0c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a94e:	f7f6 ff75 	bl	800183c <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <UART_WaitOnFlagUntilTimeout+0x30>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d11d      	bne.n	800a9a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a972:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689a      	ldr	r2, [r3, #8]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f022 0201 	bic.w	r2, r2, #1
 800a982:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2220      	movs	r2, #32
 800a988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e045      	b.n	800aa2c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d02e      	beq.n	800aa0c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69db      	ldr	r3, [r3, #28]
 800a9b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9bc:	d126      	bne.n	800aa0c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689a      	ldr	r2, [r3, #8]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f022 0201 	bic.w	r2, r2, #1
 800a9e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e00f      	b.n	800aa2c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69da      	ldr	r2, [r3, #28]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	4013      	ands	r3, r2
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	bf0c      	ite	eq
 800aa1c:	2301      	moveq	r3, #1
 800aa1e:	2300      	movne	r3, #0
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	461a      	mov	r2, r3
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d08d      	beq.n	800a946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6899      	ldr	r1, [r3, #8]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <UART_EndRxTransfer+0x44>)
 800aa58:	400b      	ands	r3, r1
 800aa5a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	effffffe 	.word	0xeffffffe

0800aa7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff f8a6 	bl	8009bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aabe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2220      	movs	r2, #32
 800aac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff f882 	bl	8009bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aaea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf2:	2b22      	cmp	r3, #34	; 0x22
 800aaf4:	d13b      	bne.n	800ab6e <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aafe:	89bb      	ldrh	r3, [r7, #12]
 800ab00:	b2d9      	uxtb	r1, r3
 800ab02:	89fb      	ldrh	r3, [r7, #14]
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0a:	400a      	ands	r2, r1
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	3b01      	subs	r3, #1
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d122      	bne.n	800ab7e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 0201 	bic.w	r2, r2, #1
 800ab56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fad0 	bl	800b10c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab6c:	e007      	b.n	800ab7e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	699a      	ldr	r2, [r3, #24]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0208 	orr.w	r2, r2, #8
 800ab7c:	619a      	str	r2, [r3, #24]
}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab9c:	2b22      	cmp	r3, #34	; 0x22
 800ab9e:	d13b      	bne.n	800ac18 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abac:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800abae:	89ba      	ldrh	r2, [r7, #12]
 800abb0:	89fb      	ldrh	r3, [r7, #14]
 800abb2:	4013      	ands	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abbe:	1c9a      	adds	r2, r3, #2
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abca:	b29b      	uxth	r3, r3
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d122      	bne.n	800ac28 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abf0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2220      	movs	r2, #32
 800ac06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fa7b 	bl	800b10c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac16:	e007      	b.n	800ac28 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	699a      	ldr	r2, [r3, #24]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0208 	orr.w	r2, r2, #8
 800ac26:	619a      	str	r2, [r3, #24]
}
 800ac28:	bf00      	nop
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac3e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac46:	2b22      	cmp	r3, #34	; 0x22
 800ac48:	d166      	bne.n	800ad18 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ac50:	81fb      	strh	r3, [r7, #14]
 800ac52:	e03d      	b.n	800acd0 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac5c:	893b      	ldrh	r3, [r7, #8]
 800ac5e:	b2d9      	uxtb	r1, r3
 800ac60:	89bb      	ldrh	r3, [r7, #12]
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac68:	400a      	ands	r2, r1
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d119      	bne.n	800acca <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aca4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6899      	ldr	r1, [r3, #8]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	4b1f      	ldr	r3, [pc, #124]	; (800ad30 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800acb2:	400b      	ands	r3, r1
 800acb4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2220      	movs	r2, #32
 800acba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fa21 	bl	800b10c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800acca:	89fb      	ldrh	r3, [r7, #14]
 800accc:	3b01      	subs	r3, #1
 800acce:	81fb      	strh	r3, [r7, #14]
 800acd0:	89fb      	ldrh	r3, [r7, #14]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1be      	bne.n	800ac54 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acdc:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800acde:	897b      	ldrh	r3, [r7, #10]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d021      	beq.n	800ad28 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acea:	897a      	ldrh	r2, [r7, #10]
 800acec:	429a      	cmp	r2, r3
 800acee:	d21b      	bcs.n	800ad28 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800acfe:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a0c      	ldr	r2, [pc, #48]	; (800ad34 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800ad04:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0220 	orr.w	r2, r2, #32
 800ad14:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad16:	e007      	b.n	800ad28 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f042 0208 	orr.w	r2, r2, #8
 800ad26:	619a      	str	r2, [r3, #24]
}
 800ad28:	bf00      	nop
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	effffffe 	.word	0xeffffffe
 800ad34:	0800aadd 	.word	0x0800aadd

0800ad38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad46:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad4e:	2b22      	cmp	r3, #34	; 0x22
 800ad50:	d166      	bne.n	800ae20 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad58:	82fb      	strh	r3, [r7, #22]
 800ad5a:	e03d      	b.n	800add8 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad68:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad6a:	8a3a      	ldrh	r2, [r7, #16]
 800ad6c:	8abb      	ldrh	r3, [r7, #20]
 800ad6e:	4013      	ands	r3, r2
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7a:	1c9a      	adds	r2, r3, #2
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d119      	bne.n	800add2 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6899      	ldr	r1, [r3, #8]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	4b1f      	ldr	r3, [pc, #124]	; (800ae38 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800adba:	400b      	ands	r3, r1
 800adbc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f99d 	bl	800b10c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800add2:	8afb      	ldrh	r3, [r7, #22]
 800add4:	3b01      	subs	r3, #1
 800add6:	82fb      	strh	r3, [r7, #22]
 800add8:	8afb      	ldrh	r3, [r7, #22]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1be      	bne.n	800ad5c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ade4:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ade6:	8a7b      	ldrh	r3, [r7, #18]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d021      	beq.n	800ae30 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adf2:	8a7a      	ldrh	r2, [r7, #18]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d21b      	bcs.n	800ae30 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	689a      	ldr	r2, [r3, #8]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ae06:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <UART_RxISR_16BIT_FIFOEN+0x104>)
 800ae0c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0220 	orr.w	r2, r2, #32
 800ae1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae1e:	e007      	b.n	800ae30 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0208 	orr.w	r2, r2, #8
 800ae2e:	619a      	str	r2, [r3, #24]
}
 800ae30:	bf00      	nop
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	effffffe 	.word	0xeffffffe
 800ae3c:	0800ab87 	.word	0x0800ab87

0800ae40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e027      	b.n	800aee2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2224      	movs	r2, #36	; 0x24
 800ae9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0201 	bic.w	r2, r2, #1
 800aeb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aec0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af02:	2302      	movs	r3, #2
 800af04:	e02d      	b.n	800af62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2224      	movs	r2, #36	; 0x24
 800af12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0201 	bic.w	r2, r2, #1
 800af2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	430a      	orrs	r2, r1
 800af40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f850 	bl	800afe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d101      	bne.n	800af82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af7e:	2302      	movs	r3, #2
 800af80:	e02d      	b.n	800afde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2224      	movs	r2, #36	; 0x24
 800af8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0201 	bic.w	r2, r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f812 	bl	800afe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2220      	movs	r2, #32
 800afd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b089      	sub	sp, #36	; 0x24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aff0:	4a2f      	ldr	r2, [pc, #188]	; (800b0b0 <UARTEx_SetNbDataToProcess+0xc8>)
 800aff2:	f107 0314 	add.w	r3, r7, #20
 800aff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800affa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800affe:	4a2d      	ldr	r2, [pc, #180]	; (800b0b4 <UARTEx_SetNbDataToProcess+0xcc>)
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b008:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b010:	2b00      	cmp	r3, #0
 800b012:	d108      	bne.n	800b026 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b024:	e03d      	b.n	800b0a2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b026:	2310      	movs	r3, #16
 800b028:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b02a:	2310      	movs	r3, #16
 800b02c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	0e5b      	lsrs	r3, r3, #25
 800b036:	b2db      	uxtb	r3, r3
 800b038:	f003 0307 	and.w	r3, r3, #7
 800b03c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	0f5b      	lsrs	r3, r3, #29
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 0307 	and.w	r3, r3, #7
 800b04c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b04e:	7fbb      	ldrb	r3, [r7, #30]
 800b050:	7f3a      	ldrb	r2, [r7, #28]
 800b052:	f107 0120 	add.w	r1, r7, #32
 800b056:	440a      	add	r2, r1
 800b058:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b05c:	fb02 f303 	mul.w	r3, r2, r3
 800b060:	7f3a      	ldrb	r2, [r7, #28]
 800b062:	f107 0120 	add.w	r1, r7, #32
 800b066:	440a      	add	r2, r1
 800b068:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b06c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b078:	7ffb      	ldrb	r3, [r7, #31]
 800b07a:	7f7a      	ldrb	r2, [r7, #29]
 800b07c:	f107 0120 	add.w	r1, r7, #32
 800b080:	440a      	add	r2, r1
 800b082:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b086:	fb02 f303 	mul.w	r3, r2, r3
 800b08a:	7f7a      	ldrb	r2, [r7, #29]
 800b08c:	f107 0120 	add.w	r1, r7, #32
 800b090:	440a      	add	r2, r1
 800b092:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b096:	fb93 f3f2 	sdiv	r3, r3, r2
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0a2:	bf00      	nop
 800b0a4:	3724      	adds	r7, #36	; 0x24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	0800bd84 	.word	0x0800bd84
 800b0b4:	0800bd8c 	.word	0x0800bd8c

0800b0b8 <GPS_Init>:
uint8_t isDebug = 0, recvChr, recvBuf[60], recvCount = 0, gpsFlag = 0, recvFlag = 0;
uint8_t (*GPS_Parsers[])(GPS_INFO*, uint8_t*) = {GPS_RMC_Parse, GPS_GGA_Parse, GPS_GSV_Parse};
GPS_INFO mGPS;

void GPS_Init(UART_HandleTypeDef *GPShuart, UART_HandleTypeDef *DebugHuart)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  if(DebugHuart != NULL)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <GPS_Init+0x16>
  {
    isDebug = 1;
 800b0c8:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <GPS_Init+0x34>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	701a      	strb	r2, [r3, #0]
  }
  mGPSuart = GPShuart;
 800b0ce:	4a08      	ldr	r2, [pc, #32]	; (800b0f0 <GPS_Init+0x38>)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6013      	str	r3, [r2, #0]
  DebugHuart = DebugHuart;
  HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <GPS_Init+0x38>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4906      	ldr	r1, [pc, #24]	; (800b0f4 <GPS_Init+0x3c>)
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe fb23 	bl	8009728 <HAL_UART_Receive_IT>
}
 800b0e2:	bf00      	nop
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	2400003c 	.word	0x2400003c
 800b0f0:	2400a39c 	.word	0x2400a39c
 800b0f4:	2400a358 	.word	0x2400a358

0800b0f8 <get_GPS_INFO>:

const GPS_INFO * get_GPS_INFO()
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	af00      	add	r7, sp, #0
	return (const GPS_INFO *)(&mGPS);
 800b0fc:	4b02      	ldr	r3, [pc, #8]	; (800b108 <get_GPS_INFO+0x10>)
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	2400a3a0 	.word	0x2400a3a0

0800b10c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(recvChr == '$')  //如果收到字符'$'，便开始接收
 800b114:	4b2b      	ldr	r3, [pc, #172]	; (800b1c4 <HAL_UART_RxCpltCallback+0xb8>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b24      	cmp	r3, #36	; 0x24
 800b11a:	d109      	bne.n	800b130 <HAL_UART_RxCpltCallback+0x24>
	{
		recvFlag = 1;
 800b11c:	4b2a      	ldr	r3, [pc, #168]	; (800b1c8 <HAL_UART_RxCpltCallback+0xbc>)
 800b11e:	2201      	movs	r2, #1
 800b120:	701a      	strb	r2, [r3, #0]
		recvBuf[0] = '$';
 800b122:	4b2a      	ldr	r3, [pc, #168]	; (800b1cc <HAL_UART_RxCpltCallback+0xc0>)
 800b124:	2224      	movs	r2, #36	; 0x24
 800b126:	701a      	strb	r2, [r3, #0]
    	recvCount = 1;
 800b128:	4b29      	ldr	r3, [pc, #164]	; (800b1d0 <HAL_UART_RxCpltCallback+0xc4>)
 800b12a:	2201      	movs	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	e021      	b.n	800b174 <HAL_UART_RxCpltCallback+0x68>
  } else if(recvFlag == 1)  //标志位为1，开始接收
 800b130:	4b25      	ldr	r3, [pc, #148]	; (800b1c8 <HAL_UART_RxCpltCallback+0xbc>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d11d      	bne.n	800b174 <HAL_UART_RxCpltCallback+0x68>
	{
		recvBuf[recvCount++] = recvChr;  //字符存到数组中
 800b138:	4b25      	ldr	r3, [pc, #148]	; (800b1d0 <HAL_UART_RxCpltCallback+0xc4>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	b2d1      	uxtb	r1, r2
 800b140:	4a23      	ldr	r2, [pc, #140]	; (800b1d0 <HAL_UART_RxCpltCallback+0xc4>)
 800b142:	7011      	strb	r1, [r2, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	4b1f      	ldr	r3, [pc, #124]	; (800b1c4 <HAL_UART_RxCpltCallback+0xb8>)
 800b148:	7819      	ldrb	r1, [r3, #0]
 800b14a:	4b20      	ldr	r3, [pc, #128]	; (800b1cc <HAL_UART_RxCpltCallback+0xc0>)
 800b14c:	5499      	strb	r1, [r3, r2]
		if(recvChr == '\n')     //如果接收到换行
 800b14e:	4b1d      	ldr	r3, [pc, #116]	; (800b1c4 <HAL_UART_RxCpltCallback+0xb8>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2b0a      	cmp	r3, #10
 800b154:	d10e      	bne.n	800b174 <HAL_UART_RxCpltCallback+0x68>
		{
			recvBuf[recvCount] = '\0';
 800b156:	4b1e      	ldr	r3, [pc, #120]	; (800b1d0 <HAL_UART_RxCpltCallback+0xc4>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	4b1b      	ldr	r3, [pc, #108]	; (800b1cc <HAL_UART_RxCpltCallback+0xc0>)
 800b15e:	2100      	movs	r1, #0
 800b160:	5499      	strb	r1, [r3, r2]
		  recvFlag = 0;
 800b162:	4b19      	ldr	r3, [pc, #100]	; (800b1c8 <HAL_UART_RxCpltCallback+0xbc>)
 800b164:	2200      	movs	r2, #0
 800b166:	701a      	strb	r2, [r3, #0]
			  gpsFlag = 1;
 800b168:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <HAL_UART_RxCpltCallback+0xc8>)
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
			recvCount = 1;
 800b16e:	4b18      	ldr	r3, [pc, #96]	; (800b1d0 <HAL_UART_RxCpltCallback+0xc4>)
 800b170:	2201      	movs	r2, #1
 800b172:	701a      	strb	r2, [r3, #0]
		}
	}
  if(gpsFlag == 1)
 800b174:	4b17      	ldr	r3, [pc, #92]	; (800b1d4 <HAL_UART_RxCpltCallback+0xc8>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d117      	bne.n	800b1ac <HAL_UART_RxCpltCallback+0xa0>
  {
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b17c:	2300      	movs	r3, #0
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	e00c      	b.n	800b19c <HAL_UART_RxCpltCallback+0x90>
		{
			if(GPS_Parsers[i](&mGPS, recvBuf))
 800b182:	4a15      	ldr	r2, [pc, #84]	; (800b1d8 <HAL_UART_RxCpltCallback+0xcc>)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b18a:	4910      	ldr	r1, [pc, #64]	; (800b1cc <HAL_UART_RxCpltCallback+0xc0>)
 800b18c:	4813      	ldr	r0, [pc, #76]	; (800b1dc <HAL_UART_RxCpltCallback+0xd0>)
 800b18e:	4798      	blx	r3
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <HAL_UART_RxCpltCallback+0x98>
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3301      	adds	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d9ef      	bls.n	800b182 <HAL_UART_RxCpltCallback+0x76>
 800b1a2:	e000      	b.n	800b1a6 <HAL_UART_RxCpltCallback+0x9a>
				break;
 800b1a4:	bf00      	nop
		}
		gpsFlag = 0;
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <HAL_UART_RxCpltCallback+0xc8>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b1ac:	4b0c      	ldr	r3, [pc, #48]	; (800b1e0 <HAL_UART_RxCpltCallback+0xd4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	4904      	ldr	r1, [pc, #16]	; (800b1c4 <HAL_UART_RxCpltCallback+0xb8>)
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fe fab7 	bl	8009728 <HAL_UART_Receive_IT>
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	2400a358 	.word	0x2400a358
 800b1c8:	2400003f 	.word	0x2400003f
 800b1cc:	2400a360 	.word	0x2400a360
 800b1d0:	2400003d 	.word	0x2400003d
 800b1d4:	2400003e 	.word	0x2400003e
 800b1d8:	24000010 	.word	0x24000010
 800b1dc:	2400a3a0 	.word	0x2400a3a0
 800b1e0:	2400a39c 	.word	0x2400a39c
 800b1e4:	00000000 	.word	0x00000000

0800b1e8 <GPS_RMC_Parse>:
// 返 回 值：
//			 1: 解析GPRMC完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_RMC_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08a      	sub	sp, #40	; 0x28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
	uint8_t ch, status, tmp;
	float lati_cent_tmp, lati_second_tmp;
	float long_cent_tmp, long_second_tmp;
	float speed_tmp;
	uint8_t *buf = line;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	627b      	str	r3, [r7, #36]	; 0x24
	ch = buf[5];
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	795b      	ldrb	r3, [r3, #5]
 800b1fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status = buf[GetComma(2, buf)];
 800b1fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b200:	2002      	movs	r0, #2
 800b202:	f000 fd43 	bl	800bc8c <GetComma>
 800b206:	4603      	mov	r3, r0
 800b208:	461a      	mov	r2, r3
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	4413      	add	r3, r2
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	if (ch == 'C')  //如果第五个字符是C，($GPRMC)
 800b214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b218:	2b43      	cmp	r3, #67	; 0x43
 800b21a:	f040 8169 	bne.w	800b4f0 <GPS_RMC_Parse+0x308>
	{
		if (status == 'A')  //如果数据有效，则分析
 800b21e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b222:	2b41      	cmp	r3, #65	; 0x41
 800b224:	f040 8164 	bne.w	800b4f0 <GPS_RMC_Parse+0x308>
		{
			GPS -> NS       = buf[GetComma(4, buf)];
 800b228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b22a:	2004      	movs	r0, #4
 800b22c:	f000 fd2e 	bl	800bc8c <GetComma>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	4413      	add	r3, r2
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			GPS -> EW       = buf[GetComma(6, buf)];
 800b240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b242:	2006      	movs	r0, #6
 800b244:	f000 fd22 	bl	800bc8c <GetComma>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	4413      	add	r3, r2
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

			GPS->latitude   = Get_Double_Number(&buf[GetComma(3, buf)]);
 800b258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b25a:	2003      	movs	r0, #3
 800b25c:	f000 fd16 	bl	800bc8c <GetComma>
 800b260:	4603      	mov	r3, r0
 800b262:	461a      	mov	r2, r3
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	4413      	add	r3, r2
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 fcdf 	bl	800bc2c <Get_Double_Number>
 800b26e:	eeb0 7b40 	vmov.f64	d7, d0
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	ed83 7b00 	vstr	d7, [r3]
			GPS->longitude  = Get_Double_Number(&buf[GetComma( 5, buf)]);
 800b278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b27a:	2005      	movs	r0, #5
 800b27c:	f000 fd06 	bl	800bc8c <GetComma>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	4413      	add	r3, r2
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fccf 	bl	800bc2c <Get_Double_Number>
 800b28e:	eeb0 7b40 	vmov.f64	d7, d0
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	ed83 7b02 	vstr	d7, [r3, #8]

      GPS->latitude_Degree  = (int32_t)GPS->latitude / 100;       //分离纬度
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	ed93 7b00 	vldr	d7, [r3]
 800b29e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b2a2:	ee17 1a90 	vmov	r1, s15
 800b2a6:	4b98      	ldr	r3, [pc, #608]	; (800b508 <GPS_RMC_Parse+0x320>)
 800b2a8:	fb83 2301 	smull	r2, r3, r3, r1
 800b2ac:	115a      	asrs	r2, r3, #5
 800b2ae:	17cb      	asrs	r3, r1, #31
 800b2b0:	1ad2      	subs	r2, r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	621a      	str	r2, [r3, #32]
			lati_cent_tmp         = (GPS->latitude - GPS->latitude_Degree * 100);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	ed93 6b00 	vldr	d6, [r3]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	2264      	movs	r2, #100	; 0x64
 800b2c2:	fb02 f303 	mul.w	r3, r2, r3
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b2ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b2d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b2d6:	edc7 7a07 	vstr	s15, [r7, #28]
			GPS->latitude_Cent    = (int32_t)lati_cent_tmp;
 800b2da:	edd7 7a07 	vldr	s15, [r7, #28]
 800b2de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2e2:	ee17 2a90 	vmov	r2, s15
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	625a      	str	r2, [r3, #36]	; 0x24
			lati_second_tmp       = (lati_cent_tmp - GPS->latitude_Cent) * 60;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2f6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b2fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2fe:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b50c <GPS_RMC_Parse+0x324>
 800b302:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b306:	edc7 7a06 	vstr	s15, [r7, #24]
			GPS->latitude_Second  = (int32_t)lati_second_tmp;
 800b30a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b30e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b312:	ee17 2a90 	vmov	r2, s15
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	629a      	str	r2, [r3, #40]	; 0x28

			GPS->longitude_Degree = (int32_t)GPS->longitude / 100;	//分离经度
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b320:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b324:	ee17 1a90 	vmov	r1, s15
 800b328:	4b77      	ldr	r3, [pc, #476]	; (800b508 <GPS_RMC_Parse+0x320>)
 800b32a:	fb83 2301 	smull	r2, r3, r3, r1
 800b32e:	115a      	asrs	r2, r3, #5
 800b330:	17cb      	asrs	r3, r1, #31
 800b332:	1ad2      	subs	r2, r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	62da      	str	r2, [r3, #44]	; 0x2c
			long_cent_tmp         = (GPS->longitude - GPS->longitude_Degree * 100);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	ed93 6b02 	vldr	d6, [r3, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b342:	2264      	movs	r2, #100	; 0x64
 800b344:	fb02 f303 	mul.w	r3, r2, r3
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b350:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b354:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b358:	edc7 7a05 	vstr	s15, [r7, #20]
			GPS->longitude_Cent   = (int32_t)long_cent_tmp;    
 800b35c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b364:	ee17 2a90 	vmov	r2, s15
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
			long_second_tmp       = (long_cent_tmp - GPS->longitude_Cent) * 60;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b370:	ee07 3a90 	vmov	s15, r3
 800b374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b378:	ed97 7a05 	vldr	s14, [r7, #20]
 800b37c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b380:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800b50c <GPS_RMC_Parse+0x324>
 800b384:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b388:	edc7 7a04 	vstr	s15, [r7, #16]
			GPS->longitude_Second = (int32_t)long_second_tmp;
 800b38c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b394:	ee17 2a90 	vmov	r2, s15
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	635a      	str	r2, [r3, #52]	; 0x34

			speed_tmp      = Get_Float_Number(&buf[GetComma(7, buf)]);    //速度(单位：海里/时)
 800b39c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b39e:	2007      	movs	r0, #7
 800b3a0:	f000 fc74 	bl	800bc8c <GetComma>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 fb3d 	bl	800ba2c <Get_Float_Number>
 800b3b2:	ed87 0a03 	vstr	s0, [r7, #12]
			GPS->speed     = speed_tmp * 1.85;                           //1海里=1.85公里
 800b3b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b3be:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800b500 <GPS_RMC_Parse+0x318>
 800b3c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	edc3 7a05 	vstr	s15, [r3, #20]
			GPS->direction = Get_Float_Number(&buf[GetComma(8, buf)]); //角度			
 800b3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3d2:	2008      	movs	r0, #8
 800b3d4:	f000 fc5a 	bl	800bc8c <GetComma>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	461a      	mov	r2, r3
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	4413      	add	r3, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fb23 	bl	800ba2c <Get_Float_Number>
 800b3e6:	eef0 7a40 	vmov.f32	s15, s0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	edc3 7a06 	vstr	s15, [r3, #24]

			GPS->D.hour    = (buf[7] - '0') * 10 + (buf[8] - '0');		//时间
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	3307      	adds	r3, #7
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	461a      	mov	r2, r3
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	3308      	adds	r3, #8
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	3b30      	subs	r3, #48	; 0x30
 800b40c:	441a      	add	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	64da      	str	r2, [r3, #76]	; 0x4c
			GPS->D.minute  = (buf[9] - '0') * 10 + (buf[10] - '0');
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	3309      	adds	r3, #9
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	461a      	mov	r2, r3
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	330a      	adds	r3, #10
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	3b30      	subs	r3, #48	; 0x30
 800b42e:	441a      	add	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	651a      	str	r2, [r3, #80]	; 0x50
			GPS->D.second  = (buf[11] - '0') * 10 + (buf[12] - '0');
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	330b      	adds	r3, #11
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	461a      	mov	r2, r3
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	330c      	adds	r3, #12
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	3b30      	subs	r3, #48	; 0x30
 800b450:	441a      	add	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	655a      	str	r2, [r3, #84]	; 0x54
			tmp = GetComma(9, buf);
 800b456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b458:	2009      	movs	r0, #9
 800b45a:	f000 fc17 	bl	800bc8c <GetComma>
 800b45e:	4603      	mov	r3, r0
 800b460:	72fb      	strb	r3, [r7, #11]
			GPS->D.day     = (buf[tmp + 0] - '0') * 10 + (buf[tmp + 1] - '0'); //日期
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b466:	4413      	add	r3, r2
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	4619      	mov	r1, r3
 800b478:	7afb      	ldrb	r3, [r7, #11]
 800b47a:	3301      	adds	r3, #1
 800b47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47e:	4413      	add	r3, r2
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	3b30      	subs	r3, #48	; 0x30
 800b484:	18ca      	adds	r2, r1, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	649a      	str	r2, [r3, #72]	; 0x48
			GPS->D.month   = (buf[tmp + 2] - '0') * 10 + (buf[tmp + 3] - '0');
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	3302      	adds	r3, #2
 800b48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b490:	4413      	add	r3, r2
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	3303      	adds	r3, #3
 800b4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a8:	4413      	add	r3, r2
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	3b30      	subs	r3, #48	; 0x30
 800b4ae:	18ca      	adds	r2, r1, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	645a      	str	r2, [r3, #68]	; 0x44
			GPS->D.year    = (buf[tmp + 4] - '0') * 10 + (buf[tmp + 5] - '0')+2000;
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ba:	4413      	add	r3, r2
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	7afb      	ldrb	r3, [r7, #11]
 800b4ce:	3305      	adds	r3, #5
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d2:	4413      	add	r3, r2
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	3b30      	subs	r3, #48	; 0x30
 800b4d8:	440b      	add	r3, r1
 800b4da:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	641a      	str	r2, [r3, #64]	; 0x40

			UTC2BTC(&GPS->D);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3340      	adds	r3, #64	; 0x40
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f875 	bl	800b5d6 <UTC2BTC>
			
			return 1;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e000      	b.n	800b4f2 <GPS_RMC_Parse+0x30a>
		}		
	}
	
	return 0;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3728      	adds	r7, #40	; 0x28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	f3af 8000 	nop.w
 800b500:	9999999a 	.word	0x9999999a
 800b504:	3ffd9999 	.word	0x3ffd9999
 800b508:	51eb851f 	.word	0x51eb851f
 800b50c:	42700000 	.word	0x42700000

0800b510 <GPS_GGA_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GGA_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
	uint8_t ch, status;
	uint8_t *buf = line;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
	ch = buf[4];
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	791b      	ldrb	r3, [r3, #4]
 800b522:	72fb      	strb	r3, [r7, #11]
	status = buf[GetComma(2, buf)];
 800b524:	68f9      	ldr	r1, [r7, #12]
 800b526:	2002      	movs	r0, #2
 800b528:	f000 fbb0 	bl	800bc8c <GetComma>
 800b52c:	4603      	mov	r3, r0
 800b52e:	461a      	mov	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	72bb      	strb	r3, [r7, #10]

	if (ch == 'G')  //$GPGGA
 800b538:	7afb      	ldrb	r3, [r7, #11]
 800b53a:	2b47      	cmp	r3, #71	; 0x47
 800b53c:	d124      	bne.n	800b588 <GPS_GGA_Parse+0x78>
	{
		if (status != ',')
 800b53e:	7abb      	ldrb	r3, [r7, #10]
 800b540:	2b2c      	cmp	r3, #44	; 0x2c
 800b542:	d021      	beq.n	800b588 <GPS_GGA_Parse+0x78>
		{
			GPS->height_sea = Get_Float_Number(&buf[GetComma(9, buf)]);
 800b544:	68f9      	ldr	r1, [r7, #12]
 800b546:	2009      	movs	r0, #9
 800b548:	f000 fba0 	bl	800bc8c <GetComma>
 800b54c:	4603      	mov	r3, r0
 800b54e:	461a      	mov	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4413      	add	r3, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fa69 	bl	800ba2c <Get_Float_Number>
 800b55a:	eef0 7a40 	vmov.f32	s15, s0
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	edc3 7a04 	vstr	s15, [r3, #16]
			GPS->height_ground = Get_Float_Number(&buf[GetComma(11, buf)]);
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	200b      	movs	r0, #11
 800b568:	f000 fb90 	bl	800bc8c <GetComma>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fa59 	bl	800ba2c <Get_Float_Number>
 800b57a:	eef0 7a40 	vmov.f32	s15, s0
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	edc3 7a07 	vstr	s15, [r3, #28]

			return 1;
 800b584:	2301      	movs	r3, #1
 800b586:	e000      	b.n	800b58a <GPS_GGA_Parse+0x7a>
		}
	}
	
	return 0;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <GPS_GSV_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GSV_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
	uint8_t ch;
	uint8_t *buf = line;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	60fb      	str	r3, [r7, #12]
	ch = buf[5];
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	795b      	ldrb	r3, [r3, #5]
 800b5a4:	72fb      	strb	r3, [r7, #11]

	if (ch == 'V')  //$GPGSV
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	2b56      	cmp	r3, #86	; 0x56
 800b5aa:	d10f      	bne.n	800b5cc <GPS_GSV_Parse+0x3a>
	{
		GPS->satellite = Get_Int_Number(&buf[GetComma(3, buf)]);
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	2003      	movs	r0, #3
 800b5b0:	f000 fb6c 	bl	800bc8c <GetComma>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 f963 	bl	800b888 <Get_Int_Number>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	639a      	str	r2, [r3, #56]	; 0x38
		return 1;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e000      	b.n	800b5ce <GPS_GSV_Parse+0x3c>
	}
	
	return 0;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <UTC2BTC>:
// 实现功能：转化时间为北京时区的时间
// 参    数：存放时间的结构体
// 返 回 值：无
//====================================================================//
void UTC2BTC(DATE_TIME *date_time)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b083      	sub	sp, #12
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
	date_time->second ++;  
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	615a      	str	r2, [r3, #20]
	if(date_time->second > 59)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	2b3b      	cmp	r3, #59	; 0x3b
 800b5ee:	dd13      	ble.n	800b618 <UTC2BTC+0x42>
	{
		date_time->second = 0;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	615a      	str	r2, [r3, #20]
		date_time->minute ++;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	611a      	str	r2, [r3, #16]
		if(date_time->minute > 59)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	2b3b      	cmp	r3, #59	; 0x3b
 800b606:	dd07      	ble.n	800b618 <UTC2BTC+0x42>
		{
			date_time->minute = 0;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	611a      	str	r2, [r3, #16]
			date_time->hour ++;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	60da      	str	r2, [r3, #12]
		}
	}	

    date_time->hour = date_time->hour + 8;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f103 0208 	add.w	r2, r3, #8
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60da      	str	r2, [r3, #12]
	if(date_time->hour > 23)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b17      	cmp	r3, #23
 800b62a:	dd6d      	ble.n	800b708 <UTC2BTC+0x132>
	{
		date_time->hour -= 24;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f1a3 0218 	sub.w	r2, r3, #24
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]
		date_time->day += 1;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	609a      	str	r2, [r3, #8]
		if(date_time->month == 2 ||
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d00f      	beq.n	800b66a <UTC2BTC+0x94>
		   		date_time->month == 4 ||
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685b      	ldr	r3, [r3, #4]
		if(date_time->month == 2 ||
 800b64e:	2b04      	cmp	r3, #4
 800b650:	d00b      	beq.n	800b66a <UTC2BTC+0x94>
		   		date_time->month == 6 ||
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 4 ||
 800b656:	2b06      	cmp	r3, #6
 800b658:	d007      	beq.n	800b66a <UTC2BTC+0x94>
		   		date_time->month == 9 ||
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 6 ||
 800b65e:	2b09      	cmp	r3, #9
 800b660:	d003      	beq.n	800b66a <UTC2BTC+0x94>
		   		date_time->month == 11 )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 9 ||
 800b666:	2b0b      	cmp	r3, #11
 800b668:	d10c      	bne.n	800b684 <UTC2BTC+0xae>
		{
			if(date_time->day > 30)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b1e      	cmp	r3, #30
 800b670:	dd14      	ble.n	800b69c <UTC2BTC+0xc6>
			{
		   		date_time->day = 1;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	609a      	str	r2, [r3, #8]
				date_time->month++;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]
			if(date_time->day > 30)
 800b682:	e00b      	b.n	800b69c <UTC2BTC+0xc6>
			}
		}
		else
		{
			if(date_time->day > 31)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	2b1f      	cmp	r3, #31
 800b68a:	dd07      	ble.n	800b69c <UTC2BTC+0xc6>
			{	
		   		date_time->day = 1;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->year % 4 == 0 )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 0303 	and.w	r3, r3, #3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d110      	bne.n	800b6ca <UTC2BTC+0xf4>
		{
	   		if(date_time->day > 29 && date_time->month == 2)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	2b1d      	cmp	r3, #29
 800b6ae:	dd1c      	ble.n	800b6ea <UTC2BTC+0x114>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d118      	bne.n	800b6ea <UTC2BTC+0x114>
			{		
	   			date_time->day = 1;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	605a      	str	r2, [r3, #4]
 800b6c8:	e00f      	b.n	800b6ea <UTC2BTC+0x114>
			}
		}
		else
		{
	   		if(date_time->day > 28 &&date_time->month == 2)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	2b1c      	cmp	r3, #28
 800b6d0:	dd0b      	ble.n	800b6ea <UTC2BTC+0x114>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d107      	bne.n	800b6ea <UTC2BTC+0x114>
			{
	   			date_time->day = 1;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->month > 12)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	2b0c      	cmp	r3, #12
 800b6f0:	dd0a      	ble.n	800b708 <UTC2BTC+0x132>
		{
			date_time->month -= 12;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f1a3 020c 	sub.w	r2, r3, #12
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	605a      	str	r2, [r3, #4]
			date_time->year ++;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	601a      	str	r2, [r3, #0]
		}		
	}
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <StartOV2640>:
{
	osSemaphoreRelease(sem_TakePhoto);
}*/

void StartOV2640()//拍照的线程
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <StartOV2640+0x38>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <StartOV2640+0x38>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f042 0201 	orr.w	r2, r2, #1
 800b72a:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800b72c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800b730:	2100      	movs	r1, #0
 800b732:	4807      	ldr	r0, [pc, #28]	; (800b750 <StartOV2640+0x3c>)
 800b734:	f000 fafc 	bl	800bd30 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800b738:	4b04      	ldr	r3, [pc, #16]	; (800b74c <StartOV2640+0x38>)
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	4a04      	ldr	r2, [pc, #16]	; (800b750 <StartOV2640+0x3c>)
 800b73e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b742:	2102      	movs	r1, #2
 800b744:	f7f6 fa1c 	bl	8001b80 <HAL_DCMI_Start_DMA>

}
 800b748:	bf00      	nop
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	2400a3f8 	.word	0x2400a3f8
 800b750:	24000040 	.word	0x24000040

0800b754 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800b75c:	4b18      	ldr	r3, [pc, #96]	; (800b7c0 <HAL_DCMI_FrameEventCallback+0x6c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4618      	mov	r0, r3
 800b762:	f7f6 fb2f 	bl	8001dc4 <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800b766:	4b16      	ldr	r3, [pc, #88]	; (800b7c0 <HAL_DCMI_FrameEventCallback+0x6c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7f6 faca 	bl	8001d04 <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800b770:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b774:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800b776:	e009      	b.n	800b78c <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	4a11      	ldr	r2, [pc, #68]	; (800b7c4 <HAL_DCMI_FrameEventCallback+0x70>)
 800b77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3b01      	subs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	dcf2      	bgt.n	800b778 <HAL_DCMI_FrameEventCallback+0x24>
 800b792:	e000      	b.n	800b796 <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800b794:	bf00      	nop
	}
	pictureLength*=4;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <HAL_DCMI_FrameEventCallback+0x74>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800b7a4:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <HAL_DCMI_FrameEventCallback+0x74>)
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	4b07      	ldr	r3, [pc, #28]	; (800b7cc <HAL_DCMI_FrameEventCallback+0x78>)
 800b7ae:	4905      	ldr	r1, [pc, #20]	; (800b7c4 <HAL_DCMI_FrameEventCallback+0x70>)
 800b7b0:	f7fd ff24 	bl	80095fc <HAL_UART_Transmit>

	StartOV2640();
 800b7b4:	f7ff ffae 	bl	800b714 <StartOV2640>
}
 800b7b8:	bf00      	nop
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	2400a3f8 	.word	0x2400a3f8
 800b7c4:	24000040 	.word	0x24000040
 800b7c8:	2400a3fc 	.word	0x2400a3fc
 800b7cc:	000186a0 	.word	0x000186a0

0800b7d0 <Str_To_Int>:
// 实现功能： 把一个字符串转化成整数
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Str_To_Int(uint8_t *buf)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
	int32_t rev = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
	int32_t dat;
	uint8_t *str = buf;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800b7e0:	e046      	b.n	800b870 <Str_To_Int+0xa0>
	{
		switch(*str)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	3b30      	subs	r3, #48	; 0x30
 800b7e8:	2b09      	cmp	r3, #9
 800b7ea:	d835      	bhi.n	800b858 <Str_To_Int+0x88>
 800b7ec:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <Str_To_Int+0x24>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b81d 	.word	0x0800b81d
 800b7f8:	0800b823 	.word	0x0800b823
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	0800b82f 	.word	0x0800b82f
 800b804:	0800b835 	.word	0x0800b835
 800b808:	0800b83b 	.word	0x0800b83b
 800b80c:	0800b841 	.word	0x0800b841
 800b810:	0800b847 	.word	0x0800b847
 800b814:	0800b84d 	.word	0x0800b84d
 800b818:	0800b853 	.word	0x0800b853
		{
			case '0':
				dat = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	613b      	str	r3, [r7, #16]
				break;
 800b820:	e01a      	b.n	800b858 <Str_To_Int+0x88>
			case '1':
				dat = 1;
 800b822:	2301      	movs	r3, #1
 800b824:	613b      	str	r3, [r7, #16]
				break;
 800b826:	e017      	b.n	800b858 <Str_To_Int+0x88>
			case '2':
				dat = 2;
 800b828:	2302      	movs	r3, #2
 800b82a:	613b      	str	r3, [r7, #16]
				break;		
 800b82c:	e014      	b.n	800b858 <Str_To_Int+0x88>
			case '3':
				dat = 3;
 800b82e:	2303      	movs	r3, #3
 800b830:	613b      	str	r3, [r7, #16]
				break;
 800b832:	e011      	b.n	800b858 <Str_To_Int+0x88>
			case '4':
				dat = 4;
 800b834:	2304      	movs	r3, #4
 800b836:	613b      	str	r3, [r7, #16]
				break;
 800b838:	e00e      	b.n	800b858 <Str_To_Int+0x88>
			case '5':
				dat = 5;
 800b83a:	2305      	movs	r3, #5
 800b83c:	613b      	str	r3, [r7, #16]
				break;
 800b83e:	e00b      	b.n	800b858 <Str_To_Int+0x88>
			case '6':
				dat = 6;
 800b840:	2306      	movs	r3, #6
 800b842:	613b      	str	r3, [r7, #16]
				break;
 800b844:	e008      	b.n	800b858 <Str_To_Int+0x88>
			case '7':
				dat = 7;
 800b846:	2307      	movs	r3, #7
 800b848:	613b      	str	r3, [r7, #16]
				break;
 800b84a:	e005      	b.n	800b858 <Str_To_Int+0x88>
			case '8':
				dat = 8;
 800b84c:	2308      	movs	r3, #8
 800b84e:	613b      	str	r3, [r7, #16]
				break;
 800b850:	e002      	b.n	800b858 <Str_To_Int+0x88>
			case '9':
				dat = 9;
 800b852:	2309      	movs	r3, #9
 800b854:	613b      	str	r3, [r7, #16]
				break;
 800b856:	bf00      	nop
		}

		rev = rev * 10 + dat;
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	461a      	mov	r2, r3
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	4413      	add	r3, r2
 800b868:	617b      	str	r3, [r7, #20]
		str ++;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1b4      	bne.n	800b7e2 <Str_To_Int+0x12>
	}

	return rev;
 800b878:	697b      	ldr	r3, [r7, #20]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop

0800b888 <Get_Int_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成整型
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Get_Int_Number(uint8_t *s)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	int32_t rev;
	i=GetComma(1, s);
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	2001      	movs	r0, #1
 800b894:	f000 f9fa 	bl	800bc8c <GetComma>
 800b898:	4603      	mov	r3, r0
 800b89a:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800b89c:	7ffb      	ldrb	r3, [r7, #31]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800b8a2:	7ffa      	ldrb	r2, [r7, #31]
 800b8a4:	f107 030c 	add.w	r3, r7, #12
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fa48 	bl	800bd40 <strncpy>
	buf[i] = 0;
 800b8b0:	7ffb      	ldrb	r3, [r7, #31]
 800b8b2:	f107 0220 	add.w	r2, r7, #32
 800b8b6:	4413      	add	r3, r2
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Int(buf);
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff ff84 	bl	800b7d0 <Str_To_Int>
 800b8c8:	61b8      	str	r0, [r7, #24]
	return rev;	
 800b8ca:	69bb      	ldr	r3, [r7, #24]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3720      	adds	r7, #32
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <Str_To_Float>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Str_To_Float(uint8_t *buf)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b089      	sub	sp, #36	; 0x24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	float rev = 0;
 800b8dc:	f04f 0300 	mov.w	r3, #0
 800b8e0:	61fb      	str	r3, [r7, #28]
	float dat;
	int32_t integer = 1;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800b8ea:	e082      	b.n	800b9f2 <Str_To_Float+0x11e>
	{
		switch(*str)
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	3b2e      	subs	r3, #46	; 0x2e
 800b8f2:	2b0b      	cmp	r3, #11
 800b8f4:	d840      	bhi.n	800b978 <Str_To_Float+0xa4>
 800b8f6:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <Str_To_Float+0x28>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b973 	.word	0x0800b973
 800b900:	0800b979 	.word	0x0800b979
 800b904:	0800b92d 	.word	0x0800b92d
 800b908:	0800b935 	.word	0x0800b935
 800b90c:	0800b93d 	.word	0x0800b93d
 800b910:	0800b945 	.word	0x0800b945
 800b914:	0800b94b 	.word	0x0800b94b
 800b918:	0800b953 	.word	0x0800b953
 800b91c:	0800b959 	.word	0x0800b959
 800b920:	0800b95f 	.word	0x0800b95f
 800b924:	0800b965 	.word	0x0800b965
 800b928:	0800b96d 	.word	0x0800b96d
		{
			case '0':
				dat = 0;
 800b92c:	f04f 0300 	mov.w	r3, #0
 800b930:	61bb      	str	r3, [r7, #24]
				break;
 800b932:	e021      	b.n	800b978 <Str_To_Float+0xa4>
			case '1':
				dat = 1;
 800b934:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b938:	61bb      	str	r3, [r7, #24]
				break;
 800b93a:	e01d      	b.n	800b978 <Str_To_Float+0xa4>
			case '2':
				dat = 2;
 800b93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b940:	61bb      	str	r3, [r7, #24]
				break;		
 800b942:	e019      	b.n	800b978 <Str_To_Float+0xa4>
			case '3':
				dat = 3;
 800b944:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <Str_To_Float+0x13c>)
 800b946:	61bb      	str	r3, [r7, #24]
				break;
 800b948:	e016      	b.n	800b978 <Str_To_Float+0xa4>
			case '4':
				dat = 4;
 800b94a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800b94e:	61bb      	str	r3, [r7, #24]
				break;
 800b950:	e012      	b.n	800b978 <Str_To_Float+0xa4>
			case '5':
				dat = 5;
 800b952:	4b30      	ldr	r3, [pc, #192]	; (800ba14 <Str_To_Float+0x140>)
 800b954:	61bb      	str	r3, [r7, #24]
				break;
 800b956:	e00f      	b.n	800b978 <Str_To_Float+0xa4>
			case '6':
				dat = 6;
 800b958:	4b2f      	ldr	r3, [pc, #188]	; (800ba18 <Str_To_Float+0x144>)
 800b95a:	61bb      	str	r3, [r7, #24]
				break;
 800b95c:	e00c      	b.n	800b978 <Str_To_Float+0xa4>
			case '7':
				dat = 7;
 800b95e:	4b2f      	ldr	r3, [pc, #188]	; (800ba1c <Str_To_Float+0x148>)
 800b960:	61bb      	str	r3, [r7, #24]
				break;
 800b962:	e009      	b.n	800b978 <Str_To_Float+0xa4>
			case '8':
				dat = 8;
 800b964:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800b968:	61bb      	str	r3, [r7, #24]
				break;
 800b96a:	e005      	b.n	800b978 <Str_To_Float+0xa4>
			case '9':
				dat = 9;
 800b96c:	4b2c      	ldr	r3, [pc, #176]	; (800ba20 <Str_To_Float+0x14c>)
 800b96e:	61bb      	str	r3, [r7, #24]
				break;
 800b970:	e002      	b.n	800b978 <Str_To_Float+0xa4>
			case '.':
				dat = '.';
 800b972:	4b2c      	ldr	r3, [pc, #176]	; (800ba24 <Str_To_Float+0x150>)
 800b974:	61bb      	str	r3, [r7, #24]
				break;
 800b976:	bf00      	nop
		}
		if(dat == '.')
 800b978:	edd7 7a06 	vldr	s15, [r7, #24]
 800b97c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800ba28 <Str_To_Float+0x154>
 800b980:	eef4 7a47 	vcmp.f32	s15, s14
 800b984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b988:	d107      	bne.n	800b99a <Str_To_Float+0xc6>
		{
			integer = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	617b      	str	r3, [r7, #20]
			i = 1;
 800b98e:	2301      	movs	r3, #1
 800b990:	60fb      	str	r3, [r7, #12]
			str ++;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3301      	adds	r3, #1
 800b996:	613b      	str	r3, [r7, #16]
			continue;
 800b998:	e02b      	b.n	800b9f2 <Str_To_Float+0x11e>
		}
		if( integer == 1 )
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d10c      	bne.n	800b9ba <Str_To_Float+0xe6>
		{
			rev = rev * 10 + dat;
 800b9a0:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b9a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9ac:	ed97 7a06 	vldr	s14, [r7, #24]
 800b9b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9b4:	edc7 7a07 	vstr	s15, [r7, #28]
 800b9b8:	e018      	b.n	800b9ec <Str_To_Float+0x118>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	ee07 3a90 	vmov	s15, r3
 800b9c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9cc:	edd7 6a06 	vldr	s13, [r7, #24]
 800b9d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d4:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9dc:	edc7 7a07 	vstr	s15, [r7, #28]
			i = i * 10 ;
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f47f af78 	bne.w	800b8ec <Str_To_Float+0x18>
	}
	return rev;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	ee07 3a90 	vmov	s15, r3

}
 800ba02:	eeb0 0a67 	vmov.f32	s0, s15
 800ba06:	3724      	adds	r7, #36	; 0x24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	40400000 	.word	0x40400000
 800ba14:	40a00000 	.word	0x40a00000
 800ba18:	40c00000 	.word	0x40c00000
 800ba1c:	40e00000 	.word	0x40e00000
 800ba20:	41100000 	.word	0x41100000
 800ba24:	42380000 	.word	0x42380000
 800ba28:	42380000 	.word	0x42380000

0800ba2c <Get_Float_Number>:
// 实现功能： 把给定字符串第一个逗号之前的字符转化成单精度型
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Get_Float_Number(uint8_t *s)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	float rev;
	i=GetComma(1, s);
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	2001      	movs	r0, #1
 800ba38:	f000 f928 	bl	800bc8c <GetComma>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800ba40:	7ffb      	ldrb	r3, [r7, #31]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800ba46:	7ffa      	ldrb	r2, [r7, #31]
 800ba48:	f107 030c 	add.w	r3, r7, #12
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f976 	bl	800bd40 <strncpy>
	buf[i] = 0;
 800ba54:	7ffb      	ldrb	r3, [r7, #31]
 800ba56:	f107 0220 	add.w	r2, r7, #32
 800ba5a:	4413      	add	r3, r2
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Float(buf);
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff ff34 	bl	800b8d4 <Str_To_Float>
 800ba6c:	ed87 0a06 	vstr	s0, [r7, #24]
	return rev;	
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	ee07 3a90 	vmov	s15, r3
}
 800ba76:	eeb0 0a67 	vmov.f32	s0, s15
 800ba7a:	3720      	adds	r7, #32
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <Str_To_Double>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Str_To_Double(uint8_t *buf)
{
 800ba80:	b490      	push	{r4, r7}
 800ba82:	b08a      	sub	sp, #40	; 0x28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	double rev = 0;
 800ba88:	f04f 0300 	mov.w	r3, #0
 800ba8c:	f04f 0400 	mov.w	r4, #0
 800ba90:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dat;
	int32_t integer = 1;
 800ba94:	2301      	movs	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800ba9c:	e0a1      	b.n	800bbe2 <Str_To_Double+0x162>
	{
		switch(*str)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	3b2e      	subs	r3, #46	; 0x2e
 800baa4:	2b0b      	cmp	r3, #11
 800baa6:	d85f      	bhi.n	800bb68 <Str_To_Double+0xe8>
 800baa8:	a201      	add	r2, pc, #4	; (adr r2, 800bab0 <Str_To_Double+0x30>)
 800baaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baae:	bf00      	nop
 800bab0:	0800bb5d 	.word	0x0800bb5d
 800bab4:	0800bb69 	.word	0x0800bb69
 800bab8:	0800bae1 	.word	0x0800bae1
 800babc:	0800baef 	.word	0x0800baef
 800bac0:	0800bafb 	.word	0x0800bafb
 800bac4:	0800bb09 	.word	0x0800bb09
 800bac8:	0800bb15 	.word	0x0800bb15
 800bacc:	0800bb21 	.word	0x0800bb21
 800bad0:	0800bb2d 	.word	0x0800bb2d
 800bad4:	0800bb39 	.word	0x0800bb39
 800bad8:	0800bb45 	.word	0x0800bb45
 800badc:	0800bb51 	.word	0x0800bb51
		{
			case '0':
				dat = 0;
 800bae0:	f04f 0300 	mov.w	r3, #0
 800bae4:	f04f 0400 	mov.w	r4, #0
 800bae8:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800baec:	e03c      	b.n	800bb68 <Str_To_Double+0xe8>
			case '1':
				dat = 1;
 800baee:	f04f 0300 	mov.w	r3, #0
 800baf2:	4c45      	ldr	r4, [pc, #276]	; (800bc08 <Str_To_Double+0x188>)
 800baf4:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800baf8:	e036      	b.n	800bb68 <Str_To_Double+0xe8>
			case '2':
				dat = 2;
 800bafa:	f04f 0300 	mov.w	r3, #0
 800bafe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800bb02:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;		
 800bb06:	e02f      	b.n	800bb68 <Str_To_Double+0xe8>
			case '3':
				dat = 3;
 800bb08:	f04f 0300 	mov.w	r3, #0
 800bb0c:	4c3f      	ldr	r4, [pc, #252]	; (800bc0c <Str_To_Double+0x18c>)
 800bb0e:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb12:	e029      	b.n	800bb68 <Str_To_Double+0xe8>
			case '4':
				dat = 4;
 800bb14:	f04f 0300 	mov.w	r3, #0
 800bb18:	4c3d      	ldr	r4, [pc, #244]	; (800bc10 <Str_To_Double+0x190>)
 800bb1a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb1e:	e023      	b.n	800bb68 <Str_To_Double+0xe8>
			case '5':
				dat = 5;
 800bb20:	f04f 0300 	mov.w	r3, #0
 800bb24:	4c3b      	ldr	r4, [pc, #236]	; (800bc14 <Str_To_Double+0x194>)
 800bb26:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb2a:	e01d      	b.n	800bb68 <Str_To_Double+0xe8>
			case '6':
				dat = 6;
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	4c39      	ldr	r4, [pc, #228]	; (800bc18 <Str_To_Double+0x198>)
 800bb32:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb36:	e017      	b.n	800bb68 <Str_To_Double+0xe8>
			case '7':
				dat = 7;
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	4c37      	ldr	r4, [pc, #220]	; (800bc1c <Str_To_Double+0x19c>)
 800bb3e:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb42:	e011      	b.n	800bb68 <Str_To_Double+0xe8>
			case '8':
				dat = 8;
 800bb44:	f04f 0300 	mov.w	r3, #0
 800bb48:	4c35      	ldr	r4, [pc, #212]	; (800bc20 <Str_To_Double+0x1a0>)
 800bb4a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb4e:	e00b      	b.n	800bb68 <Str_To_Double+0xe8>
			case '9':
				dat = 9;
 800bb50:	f04f 0300 	mov.w	r3, #0
 800bb54:	4c33      	ldr	r4, [pc, #204]	; (800bc24 <Str_To_Double+0x1a4>)
 800bb56:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb5a:	e005      	b.n	800bb68 <Str_To_Double+0xe8>
			case '.':
				dat = '.';
 800bb5c:	f04f 0300 	mov.w	r3, #0
 800bb60:	4c31      	ldr	r4, [pc, #196]	; (800bc28 <Str_To_Double+0x1a8>)
 800bb62:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800bb66:	bf00      	nop
		}
		if(dat == '.')
 800bb68:	ed97 7b06 	vldr	d7, [r7, #24]
 800bb6c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800bc00 <Str_To_Double+0x180>
 800bb70:	eeb4 7b46 	vcmp.f64	d7, d6
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	d107      	bne.n	800bb8a <Str_To_Double+0x10a>
		{
			integer = 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	617b      	str	r3, [r7, #20]
			i = 1;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	60fb      	str	r3, [r7, #12]
			str ++;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	3301      	adds	r3, #1
 800bb86:	613b      	str	r3, [r7, #16]
			continue;
 800bb88:	e02b      	b.n	800bbe2 <Str_To_Double+0x162>
		}
		if( integer == 1 )
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d10c      	bne.n	800bbaa <Str_To_Double+0x12a>
		{
			rev = rev * 10 + dat;
 800bb90:	ed97 7b08 	vldr	d7, [r7, #32]
 800bb94:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bb98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb9c:	ed97 6b06 	vldr	d6, [r7, #24]
 800bba0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bba4:	ed87 7b08 	vstr	d7, [r7, #32]
 800bba8:	e018      	b.n	800bbdc <Str_To_Double+0x15c>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	ee07 3a90 	vmov	s15, r3
 800bbb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bbbc:	ed97 5b06 	vldr	d5, [r7, #24]
 800bbc0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bbc4:	ed97 6b08 	vldr	d6, [r7, #32]
 800bbc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bbcc:	ed87 7b08 	vstr	d7, [r7, #32]
			i = i * 10 ;
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f47f af59 	bne.w	800ba9e <Str_To_Double+0x1e>
	}
	return rev;
 800bbec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bbf0:	ec44 3b17 	vmov	d7, r3, r4
}
 800bbf4:	eeb0 0b47 	vmov.f64	d0, d7
 800bbf8:	3728      	adds	r7, #40	; 0x28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bc90      	pop	{r4, r7}
 800bbfe:	4770      	bx	lr
 800bc00:	00000000 	.word	0x00000000
 800bc04:	40470000 	.word	0x40470000
 800bc08:	3ff00000 	.word	0x3ff00000
 800bc0c:	40080000 	.word	0x40080000
 800bc10:	40100000 	.word	0x40100000
 800bc14:	40140000 	.word	0x40140000
 800bc18:	40180000 	.word	0x40180000
 800bc1c:	401c0000 	.word	0x401c0000
 800bc20:	40200000 	.word	0x40200000
 800bc24:	40220000 	.word	0x40220000
 800bc28:	40470000 	.word	0x40470000

0800bc2c <Get_Double_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成双精度型
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Get_Double_Number(uint8_t *s)
{
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b08b      	sub	sp, #44	; 0x2c
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	double rev;
	i=GetComma(1, s);
 800bc34:	6879      	ldr	r1, [r7, #4]
 800bc36:	2001      	movs	r0, #1
 800bc38:	f000 f828 	bl	800bc8c <GetComma>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	i = i - 1;
 800bc42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc46:	3b01      	subs	r3, #1
 800bc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	strncpy(buf, s, i);
 800bc4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc50:	f107 030c 	add.w	r3, r7, #12
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 f872 	bl	800bd40 <strncpy>
	buf[i] = 0;
 800bc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc64:	4413      	add	r3, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	f803 2c1c 	strb.w	r2, [r3, #-28]
	rev=Str_To_Double(buf);
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff ff05 	bl	800ba80 <Str_To_Double>
 800bc76:	ed87 0b06 	vstr	d0, [r7, #24]
	return rev;	
 800bc7a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bc7e:	ec44 3b17 	vmov	d7, r3, r4
}
 800bc82:	eeb0 0b47 	vmov.f64	d0, d7
 800bc86:	372c      	adds	r7, #44	; 0x2c
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd90      	pop	{r4, r7, pc}

0800bc8c <GetComma>:
// 实现功能：计算字符串中各个逗号的位置
// 参    数：查找的逗号是第几个的个数，需要查找的字符串
// 返 回 值：0
//====================================================================//
uint8_t GetComma(uint8_t num,uint8_t *str)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73bb      	strb	r3, [r7, #14]
	int32_t len=strlen(str);
 800bc9c:	6838      	ldr	r0, [r7, #0]
 800bc9e:	f7f4 fb1b 	bl	80002d8 <strlen>
 800bca2:	4603      	mov	r3, r0
 800bca4:	60bb      	str	r3, [r7, #8]

	for(i = 0;i < len;i ++)
 800bca6:	2300      	movs	r3, #0
 800bca8:	73fb      	strb	r3, [r7, #15]
 800bcaa:	e013      	b.n	800bcd4 <GetComma+0x48>
	{
		if(str[i] == ',')
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b2c      	cmp	r3, #44	; 0x2c
 800bcb6:	d102      	bne.n	800bcbe <GetComma+0x32>
			j++;
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	73bb      	strb	r3, [r7, #14]
		if(j == num)
 800bcbe:	7bba      	ldrb	r2, [r7, #14]
 800bcc0:	79fb      	ldrb	r3, [r7, #7]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d103      	bne.n	800bcce <GetComma+0x42>
			return i + 1;	
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	e007      	b.n	800bcde <GetComma+0x52>
	for(i = 0;i < len;i ++)
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	dce7      	bgt.n	800bcac <GetComma+0x20>
	}

	return 0;	
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <__libc_init_array>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	4e0d      	ldr	r6, [pc, #52]	; (800bd20 <__libc_init_array+0x38>)
 800bcec:	4c0d      	ldr	r4, [pc, #52]	; (800bd24 <__libc_init_array+0x3c>)
 800bcee:	1ba4      	subs	r4, r4, r6
 800bcf0:	10a4      	asrs	r4, r4, #2
 800bcf2:	2500      	movs	r5, #0
 800bcf4:	42a5      	cmp	r5, r4
 800bcf6:	d109      	bne.n	800bd0c <__libc_init_array+0x24>
 800bcf8:	4e0b      	ldr	r6, [pc, #44]	; (800bd28 <__libc_init_array+0x40>)
 800bcfa:	4c0c      	ldr	r4, [pc, #48]	; (800bd2c <__libc_init_array+0x44>)
 800bcfc:	f000 f836 	bl	800bd6c <_init>
 800bd00:	1ba4      	subs	r4, r4, r6
 800bd02:	10a4      	asrs	r4, r4, #2
 800bd04:	2500      	movs	r5, #0
 800bd06:	42a5      	cmp	r5, r4
 800bd08:	d105      	bne.n	800bd16 <__libc_init_array+0x2e>
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd10:	4798      	blx	r3
 800bd12:	3501      	adds	r5, #1
 800bd14:	e7ee      	b.n	800bcf4 <__libc_init_array+0xc>
 800bd16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd1a:	4798      	blx	r3
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	e7f2      	b.n	800bd06 <__libc_init_array+0x1e>
 800bd20:	0800bdcc 	.word	0x0800bdcc
 800bd24:	0800bdcc 	.word	0x0800bdcc
 800bd28:	0800bdcc 	.word	0x0800bdcc
 800bd2c:	0800bdd0 	.word	0x0800bdd0

0800bd30 <memset>:
 800bd30:	4402      	add	r2, r0
 800bd32:	4603      	mov	r3, r0
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d100      	bne.n	800bd3a <memset+0xa>
 800bd38:	4770      	bx	lr
 800bd3a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd3e:	e7f9      	b.n	800bd34 <memset+0x4>

0800bd40 <strncpy>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	3901      	subs	r1, #1
 800bd44:	4604      	mov	r4, r0
 800bd46:	b902      	cbnz	r2, 800bd4a <strncpy+0xa>
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
 800bd4a:	4623      	mov	r3, r4
 800bd4c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bd50:	f803 5b01 	strb.w	r5, [r3], #1
 800bd54:	1e56      	subs	r6, r2, #1
 800bd56:	b92d      	cbnz	r5, 800bd64 <strncpy+0x24>
 800bd58:	4414      	add	r4, r2
 800bd5a:	42a3      	cmp	r3, r4
 800bd5c:	d0f4      	beq.n	800bd48 <strncpy+0x8>
 800bd5e:	f803 5b01 	strb.w	r5, [r3], #1
 800bd62:	e7fa      	b.n	800bd5a <strncpy+0x1a>
 800bd64:	461c      	mov	r4, r3
 800bd66:	4632      	mov	r2, r6
 800bd68:	e7ed      	b.n	800bd46 <strncpy+0x6>
	...

0800bd6c <_init>:
 800bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6e:	bf00      	nop
 800bd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd72:	bc08      	pop	{r3}
 800bd74:	469e      	mov	lr, r3
 800bd76:	4770      	bx	lr

0800bd78 <_fini>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr
