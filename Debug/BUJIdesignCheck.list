
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c21c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4f4  0800c4f4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4f4  0800c4f4  0001c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4fc  0800c4fc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c500  0800c500  0001c500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  0800c504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a4fc  24000028  0800c528  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400a524  0800c528  0002a524  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030eda  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d22  00000000  00000000  00050f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  00055c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001610  00000000  00000000  00057458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a523  00000000  00000000  00058a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a5ba  00000000  00000000  00092f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00169238  00000000  00000000  000ad545  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021677d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006428  00000000  00000000  002167f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c49c 	.word	0x0800c49c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	0800c49c 	.word	0x0800c49c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_DCMI_Init+0x60>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_DCMI_Init+0x64>)
 80005f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_DCMI_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_DCMI_Init+0x60>)
 80005fa:	2220      	movs	r2, #32
 80005fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_DCMI_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_DCMI_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_DCMI_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DCMI_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DCMI_Init+0x60>)
 8000618:	2208      	movs	r2, #8
 800061a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_DCMI_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DCMI_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_DCMI_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_DCMI_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_DCMI_Init+0x60>)
 8000636:	f001 fa89 	bl	8001b4c <HAL_DCMI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 fc38 	bl	8000eb4 <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2400a0c4 	.word	0x2400a0c4
 800064c:	48020000 	.word	0x48020000

08000650 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a7a      	ldr	r2, [pc, #488]	; (8000858 <HAL_DCMI_MspInit+0x208>)
 800066e:	4293      	cmp	r3, r2
 8000670:	f040 80ed 	bne.w	800084e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000674:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	4a78      	ldr	r2, [pc, #480]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000684:	4b75      	ldr	r3, [pc, #468]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	623b      	str	r3, [r7, #32]
 8000690:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b72      	ldr	r3, [pc, #456]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	4a70      	ldr	r2, [pc, #448]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a2:	4b6e      	ldr	r3, [pc, #440]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	4a69      	ldr	r2, [pc, #420]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c0:	4b66      	ldr	r3, [pc, #408]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a61      	ldr	r2, [pc, #388]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a5a      	ldr	r2, [pc, #360]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b57      	ldr	r3, [pc, #348]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a52      	ldr	r2, [pc, #328]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000728:	2370      	movs	r3, #112	; 0x70
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000738:	230d      	movs	r3, #13
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4847      	ldr	r0, [pc, #284]	; (8000860 <HAL_DCMI_MspInit+0x210>)
 8000744:	f005 f830 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000748:	2350      	movs	r3, #80	; 0x50
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000758:	230d      	movs	r3, #13
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4840      	ldr	r0, [pc, #256]	; (8000864 <HAL_DCMI_MspInit+0x214>)
 8000764:	f005 f820 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000768:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800077a:	230d      	movs	r3, #13
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	4838      	ldr	r0, [pc, #224]	; (8000868 <HAL_DCMI_MspInit+0x218>)
 8000786:	f005 f80f 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800078a:	2308      	movs	r3, #8
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800079a:	230d      	movs	r3, #13
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	4831      	ldr	r0, [pc, #196]	; (800086c <HAL_DCMI_MspInit+0x21c>)
 80007a6:	f004 ffff 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007ba:	230d      	movs	r3, #13
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <HAL_DCMI_MspInit+0x220>)
 80007c6:	f004 ffef 	bl	80057a8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007cc:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <HAL_DCMI_MspInit+0x228>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d2:	224b      	movs	r2, #75	; 0x4b
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000800:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000808:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800080c:	2204      	movs	r2, #4
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000812:	2203      	movs	r2, #3
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000824:	f001 fcd6 	bl	80021d4 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800082e:	f000 fb41 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000836:	649a      	str	r2, [r3, #72]	; 0x48
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	204e      	movs	r0, #78	; 0x4e
 8000844:	f001 f94d 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000848:	204e      	movs	r0, #78	; 0x4e
 800084a:	f001 f964 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3738      	adds	r7, #56	; 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	48020000 	.word	0x48020000
 800085c:	58024400 	.word	0x58024400
 8000860:	58021000 	.word	0x58021000
 8000864:	58020000 	.word	0x58020000
 8000868:	58020800 	.word	0x58020800
 800086c:	58020c00 	.word	0x58020c00
 8000870:	58020400 	.word	0x58020400
 8000874:	2400a04c 	.word	0x2400a04c
 8000878:	40020010 	.word	0x40020010

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DMA_Init+0x4c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MX_DMA_Init+0x4c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_DMA_Init+0x4c>)
 8000894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 f91c 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008aa:	200b      	movs	r0, #11
 80008ac:	f001 f933 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	200c      	movs	r0, #12
 80008b6:	f001 f914 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008ba:	200c      	movs	r0, #12
 80008bc:	f001 f92b 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400

080008cc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a6c      	ldr	r2, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	4a65      	ldr	r2, [pc, #404]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a5d      	ldr	r2, [pc, #372]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4a56      	ldr	r2, [pc, #344]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2104      	movs	r1, #4
 800099a:	4841      	ldr	r0, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 800099c:	f005 f8b4 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <MX_GPIO_Init+0x1d8>)
 80009a6:	f005 f8af 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2103      	movs	r1, #3
 80009ae:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 80009b0:	f005 f8aa 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009ba:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 80009bc:	f005 f8a4 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4839      	ldr	r0, [pc, #228]	; (8000aac <MX_GPIO_Init+0x1e0>)
 80009c6:	f005 f89f 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009ca:	2304      	movs	r3, #4
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 80009e2:	f004 fee1 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0x1d8>)
 80009fe:	f004 fed3 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 8000a02:	f247 0303 	movw	r3, #28675	; 0x7003
 8000a06:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4823      	ldr	r0, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a1c:	f004 fec4 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a34:	f004 feb8 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a52:	f004 fea9 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 8000a74:	f004 fe98 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_GPIO_Init+0x1e0>)
 8000a90:	f004 fe8a 	bl	80057a8 <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	58020800 	.word	0x58020800
 8000aa8:	58020400 	.word	0x58020400
 8000aac:	58020c00 	.word	0x58020c00

08000ab0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_I2C1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x7c>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000aec:	f005 f826 	bl	8005b3c <HAL_I2C_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af6:	f000 f9dd 	bl	8000eb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000afe:	f005 fb8f 	bl	8006220 <HAL_I2CEx_ConfigAnalogFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f9d4 	bl	8000eb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000b10:	f005 fbd1 	bl	80062b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f9cb 	bl	8000eb4 <Error_Handler>
  }

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2400a114 	.word	0x2400a114
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	009034b6 	.word	0x009034b6

08000b30 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_I2C2_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x009034B6;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_I2C2_Init+0x7c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b6c:	f004 ffe6 	bl	8005b3c <HAL_I2C_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b76:	f000 f99d 	bl	8000eb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b7e:	f005 fb4f 	bl	8006220 <HAL_I2CEx_ConfigAnalogFilter>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f994 	bl	8000eb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b90:	f005 fb91 	bl	80062b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 f98b 	bl	8000eb4 <Error_Handler>
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2400a160 	.word	0x2400a160
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	009034b6 	.word	0x009034b6

08000bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <HAL_I2C_MspInit+0xf4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12f      	bne.n	8000c32 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bf0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4827      	ldr	r0, [pc, #156]	; (8000cac <HAL_I2C_MspInit+0xfc>)
 8000c0e:	f004 fdcb 	bl	80057a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c30:	e033      	b.n	8000c9a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_I2C_MspInit+0x100>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d12e      	bne.n	8000c9a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <HAL_I2C_MspInit+0xfc>)
 8000c78:	f004 fd96 	bl	80057a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	40005800 	.word	0x40005800

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fd9a 	bl	80017f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f834 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fe04 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f7ff fdda 	bl	800087c <MX_DMA_Init>
  MX_DCMI_Init();
 8000cc8:	f7ff fc8e 	bl	80005e8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000ccc:	f7ff fef0 	bl	8000ab0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cd0:	f7ff ff2e 	bl	8000b30 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cd4:	f000 f8f6 	bl	8000ec4 <MX_SPI1_Init>
  MX_UART4_Init();
 8000cd8:	f000 fc88 	bl	80015ec <MX_UART4_Init>
  MX_TIM4_Init();
 8000cdc:	f000 faac 	bl	8001238 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ce0:	f000 fb38 	bl	8001354 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init(&huart4, NULL);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <main+0x60>)
 8000ce8:	f00a fd28 	bl	800b73c <GPS_Init>
  jy61p.Init(&hi2c2);
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <main+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <main+0x68>)
 8000cf2:	4798      	blx	r3
  testGPS = get_GPS_INFO();
 8000cf4:	f00a fd42 	bl	800b77c <get_GPS_INFO>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <main+0x6c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    testAngle = jy61p.ReadAngle(ROLL);
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <main+0x64>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	203d      	movs	r0, #61	; 0x3d
 8000d04:	4798      	blx	r3
 8000d06:	eef0 7a40 	vmov.f32	s15, s0
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <main+0x70>)
 8000d0c:	edc3 7a00 	vstr	s15, [r3]
 8000d10:	e7f5      	b.n	8000cfe <main+0x4a>
 8000d12:	bf00      	nop
 8000d14:	2400a34c 	.word	0x2400a34c
 8000d18:	2400001c 	.word	0x2400001c
 8000d1c:	2400a160 	.word	0x2400a160
 8000d20:	2400a1ac 	.word	0x2400a1ac
 8000d24:	2400a1b0 	.word	0x2400a1b0

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0cc      	sub	sp, #304	; 0x130
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d32:	224c      	movs	r2, #76	; 0x4c
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00b fb92 	bl	800c460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00b fb8b 	bl	800c460 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	23bc      	movs	r3, #188	; 0xbc
 8000d52:	461a      	mov	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f00b fb83 	bl	800c460 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f005 faf8 	bl	8006350 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <SystemClock_Config+0x184>)
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	4a50      	ldr	r2, [pc, #320]	; (8000eac <SystemClock_Config+0x184>)
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d72:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <SystemClock_Config+0x184>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	f003 0201 	and.w	r2, r3, #1
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <SystemClock_Config+0x188>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <SystemClock_Config+0x188>)
 8000d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <SystemClock_Config+0x188>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d9a:	bf00      	nop
 8000d9c:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <SystemClock_Config+0x188>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da8:	d1f8      	bne.n	8000d9c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000dd6:	23c8      	movs	r3, #200	; 0xc8
 8000dd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dee:	2308      	movs	r3, #8
 8000df0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fadd 	bl	80063c4 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e10:	f000 f850 	bl	8000eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	233f      	movs	r3, #63	; 0x3f
 8000e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e26:	2308      	movs	r3, #8
 8000e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e32:	2340      	movs	r3, #64	; 0x40
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e40:	2340      	movs	r3, #64	; 0x40
 8000e42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 fec9 	bl	8006be4 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e58:	f000 f82c 	bl	8000eb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e64:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fa9b 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e90:	f000 f810 	bl	8000eb4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000e94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f006 f858 	bl	8006f50 <HAL_RCC_MCOConfig>
}
 8000ea0:	bf00      	nop
 8000ea2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	58000400 	.word	0x58000400
 8000eb0:	58024800 	.word	0x58024800

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <MX_SPI1_Init+0xa8>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000ed0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000ede:	2207      	movs	r2, #7
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000efc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0xa4>)
 8000f56:	f007 fd33 	bl	80089c0 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f60:	f7ff ffa8 	bl	8000eb4 <Error_Handler>
  }

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2400a1b4 	.word	0x2400a1b4
 8000f6c:	40013000 	.word	0x40013000

08000f70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_SPI_MspInit+0xc8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d14d      	bne.n	800102e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f98:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_SPI_MspInit+0xcc>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000fec:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ffe:	2305      	movs	r3, #5
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <HAL_SPI_MspInit+0xd0>)
 800100a:	f004 fbcd 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100e:	2310      	movs	r3, #16
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101e:	2305      	movs	r3, #5
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <HAL_SPI_MspInit+0xd4>)
 800102a:	f004 fbbd 	bl	80057a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013000 	.word	0x40013000
 800103c:	58024400 	.word	0x58024400
 8001040:	58020000 	.word	0x58020000
 8001044:	58020400 	.word	0x58020400

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_MspInit+0x30>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x30>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x30>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	58024400 	.word	0x58024400

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 fc04 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <DMA1_Stream0_IRQHandler+0x10>)
 80010d6:	f002 fba5 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2400a04c 	.word	0x2400a04c

080010e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <DMA1_Stream1_IRQHandler+0x10>)
 80010ea:	f002 fb9b 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400a2d4 	.word	0x2400a2d4

080010f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <UART4_IRQHandler+0x10>)
 80010fe:	f008 ff2d 	bl	8009f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2400a34c 	.word	0x2400a34c

0800110c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DCMI_IRQHandler+0x10>)
 8001112:	f000 ff0f 	bl	8001f34 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2400a0c4 	.word	0x2400a0c4

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <SystemInit+0xec>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a38      	ldr	r2, [pc, #224]	; (800120c <SystemInit+0xec>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <SystemInit+0xf0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	2b06      	cmp	r3, #6
 800113e:	d807      	bhi.n	8001150 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <SystemInit+0xf0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 030f 	bic.w	r3, r3, #15
 8001148:	4a31      	ldr	r2, [pc, #196]	; (8001210 <SystemInit+0xf0>)
 800114a:	f043 0307 	orr.w	r3, r3, #7
 800114e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <SystemInit+0xf4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <SystemInit+0xf4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <SystemInit+0xf4>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <SystemInit+0xf4>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	492b      	ldr	r1, [pc, #172]	; (8001214 <SystemInit+0xf4>)
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <SystemInit+0xf8>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemInit+0xf0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	2b07      	cmp	r3, #7
 8001178:	d907      	bls.n	800118a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <SystemInit+0xf0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 030f 	bic.w	r3, r3, #15
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <SystemInit+0xf0>)
 8001184:	f043 0307 	orr.w	r3, r3, #7
 8001188:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemInit+0xf4>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <SystemInit+0xf4>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemInit+0xf4>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <SystemInit+0xf4>)
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <SystemInit+0xfc>)
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <SystemInit+0xf4>)
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <SystemInit+0x100>)
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <SystemInit+0xf4>)
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <SystemInit+0x104>)
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <SystemInit+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <SystemInit+0xf4>)
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <SystemInit+0x104>)
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <SystemInit+0xf4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <SystemInit+0xf4>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <SystemInit+0x104>)
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <SystemInit+0xf4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <SystemInit+0xf4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <SystemInit+0xf4>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <SystemInit+0xf4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SystemInit+0x108>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <SystemInit+0x10c>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011ea:	d202      	bcs.n	80011f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <SystemInit+0x110>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <SystemInit+0x114>)
 80011f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SystemInit+0xec>)
 80011fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001200:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	52002000 	.word	0x52002000
 8001214:	58024400 	.word	0x58024400
 8001218:	eaf6ed7f 	.word	0xeaf6ed7f
 800121c:	02020200 	.word	0x02020200
 8001220:	01ff0000 	.word	0x01ff0000
 8001224:	01010280 	.word	0x01010280
 8001228:	5c001000 	.word	0x5c001000
 800122c:	ffff0000 	.word	0xffff0000
 8001230:	51008108 	.word	0x51008108
 8001234:	52004000 	.word	0x52004000

08001238 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <MX_TIM4_Init+0x114>)
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <MX_TIM4_Init+0x118>)
 800126e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <MX_TIM4_Init+0x114>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <MX_TIM4_Init+0x114>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <MX_TIM4_Init+0x114>)
 800127e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001282:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <MX_TIM4_Init+0x114>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_TIM4_Init+0x114>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001290:	482e      	ldr	r0, [pc, #184]	; (800134c <MX_TIM4_Init+0x114>)
 8001292:	f007 fca8 	bl	8008be6 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800129c:	f7ff fe0a 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4827      	ldr	r0, [pc, #156]	; (800134c <MX_TIM4_Init+0x114>)
 80012ae:	f007 ff39 	bl	8009124 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012b8:	f7ff fdfc 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012bc:	4823      	ldr	r0, [pc, #140]	; (800134c <MX_TIM4_Init+0x114>)
 80012be:	f007 fd4a 	bl	8008d56 <HAL_TIM_PWM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012c8:	f7ff fdf4 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	481c      	ldr	r0, [pc, #112]	; (800134c <MX_TIM4_Init+0x114>)
 80012dc:	f008 fbf8 	bl	8009ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012e6:	f7ff fde5 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ea:	2360      	movs	r3, #96	; 0x60
 80012ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_TIM4_Init+0x114>)
 8001302:	f007 fdff 	bl	8008f04 <HAL_TIM_PWM_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800130c:	f7ff fdd2 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2204      	movs	r2, #4
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_TIM4_Init+0x114>)
 8001318:	f007 fdf4 	bl	8008f04 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001322:	f7ff fdc7 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	2208      	movs	r2, #8
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM4_Init+0x114>)
 800132e:	f007 fde9 	bl	8008f04 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001338:	f7ff fdbc 	bl	8000eb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM4_Init+0x114>)
 800133e:	f000 f8cf 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2400a23c 	.word	0x2400a23c
 8001350:	40000800 	.word	0x40000800

08001354 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <MX_TIM5_Init+0x110>)
 8001388:	4a37      	ldr	r2, [pc, #220]	; (8001468 <MX_TIM5_Init+0x114>)
 800138a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <MX_TIM5_Init+0x110>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b34      	ldr	r3, [pc, #208]	; (8001464 <MX_TIM5_Init+0x110>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <MX_TIM5_Init+0x110>)
 800139a:	f04f 32ff 	mov.w	r2, #4294967295
 800139e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <MX_TIM5_Init+0x110>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <MX_TIM5_Init+0x110>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ac:	482d      	ldr	r0, [pc, #180]	; (8001464 <MX_TIM5_Init+0x110>)
 80013ae:	f007 fc1a 	bl	8008be6 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013b8:	f7ff fd7c 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4826      	ldr	r0, [pc, #152]	; (8001464 <MX_TIM5_Init+0x110>)
 80013ca:	f007 feab 	bl	8009124 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013d4:	f7ff fd6e 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80013d8:	4822      	ldr	r0, [pc, #136]	; (8001464 <MX_TIM5_Init+0x110>)
 80013da:	f007 fc5b 	bl	8008c94 <HAL_TIM_OC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013e4:	f7ff fd66 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <MX_TIM5_Init+0x110>)
 80013ea:	f007 fcb4 	bl	8008d56 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 80013f4:	f7ff fd5e 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <MX_TIM5_Init+0x110>)
 8001408:	f008 fb62 	bl	8009ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 8001412:	f7ff fd4f 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	2208      	movs	r2, #8
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_TIM5_Init+0x110>)
 800142e:	f007 fcf3 	bl	8008e18 <HAL_TIM_OC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8001438:	f7ff fd3c 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143c:	2360      	movs	r3, #96	; 0x60
 800143e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	220c      	movs	r2, #12
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM5_Init+0x110>)
 8001448:	f007 fd5c 	bl	8008f04 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8001452:	f7ff fd2f 	bl	8000eb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM5_Init+0x110>)
 8001458:	f000 f842 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2400a288 	.word	0x2400a288
 8001468:	40000c00 	.word	0x40000c00

0800146c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <HAL_TIM_Base_MspInit+0x68>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10f      	bne.n	800149e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_TIM_Base_MspInit+0x6c>)
 8001480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_TIM_Base_MspInit+0x6c>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_TIM_Base_MspInit+0x6c>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800149c:	e013      	b.n	80014c6 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM5)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_TIM_Base_MspInit+0x70>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d10e      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_TIM_Base_MspInit+0x6c>)
 80014aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_TIM_Base_MspInit+0x6c>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_TIM_Base_MspInit+0x6c>)
 80014ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40000800 	.word	0x40000800
 80014d8:	58024400 	.word	0x58024400
 80014dc:	40000c00 	.word	0x40000c00

080014e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <HAL_TIM_MspPostInit+0xf4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d140      	bne.n	8001584 <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800153e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001550:	2302      	movs	r3, #2
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4820      	ldr	r0, [pc, #128]	; (80015dc <HAL_TIM_MspPostInit+0xfc>)
 800155c:	f004 f924 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001572:	2302      	movs	r3, #2
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	; (80015e0 <HAL_TIM_MspPostInit+0x100>)
 800157e:	f004 f913 	bl	80057a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001582:	e023      	b.n	80015cc <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM5)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <HAL_TIM_MspPostInit+0x104>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d11e      	bne.n	80015cc <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_MspPostInit+0xf8>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ac:	2308      	movs	r3, #8
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015bc:	2302      	movs	r3, #2
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <HAL_TIM_MspPostInit+0x108>)
 80015c8:	f004 f8ee 	bl	80057a8 <HAL_GPIO_Init>
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40000800 	.word	0x40000800
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020c00 	.word	0x58020c00
 80015e0:	58020400 	.word	0x58020400
 80015e4:	40000c00 	.word	0x40000c00
 80015e8:	58020000 	.word	0x58020000

080015ec <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <MX_UART4_Init+0x90>)
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_UART4_Init+0x94>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_UART4_Init+0x90>)
 80015f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <MX_UART4_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_UART4_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_UART4_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_UART4_Init+0x90>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_UART4_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_UART4_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_UART4_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_UART4_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_UART4_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <MX_UART4_Init+0x90>)
 8001636:	f008 fad3 	bl	8009be0 <HAL_UART_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001640:	f7ff fc38 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_UART4_Init+0x90>)
 8001648:	f009 ff93 	bl	800b572 <HAL_UARTEx_SetTxFifoThreshold>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001652:	f7ff fc2f 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <MX_UART4_Init+0x90>)
 800165a:	f009 ffc8 	bl	800b5ee <HAL_UARTEx_SetRxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001664:	f7ff fc26 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_UART4_Init+0x90>)
 800166a:	f009 ff49 	bl	800b500 <HAL_UARTEx_DisableFifoMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001674:	f7ff fc1e 	bl	8000eb4 <Error_Handler>
  }

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2400a34c 	.word	0x2400a34c
 8001680:	40004c00 	.word	0x40004c00

08001684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a39      	ldr	r2, [pc, #228]	; (8001788 <HAL_UART_MspInit+0x104>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d16c      	bne.n	8001780 <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_UART_MspInit+0x108>)
 80016a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ac:	4a37      	ldr	r2, [pc, #220]	; (800178c <HAL_UART_MspInit+0x108>)
 80016ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_UART_MspInit+0x108>)
 80016b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_UART_MspInit+0x108>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	4a30      	ldr	r2, [pc, #192]	; (800178c <HAL_UART_MspInit+0x108>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_UART_MspInit+0x108>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e2:	2303      	movs	r3, #3
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016f2:	2308      	movs	r3, #8
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4824      	ldr	r0, [pc, #144]	; (8001790 <HAL_UART_MspInit+0x10c>)
 80016fe:	f004 f853 	bl	80057a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <HAL_UART_MspInit+0x114>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_UART_MspInit+0x110>)
 800170a:	223f      	movs	r2, #63	; 0x3f
 800170c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_UART_MspInit+0x110>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_UART_MspInit+0x110>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_UART_MspInit+0x110>)
 800173e:	2204      	movs	r2, #4
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001744:	2203      	movs	r2, #3
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_UART_MspInit+0x110>)
 800174a:	2200      	movs	r2, #0
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001756:	f000 fd3d 	bl	80021d4 <HAL_DMA_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001760:	f7ff fba8 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_UART_MspInit+0x110>)
 8001768:	679a      	str	r2, [r3, #120]	; 0x78
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_UART_MspInit+0x110>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2034      	movs	r0, #52	; 0x34
 8001776:	f000 f9b4 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800177a:	2034      	movs	r0, #52	; 0x34
 800177c:	f000 f9cb 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40004c00 	.word	0x40004c00
 800178c:	58024400 	.word	0x58024400
 8001790:	58020000 	.word	0x58020000
 8001794:	2400a2d4 	.word	0x2400a2d4
 8001798:	40020028 	.word	0x40020028

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017a2:	e003      	b.n	80017ac <LoopCopyDataInit>

080017a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017aa:	3104      	adds	r1, #4

080017ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017b4:	d3f6      	bcc.n	80017a4 <CopyDataInit>
  ldr  r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017b8:	e002      	b.n	80017c0 <LoopFillZerobss>

080017ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017bc:	f842 3b04 	str.w	r3, [r2], #4

080017c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017c4:	d3f9      	bcc.n	80017ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c6:	f7ff fcab 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f00a fe25 	bl	800c418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fa71 	bl	8000cb4 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80017d8:	0800c504 	.word	0x0800c504
  ldr  r0, =_sdata
 80017dc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80017e0:	24000024 	.word	0x24000024
  ldr  r2, =_sbss
 80017e4:	24000028 	.word	0x24000028
  ldr  r3, = _ebss
 80017e8:	2400a524 	.word	0x2400a524

080017ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC3_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f000 f968 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017fc:	f005 fc12 	bl	8007024 <HAL_RCC_GetSysClockFreq>
 8001800:	4601      	mov	r1, r0
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_Init+0x68>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_Init+0x6c>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa21 f303 	lsr.w	r3, r1, r3
 8001818:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_Init+0x68>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_Init+0x6c>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_Init+0x70>)
 8001832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_Init+0x74>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f814 	bl	8001868 <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e002      	b.n	8001850 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800184a:	f7ff fbfd 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58024400 	.word	0x58024400
 800185c:	0800c4c4 	.word	0x0800c4c4
 8001860:	24000004 	.word	0x24000004
 8001864:	24000000 	.word	0x24000000

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_InitTick+0x60>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e021      	b.n	80018c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_InitTick+0x64>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_InitTick+0x60>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f94d 	bl	8001b32 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f917 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x68>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2400000c 	.word	0x2400000c
 80018cc:	24000000 	.word	0x24000000
 80018d0:	24000008 	.word	0x24000008

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2400000c 	.word	0x2400000c
 80018f8:	2400a3d8 	.word	0x2400a3d8

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2400a3d8 	.word	0x2400a3d8

08001914 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetREVID+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c1b      	lsrs	r3, r3, #16
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	5c001000 	.word	0x5c001000

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	4313      	orrs	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	05fa0000 	.word	0x05fa0000

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <__NVIC_EnableIRQ+0x38>)
 80019aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff29 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff40 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff90 	bl	8001a20 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5f 	bl	80019cc <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff33 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa4 	bl	8001a88 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e069      	b.n	8001c32 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fd70 	bl	8000650 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_DCMI_Init+0xf0>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001baa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001bb6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001bc2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001bce:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001bda:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d112      	bne.n	8001c12 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7f1b      	ldrb	r3, [r3, #28]
 8001bf0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7f5b      	ldrb	r3, [r3, #29]
 8001bf6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001bf8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7f9b      	ldrb	r3, [r3, #30]
 8001bfe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001c00:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7fdb      	ldrb	r3, [r3, #31]
 8001c08:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001c0e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001c10:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 021e 	orr.w	r2, r2, #30
 8001c20:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	ffe0f007 	.word	0xffe0f007

08001c40 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_DCMI_Start_DMA+0x1c>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e0ab      	b.n	8001db4 <HAL_DCMI_Start_DMA+0x174>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0202 	bic.w	r2, r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <HAL_DCMI_Start_DMA+0x17c>)
 8001ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_DCMI_Start_DMA+0x180>)
 8001caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d219      	bcs.n	8001d08 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3328      	adds	r3, #40	; 0x28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	f000 fdd2 	bl	800288c <HAL_DMA_Start_IT>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d055      	beq.n	8001d9a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e055      	b.n	8001db4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <HAL_DCMI_Start_DMA+0x17c>)
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001d22:	e009      	b.n	8001d38 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	085a      	lsrs	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	005a      	lsls	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d2f0      	bcs.n	8001d24 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d46:	1e9a      	subs	r2, r3, #2
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3328      	adds	r3, #40	; 0x28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	f003 f867 	bl	8004e48 <HAL_DMAEx_MultiBufferStart_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00c      	b.n	8001db4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	08002075 	.word	0x08002075
 8001dc0:	0800219b 	.word	0x0800219b

08001dc4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_DCMI_Stop+0xb8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_DCMI_Stop+0xbc>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_DCMI_Stop+0x30>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e03f      	b.n	8001e74 <HAL_DCMI_Stop+0xb0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8001e30:	e006      	b.n	8001e40 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 ff83 	bl	8002d60 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001e72:	7afb      	ldrb	r3, [r7, #11]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_DCMI_Suspend+0xa8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_DCMI_Suspend+0xac>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0a5b      	lsrs	r3, r3, #9
 8001e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_DCMI_Suspend+0x30>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e034      	b.n	8001f1e <HAL_DCMI_Suspend+0x9a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d125      	bne.n	8001f14 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10c      	bne.n	8001f06 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	72fb      	strb	r3, [r7, #11]
        break;
 8001f04:	e006      	b.n	8001f14 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1e5      	bne.n	8001ee0 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	24000000 	.word	0x24000000
 8001f30:	10624dd3 	.word	0x10624dd3

08001f34 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d016      	beq.n	8001f7c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2204      	movs	r2, #4
 8001f54:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6e:	4a31      	ldr	r2, [pc, #196]	; (8002034 <HAL_DCMI_IRQHandler+0x100>)
 8001f70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 fa10 	bl	800339c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa6:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_DCMI_IRQHandler+0x100>)
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 f9f4 	bl	800339c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f840 	bl	800204c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f83e 	bl	8002060 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01d      	beq.n	800202a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d107      	bne.n	800200c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 021e 	bic.w	r2, r2, #30
 800200a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f009 ff2d 	bl	800be84 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	0800219b 	.word	0x0800219b

08002038 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	2b00      	cmp	r3, #0
 8002088:	d043      	beq.n	8002112 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d118      	bne.n	80020d6 <DCMI_DMAXferCplt+0x62>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	00da      	lsls	r2, r3, #3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4413      	add	r3, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	4619      	mov	r1, r3
 80020c6:	f003 fa1d 	bl	8005504 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
 80020d4:	e044      	b.n	8002160 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d13c      	bne.n	8002160 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	00da      	lsls	r2, r3, #3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	2201      	movs	r2, #1
 8002100:	4619      	mov	r1, r3
 8002102:	f003 f9ff 	bl	8005504 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	1e5a      	subs	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
 8002110:	e026      	b.n	8002160 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	e017      	b.n	8002160 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	0099      	lsls	r1, r3, #2
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	440a      	add	r2, r1
 8002156:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	429a      	cmp	r2, r3
 800216a:	d112      	bne.n	8002192 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d103      	bne.n	8002192 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d009      	beq.n	80021c6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff ff36 	bl	8002038 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fb8e 	bl	80018fc <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e316      	b.n	800281a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a66      	ldr	r2, [pc, #408]	; (800238c <HAL_DMA_Init+0x1b8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d04a      	beq.n	800228c <HAL_DMA_Init+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a65      	ldr	r2, [pc, #404]	; (8002390 <HAL_DMA_Init+0x1bc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d045      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a63      	ldr	r2, [pc, #396]	; (8002394 <HAL_DMA_Init+0x1c0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d040      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a62      	ldr	r2, [pc, #392]	; (8002398 <HAL_DMA_Init+0x1c4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d03b      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a60      	ldr	r2, [pc, #384]	; (800239c <HAL_DMA_Init+0x1c8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d036      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5f      	ldr	r2, [pc, #380]	; (80023a0 <HAL_DMA_Init+0x1cc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d031      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_DMA_Init+0x1d0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02c      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5c      	ldr	r2, [pc, #368]	; (80023a8 <HAL_DMA_Init+0x1d4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d027      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_DMA_Init+0x1d8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d022      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a59      	ldr	r2, [pc, #356]	; (80023b0 <HAL_DMA_Init+0x1dc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d01d      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <HAL_DMA_Init+0x1e0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d018      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_DMA_Init+0x1e4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a54      	ldr	r2, [pc, #336]	; (80023bc <HAL_DMA_Init+0x1e8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a53      	ldr	r2, [pc, #332]	; (80023c0 <HAL_DMA_Init+0x1ec>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d009      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a51      	ldr	r2, [pc, #324]	; (80023c4 <HAL_DMA_Init+0x1f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_DMA_Init+0x1f4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_DMA_Init+0xbc>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_DMA_Init+0xbe>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 813b 	beq.w	800250e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a37      	ldr	r2, [pc, #220]	; (800238c <HAL_DMA_Init+0x1b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a36      	ldr	r2, [pc, #216]	; (8002390 <HAL_DMA_Init+0x1bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a34      	ldr	r2, [pc, #208]	; (8002394 <HAL_DMA_Init+0x1c0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a33      	ldr	r2, [pc, #204]	; (8002398 <HAL_DMA_Init+0x1c4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a31      	ldr	r2, [pc, #196]	; (800239c <HAL_DMA_Init+0x1c8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_DMA_Init+0x1cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <HAL_DMA_Init+0x1d0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_DMA_Init+0x1d4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <HAL_DMA_Init+0x1d8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <HAL_DMA_Init+0x1dc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Init+0x174>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_DMA_Init+0x1e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_DMA_Init+0x1e4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_DMA_Init+0x1e8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Init+0x174>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_DMA_Init+0x1ec>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <HAL_DMA_Init+0x1f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Init+0x174>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_DMA_Init+0x1f4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <HAL_DMA_Init+0x186>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e007      	b.n	800236a <HAL_DMA_Init+0x196>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800236a:	e02f      	b.n	80023cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236c:	f7ff fac6 	bl	80018fc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d928      	bls.n	80023cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e246      	b.n	800281a <HAL_DMA_Init+0x646>
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1c8      	bne.n	800236c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4b83      	ldr	r3, [pc, #524]	; (80025f4 <HAL_DMA_Init+0x420>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	4313      	orrs	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002430:	4b71      	ldr	r3, [pc, #452]	; (80025f8 <HAL_DMA_Init+0x424>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b71      	ldr	r3, [pc, #452]	; (80025fc <HAL_DMA_Init+0x428>)
 8002436:	4013      	ands	r3, r2
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243c:	d328      	bcc.n	8002490 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b28      	cmp	r3, #40	; 0x28
 8002444:	d903      	bls.n	800244e <HAL_DMA_Init+0x27a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b2e      	cmp	r3, #46	; 0x2e
 800244c:	d917      	bls.n	800247e <HAL_DMA_Init+0x2aa>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b3e      	cmp	r3, #62	; 0x3e
 8002454:	d903      	bls.n	800245e <HAL_DMA_Init+0x28a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b42      	cmp	r3, #66	; 0x42
 800245c:	d90f      	bls.n	800247e <HAL_DMA_Init+0x2aa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b46      	cmp	r3, #70	; 0x46
 8002464:	d903      	bls.n	800246e <HAL_DMA_Init+0x29a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b48      	cmp	r3, #72	; 0x48
 800246c:	d907      	bls.n	800247e <HAL_DMA_Init+0x2aa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b4e      	cmp	r3, #78	; 0x4e
 8002474:	d905      	bls.n	8002482 <HAL_DMA_Init+0x2ae>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b52      	cmp	r3, #82	; 0x52
 800247c:	d801      	bhi.n	8002482 <HAL_DMA_Init+0x2ae>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_DMA_Init+0x2b0>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0307 	bic.w	r3, r3, #7
 80024a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d117      	bne.n	80024ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f002 fb31 	bl	8004b34 <DMA_CheckFifoParam>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e197      	b.n	800281a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f002 fa6c 	bl	80049d0 <DMA_CalcBaseAndBitshift>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	223f      	movs	r2, #63	; 0x3f
 8002506:	409a      	lsls	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	e0cd      	b.n	80026aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <HAL_DMA_Init+0x42c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a39      	ldr	r2, [pc, #228]	; (8002604 <HAL_DMA_Init+0x430>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a38      	ldr	r2, [pc, #224]	; (8002608 <HAL_DMA_Init+0x434>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_DMA_Init+0x38a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a36      	ldr	r2, [pc, #216]	; (800260c <HAL_DMA_Init+0x438>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a35      	ldr	r2, [pc, #212]	; (8002610 <HAL_DMA_Init+0x43c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a33      	ldr	r2, [pc, #204]	; (8002614 <HAL_DMA_Init+0x440>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_DMA_Init+0x38a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a32      	ldr	r2, [pc, #200]	; (8002618 <HAL_DMA_Init+0x444>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a30      	ldr	r2, [pc, #192]	; (800261c <HAL_DMA_Init+0x448>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Init+0x38e>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_DMA_Init+0x390>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8097 	beq.w	8002698 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a24      	ldr	r2, [pc, #144]	; (8002600 <HAL_DMA_Init+0x42c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d021      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_DMA_Init+0x430>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01c      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a21      	ldr	r2, [pc, #132]	; (8002608 <HAL_DMA_Init+0x434>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d017      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_DMA_Init+0x438>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_DMA_Init+0x43c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00d      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_DMA_Init+0x440>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_DMA_Init+0x444>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_DMA_Init+0x448>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_DMA_Init+0x44c>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d020      	beq.n	8002624 <HAL_DMA_Init+0x450>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d102      	bne.n	80025f0 <HAL_DMA_Init+0x41c>
 80025ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ee:	e01a      	b.n	8002626 <HAL_DMA_Init+0x452>
 80025f0:	2300      	movs	r3, #0
 80025f2:	e018      	b.n	8002626 <HAL_DMA_Init+0x452>
 80025f4:	fe10803f 	.word	0xfe10803f
 80025f8:	5c001000 	.word	0x5c001000
 80025fc:	ffff0000 	.word	0xffff0000
 8002600:	58025408 	.word	0x58025408
 8002604:	5802541c 	.word	0x5802541c
 8002608:	58025430 	.word	0x58025430
 800260c:	58025444 	.word	0x58025444
 8002610:	58025458 	.word	0x58025458
 8002614:	5802546c 	.word	0x5802546c
 8002618:	58025480 	.word	0x58025480
 800261c:	58025494 	.word	0x58025494
 8002620:	fffe000f 	.word	0xfffe000f
 8002624:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800262c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800263c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800264c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002654:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b6e      	ldr	r3, [pc, #440]	; (8002824 <HAL_DMA_Init+0x650>)
 800266c:	4413      	add	r3, r2
 800266e:	4a6e      	ldr	r2, [pc, #440]	; (8002828 <HAL_DMA_Init+0x654>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f002 f9a7 	bl	80049d0 <DMA_CalcBaseAndBitshift>
 8002682:	4603      	mov	r3, r0
 8002684:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2201      	movs	r2, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e008      	b.n	80026aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2240      	movs	r2, #64	; 0x40
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0b7      	b.n	800281a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMA_Init+0x658>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d072      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5d      	ldr	r2, [pc, #372]	; (8002830 <HAL_DMA_Init+0x65c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d06d      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_DMA_Init+0x660>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d068      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <HAL_DMA_Init+0x664>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d063      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_DMA_Init+0x668>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d05e      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_DMA_Init+0x66c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d059      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a56      	ldr	r2, [pc, #344]	; (8002844 <HAL_DMA_Init+0x670>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d054      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_DMA_Init+0x674>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d04f      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_DMA_Init+0x678>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d04a      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_DMA_Init+0x67c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d045      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_DMA_Init+0x680>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d040      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_DMA_Init+0x684>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d03b      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_DMA_Init+0x688>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d036      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a4b      	ldr	r2, [pc, #300]	; (8002860 <HAL_DMA_Init+0x68c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <HAL_DMA_Init+0x690>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d02c      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <HAL_DMA_Init+0x694>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d027      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_DMA_Init+0x698>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a45      	ldr	r2, [pc, #276]	; (8002870 <HAL_DMA_Init+0x69c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01d      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a44      	ldr	r2, [pc, #272]	; (8002874 <HAL_DMA_Init+0x6a0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d018      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a42      	ldr	r2, [pc, #264]	; (8002878 <HAL_DMA_Init+0x6a4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a41      	ldr	r2, [pc, #260]	; (800287c <HAL_DMA_Init+0x6a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3f      	ldr	r2, [pc, #252]	; (8002880 <HAL_DMA_Init+0x6ac>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3e      	ldr	r2, [pc, #248]	; (8002884 <HAL_DMA_Init+0x6b0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3c      	ldr	r2, [pc, #240]	; (8002888 <HAL_DMA_Init+0x6b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_DMA_Init+0x5ca>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_DMA_Init+0x5cc>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d032      	beq.n	800280a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f002 fa41 	bl	8004c2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d102      	bne.n	80027b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_DMA_Init+0x624>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d80c      	bhi.n	80027f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f002 fabe 	bl	8004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	e008      	b.n	800280a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	a7fdabf8 	.word	0xa7fdabf8
 8002828:	cccccccd 	.word	0xcccccccd
 800282c:	40020010 	.word	0x40020010
 8002830:	40020028 	.word	0x40020028
 8002834:	40020040 	.word	0x40020040
 8002838:	40020058 	.word	0x40020058
 800283c:	40020070 	.word	0x40020070
 8002840:	40020088 	.word	0x40020088
 8002844:	400200a0 	.word	0x400200a0
 8002848:	400200b8 	.word	0x400200b8
 800284c:	40020410 	.word	0x40020410
 8002850:	40020428 	.word	0x40020428
 8002854:	40020440 	.word	0x40020440
 8002858:	40020458 	.word	0x40020458
 800285c:	40020470 	.word	0x40020470
 8002860:	40020488 	.word	0x40020488
 8002864:	400204a0 	.word	0x400204a0
 8002868:	400204b8 	.word	0x400204b8
 800286c:	58025408 	.word	0x58025408
 8002870:	5802541c 	.word	0x5802541c
 8002874:	58025430 	.word	0x58025430
 8002878:	58025444 	.word	0x58025444
 800287c:	58025458 	.word	0x58025458
 8002880:	5802546c 	.word	0x5802546c
 8002884:	58025480 	.word	0x58025480
 8002888:	58025494 	.word	0x58025494

0800288c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e226      	b.n	8002cf6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Start_IT+0x2a>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e21f      	b.n	8002cf6 <HAL_DMA_Start_IT+0x46a>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	f040 820a 	bne.w	8002ce0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a68      	ldr	r2, [pc, #416]	; (8002a80 <HAL_DMA_Start_IT+0x1f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04a      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_DMA_Start_IT+0x1f8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d045      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_DMA_Start_IT+0x1fc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_DMA_Start_IT+0x200>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03b      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a62      	ldr	r2, [pc, #392]	; (8002a90 <HAL_DMA_Start_IT+0x204>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d036      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a60      	ldr	r2, [pc, #384]	; (8002a94 <HAL_DMA_Start_IT+0x208>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5f      	ldr	r2, [pc, #380]	; (8002a98 <HAL_DMA_Start_IT+0x20c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a5d      	ldr	r2, [pc, #372]	; (8002a9c <HAL_DMA_Start_IT+0x210>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a5c      	ldr	r2, [pc, #368]	; (8002aa0 <HAL_DMA_Start_IT+0x214>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5a      	ldr	r2, [pc, #360]	; (8002aa4 <HAL_DMA_Start_IT+0x218>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a59      	ldr	r2, [pc, #356]	; (8002aa8 <HAL_DMA_Start_IT+0x21c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_DMA_Start_IT+0x220>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_DMA_Start_IT+0x224>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a54      	ldr	r2, [pc, #336]	; (8002ab4 <HAL_DMA_Start_IT+0x228>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a53      	ldr	r2, [pc, #332]	; (8002ab8 <HAL_DMA_Start_IT+0x22c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a51      	ldr	r2, [pc, #324]	; (8002abc <HAL_DMA_Start_IT+0x230>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <HAL_DMA_Start_IT+0x100>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <HAL_DMA_Start_IT+0x110>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f001 fe68 	bl	8004678 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <HAL_DMA_Start_IT+0x1f4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_DMA_Start_IT+0x1f8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_DMA_Start_IT+0x1fc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_DMA_Start_IT+0x200>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <HAL_DMA_Start_IT+0x204>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <HAL_DMA_Start_IT+0x208>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_DMA_Start_IT+0x20c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <HAL_DMA_Start_IT+0x210>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_DMA_Start_IT+0x214>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_DMA_Start_IT+0x218>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <HAL_DMA_Start_IT+0x21c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_DMA_Start_IT+0x220>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_DMA_Start_IT+0x224>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <HAL_DMA_Start_IT+0x228>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_DMA_Start_IT+0x22c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_DMA_Start_IT+0x230>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_Start_IT+0x1c0>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_Start_IT+0x1c2>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 021e 	bic.w	r2, r3, #30
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0216 	orr.w	r2, r2, #22
 8002a64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03e      	beq.n	8002aec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0208 	orr.w	r2, r2, #8
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e035      	b.n	8002aec <HAL_DMA_Start_IT+0x260>
 8002a80:	40020010 	.word	0x40020010
 8002a84:	40020028 	.word	0x40020028
 8002a88:	40020040 	.word	0x40020040
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	40020070 	.word	0x40020070
 8002a94:	40020088 	.word	0x40020088
 8002a98:	400200a0 	.word	0x400200a0
 8002a9c:	400200b8 	.word	0x400200b8
 8002aa0:	40020410 	.word	0x40020410
 8002aa4:	40020428 	.word	0x40020428
 8002aa8:	40020440 	.word	0x40020440
 8002aac:	40020458 	.word	0x40020458
 8002ab0:	40020470 	.word	0x40020470
 8002ab4:	40020488 	.word	0x40020488
 8002ab8:	400204a0 	.word	0x400204a0
 8002abc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 020e 	bic.w	r2, r3, #14
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 020a 	orr.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0204 	orr.w	r2, r2, #4
 8002aea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a83      	ldr	r2, [pc, #524]	; (8002d00 <HAL_DMA_Start_IT+0x474>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d072      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a82      	ldr	r2, [pc, #520]	; (8002d04 <HAL_DMA_Start_IT+0x478>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d06d      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a80      	ldr	r2, [pc, #512]	; (8002d08 <HAL_DMA_Start_IT+0x47c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d068      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7f      	ldr	r2, [pc, #508]	; (8002d0c <HAL_DMA_Start_IT+0x480>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d063      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7d      	ldr	r2, [pc, #500]	; (8002d10 <HAL_DMA_Start_IT+0x484>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d05e      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <HAL_DMA_Start_IT+0x488>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d059      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <HAL_DMA_Start_IT+0x48c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d054      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a79      	ldr	r2, [pc, #484]	; (8002d1c <HAL_DMA_Start_IT+0x490>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d04f      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_DMA_Start_IT+0x494>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04a      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a76      	ldr	r2, [pc, #472]	; (8002d24 <HAL_DMA_Start_IT+0x498>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d045      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a74      	ldr	r2, [pc, #464]	; (8002d28 <HAL_DMA_Start_IT+0x49c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d040      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a73      	ldr	r2, [pc, #460]	; (8002d2c <HAL_DMA_Start_IT+0x4a0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d03b      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a71      	ldr	r2, [pc, #452]	; (8002d30 <HAL_DMA_Start_IT+0x4a4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d036      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a70      	ldr	r2, [pc, #448]	; (8002d34 <HAL_DMA_Start_IT+0x4a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6e      	ldr	r2, [pc, #440]	; (8002d38 <HAL_DMA_Start_IT+0x4ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02c      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6d      	ldr	r2, [pc, #436]	; (8002d3c <HAL_DMA_Start_IT+0x4b0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d027      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6b      	ldr	r2, [pc, #428]	; (8002d40 <HAL_DMA_Start_IT+0x4b4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6a      	ldr	r2, [pc, #424]	; (8002d44 <HAL_DMA_Start_IT+0x4b8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01d      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a68      	ldr	r2, [pc, #416]	; (8002d48 <HAL_DMA_Start_IT+0x4bc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a67      	ldr	r2, [pc, #412]	; (8002d4c <HAL_DMA_Start_IT+0x4c0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_DMA_Start_IT+0x4c4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a64      	ldr	r2, [pc, #400]	; (8002d54 <HAL_DMA_Start_IT+0x4c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a62      	ldr	r2, [pc, #392]	; (8002d58 <HAL_DMA_Start_IT+0x4cc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a61      	ldr	r2, [pc, #388]	; (8002d5c <HAL_DMA_Start_IT+0x4d0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Start_IT+0x354>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_Start_IT+0x356>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01a      	beq.n	8002c1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_DMA_Start_IT+0x474>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d04a      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a36      	ldr	r2, [pc, #216]	; (8002d04 <HAL_DMA_Start_IT+0x478>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d045      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_DMA_Start_IT+0x47c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d040      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <HAL_DMA_Start_IT+0x480>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d03b      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <HAL_DMA_Start_IT+0x484>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d036      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <HAL_DMA_Start_IT+0x488>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <HAL_DMA_Start_IT+0x48c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02c      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2d      	ldr	r2, [pc, #180]	; (8002d1c <HAL_DMA_Start_IT+0x490>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d027      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <HAL_DMA_Start_IT+0x494>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d022      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_DMA_Start_IT+0x498>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d01d      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_DMA_Start_IT+0x49c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <HAL_DMA_Start_IT+0x4a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_DMA_Start_IT+0x4a4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <HAL_DMA_Start_IT+0x4a8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_DMA_Start_IT+0x4ac>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_DMA_Start_IT+0x4b0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <HAL_DMA_Start_IT+0x442>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e012      	b.n	8002cf4 <HAL_DMA_Start_IT+0x468>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e009      	b.n	8002cf4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020010 	.word	0x40020010
 8002d04:	40020028 	.word	0x40020028
 8002d08:	40020040 	.word	0x40020040
 8002d0c:	40020058 	.word	0x40020058
 8002d10:	40020070 	.word	0x40020070
 8002d14:	40020088 	.word	0x40020088
 8002d18:	400200a0 	.word	0x400200a0
 8002d1c:	400200b8 	.word	0x400200b8
 8002d20:	40020410 	.word	0x40020410
 8002d24:	40020428 	.word	0x40020428
 8002d28:	40020440 	.word	0x40020440
 8002d2c:	40020458 	.word	0x40020458
 8002d30:	40020470 	.word	0x40020470
 8002d34:	40020488 	.word	0x40020488
 8002d38:	400204a0 	.word	0x400204a0
 8002d3c:	400204b8 	.word	0x400204b8
 8002d40:	58025408 	.word	0x58025408
 8002d44:	5802541c 	.word	0x5802541c
 8002d48:	58025430 	.word	0x58025430
 8002d4c:	58025444 	.word	0x58025444
 8002d50:	58025458 	.word	0x58025458
 8002d54:	5802546c 	.word	0x5802546c
 8002d58:	58025480 	.word	0x58025480
 8002d5c:	58025494 	.word	0x58025494

08002d60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7fe fdc8 	bl	80018fc <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e2dc      	b.n	8003332 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d008      	beq.n	8002d96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e2cd      	b.n	8003332 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a76      	ldr	r2, [pc, #472]	; (8002f74 <HAL_DMA_Abort+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04a      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a74      	ldr	r2, [pc, #464]	; (8002f78 <HAL_DMA_Abort+0x218>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d045      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a73      	ldr	r2, [pc, #460]	; (8002f7c <HAL_DMA_Abort+0x21c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d040      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <HAL_DMA_Abort+0x220>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03b      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a70      	ldr	r2, [pc, #448]	; (8002f84 <HAL_DMA_Abort+0x224>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6e      	ldr	r2, [pc, #440]	; (8002f88 <HAL_DMA_Abort+0x228>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d031      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6d      	ldr	r2, [pc, #436]	; (8002f8c <HAL_DMA_Abort+0x22c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d02c      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6b      	ldr	r2, [pc, #428]	; (8002f90 <HAL_DMA_Abort+0x230>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6a      	ldr	r2, [pc, #424]	; (8002f94 <HAL_DMA_Abort+0x234>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a68      	ldr	r2, [pc, #416]	; (8002f98 <HAL_DMA_Abort+0x238>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a67      	ldr	r2, [pc, #412]	; (8002f9c <HAL_DMA_Abort+0x23c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a65      	ldr	r2, [pc, #404]	; (8002fa0 <HAL_DMA_Abort+0x240>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a64      	ldr	r2, [pc, #400]	; (8002fa4 <HAL_DMA_Abort+0x244>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <HAL_DMA_Abort+0x248>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a61      	ldr	r2, [pc, #388]	; (8002fac <HAL_DMA_Abort+0x24c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_Abort+0xd6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a5f      	ldr	r2, [pc, #380]	; (8002fb0 <HAL_DMA_Abort+0x250>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Abort+0xda>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_DMA_Abort+0xdc>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 021e 	bic.w	r2, r2, #30
 8002e4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e00a      	b.n	8002e7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <HAL_DMA_Abort+0x214>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d072      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <HAL_DMA_Abort+0x218>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d06d      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a39      	ldr	r2, [pc, #228]	; (8002f7c <HAL_DMA_Abort+0x21c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d068      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a37      	ldr	r2, [pc, #220]	; (8002f80 <HAL_DMA_Abort+0x220>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d063      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a36      	ldr	r2, [pc, #216]	; (8002f84 <HAL_DMA_Abort+0x224>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d05e      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a34      	ldr	r2, [pc, #208]	; (8002f88 <HAL_DMA_Abort+0x228>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d059      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a33      	ldr	r2, [pc, #204]	; (8002f8c <HAL_DMA_Abort+0x22c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d054      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <HAL_DMA_Abort+0x230>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04f      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <HAL_DMA_Abort+0x234>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04a      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_DMA_Abort+0x238>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d045      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2d      	ldr	r2, [pc, #180]	; (8002f9c <HAL_DMA_Abort+0x23c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d040      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <HAL_DMA_Abort+0x240>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d03b      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_DMA_Abort+0x244>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d036      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_DMA_Abort+0x248>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d031      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a27      	ldr	r2, [pc, #156]	; (8002fac <HAL_DMA_Abort+0x24c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d02c      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_DMA_Abort+0x250>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d027      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <HAL_DMA_Abort+0x254>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <HAL_DMA_Abort+0x258>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01d      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a21      	ldr	r2, [pc, #132]	; (8002fbc <HAL_DMA_Abort+0x25c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1f      	ldr	r2, [pc, #124]	; (8002fc0 <HAL_DMA_Abort+0x260>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <HAL_DMA_Abort+0x264>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <HAL_DMA_Abort+0x268>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_DMA_Abort+0x26c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_DMA_Abort+0x20e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_DMA_Abort+0x270>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d132      	bne.n	8002fd4 <HAL_DMA_Abort+0x274>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e031      	b.n	8002fd6 <HAL_DMA_Abort+0x276>
 8002f72:	bf00      	nop
 8002f74:	40020010 	.word	0x40020010
 8002f78:	40020028 	.word	0x40020028
 8002f7c:	40020040 	.word	0x40020040
 8002f80:	40020058 	.word	0x40020058
 8002f84:	40020070 	.word	0x40020070
 8002f88:	40020088 	.word	0x40020088
 8002f8c:	400200a0 	.word	0x400200a0
 8002f90:	400200b8 	.word	0x400200b8
 8002f94:	40020410 	.word	0x40020410
 8002f98:	40020428 	.word	0x40020428
 8002f9c:	40020440 	.word	0x40020440
 8002fa0:	40020458 	.word	0x40020458
 8002fa4:	40020470 	.word	0x40020470
 8002fa8:	40020488 	.word	0x40020488
 8002fac:	400204a0 	.word	0x400204a0
 8002fb0:	400204b8 	.word	0x400204b8
 8002fb4:	58025408 	.word	0x58025408
 8002fb8:	5802541c 	.word	0x5802541c
 8002fbc:	58025430 	.word	0x58025430
 8002fc0:	58025444 	.word	0x58025444
 8002fc4:	58025458 	.word	0x58025458
 8002fc8:	5802546c 	.word	0x5802546c
 8002fcc:	58025480 	.word	0x58025480
 8002fd0:	58025494 	.word	0x58025494
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6d      	ldr	r2, [pc, #436]	; (80031a4 <HAL_DMA_Abort+0x444>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d04a      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_DMA_Abort+0x448>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d045      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_DMA_Abort+0x44c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d040      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a68      	ldr	r2, [pc, #416]	; (80031b0 <HAL_DMA_Abort+0x450>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d03b      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <HAL_DMA_Abort+0x454>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_DMA_Abort+0x458>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a64      	ldr	r2, [pc, #400]	; (80031bc <HAL_DMA_Abort+0x45c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d02c      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a62      	ldr	r2, [pc, #392]	; (80031c0 <HAL_DMA_Abort+0x460>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d027      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a61      	ldr	r2, [pc, #388]	; (80031c4 <HAL_DMA_Abort+0x464>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a5f      	ldr	r2, [pc, #380]	; (80031c8 <HAL_DMA_Abort+0x468>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01d      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <HAL_DMA_Abort+0x46c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_DMA_Abort+0x470>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5b      	ldr	r2, [pc, #364]	; (80031d4 <HAL_DMA_Abort+0x474>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <HAL_DMA_Abort+0x478>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_DMA_Abort+0x47c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_DMA_Abort+0x32a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_DMA_Abort+0x480>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <HAL_DMA_Abort+0x33c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e007      	b.n	80030ac <HAL_DMA_Abort+0x34c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030ac:	e013      	b.n	80030d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ae:	f7fe fc25 	bl	80018fc <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d90c      	bls.n	80030d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e12d      	b.n	8003332 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <HAL_DMA_Abort+0x444>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d04a      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_DMA_Abort+0x448>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d045      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_DMA_Abort+0x44c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d040      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_DMA_Abort+0x450>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d03b      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_DMA_Abort+0x454>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d036      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_DMA_Abort+0x458>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d031      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <HAL_DMA_Abort+0x45c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d02c      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_DMA_Abort+0x460>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d027      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <HAL_DMA_Abort+0x464>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_DMA_Abort+0x468>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01d      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_DMA_Abort+0x46c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_DMA_Abort+0x470>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_DMA_Abort+0x474>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_DMA_Abort+0x478>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_DMA_Abort+0x47c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_DMA_Abort+0x422>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_DMA_Abort+0x480>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Abort+0x426>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_DMA_Abort+0x428>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02b      	beq.n	80031e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	223f      	movs	r2, #63	; 0x3f
 800319c:	409a      	lsls	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	e02a      	b.n	80031fa <HAL_DMA_Abort+0x49a>
 80031a4:	40020010 	.word	0x40020010
 80031a8:	40020028 	.word	0x40020028
 80031ac:	40020040 	.word	0x40020040
 80031b0:	40020058 	.word	0x40020058
 80031b4:	40020070 	.word	0x40020070
 80031b8:	40020088 	.word	0x40020088
 80031bc:	400200a0 	.word	0x400200a0
 80031c0:	400200b8 	.word	0x400200b8
 80031c4:	40020410 	.word	0x40020410
 80031c8:	40020428 	.word	0x40020428
 80031cc:	40020440 	.word	0x40020440
 80031d0:	40020458 	.word	0x40020458
 80031d4:	40020470 	.word	0x40020470
 80031d8:	40020488 	.word	0x40020488
 80031dc:	400204a0 	.word	0x400204a0
 80031e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4f      	ldr	r2, [pc, #316]	; (800333c <HAL_DMA_Abort+0x5dc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d072      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <HAL_DMA_Abort+0x5e0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d06d      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <HAL_DMA_Abort+0x5e4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d068      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_DMA_Abort+0x5e8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d063      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a49      	ldr	r2, [pc, #292]	; (800334c <HAL_DMA_Abort+0x5ec>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d05e      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a47      	ldr	r2, [pc, #284]	; (8003350 <HAL_DMA_Abort+0x5f0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d059      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_DMA_Abort+0x5f4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d054      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a44      	ldr	r2, [pc, #272]	; (8003358 <HAL_DMA_Abort+0x5f8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d04f      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a43      	ldr	r2, [pc, #268]	; (800335c <HAL_DMA_Abort+0x5fc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d04a      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a41      	ldr	r2, [pc, #260]	; (8003360 <HAL_DMA_Abort+0x600>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d045      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_DMA_Abort+0x604>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d040      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3e      	ldr	r2, [pc, #248]	; (8003368 <HAL_DMA_Abort+0x608>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d03b      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_DMA_Abort+0x60c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d036      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <HAL_DMA_Abort+0x610>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d031      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_DMA_Abort+0x614>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d02c      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a38      	ldr	r2, [pc, #224]	; (8003378 <HAL_DMA_Abort+0x618>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d027      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a37      	ldr	r2, [pc, #220]	; (800337c <HAL_DMA_Abort+0x61c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a35      	ldr	r2, [pc, #212]	; (8003380 <HAL_DMA_Abort+0x620>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01d      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a34      	ldr	r2, [pc, #208]	; (8003384 <HAL_DMA_Abort+0x624>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a32      	ldr	r2, [pc, #200]	; (8003388 <HAL_DMA_Abort+0x628>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a31      	ldr	r2, [pc, #196]	; (800338c <HAL_DMA_Abort+0x62c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <HAL_DMA_Abort+0x630>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <HAL_DMA_Abort+0x634>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_DMA_Abort+0x58a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <HAL_DMA_Abort+0x638>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_DMA_Abort+0x58e>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_DMA_Abort+0x590>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800331e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
 800337c:	58025408 	.word	0x58025408
 8003380:	5802541c 	.word	0x5802541c
 8003384:	58025430 	.word	0x58025430
 8003388:	58025444 	.word	0x58025444
 800338c:	58025458 	.word	0x58025458
 8003390:	5802546c 	.word	0x5802546c
 8003394:	58025480 	.word	0x58025480
 8003398:	58025494 	.word	0x58025494

0800339c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e205      	b.n	80037ba <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d004      	beq.n	80033c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e1fa      	b.n	80037ba <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a8c      	ldr	r2, [pc, #560]	; (80035fc <HAL_DMA_Abort_IT+0x260>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d04a      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a8b      	ldr	r2, [pc, #556]	; (8003600 <HAL_DMA_Abort_IT+0x264>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d045      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a89      	ldr	r2, [pc, #548]	; (8003604 <HAL_DMA_Abort_IT+0x268>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d040      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a88      	ldr	r2, [pc, #544]	; (8003608 <HAL_DMA_Abort_IT+0x26c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d03b      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a86      	ldr	r2, [pc, #536]	; (800360c <HAL_DMA_Abort_IT+0x270>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d036      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a85      	ldr	r2, [pc, #532]	; (8003610 <HAL_DMA_Abort_IT+0x274>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d031      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a83      	ldr	r2, [pc, #524]	; (8003614 <HAL_DMA_Abort_IT+0x278>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02c      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a82      	ldr	r2, [pc, #520]	; (8003618 <HAL_DMA_Abort_IT+0x27c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d027      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a80      	ldr	r2, [pc, #512]	; (800361c <HAL_DMA_Abort_IT+0x280>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7f      	ldr	r2, [pc, #508]	; (8003620 <HAL_DMA_Abort_IT+0x284>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01d      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7d      	ldr	r2, [pc, #500]	; (8003624 <HAL_DMA_Abort_IT+0x288>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7c      	ldr	r2, [pc, #496]	; (8003628 <HAL_DMA_Abort_IT+0x28c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7a      	ldr	r2, [pc, #488]	; (800362c <HAL_DMA_Abort_IT+0x290>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a79      	ldr	r2, [pc, #484]	; (8003630 <HAL_DMA_Abort_IT+0x294>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a77      	ldr	r2, [pc, #476]	; (8003634 <HAL_DMA_Abort_IT+0x298>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_DMA_Abort_IT+0xc8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a76      	ldr	r2, [pc, #472]	; (8003638 <HAL_DMA_Abort_IT+0x29c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_DMA_Abort_IT+0xcc>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_DMA_Abort_IT+0xce>
 8003468:	2300      	movs	r3, #0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d065      	beq.n	800353a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2204      	movs	r2, #4
 8003472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a60      	ldr	r2, [pc, #384]	; (80035fc <HAL_DMA_Abort_IT+0x260>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5e      	ldr	r2, [pc, #376]	; (8003600 <HAL_DMA_Abort_IT+0x264>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_DMA_Abort_IT+0x268>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a5b      	ldr	r2, [pc, #364]	; (8003608 <HAL_DMA_Abort_IT+0x26c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5a      	ldr	r2, [pc, #360]	; (800360c <HAL_DMA_Abort_IT+0x270>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a58      	ldr	r2, [pc, #352]	; (8003610 <HAL_DMA_Abort_IT+0x274>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a57      	ldr	r2, [pc, #348]	; (8003614 <HAL_DMA_Abort_IT+0x278>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a55      	ldr	r2, [pc, #340]	; (8003618 <HAL_DMA_Abort_IT+0x27c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_DMA_Abort_IT+0x280>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_DMA_Abort_IT+0x284>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a51      	ldr	r2, [pc, #324]	; (8003624 <HAL_DMA_Abort_IT+0x288>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_DMA_Abort_IT+0x28c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_DMA_Abort_IT+0x290>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a4c      	ldr	r2, [pc, #304]	; (8003630 <HAL_DMA_Abort_IT+0x294>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4b      	ldr	r2, [pc, #300]	; (8003634 <HAL_DMA_Abort_IT+0x298>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_Abort_IT+0x17a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a49      	ldr	r2, [pc, #292]	; (8003638 <HAL_DMA_Abort_IT+0x29c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <HAL_DMA_Abort_IT+0x18c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0201 	bic.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e147      	b.n	80037b8 <HAL_DMA_Abort_IT+0x41c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e13e      	b.n	80037b8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 020e 	bic.w	r2, r2, #14
 8003548:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_Abort_IT+0x260>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04a      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_DMA_Abort_IT+0x264>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d045      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_Abort_IT+0x268>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d040      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_DMA_Abort_IT+0x26c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d03b      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_Abort_IT+0x270>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d036      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_DMA_Abort_IT+0x274>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d031      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_Abort_IT+0x278>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d02c      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_DMA_Abort_IT+0x27c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d027      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_DMA_Abort_IT+0x280>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_DMA_Abort_IT+0x284>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_DMA_Abort_IT+0x288>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_DMA_Abort_IT+0x28c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_DMA_Abort_IT+0x290>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a17      	ldr	r2, [pc, #92]	; (8003630 <HAL_DMA_Abort_IT+0x294>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_DMA_Abort_IT+0x298>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort_IT+0x24e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_DMA_Abort_IT+0x29c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d128      	bne.n	800363c <HAL_DMA_Abort_IT+0x2a0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e027      	b.n	800364c <HAL_DMA_Abort_IT+0x2b0>
 80035fc:	40020010 	.word	0x40020010
 8003600:	40020028 	.word	0x40020028
 8003604:	40020040 	.word	0x40020040
 8003608:	40020058 	.word	0x40020058
 800360c:	40020070 	.word	0x40020070
 8003610:	40020088 	.word	0x40020088
 8003614:	400200a0 	.word	0x400200a0
 8003618:	400200b8 	.word	0x400200b8
 800361c:	40020410 	.word	0x40020410
 8003620:	40020428 	.word	0x40020428
 8003624:	40020440 	.word	0x40020440
 8003628:	40020458 	.word	0x40020458
 800362c:	40020470 	.word	0x40020470
 8003630:	40020488 	.word	0x40020488
 8003634:	400204a0 	.word	0x400204a0
 8003638:	400204b8 	.word	0x400204b8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <HAL_DMA_Abort_IT+0x428>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d072      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5b      	ldr	r2, [pc, #364]	; (80037c8 <HAL_DMA_Abort_IT+0x42c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d06d      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a59      	ldr	r2, [pc, #356]	; (80037cc <HAL_DMA_Abort_IT+0x430>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d068      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_DMA_Abort_IT+0x434>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d063      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_DMA_Abort_IT+0x438>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d05e      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a55      	ldr	r2, [pc, #340]	; (80037d8 <HAL_DMA_Abort_IT+0x43c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d059      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a53      	ldr	r2, [pc, #332]	; (80037dc <HAL_DMA_Abort_IT+0x440>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d054      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_DMA_Abort_IT+0x444>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d04f      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_DMA_Abort_IT+0x448>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04a      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_DMA_Abort_IT+0x44c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d045      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a4d      	ldr	r2, [pc, #308]	; (80037ec <HAL_DMA_Abort_IT+0x450>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d040      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a4c      	ldr	r2, [pc, #304]	; (80037f0 <HAL_DMA_Abort_IT+0x454>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d03b      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a4a      	ldr	r2, [pc, #296]	; (80037f4 <HAL_DMA_Abort_IT+0x458>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d036      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <HAL_DMA_Abort_IT+0x45c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d031      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_DMA_Abort_IT+0x460>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02c      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a46      	ldr	r2, [pc, #280]	; (8003800 <HAL_DMA_Abort_IT+0x464>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d027      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a44      	ldr	r2, [pc, #272]	; (8003804 <HAL_DMA_Abort_IT+0x468>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a43      	ldr	r2, [pc, #268]	; (8003808 <HAL_DMA_Abort_IT+0x46c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01d      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a41      	ldr	r2, [pc, #260]	; (800380c <HAL_DMA_Abort_IT+0x470>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a40      	ldr	r2, [pc, #256]	; (8003810 <HAL_DMA_Abort_IT+0x474>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3e      	ldr	r2, [pc, #248]	; (8003814 <HAL_DMA_Abort_IT+0x478>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a3d      	ldr	r2, [pc, #244]	; (8003818 <HAL_DMA_Abort_IT+0x47c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a3b      	ldr	r2, [pc, #236]	; (800381c <HAL_DMA_Abort_IT+0x480>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_DMA_Abort_IT+0x3a0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <HAL_DMA_Abort_IT+0x484>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_DMA_Abort_IT+0x3a4>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_DMA_Abort_IT+0x3a6>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d028      	beq.n	8003798 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003754:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2201      	movs	r2, #1
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003774:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800378c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003796:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40020010 	.word	0x40020010
 80037c8:	40020028 	.word	0x40020028
 80037cc:	40020040 	.word	0x40020040
 80037d0:	40020058 	.word	0x40020058
 80037d4:	40020070 	.word	0x40020070
 80037d8:	40020088 	.word	0x40020088
 80037dc:	400200a0 	.word	0x400200a0
 80037e0:	400200b8 	.word	0x400200b8
 80037e4:	40020410 	.word	0x40020410
 80037e8:	40020428 	.word	0x40020428
 80037ec:	40020440 	.word	0x40020440
 80037f0:	40020458 	.word	0x40020458
 80037f4:	40020470 	.word	0x40020470
 80037f8:	40020488 	.word	0x40020488
 80037fc:	400204a0 	.word	0x400204a0
 8003800:	400204b8 	.word	0x400204b8
 8003804:	58025408 	.word	0x58025408
 8003808:	5802541c 	.word	0x5802541c
 800380c:	58025430 	.word	0x58025430
 8003810:	58025444 	.word	0x58025444
 8003814:	58025458 	.word	0x58025458
 8003818:	5802546c 	.word	0x5802546c
 800381c:	58025480 	.word	0x58025480
 8003820:	58025494 	.word	0x58025494

08003824 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003830:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_DMA_IRQHandler+0x1ac>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <HAL_DMA_IRQHandler+0x1b0>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a5f      	ldr	r2, [pc, #380]	; (80039d8 <HAL_DMA_IRQHandler+0x1b4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04a      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5d      	ldr	r2, [pc, #372]	; (80039dc <HAL_DMA_IRQHandler+0x1b8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d045      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d040      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5a      	ldr	r2, [pc, #360]	; (80039e4 <HAL_DMA_IRQHandler+0x1c0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d03b      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a59      	ldr	r2, [pc, #356]	; (80039e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d036      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a57      	ldr	r2, [pc, #348]	; (80039ec <HAL_DMA_IRQHandler+0x1c8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d031      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <HAL_DMA_IRQHandler+0x1cc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d02c      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a54      	ldr	r2, [pc, #336]	; (80039f4 <HAL_DMA_IRQHandler+0x1d0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d027      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a53      	ldr	r2, [pc, #332]	; (80039f8 <HAL_DMA_IRQHandler+0x1d4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a51      	ldr	r2, [pc, #324]	; (80039fc <HAL_DMA_IRQHandler+0x1d8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a50      	ldr	r2, [pc, #320]	; (8003a00 <HAL_DMA_IRQHandler+0x1dc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <HAL_DMA_IRQHandler+0x1e0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4d      	ldr	r2, [pc, #308]	; (8003a08 <HAL_DMA_IRQHandler+0x1e4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_DMA_IRQHandler+0x1e8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_DMA_IRQHandler+0x1ec>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a48      	ldr	r2, [pc, #288]	; (8003a14 <HAL_DMA_IRQHandler+0x1f0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_IRQHandler+0xd6>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_DMA_IRQHandler+0xd8>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 842b 	beq.w	8004158 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2208      	movs	r2, #8
 800390c:	409a      	lsls	r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80a2 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <HAL_DMA_IRQHandler+0x1b4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <HAL_DMA_IRQHandler+0x1b8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d045      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_DMA_IRQHandler+0x1c0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d03b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d036      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <HAL_DMA_IRQHandler+0x1c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <HAL_DMA_IRQHandler+0x1cc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_DMA_IRQHandler+0x1d0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d027      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <HAL_DMA_IRQHandler+0x1d4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a21      	ldr	r2, [pc, #132]	; (80039fc <HAL_DMA_IRQHandler+0x1d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <HAL_DMA_IRQHandler+0x1dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_DMA_IRQHandler+0x1e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_DMA_IRQHandler+0x1e4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <HAL_DMA_IRQHandler+0x1e8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <HAL_DMA_IRQHandler+0x1ec>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_DMA_IRQHandler+0x1f0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d12f      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x1f4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e02e      	b.n	8003a2c <HAL_DMA_IRQHandler+0x208>
 80039ce:	bf00      	nop
 80039d0:	24000000 	.word	0x24000000
 80039d4:	1b4e81b5 	.word	0x1b4e81b5
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2208      	movs	r2, #8
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d06e      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <HAL_DMA_IRQHandler+0x3f8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04a      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a67      	ldr	r2, [pc, #412]	; (8003c20 <HAL_DMA_IRQHandler+0x3fc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d045      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a66      	ldr	r2, [pc, #408]	; (8003c24 <HAL_DMA_IRQHandler+0x400>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d040      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a64      	ldr	r2, [pc, #400]	; (8003c28 <HAL_DMA_IRQHandler+0x404>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d03b      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <HAL_DMA_IRQHandler+0x408>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d036      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a61      	ldr	r2, [pc, #388]	; (8003c30 <HAL_DMA_IRQHandler+0x40c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d031      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a60      	ldr	r2, [pc, #384]	; (8003c34 <HAL_DMA_IRQHandler+0x410>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02c      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <HAL_DMA_IRQHandler+0x414>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5d      	ldr	r2, [pc, #372]	; (8003c3c <HAL_DMA_IRQHandler+0x418>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5b      	ldr	r2, [pc, #364]	; (8003c40 <HAL_DMA_IRQHandler+0x41c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a5a      	ldr	r2, [pc, #360]	; (8003c44 <HAL_DMA_IRQHandler+0x420>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	; (8003c48 <HAL_DMA_IRQHandler+0x424>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a57      	ldr	r2, [pc, #348]	; (8003c4c <HAL_DMA_IRQHandler+0x428>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a55      	ldr	r2, [pc, #340]	; (8003c50 <HAL_DMA_IRQHandler+0x42c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a54      	ldr	r2, [pc, #336]	; (8003c54 <HAL_DMA_IRQHandler+0x430>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_DMA_IRQHandler+0x434>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10a      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x304>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e003      	b.n	8003b30 <HAL_DMA_IRQHandler+0x30c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0202 	orr.w	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2204      	movs	r2, #4
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808f 	beq.w	8003c84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <HAL_DMA_IRQHandler+0x3f8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <HAL_DMA_IRQHandler+0x3fc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <HAL_DMA_IRQHandler+0x400>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_DMA_IRQHandler+0x404>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <HAL_DMA_IRQHandler+0x408>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <HAL_DMA_IRQHandler+0x40c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <HAL_DMA_IRQHandler+0x410>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <HAL_DMA_IRQHandler+0x414>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <HAL_DMA_IRQHandler+0x418>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_DMA_IRQHandler+0x41c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <HAL_DMA_IRQHandler+0x420>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_DMA_IRQHandler+0x424>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <HAL_DMA_IRQHandler+0x428>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_DMA_IRQHandler+0x42c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_DMA_IRQHandler+0x430>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_DMA_IRQHandler+0x434>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d12a      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x438>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e023      	b.n	8003c64 <HAL_DMA_IRQHandler+0x440>
 8003c1c:	40020010 	.word	0x40020010
 8003c20:	40020028 	.word	0x40020028
 8003c24:	40020040 	.word	0x40020040
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	40020070 	.word	0x40020070
 8003c30:	40020088 	.word	0x40020088
 8003c34:	400200a0 	.word	0x400200a0
 8003c38:	400200b8 	.word	0x400200b8
 8003c3c:	40020410 	.word	0x40020410
 8003c40:	40020428 	.word	0x40020428
 8003c44:	40020440 	.word	0x40020440
 8003c48:	40020458 	.word	0x40020458
 8003c4c:	40020470 	.word	0x40020470
 8003c50:	40020488 	.word	0x40020488
 8003c54:	400204a0 	.word	0x400204a0
 8003c58:	400204b8 	.word	0x400204b8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2204      	movs	r2, #4
 8003c72:	409a      	lsls	r2, r3
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a6 	beq.w	8003de6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a85      	ldr	r2, [pc, #532]	; (8003eb4 <HAL_DMA_IRQHandler+0x690>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04a      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a83      	ldr	r2, [pc, #524]	; (8003eb8 <HAL_DMA_IRQHandler+0x694>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d045      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a82      	ldr	r2, [pc, #520]	; (8003ebc <HAL_DMA_IRQHandler+0x698>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d040      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_DMA_IRQHandler+0x69c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03b      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7f      	ldr	r2, [pc, #508]	; (8003ec4 <HAL_DMA_IRQHandler+0x6a0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d036      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7d      	ldr	r2, [pc, #500]	; (8003ec8 <HAL_DMA_IRQHandler+0x6a4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d031      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7c      	ldr	r2, [pc, #496]	; (8003ecc <HAL_DMA_IRQHandler+0x6a8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d02c      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <HAL_DMA_IRQHandler+0x6ac>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d027      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a79      	ldr	r2, [pc, #484]	; (8003ed4 <HAL_DMA_IRQHandler+0x6b0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a77      	ldr	r2, [pc, #476]	; (8003ed8 <HAL_DMA_IRQHandler+0x6b4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01d      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a76      	ldr	r2, [pc, #472]	; (8003edc <HAL_DMA_IRQHandler+0x6b8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a74      	ldr	r2, [pc, #464]	; (8003ee0 <HAL_DMA_IRQHandler+0x6bc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a73      	ldr	r2, [pc, #460]	; (8003ee4 <HAL_DMA_IRQHandler+0x6c0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a71      	ldr	r2, [pc, #452]	; (8003ee8 <HAL_DMA_IRQHandler+0x6c4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a70      	ldr	r2, [pc, #448]	; (8003eec <HAL_DMA_IRQHandler+0x6c8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6e      	ldr	r2, [pc, #440]	; (8003ef0 <HAL_DMA_IRQHandler+0x6cc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10a      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x52c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e009      	b.n	8003d64 <HAL_DMA_IRQHandler+0x540>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2210      	movs	r2, #16
 8003d72:	409a      	lsls	r2, r3
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d018      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d108      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d024      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
 8003da4:	e01f      	b.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
 8003db6:	e016      	b.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0208 	bic.w	r2, r2, #8
 8003dd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2220      	movs	r2, #32
 8003df0:	409a      	lsls	r2, r3
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8110 	beq.w	800401c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <HAL_DMA_IRQHandler+0x690>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d04a      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2b      	ldr	r2, [pc, #172]	; (8003eb8 <HAL_DMA_IRQHandler+0x694>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d045      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <HAL_DMA_IRQHandler+0x698>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d040      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <HAL_DMA_IRQHandler+0x69c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d03b      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_DMA_IRQHandler+0x6a0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <HAL_DMA_IRQHandler+0x6a4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d031      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <HAL_DMA_IRQHandler+0x6a8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02c      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <HAL_DMA_IRQHandler+0x6ac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d027      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <HAL_DMA_IRQHandler+0x6b0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_DMA_IRQHandler+0x6b4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01d      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_DMA_IRQHandler+0x6b8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <HAL_DMA_IRQHandler+0x6bc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <HAL_DMA_IRQHandler+0x6c0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_DMA_IRQHandler+0x6c4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <HAL_DMA_IRQHandler+0x6c8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_DMA_IRQHandler+0x6cc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d12b      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x6d0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e02a      	b.n	8003f08 <HAL_DMA_IRQHandler+0x6e4>
 8003eb2:	bf00      	nop
 8003eb4:	40020010 	.word	0x40020010
 8003eb8:	40020028 	.word	0x40020028
 8003ebc:	40020040 	.word	0x40020040
 8003ec0:	40020058 	.word	0x40020058
 8003ec4:	40020070 	.word	0x40020070
 8003ec8:	40020088 	.word	0x40020088
 8003ecc:	400200a0 	.word	0x400200a0
 8003ed0:	400200b8 	.word	0x400200b8
 8003ed4:	40020410 	.word	0x40020410
 8003ed8:	40020428 	.word	0x40020428
 8003edc:	40020440 	.word	0x40020440
 8003ee0:	40020458 	.word	0x40020458
 8003ee4:	40020470 	.word	0x40020470
 8003ee8:	40020488 	.word	0x40020488
 8003eec:	400204a0 	.word	0x400204a0
 8003ef0:	400204b8 	.word	0x400204b8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8087 	beq.w	800401c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2220      	movs	r2, #32
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d139      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0216 	bic.w	r2, r2, #22
 8003f38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x736>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	223f      	movs	r2, #63	; 0x3f
 8003f74:	409a      	lsls	r2, r3
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 834a 	beq.w	8004628 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
          }
          return;
 8003f9c:	e344      	b.n	8004628 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d018      	beq.n	8003fde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d108      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02c      	beq.n	800401c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e027      	b.n	800401c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
 8003fdc:	e01e      	b.n	800401c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0210 	bic.w	r2, r2, #16
 8003ffa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8306 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8088 	beq.w	8004144 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7a      	ldr	r2, [pc, #488]	; (800422c <HAL_DMA_IRQHandler+0xa08>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a79      	ldr	r2, [pc, #484]	; (8004230 <HAL_DMA_IRQHandler+0xa0c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a77      	ldr	r2, [pc, #476]	; (8004234 <HAL_DMA_IRQHandler+0xa10>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a76      	ldr	r2, [pc, #472]	; (8004238 <HAL_DMA_IRQHandler+0xa14>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a74      	ldr	r2, [pc, #464]	; (800423c <HAL_DMA_IRQHandler+0xa18>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a73      	ldr	r2, [pc, #460]	; (8004240 <HAL_DMA_IRQHandler+0xa1c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a71      	ldr	r2, [pc, #452]	; (8004244 <HAL_DMA_IRQHandler+0xa20>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a70      	ldr	r2, [pc, #448]	; (8004248 <HAL_DMA_IRQHandler+0xa24>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6e      	ldr	r2, [pc, #440]	; (800424c <HAL_DMA_IRQHandler+0xa28>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a6d      	ldr	r2, [pc, #436]	; (8004250 <HAL_DMA_IRQHandler+0xa2c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6b      	ldr	r2, [pc, #428]	; (8004254 <HAL_DMA_IRQHandler+0xa30>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_DMA_IRQHandler+0xa34>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a68      	ldr	r2, [pc, #416]	; (800425c <HAL_DMA_IRQHandler+0xa38>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a67      	ldr	r2, [pc, #412]	; (8004260 <HAL_DMA_IRQHandler+0xa3c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_DMA_IRQHandler+0xa40>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a64      	ldr	r2, [pc, #400]	; (8004268 <HAL_DMA_IRQHandler+0xa44>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <HAL_DMA_IRQHandler+0x8ca>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e007      	b.n	80040fe <HAL_DMA_IRQHandler+0x8da>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	429a      	cmp	r2, r3
 8004108:	d307      	bcc.n	800411a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f2      	bne.n	80040fe <HAL_DMA_IRQHandler+0x8da>
 8004118:	e000      	b.n	800411c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800411a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800413a:	e003      	b.n	8004144 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8272 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
 8004156:	e26c      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a43      	ldr	r2, [pc, #268]	; (800426c <HAL_DMA_IRQHandler+0xa48>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a42      	ldr	r2, [pc, #264]	; (8004270 <HAL_DMA_IRQHandler+0xa4c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01d      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a40      	ldr	r2, [pc, #256]	; (8004274 <HAL_DMA_IRQHandler+0xa50>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d018      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <HAL_DMA_IRQHandler+0xa54>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3d      	ldr	r2, [pc, #244]	; (800427c <HAL_DMA_IRQHandler+0xa58>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00e      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3c      	ldr	r2, [pc, #240]	; (8004280 <HAL_DMA_IRQHandler+0xa5c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3a      	ldr	r2, [pc, #232]	; (8004284 <HAL_DMA_IRQHandler+0xa60>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x984>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a39      	ldr	r2, [pc, #228]	; (8004288 <HAL_DMA_IRQHandler+0xa64>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_DMA_IRQHandler+0x988>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_DMA_IRQHandler+0x98a>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 823f 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2204      	movs	r2, #4
 80041c6:	409a      	lsls	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80cd 	beq.w	800436c <HAL_DMA_IRQHandler+0xb48>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80c7 	beq.w	800436c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	2204      	movs	r2, #4
 80041e8:	409a      	lsls	r2, r3
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d049      	beq.n	800428c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8210 	beq.w	800462c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004214:	e20a      	b.n	800462c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8206 	beq.w	800462c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004228:	e200      	b.n	800462c <HAL_DMA_IRQHandler+0xe08>
 800422a:	bf00      	nop
 800422c:	40020010 	.word	0x40020010
 8004230:	40020028 	.word	0x40020028
 8004234:	40020040 	.word	0x40020040
 8004238:	40020058 	.word	0x40020058
 800423c:	40020070 	.word	0x40020070
 8004240:	40020088 	.word	0x40020088
 8004244:	400200a0 	.word	0x400200a0
 8004248:	400200b8 	.word	0x400200b8
 800424c:	40020410 	.word	0x40020410
 8004250:	40020428 	.word	0x40020428
 8004254:	40020440 	.word	0x40020440
 8004258:	40020458 	.word	0x40020458
 800425c:	40020470 	.word	0x40020470
 8004260:	40020488 	.word	0x40020488
 8004264:	400204a0 	.word	0x400204a0
 8004268:	400204b8 	.word	0x400204b8
 800426c:	58025408 	.word	0x58025408
 8004270:	5802541c 	.word	0x5802541c
 8004274:	58025430 	.word	0x58025430
 8004278:	58025444 	.word	0x58025444
 800427c:	58025458 	.word	0x58025458
 8004280:	5802546c 	.word	0x5802546c
 8004284:	58025480 	.word	0x58025480
 8004288:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d160      	bne.n	8004358 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a8c      	ldr	r2, [pc, #560]	; (80044cc <HAL_DMA_IRQHandler+0xca8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a8a      	ldr	r2, [pc, #552]	; (80044d0 <HAL_DMA_IRQHandler+0xcac>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a89      	ldr	r2, [pc, #548]	; (80044d4 <HAL_DMA_IRQHandler+0xcb0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a87      	ldr	r2, [pc, #540]	; (80044d8 <HAL_DMA_IRQHandler+0xcb4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a86      	ldr	r2, [pc, #536]	; (80044dc <HAL_DMA_IRQHandler+0xcb8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a84      	ldr	r2, [pc, #528]	; (80044e0 <HAL_DMA_IRQHandler+0xcbc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a83      	ldr	r2, [pc, #524]	; (80044e4 <HAL_DMA_IRQHandler+0xcc0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a81      	ldr	r2, [pc, #516]	; (80044e8 <HAL_DMA_IRQHandler+0xcc4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a80      	ldr	r2, [pc, #512]	; (80044ec <HAL_DMA_IRQHandler+0xcc8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a7e      	ldr	r2, [pc, #504]	; (80044f0 <HAL_DMA_IRQHandler+0xccc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7d      	ldr	r2, [pc, #500]	; (80044f4 <HAL_DMA_IRQHandler+0xcd0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7b      	ldr	r2, [pc, #492]	; (80044f8 <HAL_DMA_IRQHandler+0xcd4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7a      	ldr	r2, [pc, #488]	; (80044fc <HAL_DMA_IRQHandler+0xcd8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a78      	ldr	r2, [pc, #480]	; (8004500 <HAL_DMA_IRQHandler+0xcdc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a77      	ldr	r2, [pc, #476]	; (8004504 <HAL_DMA_IRQHandler+0xce0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_IRQHandler+0xb12>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a75      	ldr	r2, [pc, #468]	; (8004508 <HAL_DMA_IRQHandler+0xce4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_DMA_IRQHandler+0xb24>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0208 	bic.w	r2, r2, #8
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <HAL_DMA_IRQHandler+0xb34>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0204 	bic.w	r2, r2, #4
 8004356:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8165 	beq.w	800462c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800436a:	e15f      	b.n	800462c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2202      	movs	r2, #2
 8004376:	409a      	lsls	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80c5 	beq.w	800450c <HAL_DMA_IRQHandler+0xce8>
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80bf 	beq.w	800450c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2202      	movs	r2, #2
 8004398:	409a      	lsls	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 813a 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c4:	e134      	b.n	8004630 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8130 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d8:	e12a      	b.n	8004630 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d168      	bne.n	80044b6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a38      	ldr	r2, [pc, #224]	; (80044cc <HAL_DMA_IRQHandler+0xca8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d04a      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a37      	ldr	r2, [pc, #220]	; (80044d0 <HAL_DMA_IRQHandler+0xcac>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d045      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a35      	ldr	r2, [pc, #212]	; (80044d4 <HAL_DMA_IRQHandler+0xcb0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d040      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a34      	ldr	r2, [pc, #208]	; (80044d8 <HAL_DMA_IRQHandler+0xcb4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d03b      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a32      	ldr	r2, [pc, #200]	; (80044dc <HAL_DMA_IRQHandler+0xcb8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d036      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a31      	ldr	r2, [pc, #196]	; (80044e0 <HAL_DMA_IRQHandler+0xcbc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d031      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <HAL_DMA_IRQHandler+0xcc0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02c      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <HAL_DMA_IRQHandler+0xcc4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d027      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <HAL_DMA_IRQHandler+0xcc8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2b      	ldr	r2, [pc, #172]	; (80044f0 <HAL_DMA_IRQHandler+0xccc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01d      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <HAL_DMA_IRQHandler+0xcd0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a28      	ldr	r2, [pc, #160]	; (80044f8 <HAL_DMA_IRQHandler+0xcd4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a26      	ldr	r2, [pc, #152]	; (80044fc <HAL_DMA_IRQHandler+0xcd8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a25      	ldr	r2, [pc, #148]	; (8004500 <HAL_DMA_IRQHandler+0xcdc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a23      	ldr	r2, [pc, #140]	; (8004504 <HAL_DMA_IRQHandler+0xce0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_DMA_IRQHandler+0xc60>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_DMA_IRQHandler+0xce4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <HAL_DMA_IRQHandler+0xc72>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0214 	bic.w	r2, r2, #20
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e007      	b.n	80044a6 <HAL_DMA_IRQHandler+0xc82>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 020a 	bic.w	r2, r2, #10
 80044a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80b8 	beq.w	8004630 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c8:	e0b2      	b.n	8004630 <HAL_DMA_IRQHandler+0xe0c>
 80044ca:	bf00      	nop
 80044cc:	40020010 	.word	0x40020010
 80044d0:	40020028 	.word	0x40020028
 80044d4:	40020040 	.word	0x40020040
 80044d8:	40020058 	.word	0x40020058
 80044dc:	40020070 	.word	0x40020070
 80044e0:	40020088 	.word	0x40020088
 80044e4:	400200a0 	.word	0x400200a0
 80044e8:	400200b8 	.word	0x400200b8
 80044ec:	40020410 	.word	0x40020410
 80044f0:	40020428 	.word	0x40020428
 80044f4:	40020440 	.word	0x40020440
 80044f8:	40020458 	.word	0x40020458
 80044fc:	40020470 	.word	0x40020470
 8004500:	40020488 	.word	0x40020488
 8004504:	400204a0 	.word	0x400204a0
 8004508:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2208      	movs	r2, #8
 8004516:	409a      	lsls	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8088 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8082 	beq.w	8004632 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a41      	ldr	r2, [pc, #260]	; (8004638 <HAL_DMA_IRQHandler+0xe14>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a3f      	ldr	r2, [pc, #252]	; (800463c <HAL_DMA_IRQHandler+0xe18>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3e      	ldr	r2, [pc, #248]	; (8004640 <HAL_DMA_IRQHandler+0xe1c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <HAL_DMA_IRQHandler+0xe20>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <HAL_DMA_IRQHandler+0xe24>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a39      	ldr	r2, [pc, #228]	; (800464c <HAL_DMA_IRQHandler+0xe28>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a38      	ldr	r2, [pc, #224]	; (8004650 <HAL_DMA_IRQHandler+0xe2c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a36      	ldr	r2, [pc, #216]	; (8004654 <HAL_DMA_IRQHandler+0xe30>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a35      	ldr	r2, [pc, #212]	; (8004658 <HAL_DMA_IRQHandler+0xe34>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a33      	ldr	r2, [pc, #204]	; (800465c <HAL_DMA_IRQHandler+0xe38>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a32      	ldr	r2, [pc, #200]	; (8004660 <HAL_DMA_IRQHandler+0xe3c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a30      	ldr	r2, [pc, #192]	; (8004664 <HAL_DMA_IRQHandler+0xe40>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <HAL_DMA_IRQHandler+0xe44>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2d      	ldr	r2, [pc, #180]	; (800466c <HAL_DMA_IRQHandler+0xe48>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <HAL_DMA_IRQHandler+0xe4c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_IRQHandler+0xdaa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <HAL_DMA_IRQHandler+0xe50>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <HAL_DMA_IRQHandler+0xdbc>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 021c 	bic.w	r2, r2, #28
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e007      	b.n	80045f0 <HAL_DMA_IRQHandler+0xdcc>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 020e 	bic.w	r2, r2, #14
 80045ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2201      	movs	r2, #1
 80045fa:	409a      	lsls	r2, r3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
 8004626:	e004      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004628:	bf00      	nop
 800462a:	e002      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004630:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004632:	3728      	adds	r7, #40	; 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40020010 	.word	0x40020010
 800463c:	40020028 	.word	0x40020028
 8004640:	40020040 	.word	0x40020040
 8004644:	40020058 	.word	0x40020058
 8004648:	40020070 	.word	0x40020070
 800464c:	40020088 	.word	0x40020088
 8004650:	400200a0 	.word	0x400200a0
 8004654:	400200b8 	.word	0x400200b8
 8004658:	40020410 	.word	0x40020410
 800465c:	40020428 	.word	0x40020428
 8004660:	40020440 	.word	0x40020440
 8004664:	40020458 	.word	0x40020458
 8004668:	40020470 	.word	0x40020470
 800466c:	40020488 	.word	0x40020488
 8004670:	400204a0 	.word	0x400204a0
 8004674:	400204b8 	.word	0x400204b8

08004678 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a84      	ldr	r2, [pc, #528]	; (80048a8 <DMA_SetConfig+0x230>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d072      	beq.n	8004782 <DMA_SetConfig+0x10a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a82      	ldr	r2, [pc, #520]	; (80048ac <DMA_SetConfig+0x234>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d06d      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a81      	ldr	r2, [pc, #516]	; (80048b0 <DMA_SetConfig+0x238>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d068      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a7f      	ldr	r2, [pc, #508]	; (80048b4 <DMA_SetConfig+0x23c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d063      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7e      	ldr	r2, [pc, #504]	; (80048b8 <DMA_SetConfig+0x240>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d05e      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7c      	ldr	r2, [pc, #496]	; (80048bc <DMA_SetConfig+0x244>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d059      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7b      	ldr	r2, [pc, #492]	; (80048c0 <DMA_SetConfig+0x248>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d054      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a79      	ldr	r2, [pc, #484]	; (80048c4 <DMA_SetConfig+0x24c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d04f      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a78      	ldr	r2, [pc, #480]	; (80048c8 <DMA_SetConfig+0x250>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d04a      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a76      	ldr	r2, [pc, #472]	; (80048cc <DMA_SetConfig+0x254>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d045      	beq.n	8004782 <DMA_SetConfig+0x10a>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a75      	ldr	r2, [pc, #468]	; (80048d0 <DMA_SetConfig+0x258>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d040      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a73      	ldr	r2, [pc, #460]	; (80048d4 <DMA_SetConfig+0x25c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d03b      	beq.n	8004782 <DMA_SetConfig+0x10a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a72      	ldr	r2, [pc, #456]	; (80048d8 <DMA_SetConfig+0x260>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d036      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a70      	ldr	r2, [pc, #448]	; (80048dc <DMA_SetConfig+0x264>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d031      	beq.n	8004782 <DMA_SetConfig+0x10a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6f      	ldr	r2, [pc, #444]	; (80048e0 <DMA_SetConfig+0x268>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d02c      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6d      	ldr	r2, [pc, #436]	; (80048e4 <DMA_SetConfig+0x26c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d027      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6c      	ldr	r2, [pc, #432]	; (80048e8 <DMA_SetConfig+0x270>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d022      	beq.n	8004782 <DMA_SetConfig+0x10a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6a      	ldr	r2, [pc, #424]	; (80048ec <DMA_SetConfig+0x274>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01d      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a69      	ldr	r2, [pc, #420]	; (80048f0 <DMA_SetConfig+0x278>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d018      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <DMA_SetConfig+0x27c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <DMA_SetConfig+0x10a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a66      	ldr	r2, [pc, #408]	; (80048f8 <DMA_SetConfig+0x280>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00e      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a64      	ldr	r2, [pc, #400]	; (80048fc <DMA_SetConfig+0x284>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d009      	beq.n	8004782 <DMA_SetConfig+0x10a>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a63      	ldr	r2, [pc, #396]	; (8004900 <DMA_SetConfig+0x288>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <DMA_SetConfig+0x10a>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a61      	ldr	r2, [pc, #388]	; (8004904 <DMA_SetConfig+0x28c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <DMA_SetConfig+0x10e>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <DMA_SetConfig+0x110>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004794:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3e      	ldr	r2, [pc, #248]	; (80048a8 <DMA_SetConfig+0x230>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d04a      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <DMA_SetConfig+0x234>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d045      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3b      	ldr	r2, [pc, #236]	; (80048b0 <DMA_SetConfig+0x238>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d040      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a3a      	ldr	r2, [pc, #232]	; (80048b4 <DMA_SetConfig+0x23c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d03b      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a38      	ldr	r2, [pc, #224]	; (80048b8 <DMA_SetConfig+0x240>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d036      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a37      	ldr	r2, [pc, #220]	; (80048bc <DMA_SetConfig+0x244>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d031      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a35      	ldr	r2, [pc, #212]	; (80048c0 <DMA_SetConfig+0x248>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02c      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a34      	ldr	r2, [pc, #208]	; (80048c4 <DMA_SetConfig+0x24c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d027      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a32      	ldr	r2, [pc, #200]	; (80048c8 <DMA_SetConfig+0x250>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d022      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a31      	ldr	r2, [pc, #196]	; (80048cc <DMA_SetConfig+0x254>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d01d      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <DMA_SetConfig+0x258>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <DMA_SetConfig+0x25c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <DMA_SetConfig+0x260>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <DMA_SetConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <DMA_SetConfig+0x268>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <DMA_SetConfig+0x1d0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <DMA_SetConfig+0x26c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <DMA_SetConfig+0x1d4>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <DMA_SetConfig+0x1d6>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d05a      	beq.n	8004908 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	223f      	movs	r2, #63	; 0x3f
 800485c:	409a      	lsls	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004870:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d108      	bne.n	8004894 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004892:	e087      	b.n	80049a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]
}
 80048a4:	e07e      	b.n	80049a4 <DMA_SetConfig+0x32c>
 80048a6:	bf00      	nop
 80048a8:	40020010 	.word	0x40020010
 80048ac:	40020028 	.word	0x40020028
 80048b0:	40020040 	.word	0x40020040
 80048b4:	40020058 	.word	0x40020058
 80048b8:	40020070 	.word	0x40020070
 80048bc:	40020088 	.word	0x40020088
 80048c0:	400200a0 	.word	0x400200a0
 80048c4:	400200b8 	.word	0x400200b8
 80048c8:	40020410 	.word	0x40020410
 80048cc:	40020428 	.word	0x40020428
 80048d0:	40020440 	.word	0x40020440
 80048d4:	40020458 	.word	0x40020458
 80048d8:	40020470 	.word	0x40020470
 80048dc:	40020488 	.word	0x40020488
 80048e0:	400204a0 	.word	0x400204a0
 80048e4:	400204b8 	.word	0x400204b8
 80048e8:	58025408 	.word	0x58025408
 80048ec:	5802541c 	.word	0x5802541c
 80048f0:	58025430 	.word	0x58025430
 80048f4:	58025444 	.word	0x58025444
 80048f8:	58025458 	.word	0x58025458
 80048fc:	5802546c 	.word	0x5802546c
 8004900:	58025480 	.word	0x58025480
 8004904:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <DMA_SetConfig+0x338>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <DMA_SetConfig+0x33c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d01d      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a25      	ldr	r2, [pc, #148]	; (80049b8 <DMA_SetConfig+0x340>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a24      	ldr	r2, [pc, #144]	; (80049bc <DMA_SetConfig+0x344>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <DMA_SetConfig+0x348>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <DMA_SetConfig+0x34c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <DMA_SetConfig+0x350>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <DMA_SetConfig+0x2e0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <DMA_SetConfig+0x354>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <DMA_SetConfig+0x2e4>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <DMA_SetConfig+0x2e6>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d020      	beq.n	80049a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2201      	movs	r2, #1
 800496c:	409a      	lsls	r2, r3
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d108      	bne.n	8004994 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	60da      	str	r2, [r3, #12]
}
 8004992:	e007      	b.n	80049a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	60da      	str	r2, [r3, #12]
}
 80049a4:	bf00      	nop
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	58025408 	.word	0x58025408
 80049b4:	5802541c 	.word	0x5802541c
 80049b8:	58025430 	.word	0x58025430
 80049bc:	58025444 	.word	0x58025444
 80049c0:	58025458 	.word	0x58025458
 80049c4:	5802546c 	.word	0x5802546c
 80049c8:	58025480 	.word	0x58025480
 80049cc:	58025494 	.word	0x58025494

080049d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a42      	ldr	r2, [pc, #264]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x118>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d04a      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a41      	ldr	r2, [pc, #260]	; (8004aec <DMA_CalcBaseAndBitshift+0x11c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d045      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3f      	ldr	r2, [pc, #252]	; (8004af0 <DMA_CalcBaseAndBitshift+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d040      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3e      	ldr	r2, [pc, #248]	; (8004af4 <DMA_CalcBaseAndBitshift+0x124>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d03b      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <DMA_CalcBaseAndBitshift+0x128>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d036      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <DMA_CalcBaseAndBitshift+0x12c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d031      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a39      	ldr	r2, [pc, #228]	; (8004b00 <DMA_CalcBaseAndBitshift+0x130>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02c      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <DMA_CalcBaseAndBitshift+0x134>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d027      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a36      	ldr	r2, [pc, #216]	; (8004b08 <DMA_CalcBaseAndBitshift+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d022      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a35      	ldr	r2, [pc, #212]	; (8004b0c <DMA_CalcBaseAndBitshift+0x13c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d01d      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a33      	ldr	r2, [pc, #204]	; (8004b10 <DMA_CalcBaseAndBitshift+0x140>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d018      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <DMA_CalcBaseAndBitshift+0x144>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d013      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <DMA_CalcBaseAndBitshift+0x148>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00e      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <DMA_CalcBaseAndBitshift+0x14c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d009      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	; (8004b20 <DMA_CalcBaseAndBitshift+0x150>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <DMA_CalcBaseAndBitshift+0x154>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d101      	bne.n	8004a7c <DMA_CalcBaseAndBitshift+0xac>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <DMA_CalcBaseAndBitshift+0xae>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d024      	beq.n	8004acc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3b10      	subs	r3, #16
 8004a8a:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <DMA_CalcBaseAndBitshift+0x158>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	4a24      	ldr	r2, [pc, #144]	; (8004b2c <DMA_CalcBaseAndBitshift+0x15c>)
 8004a9c:	5cd3      	ldrb	r3, [r2, r3]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d908      	bls.n	8004abc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <DMA_CalcBaseAndBitshift+0x160>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	1d1a      	adds	r2, r3, #4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	659a      	str	r2, [r3, #88]	; 0x58
 8004aba:	e00d      	b.n	8004ad8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <DMA_CalcBaseAndBitshift+0x160>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aca:	e005      	b.n	8004ad8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40020010 	.word	0x40020010
 8004aec:	40020028 	.word	0x40020028
 8004af0:	40020040 	.word	0x40020040
 8004af4:	40020058 	.word	0x40020058
 8004af8:	40020070 	.word	0x40020070
 8004afc:	40020088 	.word	0x40020088
 8004b00:	400200a0 	.word	0x400200a0
 8004b04:	400200b8 	.word	0x400200b8
 8004b08:	40020410 	.word	0x40020410
 8004b0c:	40020428 	.word	0x40020428
 8004b10:	40020440 	.word	0x40020440
 8004b14:	40020458 	.word	0x40020458
 8004b18:	40020470 	.word	0x40020470
 8004b1c:	40020488 	.word	0x40020488
 8004b20:	400204a0 	.word	0x400204a0
 8004b24:	400204b8 	.word	0x400204b8
 8004b28:	aaaaaaab 	.word	0xaaaaaaab
 8004b2c:	0800c4d4 	.word	0x0800c4d4
 8004b30:	fffffc00 	.word	0xfffffc00

08004b34 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d120      	bne.n	8004b8a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d858      	bhi.n	8004c02 <DMA_CheckFifoParam+0xce>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <DMA_CheckFifoParam+0x24>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b7b 	.word	0x08004b7b
 8004b60:	08004b69 	.word	0x08004b69
 8004b64:	08004c03 	.word	0x08004c03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d048      	beq.n	8004c06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b78:	e045      	b.n	8004c06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b82:	d142      	bne.n	8004c0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b88:	e03f      	b.n	8004c0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b92:	d123      	bne.n	8004bdc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d838      	bhi.n	8004c0e <DMA_CheckFifoParam+0xda>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <DMA_CheckFifoParam+0x70>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bbb 	.word	0x08004bbb
 8004bac:	08004bb5 	.word	0x08004bb5
 8004bb0:	08004bcd 	.word	0x08004bcd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
        break;
 8004bb8:	e030      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d025      	beq.n	8004c12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bca:	e022      	b.n	8004c12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bd4:	d11f      	bne.n	8004c16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bda:	e01c      	b.n	8004c16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d902      	bls.n	8004bea <DMA_CheckFifoParam+0xb6>
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d003      	beq.n	8004bf0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004be8:	e018      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
        break;
 8004bee:	e015      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00e      	beq.n	8004c1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8004c00:	e00b      	b.n	8004c1a <DMA_CheckFifoParam+0xe6>
        break;
 8004c02:	bf00      	nop
 8004c04:	e00a      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        break;
 8004c06:	bf00      	nop
 8004c08:	e008      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e006      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e004      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        break;
 8004c12:	bf00      	nop
 8004c14:	e002      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
        break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <DMA_CheckFifoParam+0xe8>
    break;
 8004c1a:	bf00      	nop
    }
  }

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop

08004c2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a38      	ldr	r2, [pc, #224]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a33      	ldr	r2, [pc, #204]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a32      	ldr	r2, [pc, #200]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a30      	ldr	r2, [pc, #192]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2f      	ldr	r2, [pc, #188]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2d      	ldr	r2, [pc, #180]	; (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01a      	beq.n	8004cca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	3b08      	subs	r3, #8
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	461a      	mov	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a24      	ldr	r2, [pc, #144]	; (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004cb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cc8:	e024      	b.n	8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	3b10      	subs	r3, #16
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d806      	bhi.n	8004cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d902      	bls.n	8004cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	58025408 	.word	0x58025408
 8004d24:	5802541c 	.word	0x5802541c
 8004d28:	58025430 	.word	0x58025430
 8004d2c:	58025444 	.word	0x58025444
 8004d30:	58025458 	.word	0x58025458
 8004d34:	5802546c 	.word	0x5802546c
 8004d38:	58025480 	.word	0x58025480
 8004d3c:	58025494 	.word	0x58025494
 8004d40:	cccccccd 	.word	0xcccccccd
 8004d44:	16009600 	.word	0x16009600
 8004d48:	58025880 	.word	0x58025880
 8004d4c:	aaaaaaab 	.word	0xaaaaaaab
 8004d50:	400204b8 	.word	0x400204b8
 8004d54:	4002040f 	.word	0x4002040f
 8004d58:	10008200 	.word	0x10008200
 8004d5c:	40020880 	.word	0x40020880

08004d60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d04a      	beq.n	8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d847      	bhi.n	8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d022      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d01d      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d018      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00e      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d009      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a15      	ldr	r2, [pc, #84]	; (8004e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004de8:	671a      	str	r2, [r3, #112]	; 0x70
 8004dea:	e009      	b.n	8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	461a      	mov	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004dfe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	2201      	movs	r2, #1
 8004e06:	409a      	lsls	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	58025408 	.word	0x58025408
 8004e1c:	5802541c 	.word	0x5802541c
 8004e20:	58025430 	.word	0x58025430
 8004e24:	58025444 	.word	0x58025444
 8004e28:	58025458 	.word	0x58025458
 8004e2c:	5802546c 	.word	0x5802546c
 8004e30:	58025480 	.word	0x58025480
 8004e34:	58025494 	.word	0x58025494
 8004e38:	1600963f 	.word	0x1600963f
 8004e3c:	58025940 	.word	0x58025940
 8004e40:	1000823f 	.word	0x1000823f
 8004e44:	40020940 	.word	0x40020940

08004e48 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d105      	bne.n	8004e6e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e325      	b.n	80054ba <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e31e      	b.n	80054ba <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	f040 830d 	bne.w	80054ac <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a82      	ldr	r2, [pc, #520]	; (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d04a      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a81      	ldr	r2, [pc, #516]	; (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d045      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a7f      	ldr	r2, [pc, #508]	; (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d040      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7e      	ldr	r2, [pc, #504]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d03b      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d036      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a7b      	ldr	r2, [pc, #492]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d031      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a79      	ldr	r2, [pc, #484]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d02c      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a78      	ldr	r2, [pc, #480]	; (80050cc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d027      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a76      	ldr	r2, [pc, #472]	; (80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d022      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a75      	ldr	r2, [pc, #468]	; (80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d01d      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a73      	ldr	r2, [pc, #460]	; (80050d8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a72      	ldr	r2, [pc, #456]	; (80050dc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a70      	ldr	r2, [pc, #448]	; (80050e0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a6f      	ldr	r2, [pc, #444]	; (80050e4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a6d      	ldr	r2, [pc, #436]	; (80050e8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6c      	ldr	r2, [pc, #432]	; (80050ec <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f58:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	3308      	adds	r3, #8
 8004f68:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	223f      	movs	r2, #63	; 0x3f
 8004f74:	409a      	lsls	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e018      	b.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6819      	ldr	r1, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	f248 0320 	movw	r3, #32800	; 0x8020
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fb41 	bl	800563c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d072      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3a      	ldr	r2, [pc, #232]	; (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d06d      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a39      	ldr	r2, [pc, #228]	; (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d068      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a37      	ldr	r2, [pc, #220]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d063      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a36      	ldr	r2, [pc, #216]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d05e      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a34      	ldr	r2, [pc, #208]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d059      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d054      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a31      	ldr	r2, [pc, #196]	; (80050cc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d04f      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d04a      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2e      	ldr	r2, [pc, #184]	; (80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d045      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d040      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2b      	ldr	r2, [pc, #172]	; (80050dc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d03b      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d036      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d031      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d02c      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d027      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a22      	ldr	r2, [pc, #136]	; (80050f4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01d      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d018      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d132      	bne.n	8005110 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e031      	b.n	8005112 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80050ae:	bf00      	nop
 80050b0:	40020010 	.word	0x40020010
 80050b4:	40020028 	.word	0x40020028
 80050b8:	40020040 	.word	0x40020040
 80050bc:	40020058 	.word	0x40020058
 80050c0:	40020070 	.word	0x40020070
 80050c4:	40020088 	.word	0x40020088
 80050c8:	400200a0 	.word	0x400200a0
 80050cc:	400200b8 	.word	0x400200b8
 80050d0:	40020410 	.word	0x40020410
 80050d4:	40020428 	.word	0x40020428
 80050d8:	40020440 	.word	0x40020440
 80050dc:	40020458 	.word	0x40020458
 80050e0:	40020470 	.word	0x40020470
 80050e4:	40020488 	.word	0x40020488
 80050e8:	400204a0 	.word	0x400204a0
 80050ec:	400204b8 	.word	0x400204b8
 80050f0:	58025408 	.word	0x58025408
 80050f4:	5802541c 	.word	0x5802541c
 80050f8:	58025430 	.word	0x58025430
 80050fc:	58025444 	.word	0x58025444
 8005100:	58025458 	.word	0x58025458
 8005104:	5802546c 	.word	0x5802546c
 8005108:	58025480 	.word	0x58025480
 800510c:	58025494 	.word	0x58025494
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800511e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005130:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a85      	ldr	r2, [pc, #532]	; (800534c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d04a      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a83      	ldr	r2, [pc, #524]	; (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d045      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a82      	ldr	r2, [pc, #520]	; (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d040      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a80      	ldr	r2, [pc, #512]	; (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d03b      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7f      	ldr	r2, [pc, #508]	; (800535c <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d036      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7d      	ldr	r2, [pc, #500]	; (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d031      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7c      	ldr	r2, [pc, #496]	; (8005364 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d02c      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a7a      	ldr	r2, [pc, #488]	; (8005368 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d027      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a79      	ldr	r2, [pc, #484]	; (800536c <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a77      	ldr	r2, [pc, #476]	; (8005370 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01d      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a76      	ldr	r2, [pc, #472]	; (8005374 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a74      	ldr	r2, [pc, #464]	; (8005378 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a73      	ldr	r2, [pc, #460]	; (800537c <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a71      	ldr	r2, [pc, #452]	; (8005380 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a70      	ldr	r2, [pc, #448]	; (8005384 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a6e      	ldr	r2, [pc, #440]	; (8005388 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d022      	beq.n	8005222 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 021e 	bic.w	r2, r3, #30
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0216 	orr.w	r2, r2, #22
 80051ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051fe:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d103      	bne.n	8005210 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520c:	2b00      	cmp	r3, #0
 800520e:	d022      	beq.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e019      	b.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 020e 	bic.w	r2, r3, #14
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 020a 	orr.w	r2, r2, #10
 8005234:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d103      	bne.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0204 	orr.w	r2, r2, #4
 8005254:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3c      	ldr	r2, [pc, #240]	; (800534c <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d072      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d06d      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a39      	ldr	r2, [pc, #228]	; (8005354 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d068      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a37      	ldr	r2, [pc, #220]	; (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d063      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a36      	ldr	r2, [pc, #216]	; (800535c <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d05e      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a34      	ldr	r2, [pc, #208]	; (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d059      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a33      	ldr	r2, [pc, #204]	; (8005364 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d054      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a31      	ldr	r2, [pc, #196]	; (8005368 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d04f      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a30      	ldr	r2, [pc, #192]	; (800536c <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d04a      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2e      	ldr	r2, [pc, #184]	; (8005370 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d045      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2d      	ldr	r2, [pc, #180]	; (8005374 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d040      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2b      	ldr	r2, [pc, #172]	; (8005378 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d03b      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d036      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a28      	ldr	r2, [pc, #160]	; (8005380 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d031      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a27      	ldr	r2, [pc, #156]	; (8005384 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d02c      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a25      	ldr	r2, [pc, #148]	; (8005388 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d027      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a24      	ldr	r2, [pc, #144]	; (800538c <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a22      	ldr	r2, [pc, #136]	; (8005390 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01d      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1e      	ldr	r2, [pc, #120]	; (800539c <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d132      	bne.n	80053ac <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005346:	2301      	movs	r3, #1
 8005348:	e031      	b.n	80053ae <HAL_DMAEx_MultiBufferStart_IT+0x566>
 800534a:	bf00      	nop
 800534c:	40020010 	.word	0x40020010
 8005350:	40020028 	.word	0x40020028
 8005354:	40020040 	.word	0x40020040
 8005358:	40020058 	.word	0x40020058
 800535c:	40020070 	.word	0x40020070
 8005360:	40020088 	.word	0x40020088
 8005364:	400200a0 	.word	0x400200a0
 8005368:	400200b8 	.word	0x400200b8
 800536c:	40020410 	.word	0x40020410
 8005370:	40020428 	.word	0x40020428
 8005374:	40020440 	.word	0x40020440
 8005378:	40020458 	.word	0x40020458
 800537c:	40020470 	.word	0x40020470
 8005380:	40020488 	.word	0x40020488
 8005384:	400204a0 	.word	0x400204a0
 8005388:	400204b8 	.word	0x400204b8
 800538c:	58025408 	.word	0x58025408
 8005390:	5802541c 	.word	0x5802541c
 8005394:	58025430 	.word	0x58025430
 8005398:	58025444 	.word	0x58025444
 800539c:	58025458 	.word	0x58025458
 80053a0:	5802546c 	.word	0x5802546c
 80053a4:	58025480 	.word	0x58025480
 80053a8:	58025494 	.word	0x58025494
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01a      	beq.n	80053e8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a35      	ldr	r2, [pc, #212]	; (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04a      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a34      	ldr	r2, [pc, #208]	; (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d045      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a32      	ldr	r2, [pc, #200]	; (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d040      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a31      	ldr	r2, [pc, #196]	; (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d03b      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2f      	ldr	r2, [pc, #188]	; (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d036      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2e      	ldr	r2, [pc, #184]	; (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d031      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2c      	ldr	r2, [pc, #176]	; (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02c      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d027      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a23      	ldr	r2, [pc, #140]	; (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a20      	ldr	r2, [pc, #128]	; (80054fc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e00e      	b.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e005      	b.n	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40020010 	.word	0x40020010
 80054c8:	40020028 	.word	0x40020028
 80054cc:	40020040 	.word	0x40020040
 80054d0:	40020058 	.word	0x40020058
 80054d4:	40020070 	.word	0x40020070
 80054d8:	40020088 	.word	0x40020088
 80054dc:	400200a0 	.word	0x400200a0
 80054e0:	400200b8 	.word	0x400200b8
 80054e4:	40020410 	.word	0x40020410
 80054e8:	40020428 	.word	0x40020428
 80054ec:	40020440 	.word	0x40020440
 80054f0:	40020458 	.word	0x40020458
 80054f4:	40020470 	.word	0x40020470
 80054f8:	40020488 	.word	0x40020488
 80054fc:	400204a0 	.word	0x400204a0
 8005500:	400204b8 	.word	0x400204b8

08005504 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a39      	ldr	r2, [pc, #228]	; (80055fc <HAL_DMAEx_ChangeMemory+0xf8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d04a      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a37      	ldr	r2, [pc, #220]	; (8005600 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d045      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a36      	ldr	r2, [pc, #216]	; (8005604 <HAL_DMAEx_ChangeMemory+0x100>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d040      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a34      	ldr	r2, [pc, #208]	; (8005608 <HAL_DMAEx_ChangeMemory+0x104>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d03b      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a33      	ldr	r2, [pc, #204]	; (800560c <HAL_DMAEx_ChangeMemory+0x108>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d036      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a31      	ldr	r2, [pc, #196]	; (8005610 <HAL_DMAEx_ChangeMemory+0x10c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d031      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a30      	ldr	r2, [pc, #192]	; (8005614 <HAL_DMAEx_ChangeMemory+0x110>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d02c      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2e      	ldr	r2, [pc, #184]	; (8005618 <HAL_DMAEx_ChangeMemory+0x114>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d027      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2d      	ldr	r2, [pc, #180]	; (800561c <HAL_DMAEx_ChangeMemory+0x118>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2b      	ldr	r2, [pc, #172]	; (8005620 <HAL_DMAEx_ChangeMemory+0x11c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01d      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <HAL_DMAEx_ChangeMemory+0x120>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <HAL_DMAEx_ChangeMemory+0x124>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a27      	ldr	r2, [pc, #156]	; (800562c <HAL_DMAEx_ChangeMemory+0x128>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a25      	ldr	r2, [pc, #148]	; (8005630 <HAL_DMAEx_ChangeMemory+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a24      	ldr	r2, [pc, #144]	; (8005634 <HAL_DMAEx_ChangeMemory+0x130>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_DMAEx_ChangeMemory+0xae>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a22      	ldr	r2, [pc, #136]	; (8005638 <HAL_DMAEx_ChangeMemory+0x134>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <HAL_DMAEx_ChangeMemory+0xb2>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_DMAEx_ChangeMemory+0xb4>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	e010      	b.n	80055ee <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	611a      	str	r2, [r3, #16]
 80055d4:	e00b      	b.n	80055ee <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	e003      	b.n	80055ee <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8

0800563c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a46      	ldr	r2, [pc, #280]	; (8005768 <DMA_MultiBufferSetConfig+0x12c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d04a      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a44      	ldr	r2, [pc, #272]	; (800576c <DMA_MultiBufferSetConfig+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d045      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a43      	ldr	r2, [pc, #268]	; (8005770 <DMA_MultiBufferSetConfig+0x134>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d040      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a41      	ldr	r2, [pc, #260]	; (8005774 <DMA_MultiBufferSetConfig+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d03b      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a40      	ldr	r2, [pc, #256]	; (8005778 <DMA_MultiBufferSetConfig+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d036      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3e      	ldr	r2, [pc, #248]	; (800577c <DMA_MultiBufferSetConfig+0x140>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d031      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3d      	ldr	r2, [pc, #244]	; (8005780 <DMA_MultiBufferSetConfig+0x144>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d02c      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3b      	ldr	r2, [pc, #236]	; (8005784 <DMA_MultiBufferSetConfig+0x148>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <DMA_MultiBufferSetConfig+0x14c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a38      	ldr	r2, [pc, #224]	; (800578c <DMA_MultiBufferSetConfig+0x150>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a37      	ldr	r2, [pc, #220]	; (8005790 <DMA_MultiBufferSetConfig+0x154>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a35      	ldr	r2, [pc, #212]	; (8005794 <DMA_MultiBufferSetConfig+0x158>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a34      	ldr	r2, [pc, #208]	; (8005798 <DMA_MultiBufferSetConfig+0x15c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a32      	ldr	r2, [pc, #200]	; (800579c <DMA_MultiBufferSetConfig+0x160>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a31      	ldr	r2, [pc, #196]	; (80057a0 <DMA_MultiBufferSetConfig+0x164>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <DMA_MultiBufferSetConfig+0xae>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <DMA_MultiBufferSetConfig+0x168>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <DMA_MultiBufferSetConfig+0xb2>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <DMA_MultiBufferSetConfig+0xb4>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d019      	beq.n	8005728 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d108      	bne.n	8005716 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005714:	e021      	b.n	800575a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
}
 8005726:	e018      	b.n	800575a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d108      	bne.n	800574a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	60da      	str	r2, [r3, #12]
}
 8005748:	e007      	b.n	800575a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40020010 	.word	0x40020010
 800576c:	40020028 	.word	0x40020028
 8005770:	40020040 	.word	0x40020040
 8005774:	40020058 	.word	0x40020058
 8005778:	40020070 	.word	0x40020070
 800577c:	40020088 	.word	0x40020088
 8005780:	400200a0 	.word	0x400200a0
 8005784:	400200b8 	.word	0x400200b8
 8005788:	40020410 	.word	0x40020410
 800578c:	40020428 	.word	0x40020428
 8005790:	40020440 	.word	0x40020440
 8005794:	40020458 	.word	0x40020458
 8005798:	40020470 	.word	0x40020470
 800579c:	40020488 	.word	0x40020488
 80057a0:	400204a0 	.word	0x400204a0
 80057a4:	400204b8 	.word	0x400204b8

080057a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057b6:	4b89      	ldr	r3, [pc, #548]	; (80059dc <HAL_GPIO_Init+0x234>)
 80057b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057ba:	e194      	b.n	8005ae6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	2101      	movs	r1, #1
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8186 	beq.w	8005ae0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d00b      	beq.n	80057f4 <HAL_GPIO_Init+0x4c>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d007      	beq.n	80057f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e8:	2b11      	cmp	r3, #17
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b12      	cmp	r3, #18
 80057f2:	d130      	bne.n	8005856 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	2203      	movs	r2, #3
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800582a:	2201      	movs	r2, #1
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f003 0201 	and.w	r2, r3, #1
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	2203      	movs	r2, #3
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4013      	ands	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_Init+0xee>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b12      	cmp	r3, #18
 8005894:	d123      	bne.n	80058de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	08da      	lsrs	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3208      	adds	r2, #8
 800589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	220f      	movs	r2, #15
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	08da      	lsrs	r2, r3, #3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3208      	adds	r2, #8
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	2203      	movs	r2, #3
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43db      	mvns	r3, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4013      	ands	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f003 0203 	and.w	r2, r3, #3
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80e0 	beq.w	8005ae0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005920:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <HAL_GPIO_Init+0x238>)
 8005922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005926:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <HAL_GPIO_Init+0x238>)
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005930:	4b2b      	ldr	r3, [pc, #172]	; (80059e0 <HAL_GPIO_Init+0x238>)
 8005932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593e:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <HAL_GPIO_Init+0x23c>)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3302      	adds	r3, #2
 8005946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	220f      	movs	r2, #15
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_GPIO_Init+0x240>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d052      	beq.n	8005a10 <HAL_GPIO_Init+0x268>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <HAL_GPIO_Init+0x244>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d031      	beq.n	80059d6 <HAL_GPIO_Init+0x22e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <HAL_GPIO_Init+0x248>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d02b      	beq.n	80059d2 <HAL_GPIO_Init+0x22a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_GPIO_Init+0x24c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d025      	beq.n	80059ce <HAL_GPIO_Init+0x226>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_GPIO_Init+0x250>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01f      	beq.n	80059ca <HAL_GPIO_Init+0x222>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <HAL_GPIO_Init+0x254>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d019      	beq.n	80059c6 <HAL_GPIO_Init+0x21e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HAL_GPIO_Init+0x258>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_GPIO_Init+0x21a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_GPIO_Init+0x25c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00d      	beq.n	80059be <HAL_GPIO_Init+0x216>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_GPIO_Init+0x260>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <HAL_GPIO_Init+0x212>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_GPIO_Init+0x264>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_GPIO_Init+0x20e>
 80059b2:	2309      	movs	r3, #9
 80059b4:	e02d      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059b6:	230a      	movs	r3, #10
 80059b8:	e02b      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059ba:	2308      	movs	r3, #8
 80059bc:	e029      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059be:	2307      	movs	r3, #7
 80059c0:	e027      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059c2:	2306      	movs	r3, #6
 80059c4:	e025      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059c6:	2305      	movs	r3, #5
 80059c8:	e023      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059ca:	2304      	movs	r3, #4
 80059cc:	e021      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059ce:	2303      	movs	r3, #3
 80059d0:	e01f      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e01d      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e01b      	b.n	8005a12 <HAL_GPIO_Init+0x26a>
 80059da:	bf00      	nop
 80059dc:	58000080 	.word	0x58000080
 80059e0:	58024400 	.word	0x58024400
 80059e4:	58000400 	.word	0x58000400
 80059e8:	58020000 	.word	0x58020000
 80059ec:	58020400 	.word	0x58020400
 80059f0:	58020800 	.word	0x58020800
 80059f4:	58020c00 	.word	0x58020c00
 80059f8:	58021000 	.word	0x58021000
 80059fc:	58021400 	.word	0x58021400
 8005a00:	58021800 	.word	0x58021800
 8005a04:	58021c00 	.word	0x58021c00
 8005a08:	58022000 	.word	0x58022000
 8005a0c:	58022400 	.word	0x58022400
 8005a10:	2300      	movs	r3, #0
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	f002 0203 	and.w	r2, r2, #3
 8005a18:	0092      	lsls	r2, r2, #2
 8005a1a:	4093      	lsls	r3, r2
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a22:	4938      	ldr	r1, [pc, #224]	; (8005b04 <HAL_GPIO_Init+0x35c>)
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	3302      	adds	r3, #2
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4013      	ands	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f47f ae63 	bne.w	80057bc <HAL_GPIO_Init+0x14>
  }
}
 8005af6:	bf00      	nop
 8005af8:	3724      	adds	r7, #36	; 0x24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	58000400 	.word	0x58000400

08005b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	807b      	strh	r3, [r7, #2]
 8005b14:	4613      	mov	r3, r2
 8005b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b18:	787b      	ldrb	r3, [r7, #1]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b1e:	887a      	ldrh	r2, [r7, #2]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b24:	e003      	b.n	8005b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b26:	887b      	ldrh	r3, [r7, #2]
 8005b28:	041a      	lsls	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	619a      	str	r2, [r3, #24]
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07f      	b.n	8005c4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb f824 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2224      	movs	r2, #36	; 0x24
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d107      	bne.n	8005bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	e006      	b.n	8005bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d104      	bne.n	8005bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <HAL_I2C_Init+0x11c>)
 8005be2:	430b      	orrs	r3, r1
 8005be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	ea42 0103 	orr.w	r1, r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	02008000 	.word	0x02008000

08005c5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	813b      	strh	r3, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	f040 80fd 	bne.w	8005e7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_I2C_Mem_Read+0x34>
 8005c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0f1      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_I2C_Mem_Read+0x4e>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e0ea      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cb2:	f7fb fe23 	bl	80018fc <HAL_GetTick>
 8005cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2319      	movs	r3, #25
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f95b 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0d5      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2222      	movs	r2, #34	; 0x22
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cfc:	88f8      	ldrh	r0, [r7, #6]
 8005cfe:	893a      	ldrh	r2, [r7, #8]
 8005d00:	8979      	ldrh	r1, [r7, #10]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f8bf 	bl	8005e90 <I2C_RequestMemoryRead>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0ad      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2bff      	cmp	r3, #255	; 0xff
 8005d2c:	d90e      	bls.n	8005d4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	22ff      	movs	r2, #255	; 0xff
 8005d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	8979      	ldrh	r1, [r7, #10]
 8005d3c:	4b52      	ldr	r3, [pc, #328]	; (8005e88 <HAL_I2C_Mem_Read+0x22c>)
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fa3d 	bl	80061c4 <I2C_TransferConfig>
 8005d4a:	e00f      	b.n	8005d6c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	8979      	ldrh	r1, [r7, #10]
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <HAL_I2C_Mem_Read+0x22c>)
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fa2c 	bl	80061c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	2200      	movs	r2, #0
 8005d74:	2104      	movs	r1, #4
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f902 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e07c      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d034      	beq.n	8005e2c <HAL_I2C_Mem_Read+0x1d0>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d130      	bne.n	8005e2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f8d3 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e04d      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2bff      	cmp	r3, #255	; 0xff
 8005dec:	d90e      	bls.n	8005e0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	22ff      	movs	r2, #255	; 0xff
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	8979      	ldrh	r1, [r7, #10]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f9dd 	bl	80061c4 <I2C_TransferConfig>
 8005e0a:	e00f      	b.n	8005e2c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	8979      	ldrh	r1, [r7, #10]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f9cc 	bl	80061c4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d19a      	bne.n	8005d6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f920 	bl	8006080 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e01a      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6859      	ldr	r1, [r3, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_I2C_Mem_Read+0x230>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	80002400 	.word	0x80002400
 8005e8c:	fe00e800 	.word	0xfe00e800

08005e90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	4608      	mov	r0, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	817b      	strh	r3, [r7, #10]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	813b      	strh	r3, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	8979      	ldrh	r1, [r7, #10]
 8005eb0:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <I2C_RequestMemoryRead+0xa4>)
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f984 	bl	80061c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f89d 	bl	8006000 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e02c      	b.n	8005f2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d105      	bne.n	8005ee2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed6:	893b      	ldrh	r3, [r7, #8]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28
 8005ee0:	e015      	b.n	8005f0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ee2:	893b      	ldrh	r3, [r7, #8]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	69b9      	ldr	r1, [r7, #24]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f883 	bl	8006000 <I2C_WaitOnTXISFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e012      	b.n	8005f2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f04:	893b      	ldrh	r3, [r7, #8]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2140      	movs	r1, #64	; 0x40
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f831 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	80002000 	.word	0x80002000

08005f38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d103      	bne.n	8005f56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d007      	beq.n	8005f74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	619a      	str	r2, [r3, #24]
  }
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f90:	e022      	b.n	8005fd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d01e      	beq.n	8005fd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fb fcaf 	bl	80018fc <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d113      	bne.n	8005fd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e00f      	b.n	8005ff8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2301      	moveq	r3, #1
 8005fea:	2300      	movne	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d0cd      	beq.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800600c:	e02c      	b.n	8006068 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f870 	bl	80060f8 <I2C_IsAcknowledgeFailed>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e02a      	b.n	8006078 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d01e      	beq.n	8006068 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fb fc67 	bl	80018fc <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d113      	bne.n	8006068 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	f043 0220 	orr.w	r2, r3, #32
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e007      	b.n	8006078 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b02      	cmp	r3, #2
 8006074:	d1cb      	bne.n	800600e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800608c:	e028      	b.n	80060e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f830 	bl	80060f8 <I2C_IsAcknowledgeFailed>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e026      	b.n	80060f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fb fc2b 	bl	80018fc <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d113      	bne.n	80060e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e007      	b.n	80060f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d1cf      	bne.n	800608e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b10      	cmp	r3, #16
 8006110:	d151      	bne.n	80061b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006112:	e022      	b.n	800615a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d01e      	beq.n	800615a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611c:	f7fb fbee 	bl	80018fc <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <I2C_IsAcknowledgeFailed+0x3a>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d113      	bne.n	800615a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e02e      	b.n	80061b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d1d5      	bne.n	8006114 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2210      	movs	r2, #16
 800616e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2220      	movs	r2, #32
 8006176:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff fedd 	bl	8005f38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800618a:	400b      	ands	r3, r1
 800618c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	f043 0204 	orr.w	r2, r3, #4
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	fe00e800 	.word	0xfe00e800

080061c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	817b      	strh	r3, [r7, #10]
 80061d2:	4613      	mov	r3, r2
 80061d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	0d5b      	lsrs	r3, r3, #21
 80061e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80061e4:	4b0d      	ldr	r3, [pc, #52]	; (800621c <I2C_TransferConfig+0x58>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	43db      	mvns	r3, r3
 80061ea:	ea02 0103 	and.w	r1, r2, r3
 80061ee:	897b      	ldrh	r3, [r7, #10]
 80061f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061f4:	7a7b      	ldrb	r3, [r7, #9]
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	431a      	orrs	r2, r3
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	431a      	orrs	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	03ff63ff 	.word	0x03ff63ff

08006220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b20      	cmp	r3, #32
 8006234:	d138      	bne.n	80062a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006240:	2302      	movs	r3, #2
 8006242:	e032      	b.n	80062aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2224      	movs	r2, #36	; 0x24
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d139      	bne.n	8006340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e033      	b.n	8006342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2224      	movs	r2, #36	; 0x24
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0201 	bic.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e000      	b.n	8006342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006340:	2302      	movs	r3, #2
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_PWREx_ConfigSupply+0x70>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d00a      	beq.n	800637a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006364:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <HAL_PWREx_ConfigSupply+0x70>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d001      	beq.n	8006376 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e01f      	b.n	80063b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e01d      	b.n	80063b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_PWREx_ConfigSupply+0x70>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f023 0207 	bic.w	r2, r3, #7
 8006382:	490f      	ldr	r1, [pc, #60]	; (80063c0 <HAL_PWREx_ConfigSupply+0x70>)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4313      	orrs	r3, r2
 8006388:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800638a:	f7fb fab7 	bl	80018fc <HAL_GetTick>
 800638e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006390:	e009      	b.n	80063a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006392:	f7fb fab3 	bl	80018fc <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063a0:	d901      	bls.n	80063a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e007      	b.n	80063b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_PWREx_ConfigSupply+0x70>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b2:	d1ee      	bne.n	8006392 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	58024800 	.word	0x58024800

080063c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	; 0x30
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e3ff      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8087 	beq.w	80064f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063e4:	4b99      	ldr	r3, [pc, #612]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063ee:	4b97      	ldr	r3, [pc, #604]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d007      	beq.n	800640a <HAL_RCC_OscConfig+0x46>
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	2b18      	cmp	r3, #24
 80063fe:	d110      	bne.n	8006422 <HAL_RCC_OscConfig+0x5e>
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d10b      	bne.n	8006422 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640a:	4b90      	ldr	r3, [pc, #576]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d06c      	beq.n	80064f0 <HAL_RCC_OscConfig+0x12c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d168      	bne.n	80064f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e3d9      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642a:	d106      	bne.n	800643a <HAL_RCC_OscConfig+0x76>
 800642c:	4b87      	ldr	r3, [pc, #540]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a86      	ldr	r2, [pc, #536]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e02e      	b.n	8006498 <HAL_RCC_OscConfig+0xd4>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10c      	bne.n	800645c <HAL_RCC_OscConfig+0x98>
 8006442:	4b82      	ldr	r3, [pc, #520]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a81      	ldr	r2, [pc, #516]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4b7f      	ldr	r3, [pc, #508]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a7e      	ldr	r2, [pc, #504]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	e01d      	b.n	8006498 <HAL_RCC_OscConfig+0xd4>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006464:	d10c      	bne.n	8006480 <HAL_RCC_OscConfig+0xbc>
 8006466:	4b79      	ldr	r3, [pc, #484]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a78      	ldr	r2, [pc, #480]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800646c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	4b76      	ldr	r3, [pc, #472]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a75      	ldr	r2, [pc, #468]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e00b      	b.n	8006498 <HAL_RCC_OscConfig+0xd4>
 8006480:	4b72      	ldr	r3, [pc, #456]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a71      	ldr	r2, [pc, #452]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	4b6f      	ldr	r3, [pc, #444]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a6e      	ldr	r2, [pc, #440]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d013      	beq.n	80064c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fb fa2c 	bl	80018fc <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064a8:	f7fb fa28 	bl	80018fc <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b64      	cmp	r3, #100	; 0x64
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e38d      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ba:	4b64      	ldr	r3, [pc, #400]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0xe4>
 80064c6:	e014      	b.n	80064f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fb fa18 	bl	80018fc <HAL_GetTick>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064d0:	f7fb fa14 	bl	80018fc <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b64      	cmp	r3, #100	; 0x64
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e379      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064e2:	4b5a      	ldr	r3, [pc, #360]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x10c>
 80064ee:	e000      	b.n	80064f2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80ae 	beq.w	800665c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006500:	4b52      	ldr	r3, [pc, #328]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006508:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800650a:	4b50      	ldr	r3, [pc, #320]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d007      	beq.n	8006526 <HAL_RCC_OscConfig+0x162>
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2b18      	cmp	r3, #24
 800651a:	d13a      	bne.n	8006592 <HAL_RCC_OscConfig+0x1ce>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d135      	bne.n	8006592 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006526:	4b49      	ldr	r3, [pc, #292]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <HAL_RCC_OscConfig+0x17a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e34b      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653e:	f7fb f9e9 	bl	8001914 <HAL_GetREVID>
 8006542:	4602      	mov	r2, r0
 8006544:	f241 0303 	movw	r3, #4099	; 0x1003
 8006548:	429a      	cmp	r2, r3
 800654a:	d817      	bhi.n	800657c <HAL_RCC_OscConfig+0x1b8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d108      	bne.n	8006566 <HAL_RCC_OscConfig+0x1a2>
 8006554:	4b3d      	ldr	r3, [pc, #244]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800655c:	4a3b      	ldr	r2, [pc, #236]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800655e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006562:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006564:	e07a      	b.n	800665c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006566:	4b39      	ldr	r3, [pc, #228]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	031b      	lsls	r3, r3, #12
 8006574:	4935      	ldr	r1, [pc, #212]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006576:	4313      	orrs	r3, r2
 8006578:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657a:	e06f      	b.n	800665c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657c:	4b33      	ldr	r3, [pc, #204]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	061b      	lsls	r3, r3, #24
 800658a:	4930      	ldr	r1, [pc, #192]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800658c:	4313      	orrs	r3, r2
 800658e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006590:	e064      	b.n	800665c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d045      	beq.n	8006626 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800659a:	4b2c      	ldr	r3, [pc, #176]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f023 0219 	bic.w	r2, r3, #25
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4929      	ldr	r1, [pc, #164]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ac:	f7fb f9a6 	bl	80018fc <HAL_GetTick>
 80065b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b4:	f7fb f9a2 	bl	80018fc <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e307      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d2:	f7fb f99f 	bl	8001914 <HAL_GetREVID>
 80065d6:	4602      	mov	r2, r0
 80065d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80065dc:	429a      	cmp	r2, r3
 80065de:	d817      	bhi.n	8006610 <HAL_RCC_OscConfig+0x24c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d108      	bne.n	80065fa <HAL_RCC_OscConfig+0x236>
 80065e8:	4b18      	ldr	r3, [pc, #96]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065f0:	4a16      	ldr	r2, [pc, #88]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f6:	6053      	str	r3, [r2, #4]
 80065f8:	e030      	b.n	800665c <HAL_RCC_OscConfig+0x298>
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <HAL_RCC_OscConfig+0x288>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	031b      	lsls	r3, r3, #12
 8006608:	4910      	ldr	r1, [pc, #64]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800660a:	4313      	orrs	r3, r2
 800660c:	604b      	str	r3, [r1, #4]
 800660e:	e025      	b.n	800665c <HAL_RCC_OscConfig+0x298>
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	490b      	ldr	r1, [pc, #44]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	e01a      	b.n	800665c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <HAL_RCC_OscConfig+0x288>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a08      	ldr	r2, [pc, #32]	; (800664c <HAL_RCC_OscConfig+0x288>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fb f963 	bl	80018fc <HAL_GetTick>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006638:	e00a      	b.n	8006650 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800663a:	f7fb f95f 	bl	80018fc <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d903      	bls.n	8006650 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e2c4      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
 800664c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006650:	4ba4      	ldr	r3, [pc, #656]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1ee      	bne.n	800663a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a9 	beq.w	80067bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800666a:	4b9e      	ldr	r3, [pc, #632]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006672:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006674:	4b9b      	ldr	r3, [pc, #620]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d007      	beq.n	8006690 <HAL_RCC_OscConfig+0x2cc>
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b18      	cmp	r3, #24
 8006684:	d13a      	bne.n	80066fc <HAL_RCC_OscConfig+0x338>
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	2b01      	cmp	r3, #1
 800668e:	d135      	bne.n	80066fc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006690:	4b94      	ldr	r3, [pc, #592]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_OscConfig+0x2e4>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e296      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066a8:	f7fb f934 	bl	8001914 <HAL_GetREVID>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d817      	bhi.n	80066e6 <HAL_RCC_OscConfig+0x322>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d108      	bne.n	80066d0 <HAL_RCC_OscConfig+0x30c>
 80066be:	4b89      	ldr	r3, [pc, #548]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066c6:	4a87      	ldr	r2, [pc, #540]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80066c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066cc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ce:	e075      	b.n	80067bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066d0:	4b84      	ldr	r3, [pc, #528]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	069b      	lsls	r3, r3, #26
 80066de:	4981      	ldr	r1, [pc, #516]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066e4:	e06a      	b.n	80067bc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066e6:	4b7f      	ldr	r3, [pc, #508]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	061b      	lsls	r3, r3, #24
 80066f4:	497b      	ldr	r1, [pc, #492]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066fa:	e05f      	b.n	80067bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d042      	beq.n	800678a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006704:	4b77      	ldr	r3, [pc, #476]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a76      	ldr	r2, [pc, #472]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fb f8f4 	bl	80018fc <HAL_GetTick>
 8006714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006718:	f7fb f8f0 	bl	80018fc <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e255      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800672a:	4b6e      	ldr	r3, [pc, #440]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006736:	f7fb f8ed 	bl	8001914 <HAL_GetREVID>
 800673a:	4602      	mov	r2, r0
 800673c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006740:	429a      	cmp	r2, r3
 8006742:	d817      	bhi.n	8006774 <HAL_RCC_OscConfig+0x3b0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	2b20      	cmp	r3, #32
 800674a:	d108      	bne.n	800675e <HAL_RCC_OscConfig+0x39a>
 800674c:	4b65      	ldr	r3, [pc, #404]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006754:	4a63      	ldr	r2, [pc, #396]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800675a:	6053      	str	r3, [r2, #4]
 800675c:	e02e      	b.n	80067bc <HAL_RCC_OscConfig+0x3f8>
 800675e:	4b61      	ldr	r3, [pc, #388]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	069b      	lsls	r3, r3, #26
 800676c:	495d      	ldr	r1, [pc, #372]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800676e:	4313      	orrs	r3, r2
 8006770:	604b      	str	r3, [r1, #4]
 8006772:	e023      	b.n	80067bc <HAL_RCC_OscConfig+0x3f8>
 8006774:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	061b      	lsls	r3, r3, #24
 8006782:	4958      	ldr	r1, [pc, #352]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006784:	4313      	orrs	r3, r2
 8006786:	60cb      	str	r3, [r1, #12]
 8006788:	e018      	b.n	80067bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800678a:	4b56      	ldr	r3, [pc, #344]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a55      	ldr	r2, [pc, #340]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006796:	f7fb f8b1 	bl	80018fc <HAL_GetTick>
 800679a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800679e:	f7fb f8ad 	bl	80018fc <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e212      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067b0:	4b4c      	ldr	r3, [pc, #304]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d036      	beq.n	8006836 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d019      	beq.n	8006804 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067d0:	4b44      	ldr	r3, [pc, #272]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	4a43      	ldr	r2, [pc, #268]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fb f88e 	bl	80018fc <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fb f88a 	bl	80018fc <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e1ef      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067f6:	4b3b      	ldr	r3, [pc, #236]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80067f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x420>
 8006802:	e018      	b.n	8006836 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006804:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006808:	4a36      	ldr	r2, [pc, #216]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fb f874 	bl	80018fc <HAL_GetTick>
 8006814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006818:	f7fb f870 	bl	80018fc <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e1d5      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800682a:	4b2e      	ldr	r3, [pc, #184]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800682c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f0      	bne.n	8006818 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d036      	beq.n	80068b0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d019      	beq.n	800687e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a25      	ldr	r2, [pc, #148]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006854:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006856:	f7fb f851 	bl	80018fc <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800685e:	f7fb f84d 	bl	80018fc <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e1b2      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006870:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x49a>
 800687c:	e018      	b.n	80068b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800687e:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 8006884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006888:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800688a:	f7fb f837 	bl	80018fc <HAL_GetTick>
 800688e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006892:	f7fb f833 	bl	80018fc <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e198      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <HAL_RCC_OscConfig+0x520>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1f0      	bne.n	8006892 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8085 	beq.w	80069c8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <HAL_RCC_OscConfig+0x524>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <HAL_RCC_OscConfig+0x524>)
 80068c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ca:	f7fb f817 	bl	80018fc <HAL_GetTick>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d0:	e00c      	b.n	80068ec <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068d2:	f7fb f813 	bl	80018fc <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b64      	cmp	r3, #100	; 0x64
 80068de:	d905      	bls.n	80068ec <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e178      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
 80068e4:	58024400 	.word	0x58024400
 80068e8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ec:	4b96      	ldr	r3, [pc, #600]	; (8006b48 <HAL_RCC_OscConfig+0x784>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ec      	beq.n	80068d2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d106      	bne.n	800690e <HAL_RCC_OscConfig+0x54a>
 8006900:	4b92      	ldr	r3, [pc, #584]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006904:	4a91      	ldr	r2, [pc, #580]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006906:	f043 0301 	orr.w	r3, r3, #1
 800690a:	6713      	str	r3, [r2, #112]	; 0x70
 800690c:	e02d      	b.n	800696a <HAL_RCC_OscConfig+0x5a6>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10c      	bne.n	8006930 <HAL_RCC_OscConfig+0x56c>
 8006916:	4b8d      	ldr	r3, [pc, #564]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	4a8c      	ldr	r2, [pc, #560]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	6713      	str	r3, [r2, #112]	; 0x70
 8006922:	4b8a      	ldr	r3, [pc, #552]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	4a89      	ldr	r2, [pc, #548]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006928:	f023 0304 	bic.w	r3, r3, #4
 800692c:	6713      	str	r3, [r2, #112]	; 0x70
 800692e:	e01c      	b.n	800696a <HAL_RCC_OscConfig+0x5a6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b05      	cmp	r3, #5
 8006936:	d10c      	bne.n	8006952 <HAL_RCC_OscConfig+0x58e>
 8006938:	4b84      	ldr	r3, [pc, #528]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a83      	ldr	r2, [pc, #524]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 800693e:	f043 0304 	orr.w	r3, r3, #4
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	4b81      	ldr	r3, [pc, #516]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a80      	ldr	r2, [pc, #512]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
 8006950:	e00b      	b.n	800696a <HAL_RCC_OscConfig+0x5a6>
 8006952:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	4a7d      	ldr	r2, [pc, #500]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	6713      	str	r3, [r2, #112]	; 0x70
 800695e:	4b7b      	ldr	r3, [pc, #492]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a7a      	ldr	r2, [pc, #488]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006964:	f023 0304 	bic.w	r3, r3, #4
 8006968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d015      	beq.n	800699e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006972:	f7fa ffc3 	bl	80018fc <HAL_GetTick>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006978:	e00a      	b.n	8006990 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800697a:	f7fa ffbf 	bl	80018fc <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	f241 3288 	movw	r2, #5000	; 0x1388
 8006988:	4293      	cmp	r3, r2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e122      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006990:	4b6e      	ldr	r3, [pc, #440]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0ee      	beq.n	800697a <HAL_RCC_OscConfig+0x5b6>
 800699c:	e014      	b.n	80069c8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fa ffad 	bl	80018fc <HAL_GetTick>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fa ffa9 	bl	80018fc <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e10c      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069bc:	4b63      	ldr	r3, [pc, #396]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ee      	bne.n	80069a6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8101 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069d2:	4b5e      	ldr	r3, [pc, #376]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069da:	2b18      	cmp	r3, #24
 80069dc:	f000 80bc 	beq.w	8006b58 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	f040 8095 	bne.w	8006b14 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b58      	ldr	r3, [pc, #352]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a57      	ldr	r2, [pc, #348]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 80069f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f6:	f7fa ff81 	bl	80018fc <HAL_GetTick>
 80069fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069fe:	f7fa ff7d 	bl	80018fc <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e0e2      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a10:	4b4e      	ldr	r3, [pc, #312]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1f0      	bne.n	80069fe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a1c:	4b4b      	ldr	r3, [pc, #300]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a20:	4b4b      	ldr	r3, [pc, #300]	; (8006b50 <HAL_RCC_OscConfig+0x78c>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a2c:	0112      	lsls	r2, r2, #4
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	4946      	ldr	r1, [pc, #280]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	628b      	str	r3, [r1, #40]	; 0x28
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	3b01      	subs	r3, #1
 8006a46:	025b      	lsls	r3, r3, #9
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	3b01      	subs	r3, #1
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	061b      	lsls	r3, r3, #24
 8006a62:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a66:	4939      	ldr	r1, [pc, #228]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a6c:	4b37      	ldr	r3, [pc, #220]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	4a36      	ldr	r2, [pc, #216]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a78:	4b34      	ldr	r3, [pc, #208]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a7c:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <HAL_RCC_OscConfig+0x790>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a84:	00d2      	lsls	r2, r2, #3
 8006a86:	4931      	ldr	r1, [pc, #196]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	f023 020c 	bic.w	r2, r3, #12
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	492c      	ldr	r1, [pc, #176]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a9e:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	f023 0202 	bic.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	4928      	ldr	r1, [pc, #160]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ab0:	4b26      	ldr	r3, [pc, #152]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ac8:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aec:	f7fa ff06 	bl	80018fc <HAL_GetTick>
 8006af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af4:	f7fa ff02 	bl	80018fc <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e067      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b06:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x730>
 8006b12:	e05f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a0c      	ldr	r2, [pc, #48]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fa feec 	bl	80018fc <HAL_GetTick>
 8006b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b28:	f7fa fee8 	bl	80018fc <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e04d      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b3a:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <HAL_RCC_OscConfig+0x788>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f0      	bne.n	8006b28 <HAL_RCC_OscConfig+0x764>
 8006b46:	e045      	b.n	8006bd4 <HAL_RCC_OscConfig+0x810>
 8006b48:	58024800 	.word	0x58024800
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	fffffc0c 	.word	0xfffffc0c
 8006b54:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b58:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <HAL_RCC_OscConfig+0x81c>)
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b5e:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <HAL_RCC_OscConfig+0x81c>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d031      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f003 0203 	and.w	r2, r3, #3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d12a      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d122      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d11a      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0a5b      	lsrs	r3, r3, #9
 8006b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d111      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	0c1b      	lsrs	r3, r3, #16
 8006bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d108      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	0e1b      	lsrs	r3, r3, #24
 8006bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3730      	adds	r7, #48	; 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	58024400 	.word	0x58024400

08006be4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e19c      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b8a      	ldr	r3, [pc, #552]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d910      	bls.n	8006c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b87      	ldr	r3, [pc, #540]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	4985      	ldr	r1, [pc, #532]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b83      	ldr	r3, [pc, #524]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e184      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	4b7b      	ldr	r3, [pc, #492]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d908      	bls.n	8006c56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c44:	4b78      	ldr	r3, [pc, #480]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	4975      	ldr	r1, [pc, #468]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d010      	beq.n	8006c84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d908      	bls.n	8006c84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c72:	4b6d      	ldr	r3, [pc, #436]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	496a      	ldr	r1, [pc, #424]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d010      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	4b64      	ldr	r3, [pc, #400]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d908      	bls.n	8006cb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ca0:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	495e      	ldr	r1, [pc, #376]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d010      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	4b59      	ldr	r3, [pc, #356]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d908      	bls.n	8006ce0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cce:	4b56      	ldr	r3, [pc, #344]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	4953      	ldr	r1, [pc, #332]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	4b4d      	ldr	r3, [pc, #308]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d908      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cfc:	4b4a      	ldr	r3, [pc, #296]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f023 020f 	bic.w	r2, r3, #15
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4947      	ldr	r1, [pc, #284]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d055      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d1a:	4b43      	ldr	r3, [pc, #268]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4940      	ldr	r1, [pc, #256]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d34:	4b3c      	ldr	r3, [pc, #240]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d121      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0f6      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d115      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0ea      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0de      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d74:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0d6      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f023 0207 	bic.w	r2, r3, #7
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4925      	ldr	r1, [pc, #148]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7fa fdb1 	bl	80018fc <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d9e:	f7fa fdad 	bl	80018fc <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e0be      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d1eb      	bne.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d208      	bcs.n	8006df4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de2:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f023 020f 	bic.w	r2, r3, #15
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	490e      	ldr	r1, [pc, #56]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d214      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 020f 	bic.w	r2, r3, #15
 8006e0a:	4906      	ldr	r1, [pc, #24]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e086      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
 8006e24:	52002000 	.word	0x52002000
 8006e28:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d208      	bcs.n	8006e5a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e48:	4b3c      	ldr	r3, [pc, #240]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	4939      	ldr	r1, [pc, #228]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	4b34      	ldr	r3, [pc, #208]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d208      	bcs.n	8006e88 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e76:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	492e      	ldr	r1, [pc, #184]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d208      	bcs.n	8006eb6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	4922      	ldr	r1, [pc, #136]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d010      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d208      	bcs.n	8006ee4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	4917      	ldr	r1, [pc, #92]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ee4:	f000 f89e 	bl	8007024 <HAL_RCC_GetSysClockFreq>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	4a12      	ldr	r2, [pc, #72]	; (8006f40 <HAL_RCC_ClockConfig+0x35c>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	fa21 f303 	lsr.w	r3, r1, r3
 8006f00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	4a0d      	ldr	r2, [pc, #52]	; (8006f40 <HAL_RCC_ClockConfig+0x35c>)
 8006f0c:	5cd3      	ldrb	r3, [r2, r3]
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <HAL_RCC_ClockConfig+0x360>)
 8006f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f1c:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <HAL_RCC_ClockConfig+0x364>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f22:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <HAL_RCC_ClockConfig+0x368>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fa fc9e 	bl	8001868 <HAL_InitTick>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	58024400 	.word	0x58024400
 8006f40:	0800c4c4 	.word	0x0800c4c4
 8006f44:	24000004 	.word	0x24000004
 8006f48:	24000000 	.word	0x24000000
 8006f4c:	24000008 	.word	0x24000008

08006f50 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d12a      	bne.n	8006fb8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006f62:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f68:	4a2b      	ldr	r2, [pc, #172]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f72:	4b29      	ldr	r3, [pc, #164]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f86:	2302      	movs	r3, #2
 8006f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006f92:	2300      	movs	r3, #0
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006f96:	f107 031c 	add.w	r3, r7, #28
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	481f      	ldr	r0, [pc, #124]	; (800701c <HAL_RCC_MCOConfig+0xcc>)
 8006f9e:	f7fe fc03 	bl	80057a8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	4919      	ldr	r1, [pc, #100]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006fb6:	e02a      	b.n	800700e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006fb8:	4b17      	ldr	r3, [pc, #92]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fbe:	4a16      	ldr	r2, [pc, #88]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006fc0:	f043 0304 	orr.w	r3, r3, #4
 8006fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fc8:	4b13      	ldr	r3, [pc, #76]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006fec:	f107 031c 	add.w	r3, r7, #28
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	480b      	ldr	r0, [pc, #44]	; (8007020 <HAL_RCC_MCOConfig+0xd0>)
 8006ff4:	f7fe fbd8 	bl	80057a8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	01d9      	lsls	r1, r3, #7
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	430b      	orrs	r3, r1
 8007008:	4903      	ldr	r1, [pc, #12]	; (8007018 <HAL_RCC_MCOConfig+0xc8>)
 800700a:	4313      	orrs	r3, r2
 800700c:	610b      	str	r3, [r1, #16]
}
 800700e:	bf00      	nop
 8007010:	3730      	adds	r7, #48	; 0x30
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	58024400 	.word	0x58024400
 800701c:	58020000 	.word	0x58020000
 8007020:	58020800 	.word	0x58020800

08007024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007024:	b480      	push	{r7}
 8007026:	b089      	sub	sp, #36	; 0x24
 8007028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800702a:	4baf      	ldr	r3, [pc, #700]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007032:	2b18      	cmp	r3, #24
 8007034:	f200 814e 	bhi.w	80072d4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080072d5 	.word	0x080072d5
 8007048:	080072d5 	.word	0x080072d5
 800704c:	080072d5 	.word	0x080072d5
 8007050:	080072d5 	.word	0x080072d5
 8007054:	080072d5 	.word	0x080072d5
 8007058:	080072d5 	.word	0x080072d5
 800705c:	080072d5 	.word	0x080072d5
 8007060:	080070cb 	.word	0x080070cb
 8007064:	080072d5 	.word	0x080072d5
 8007068:	080072d5 	.word	0x080072d5
 800706c:	080072d5 	.word	0x080072d5
 8007070:	080072d5 	.word	0x080072d5
 8007074:	080072d5 	.word	0x080072d5
 8007078:	080072d5 	.word	0x080072d5
 800707c:	080072d5 	.word	0x080072d5
 8007080:	080070d1 	.word	0x080070d1
 8007084:	080072d5 	.word	0x080072d5
 8007088:	080072d5 	.word	0x080072d5
 800708c:	080072d5 	.word	0x080072d5
 8007090:	080072d5 	.word	0x080072d5
 8007094:	080072d5 	.word	0x080072d5
 8007098:	080072d5 	.word	0x080072d5
 800709c:	080072d5 	.word	0x080072d5
 80070a0:	080070d7 	.word	0x080070d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a4:	4b90      	ldr	r3, [pc, #576]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070b0:	4b8d      	ldr	r3, [pc, #564]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	08db      	lsrs	r3, r3, #3
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	4a8c      	ldr	r2, [pc, #560]	; (80072ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80070c2:	e10a      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070c4:	4b89      	ldr	r3, [pc, #548]	; (80072ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070c6:	61bb      	str	r3, [r7, #24]
    break;
 80070c8:	e107      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80070ca:	4b89      	ldr	r3, [pc, #548]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80070cc:	61bb      	str	r3, [r7, #24]
    break;
 80070ce:	e104      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80070d0:	4b88      	ldr	r3, [pc, #544]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80070d2:	61bb      	str	r3, [r7, #24]
    break;
 80070d4:	e101      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d6:	4b84      	ldr	r3, [pc, #528]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070e0:	4b81      	ldr	r3, [pc, #516]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070ec:	4b7e      	ldr	r3, [pc, #504]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070f6:	4b7c      	ldr	r3, [pc, #496]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	08db      	lsrs	r3, r3, #3
 80070fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80da 	beq.w	80072ce <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d05a      	beq.n	80071d6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d302      	bcc.n	800712a <HAL_RCC_GetSysClockFreq+0x106>
 8007124:	2b02      	cmp	r3, #2
 8007126:	d078      	beq.n	800721a <HAL_RCC_GetSysClockFreq+0x1f6>
 8007128:	e099      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800712a:	4b6f      	ldr	r3, [pc, #444]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d02d      	beq.n	8007192 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007136:	4b6c      	ldr	r3, [pc, #432]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	08db      	lsrs	r3, r3, #3
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	4a6a      	ldr	r2, [pc, #424]	; (80072ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007142:	fa22 f303 	lsr.w	r3, r2, r3
 8007146:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007160:	4b61      	ldr	r3, [pc, #388]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007170:	ed97 6a02 	vldr	s12, [r7, #8]
 8007174:	eddf 5a60 	vldr	s11, [pc, #384]	; 80072f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007190:	e087      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80072fc <HAL_RCC_GetSysClockFreq+0x2d8>
 80071a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a4:	4b50      	ldr	r3, [pc, #320]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80072f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d4:	e065      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007300 <HAL_RCC_GetSysClockFreq+0x2dc>
 80071e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e8:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80071fc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80072f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007218:	e043      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007224:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007304 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722c:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007240:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80072f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725c:	e021      	b.n	80072a2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007300 <HAL_RCC_GetSysClockFreq+0x2dc>
 800726c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007270:	4b1d      	ldr	r3, [pc, #116]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007280:	ed97 6a02 	vldr	s12, [r7, #8]
 8007284:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80072f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072a2:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	0a5b      	lsrs	r3, r3, #9
 80072a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ac:	3301      	adds	r3, #1
 80072ae:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 3a90 	vmov	r3, s15
 80072ca:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80072cc:	e005      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
    break;
 80072d2:	e002      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80072d6:	61bb      	str	r3, [r7, #24]
    break;
 80072d8:	bf00      	nop
  }

  return sysclockfreq;
 80072da:	69bb      	ldr	r3, [r7, #24]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3724      	adds	r7, #36	; 0x24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	58024400 	.word	0x58024400
 80072ec:	03d09000 	.word	0x03d09000
 80072f0:	003d0900 	.word	0x003d0900
 80072f4:	01e84800 	.word	0x01e84800
 80072f8:	46000000 	.word	0x46000000
 80072fc:	4c742400 	.word	0x4c742400
 8007300:	4a742400 	.word	0x4a742400
 8007304:	4bf42400 	.word	0x4bf42400

08007308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800730e:	f7ff fe89 	bl	8007024 <HAL_RCC_GetSysClockFreq>
 8007312:	4601      	mov	r1, r0
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <HAL_RCC_GetHCLKFreq+0x50>)
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	4a0f      	ldr	r2, [pc, #60]	; (800735c <HAL_RCC_GetHCLKFreq+0x54>)
 8007320:	5cd3      	ldrb	r3, [r2, r3]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	fa21 f303 	lsr.w	r3, r1, r3
 800732a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <HAL_RCC_GetHCLKFreq+0x50>)
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	4a09      	ldr	r2, [pc, #36]	; (800735c <HAL_RCC_GetHCLKFreq+0x54>)
 8007336:	5cd3      	ldrb	r3, [r2, r3]
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	fa22 f303 	lsr.w	r3, r2, r3
 8007342:	4a07      	ldr	r2, [pc, #28]	; (8007360 <HAL_RCC_GetHCLKFreq+0x58>)
 8007344:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007346:	4a07      	ldr	r2, [pc, #28]	; (8007364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800734c:	4b04      	ldr	r3, [pc, #16]	; (8007360 <HAL_RCC_GetHCLKFreq+0x58>)
 800734e:	681b      	ldr	r3, [r3, #0]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	58024400 	.word	0x58024400
 800735c:	0800c4c4 	.word	0x0800c4c4
 8007360:	24000004 	.word	0x24000004
 8007364:	24000000 	.word	0x24000000

08007368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800736c:	f7ff ffcc 	bl	8007308 <HAL_RCC_GetHCLKFreq>
 8007370:	4601      	mov	r1, r0
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	091b      	lsrs	r3, r3, #4
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4a04      	ldr	r2, [pc, #16]	; (8007390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	f003 031f 	and.w	r3, r3, #31
 8007384:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	58024400 	.word	0x58024400
 8007390:	0800c4c4 	.word	0x0800c4c4

08007394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007398:	f7ff ffb6 	bl	8007308 <HAL_RCC_GetHCLKFreq>
 800739c:	4601      	mov	r1, r0
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	4a04      	ldr	r2, [pc, #16]	; (80073bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073aa:	5cd3      	ldrb	r3, [r2, r3]
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	58024400 	.word	0x58024400
 80073bc:	0800c4c4 	.word	0x0800c4c4

080073c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073c8:	2300      	movs	r3, #0
 80073ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073cc:	2300      	movs	r3, #0
 80073ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d03d      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073e4:	d013      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80073e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ea:	d802      	bhi.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80073f0:	e01f      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80073f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f6:	d013      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80073f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073fc:	d01c      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80073fe:	e018      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007400:	4baf      	ldr	r3, [pc, #700]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	4aae      	ldr	r2, [pc, #696]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800740c:	e015      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3304      	adds	r3, #4
 8007412:	2102      	movs	r1, #2
 8007414:	4618      	mov	r0, r3
 8007416:	f001 f96f 	bl	80086f8 <RCCEx_PLL2_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800741e:	e00c      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3324      	adds	r3, #36	; 0x24
 8007424:	2102      	movs	r1, #2
 8007426:	4618      	mov	r0, r3
 8007428:	f001 fa18 	bl	800885c <RCCEx_PLL3_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	75fb      	strb	r3, [r7, #23]
      break;
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d109      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007440:	4b9f      	ldr	r3, [pc, #636]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800744c:	499c      	ldr	r1, [pc, #624]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800744e:	4313      	orrs	r3, r2
 8007450:	650b      	str	r3, [r1, #80]	; 0x50
 8007452:	e001      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d03d      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007468:	2b04      	cmp	r3, #4
 800746a:	d826      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007489 	.word	0x08007489
 8007478:	08007497 	.word	0x08007497
 800747c:	080074a9 	.word	0x080074a9
 8007480:	080074c1 	.word	0x080074c1
 8007484:	080074c1 	.word	0x080074c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007488:	4b8d      	ldr	r3, [pc, #564]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a8c      	ldr	r2, [pc, #560]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800748e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007494:	e015      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3304      	adds	r3, #4
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f001 f92b 	bl	80086f8 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a6:	e00c      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3324      	adds	r3, #36	; 0x24
 80074ac:	2100      	movs	r1, #0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 f9d4 	bl	800885c <RCCEx_PLL3_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074b8:	e003      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
      break;
 80074be:	e000      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80074c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074c8:	4b7d      	ldr	r3, [pc, #500]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074cc:	f023 0207 	bic.w	r2, r3, #7
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d4:	497a      	ldr	r1, [pc, #488]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	650b      	str	r3, [r1, #80]	; 0x50
 80074da:	e001      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d03e      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f0:	2b80      	cmp	r3, #128	; 0x80
 80074f2:	d01c      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80074f4:	2b80      	cmp	r3, #128	; 0x80
 80074f6:	d804      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	d00d      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007500:	e01e      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007502:	2bc0      	cmp	r3, #192	; 0xc0
 8007504:	d01f      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750a:	d01e      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800750c:	e018      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800750e:	4b6c      	ldr	r3, [pc, #432]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	4a6b      	ldr	r2, [pc, #428]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800751a:	e017      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	2100      	movs	r1, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f001 f8e8 	bl	80086f8 <RCCEx_PLL2_Config>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800752c:	e00e      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3324      	adds	r3, #36	; 0x24
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f001 f991 	bl	800885c <RCCEx_PLL3_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800753e:	e005      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	75fb      	strb	r3, [r7, #23]
      break;
 8007544:	e002      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800754a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d109      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007552:	4b5b      	ldr	r3, [pc, #364]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755e:	4958      	ldr	r1, [pc, #352]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007560:	4313      	orrs	r3, r2
 8007562:	650b      	str	r3, [r1, #80]	; 0x50
 8007564:	e001      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007572:	2b00      	cmp	r3, #0
 8007574:	d044      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800757c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007580:	d01f      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007586:	d805      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800758c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007590:	d00e      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007592:	e01f      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007594:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007598:	d01f      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800759a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800759e:	d01e      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80075a0:	e018      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a2:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	4a46      	ldr	r2, [pc, #280]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ae:	e017      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3304      	adds	r3, #4
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f89e 	bl	80086f8 <RCCEx_PLL2_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075c0:	e00e      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3324      	adds	r3, #36	; 0x24
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 f947 	bl	800885c <RCCEx_PLL3_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075d2:	e005      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
      break;
 80075d8:	e002      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80075da:	bf00      	nop
 80075dc:	e000      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80075de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075e6:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ea:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075f4:	4932      	ldr	r1, [pc, #200]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	658b      	str	r3, [r1, #88]	; 0x58
 80075fa:	e001      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007608:	2b00      	cmp	r3, #0
 800760a:	d044      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007616:	d01f      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800761c:	d805      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007626:	d00e      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007628:	e01f      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800762a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800762e:	d01f      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007634:	d01e      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007636:	e018      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007638:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4a20      	ldr	r2, [pc, #128]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800763e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007644:	e017      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3304      	adds	r3, #4
 800764a:	2100      	movs	r1, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f001 f853 	bl	80086f8 <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007656:	e00e      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3324      	adds	r3, #36	; 0x24
 800765c:	2100      	movs	r1, #0
 800765e:	4618      	mov	r0, r3
 8007660:	f001 f8fc 	bl	800885c <RCCEx_PLL3_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007668:	e005      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
      break;
 800766e:	e002      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007680:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800768a:	490d      	ldr	r1, [pc, #52]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800768c:	4313      	orrs	r3, r2
 800768e:	658b      	str	r3, [r1, #88]	; 0x58
 8007690:	e001      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d035      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d00c      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80076aa:	2b10      	cmp	r3, #16
 80076ac:	d802      	bhi.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01b      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80076b2:	e017      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d00c      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80076b8:	2b30      	cmp	r3, #48	; 0x30
 80076ba:	d018      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80076bc:	e012      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	4baf      	ldr	r3, [pc, #700]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4aae      	ldr	r2, [pc, #696]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076d0:	e00e      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	2102      	movs	r1, #2
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f80d 	bl	80086f8 <RCCEx_PLL2_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076e2:	e005      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]
      break;
 80076e8:	e002      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80076ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076f6:	4ba3      	ldr	r3, [pc, #652]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007702:	49a0      	ldr	r1, [pc, #640]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007708:	e001      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d042      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007722:	d01f      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007728:	d805      	bhi.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800772e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007732:	d00e      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007734:	e01f      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800773a:	d01f      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800773c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007740:	d01e      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007742:	e018      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007744:	4b8f      	ldr	r3, [pc, #572]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a8e      	ldr	r2, [pc, #568]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800774a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007750:	e017      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f000 ffcd 	bl	80086f8 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007762:	e00e      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f001 f876 	bl	800885c <RCCEx_PLL3_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007774:	e005      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	75fb      	strb	r3, [r7, #23]
      break;
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800777c:	bf00      	nop
 800777e:	e000      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007788:	4b7e      	ldr	r3, [pc, #504]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007794:	497b      	ldr	r1, [pc, #492]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007796:	4313      	orrs	r3, r2
 8007798:	650b      	str	r3, [r1, #80]	; 0x50
 800779a:	e001      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d042      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077b4:	d01b      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80077b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ba:	d805      	bhi.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d022      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80077c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c4:	d00a      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077c6:	e01b      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80077c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077cc:	d01d      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80077ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d2:	d01c      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80077d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077d8:	d01b      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80077da:	e011      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	2101      	movs	r1, #1
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 ff88 	bl	80086f8 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077ec:	e012      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3324      	adds	r3, #36	; 0x24
 80077f2:	2101      	movs	r1, #1
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 f831 	bl	800885c <RCCEx_PLL3_Config>
 80077fa:	4603      	mov	r3, r0
 80077fc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077fe:	e009      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
      break;
 8007804:	e006      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007806:	bf00      	nop
 8007808:	e004      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800780a:	bf00      	nop
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800781a:	4b5a      	ldr	r3, [pc, #360]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007826:	4957      	ldr	r1, [pc, #348]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007828:	4313      	orrs	r3, r2
 800782a:	650b      	str	r3, [r1, #80]	; 0x50
 800782c:	e001      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d044      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007848:	d01b      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800784e:	d805      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d022      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007858:	d00a      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800785a:	e01b      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d01d      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007866:	d01c      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800786c:	d01b      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	2101      	movs	r1, #1
 8007876:	4618      	mov	r0, r3
 8007878:	f000 ff3e 	bl	80086f8 <RCCEx_PLL2_Config>
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007880:	e012      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3324      	adds	r3, #36	; 0x24
 8007886:	2101      	movs	r1, #1
 8007888:	4618      	mov	r0, r3
 800788a:	f000 ffe7 	bl	800885c <RCCEx_PLL3_Config>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007892:	e009      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
      break;
 8007898:	e006      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800789a:	bf00      	nop
 800789c:	e004      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800789e:	bf00      	nop
 80078a0:	e002      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078a2:	bf00      	nop
 80078a4:	e000      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078ae:	4b35      	ldr	r3, [pc, #212]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078bc:	4931      	ldr	r1, [pc, #196]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	658b      	str	r3, [r1, #88]	; 0x58
 80078c2:	e001      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02d      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078dc:	d005      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80078de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e2:	d009      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d013      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80078e8:	e00f      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ea:	4b26      	ldr	r3, [pc, #152]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	4a25      	ldr	r2, [pc, #148]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078f6:	e00c      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	2101      	movs	r1, #1
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fefa 	bl	80086f8 <RCCEx_PLL2_Config>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007908:	e003      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
      break;
 800790e:	e000      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007918:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800791a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007924:	4917      	ldr	r1, [pc, #92]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007926:	4313      	orrs	r3, r2
 8007928:	650b      	str	r3, [r1, #80]	; 0x50
 800792a:	e001      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d035      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007940:	2b03      	cmp	r3, #3
 8007942:	d81b      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007944:	a201      	add	r2, pc, #4	; (adr r2, 800794c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	08007989 	.word	0x08007989
 8007950:	0800795d 	.word	0x0800795d
 8007954:	0800796b 	.word	0x0800796b
 8007958:	08007989 	.word	0x08007989
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	4a08      	ldr	r2, [pc, #32]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007968:	e00f      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3304      	adds	r3, #4
 800796e:	2102      	movs	r1, #2
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fec1 	bl	80086f8 <RCCEx_PLL2_Config>
 8007976:	4603      	mov	r3, r0
 8007978:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800797a:	e006      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]
      break;
 8007980:	e003      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007982:	bf00      	nop
 8007984:	58024400 	.word	0x58024400
      break;
 8007988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007990:	4bba      	ldr	r3, [pc, #744]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007994:	f023 0203 	bic.w	r2, r3, #3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799c:	49b7      	ldr	r1, [pc, #732]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079a2:	e001      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8086 	beq.w	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079b6:	4bb2      	ldr	r3, [pc, #712]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4ab1      	ldr	r2, [pc, #708]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80079bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079c2:	f7f9 ff9b 	bl	80018fc <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079c8:	e009      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ca:	f7f9 ff97 	bl	80018fc <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b64      	cmp	r3, #100	; 0x64
 80079d6:	d902      	bls.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	75fb      	strb	r3, [r7, #23]
        break;
 80079dc:	e005      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079de:	4ba8      	ldr	r3, [pc, #672]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0ef      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d166      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079f0:	4ba2      	ldr	r3, [pc, #648]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079fa:	4053      	eors	r3, r2
 80079fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d013      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a04:	4b9d      	ldr	r3, [pc, #628]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a0e:	4b9b      	ldr	r3, [pc, #620]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	4a9a      	ldr	r2, [pc, #616]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a1a:	4b98      	ldr	r3, [pc, #608]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	4a97      	ldr	r2, [pc, #604]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a26:	4a95      	ldr	r2, [pc, #596]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a36:	d115      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7f9 ff60 	bl	80018fc <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a3e:	e00b      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a40:	f7f9 ff5c 	bl	80018fc <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d902      	bls.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	75fb      	strb	r3, [r7, #23]
            break;
 8007a56:	e005      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a58:	4b88      	ldr	r3, [pc, #544]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0ed      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d126      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a78:	d10d      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007a7a:	4b80      	ldr	r3, [pc, #512]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a88:	0919      	lsrs	r1, r3, #4
 8007a8a:	4b7e      	ldr	r3, [pc, #504]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007a8c:	400b      	ands	r3, r1
 8007a8e:	497b      	ldr	r1, [pc, #492]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	610b      	str	r3, [r1, #16]
 8007a94:	e005      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007a96:	4b79      	ldr	r3, [pc, #484]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	4a78      	ldr	r2, [pc, #480]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007aa0:	6113      	str	r3, [r2, #16]
 8007aa2:	4b76      	ldr	r3, [pc, #472]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ab0:	4972      	ldr	r1, [pc, #456]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	670b      	str	r3, [r1, #112]	; 0x70
 8007ab6:	e004      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	75bb      	strb	r3, [r7, #22]
 8007abc:	e001      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d07d      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad2:	2b28      	cmp	r3, #40	; 0x28
 8007ad4:	d866      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007bab 	.word	0x08007bab
 8007ae0:	08007ba5 	.word	0x08007ba5
 8007ae4:	08007ba5 	.word	0x08007ba5
 8007ae8:	08007ba5 	.word	0x08007ba5
 8007aec:	08007ba5 	.word	0x08007ba5
 8007af0:	08007ba5 	.word	0x08007ba5
 8007af4:	08007ba5 	.word	0x08007ba5
 8007af8:	08007ba5 	.word	0x08007ba5
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007ba5 	.word	0x08007ba5
 8007b04:	08007ba5 	.word	0x08007ba5
 8007b08:	08007ba5 	.word	0x08007ba5
 8007b0c:	08007ba5 	.word	0x08007ba5
 8007b10:	08007ba5 	.word	0x08007ba5
 8007b14:	08007ba5 	.word	0x08007ba5
 8007b18:	08007ba5 	.word	0x08007ba5
 8007b1c:	08007b93 	.word	0x08007b93
 8007b20:	08007ba5 	.word	0x08007ba5
 8007b24:	08007ba5 	.word	0x08007ba5
 8007b28:	08007ba5 	.word	0x08007ba5
 8007b2c:	08007ba5 	.word	0x08007ba5
 8007b30:	08007ba5 	.word	0x08007ba5
 8007b34:	08007ba5 	.word	0x08007ba5
 8007b38:	08007ba5 	.word	0x08007ba5
 8007b3c:	08007bab 	.word	0x08007bab
 8007b40:	08007ba5 	.word	0x08007ba5
 8007b44:	08007ba5 	.word	0x08007ba5
 8007b48:	08007ba5 	.word	0x08007ba5
 8007b4c:	08007ba5 	.word	0x08007ba5
 8007b50:	08007ba5 	.word	0x08007ba5
 8007b54:	08007ba5 	.word	0x08007ba5
 8007b58:	08007ba5 	.word	0x08007ba5
 8007b5c:	08007bab 	.word	0x08007bab
 8007b60:	08007ba5 	.word	0x08007ba5
 8007b64:	08007ba5 	.word	0x08007ba5
 8007b68:	08007ba5 	.word	0x08007ba5
 8007b6c:	08007ba5 	.word	0x08007ba5
 8007b70:	08007ba5 	.word	0x08007ba5
 8007b74:	08007ba5 	.word	0x08007ba5
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	08007bab 	.word	0x08007bab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	2101      	movs	r1, #1
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fdb6 	bl	80086f8 <RCCEx_PLL2_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b90:	e00c      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3324      	adds	r3, #36	; 0x24
 8007b96:	2101      	movs	r1, #1
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fe5f 	bl	800885c <RCCEx_PLL3_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ba2:	e003      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba8:	e000      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bb2:	4b32      	ldr	r3, [pc, #200]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bbe:	492f      	ldr	r1, [pc, #188]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	654b      	str	r3, [r1, #84]	; 0x54
 8007bc4:	e001      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d037      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d820      	bhi.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c27 	.word	0x08007c27
 8007be8:	08007bfd 	.word	0x08007bfd
 8007bec:	08007c0f 	.word	0x08007c0f
 8007bf0:	08007c27 	.word	0x08007c27
 8007bf4:	08007c27 	.word	0x08007c27
 8007bf8:	08007c27 	.word	0x08007c27
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	2101      	movs	r1, #1
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fd78 	bl	80086f8 <RCCEx_PLL2_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c0c:	e00c      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3324      	adds	r3, #36	; 0x24
 8007c12:	2101      	movs	r1, #1
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fe21 	bl	800885c <RCCEx_PLL3_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c1e:	e003      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75fb      	strb	r3, [r7, #23]
      break;
 8007c24:	e000      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	f023 0207 	bic.w	r2, r3, #7
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3a:	4910      	ldr	r1, [pc, #64]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c40:	e001      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d040      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	2b05      	cmp	r3, #5
 8007c5a:	d827      	bhi.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007c5c:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c62:	bf00      	nop
 8007c64:	08007cb3 	.word	0x08007cb3
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	08007c9b 	.word	0x08007c9b
 8007c70:	08007cb3 	.word	0x08007cb3
 8007c74:	08007cb3 	.word	0x08007cb3
 8007c78:	08007cb3 	.word	0x08007cb3
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	58024800 	.word	0x58024800
 8007c84:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fd32 	bl	80086f8 <RCCEx_PLL2_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c98:	e00c      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3324      	adds	r3, #36	; 0x24
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fddb 	bl	800885c <RCCEx_PLL3_Config>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007caa:	e003      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb0:	e000      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10a      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cba:	4bb2      	ldr	r3, [pc, #712]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cbe:	f023 0207 	bic.w	r2, r3, #7
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc8:	49ae      	ldr	r1, [pc, #696]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8007cce:	e001      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d044      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cea:	d01b      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf0:	d805      	bhi.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007cfc:	e01b      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d02:	d01d      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d08:	d01c      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007d0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d0e:	d01b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007d10:	e011      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3304      	adds	r3, #4
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fced 	bl	80086f8 <RCCEx_PLL2_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d22:	e012      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3324      	adds	r3, #36	; 0x24
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fd96 	bl	800885c <RCCEx_PLL3_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d34:	e009      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3a:	e006      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d3c:	bf00      	nop
 8007d3e:	e004      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d40:	bf00      	nop
 8007d42:	e002      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d44:	bf00      	nop
 8007d46:	e000      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d50:	4b8c      	ldr	r3, [pc, #560]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d5e:	4989      	ldr	r1, [pc, #548]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	654b      	str	r3, [r1, #84]	; 0x54
 8007d64:	e001      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d044      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d80:	d01b      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d86:	d805      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d022      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007d92:	e01b      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d98:	d01d      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007d9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d9e:	d01c      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da4:	d01b      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007da6:	e011      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fca2 	bl	80086f8 <RCCEx_PLL2_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007db8:	e012      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3324      	adds	r3, #36	; 0x24
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fd4b 	bl	800885c <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007dca:	e009      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	e006      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e004      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e002      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007de6:	4b67      	ldr	r3, [pc, #412]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007df4:	4963      	ldr	r1, [pc, #396]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	658b      	str	r3, [r1, #88]	; 0x58
 8007dfa:	e001      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d044      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e16:	d01b      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1c:	d805      	bhi.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d022      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e26:	d00a      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e28:	e01b      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2e:	d01d      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007e30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e34:	d01c      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007e36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e3a:	d01b      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007e3c:	e011      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3304      	adds	r3, #4
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fc57 	bl	80086f8 <RCCEx_PLL2_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e4e:	e012      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	2102      	movs	r1, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fd00 	bl	800885c <RCCEx_PLL3_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e60:	e009      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	75fb      	strb	r3, [r7, #23]
      break;
 8007e66:	e006      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e68:	bf00      	nop
 8007e6a:	e004      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e6c:	bf00      	nop
 8007e6e:	e002      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e7c:	4b41      	ldr	r3, [pc, #260]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e8a:	493e      	ldr	r1, [pc, #248]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	658b      	str	r3, [r1, #88]	; 0x58
 8007e90:	e001      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d01a      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eac:	d10a      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3324      	adds	r3, #36	; 0x24
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fcd1 	bl	800885c <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ec4:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed2:	492c      	ldr	r1, [pc, #176]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01a      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eee:	d10a      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3324      	adds	r3, #36	; 0x24
 8007ef4:	2102      	movs	r1, #2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fcb0 	bl	800885c <RCCEx_PLL3_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f14:	491b      	ldr	r1, [pc, #108]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d032      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f30:	d00d      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f36:	d016      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d111      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fbd8 	bl	80086f8 <RCCEx_PLL2_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f4c:	e00c      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3324      	adds	r3, #36	; 0x24
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fc81 	bl	800885c <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f5e:	e003      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
      break;
 8007f64:	e000      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10c      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f7c:	4901      	ldr	r1, [pc, #4]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	658b      	str	r3, [r1, #88]	; 0x58
 8007f82:	e003      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d02f      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fa2:	d00c      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007fa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fa8:	d015      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fae:	d10f      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb0:	4b79      	ldr	r3, [pc, #484]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	4a78      	ldr	r2, [pc, #480]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fbc:	e00c      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3324      	adds	r3, #36	; 0x24
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fc49 	bl	800885c <RCCEx_PLL3_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fce:	e003      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fde:	4b6e      	ldr	r3, [pc, #440]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fec:	496a      	ldr	r1, [pc, #424]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	654b      	str	r3, [r1, #84]	; 0x54
 8007ff2:	e001      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d029      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008010:	d007      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008012:	e00f      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008014:	4b60      	ldr	r3, [pc, #384]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a5f      	ldr	r2, [pc, #380]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800801a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008020:	e00b      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3304      	adds	r3, #4
 8008026:	2102      	movs	r1, #2
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fb65 	bl	80086f8 <RCCEx_PLL2_Config>
 800802e:	4603      	mov	r3, r0
 8008030:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008032:	e002      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	75fb      	strb	r3, [r7, #23]
      break;
 8008038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d109      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008040:	4b55      	ldr	r3, [pc, #340]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804c:	4952      	ldr	r1, [pc, #328]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800804e:	4313      	orrs	r3, r2
 8008050:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008052:	e001      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	2102      	movs	r1, #2
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fbf6 	bl	800885c <RCCEx_PLL3_Config>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d02f      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	d00c      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008094:	d802      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d011      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800809a:	e00d      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800809c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a0:	d00f      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80080a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a6:	d00e      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80080a8:	e006      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080aa:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	4a3a      	ldr	r2, [pc, #232]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80080b6:	e007      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	75fb      	strb	r3, [r7, #23]
      break;
 80080bc:	e004      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80080be:	bf00      	nop
 80080c0:	e002      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80080c2:	bf00      	nop
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80080c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080ce:	4b32      	ldr	r3, [pc, #200]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080da:	492f      	ldr	r1, [pc, #188]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	654b      	str	r3, [r1, #84]	; 0x54
 80080e0:	e001      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	4926      	ldr	r1, [pc, #152]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008100:	4313      	orrs	r3, r2
 8008102:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008110:	4b21      	ldr	r3, [pc, #132]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800811e:	491e      	ldr	r1, [pc, #120]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008120:	4313      	orrs	r3, r2
 8008122:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008130:	4b19      	ldr	r3, [pc, #100]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813c:	4916      	ldr	r1, [pc, #88]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800813e:	4313      	orrs	r3, r2
 8008140:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	4a11      	ldr	r2, [pc, #68]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008158:	6113      	str	r3, [r2, #16]
 800815a:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008164:	490c      	ldr	r1, [pc, #48]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008166:	4313      	orrs	r3, r2
 8008168:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	da08      	bge.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817e:	4906      	ldr	r1, [pc, #24]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008180:	4313      	orrs	r3, r2
 8008182:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008184:	7dbb      	ldrb	r3, [r7, #22]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	e000      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	58024400 	.word	0x58024400

0800819c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081a0:	f7ff f8b2 	bl	8007308 <HAL_RCC_GetHCLKFreq>
 80081a4:	4601      	mov	r1, r0
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	091b      	lsrs	r3, r3, #4
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081b2:	5cd3      	ldrb	r3, [r2, r3]
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	58024400 	.word	0x58024400
 80081c4:	0800c4c4 	.word	0x0800c4c4

080081c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b089      	sub	sp, #36	; 0x24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d0:	4b9d      	ldr	r3, [pc, #628]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081da:	4b9b      	ldr	r3, [pc, #620]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	0b1b      	lsrs	r3, r3, #12
 80081e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081e6:	4b98      	ldr	r3, [pc, #608]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081f2:	4b95      	ldr	r3, [pc, #596]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	08db      	lsrs	r3, r3, #3
 80081f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 810a 	beq.w	800842a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d05a      	beq.n	80082d2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d302      	bcc.n	8008226 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008220:	2b02      	cmp	r3, #2
 8008222:	d078      	beq.n	8008316 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008224:	e099      	b.n	800835a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008226:	4b88      	ldr	r3, [pc, #544]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d02d      	beq.n	800828e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008232:	4b85      	ldr	r3, [pc, #532]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	08db      	lsrs	r3, r3, #3
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	4a83      	ldr	r2, [pc, #524]	; (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800823e:	fa22 f303 	lsr.w	r3, r2, r3
 8008242:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825c:	4b7a      	ldr	r3, [pc, #488]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008270:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800828c:	e087      	b.n	800839e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008298:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800829c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a0:	4b69      	ldr	r3, [pc, #420]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082d0:	e065      	b.n	800839e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80082e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e4:	4b58      	ldr	r3, [pc, #352]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008310:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008314:	e043      	b.n	800839e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008320:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008328:	4b47      	ldr	r3, [pc, #284]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008338:	ed97 6a03 	vldr	s12, [r7, #12]
 800833c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008348:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008354:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008358:	e021      	b.n	800839e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	ee07 3a90 	vmov	s15, r3
 8008360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008364:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836c:	4b36      	ldr	r3, [pc, #216]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008380:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008398:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800839c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800839e:	4b2a      	ldr	r3, [pc, #168]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	0a5b      	lsrs	r3, r3, #9
 80083a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a8:	ee07 3a90 	vmov	s15, r3
 80083ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083c4:	ee17 2a90 	vmov	r2, s15
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083cc:	4b1e      	ldr	r3, [pc, #120]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	0c1b      	lsrs	r3, r3, #16
 80083d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083f2:	ee17 2a90 	vmov	r2, s15
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	0e1b      	lsrs	r3, r3, #24
 8008400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008414:	edd7 6a07 	vldr	s13, [r7, #28]
 8008418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008420:	ee17 2a90 	vmov	r2, s15
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008428:	e008      	b.n	800843c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	609a      	str	r2, [r3, #8]
}
 800843c:	bf00      	nop
 800843e:	3724      	adds	r7, #36	; 0x24
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	58024400 	.word	0x58024400
 800844c:	03d09000 	.word	0x03d09000
 8008450:	46000000 	.word	0x46000000
 8008454:	4c742400 	.word	0x4c742400
 8008458:	4a742400 	.word	0x4a742400
 800845c:	4bf42400 	.word	0x4bf42400

08008460 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008460:	b480      	push	{r7}
 8008462:	b089      	sub	sp, #36	; 0x24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008468:	4b9d      	ldr	r3, [pc, #628]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800846a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008472:	4b9b      	ldr	r3, [pc, #620]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	0d1b      	lsrs	r3, r3, #20
 8008478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800847c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800847e:	4b98      	ldr	r3, [pc, #608]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800848a:	4b95      	ldr	r3, [pc, #596]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800848c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848e:	08db      	lsrs	r3, r3, #3
 8008490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	fb02 f303 	mul.w	r3, r2, r3
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 810a 	beq.w	80086c2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d05a      	beq.n	800856a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d302      	bcc.n	80084be <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d078      	beq.n	80085ae <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80084bc:	e099      	b.n	80085f2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084be:	4b88      	ldr	r3, [pc, #544]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02d      	beq.n	8008526 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084ca:	4b85      	ldr	r3, [pc, #532]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	08db      	lsrs	r3, r3, #3
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	4a83      	ldr	r2, [pc, #524]	; (80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f4:	4b7a      	ldr	r3, [pc, #488]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008504:	ed97 6a03 	vldr	s12, [r7, #12]
 8008508:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800850c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008520:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008524:	e087      	b.n	8008636 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008530:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008538:	4b69      	ldr	r3, [pc, #420]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008540:	ee07 3a90 	vmov	s15, r3
 8008544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008548:	ed97 6a03 	vldr	s12, [r7, #12]
 800854c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800855c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008564:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008568:	e065      	b.n	8008636 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008574:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857c:	4b58      	ldr	r3, [pc, #352]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008584:	ee07 3a90 	vmov	s15, r3
 8008588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008590:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ac:	e043      	b.n	8008636 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80085bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c0:	4b47      	ldr	r3, [pc, #284]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f0:	e021      	b.n	8008636 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008604:	4b36      	ldr	r3, [pc, #216]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008614:	ed97 6a03 	vldr	s12, [r7, #12]
 8008618:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800861c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008630:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008634:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008636:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	0a5b      	lsrs	r3, r3, #9
 800863c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800864c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008650:	edd7 6a07 	vldr	s13, [r7, #28]
 8008654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865c:	ee17 2a90 	vmov	r2, s15
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008664:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	0c1b      	lsrs	r3, r3, #16
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800867a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800867e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868a:	ee17 2a90 	vmov	r2, s15
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	0e1b      	lsrs	r3, r3, #24
 8008698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b8:	ee17 2a90 	vmov	r2, s15
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086c0:	e008      	b.n	80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	609a      	str	r2, [r3, #8]
}
 80086d4:	bf00      	nop
 80086d6:	3724      	adds	r7, #36	; 0x24
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	58024400 	.word	0x58024400
 80086e4:	03d09000 	.word	0x03d09000
 80086e8:	46000000 	.word	0x46000000
 80086ec:	4c742400 	.word	0x4c742400
 80086f0:	4a742400 	.word	0x4a742400
 80086f4:	4bf42400 	.word	0x4bf42400

080086f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008706:	4b53      	ldr	r3, [pc, #332]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b03      	cmp	r3, #3
 8008710:	d101      	bne.n	8008716 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e099      	b.n	800884a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008716:	4b4f      	ldr	r3, [pc, #316]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a4e      	ldr	r2, [pc, #312]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800871c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008722:	f7f9 f8eb 	bl	80018fc <HAL_GetTick>
 8008726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008728:	e008      	b.n	800873c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800872a:	f7f9 f8e7 	bl	80018fc <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e086      	b.n	800884a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800873c:	4b45      	ldr	r3, [pc, #276]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f0      	bne.n	800872a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008748:	4b42      	ldr	r3, [pc, #264]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	031b      	lsls	r3, r3, #12
 8008756:	493f      	ldr	r1, [pc, #252]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008758:	4313      	orrs	r3, r2
 800875a:	628b      	str	r3, [r1, #40]	; 0x28
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	3b01      	subs	r3, #1
 8008762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	3b01      	subs	r3, #1
 800876c:	025b      	lsls	r3, r3, #9
 800876e:	b29b      	uxth	r3, r3
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	3b01      	subs	r3, #1
 8008778:	041b      	lsls	r3, r3, #16
 800877a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	3b01      	subs	r3, #1
 8008786:	061b      	lsls	r3, r3, #24
 8008788:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800878c:	4931      	ldr	r1, [pc, #196]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800878e:	4313      	orrs	r3, r2
 8008790:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008792:	4b30      	ldr	r3, [pc, #192]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	492d      	ldr	r1, [pc, #180]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087a4:	4b2b      	ldr	r3, [pc, #172]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f023 0220 	bic.w	r2, r3, #32
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4928      	ldr	r1, [pc, #160]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087b6:	4b27      	ldr	r3, [pc, #156]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	4a26      	ldr	r2, [pc, #152]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087bc:	f023 0310 	bic.w	r3, r3, #16
 80087c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c6:	4b24      	ldr	r3, [pc, #144]	; (8008858 <RCCEx_PLL2_Config+0x160>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	69d2      	ldr	r2, [r2, #28]
 80087ce:	00d2      	lsls	r2, r2, #3
 80087d0:	4920      	ldr	r1, [pc, #128]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087d6:	4b1f      	ldr	r3, [pc, #124]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	4a1e      	ldr	r2, [pc, #120]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087dc:	f043 0310 	orr.w	r3, r3, #16
 80087e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d106      	bne.n	80087f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087e8:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a19      	ldr	r2, [pc, #100]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f4:	e00f      	b.n	8008816 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087fc:	4b15      	ldr	r3, [pc, #84]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	4a14      	ldr	r2, [pc, #80]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008808:	e005      	b.n	8008816 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4a11      	ldr	r2, [pc, #68]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008814:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a0e      	ldr	r2, [pc, #56]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800881c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008822:	f7f9 f86b 	bl	80018fc <HAL_GetTick>
 8008826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008828:	e008      	b.n	800883c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800882a:	f7f9 f867 	bl	80018fc <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e006      	b.n	800884a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <RCCEx_PLL2_Config+0x15c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0f0      	beq.n	800882a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
 8008858:	ffff0007 	.word	0xffff0007

0800885c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800886a:	4b53      	ldr	r3, [pc, #332]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b03      	cmp	r3, #3
 8008874:	d101      	bne.n	800887a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e099      	b.n	80089ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800887a:	4b4f      	ldr	r3, [pc, #316]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a4e      	ldr	r2, [pc, #312]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008886:	f7f9 f839 	bl	80018fc <HAL_GetTick>
 800888a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800888c:	e008      	b.n	80088a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800888e:	f7f9 f835 	bl	80018fc <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e086      	b.n	80089ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088a0:	4b45      	ldr	r3, [pc, #276]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f0      	bne.n	800888e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088ac:	4b42      	ldr	r3, [pc, #264]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	051b      	lsls	r3, r3, #20
 80088ba:	493f      	ldr	r1, [pc, #252]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	628b      	str	r3, [r1, #40]	; 0x28
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	025b      	lsls	r3, r3, #9
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	3b01      	subs	r3, #1
 80088dc:	041b      	lsls	r3, r3, #16
 80088de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	061b      	lsls	r3, r3, #24
 80088ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088f0:	4931      	ldr	r1, [pc, #196]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088f6:	4b30      	ldr	r3, [pc, #192]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	492d      	ldr	r1, [pc, #180]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008904:	4313      	orrs	r3, r2
 8008906:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008908:	4b2b      	ldr	r3, [pc, #172]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	4928      	ldr	r1, [pc, #160]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008916:	4313      	orrs	r3, r2
 8008918:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800891a:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	4a26      	ldr	r2, [pc, #152]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008926:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892a:	4b24      	ldr	r3, [pc, #144]	; (80089bc <RCCEx_PLL3_Config+0x160>)
 800892c:	4013      	ands	r3, r2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	69d2      	ldr	r2, [r2, #28]
 8008932:	00d2      	lsls	r2, r2, #3
 8008934:	4920      	ldr	r1, [pc, #128]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008936:	4313      	orrs	r3, r2
 8008938:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800893a:	4b1f      	ldr	r3, [pc, #124]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800894c:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a19      	ldr	r2, [pc, #100]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008958:	e00f      	b.n	800897a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d106      	bne.n	800896e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008960:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800896a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800896c:	e005      	b.n	800897a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800896e:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	4a11      	ldr	r2, [pc, #68]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008978:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a0e      	ldr	r2, [pc, #56]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 8008980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008986:	f7f8 ffb9 	bl	80018fc <HAL_GetTick>
 800898a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800898c:	e008      	b.n	80089a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800898e:	f7f8 ffb5 	bl	80018fc <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d901      	bls.n	80089a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e006      	b.n	80089ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0f0      	beq.n	800898e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	ffff0007 	.word	0xffff0007

080089c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e0e2      	b.n	8008b9c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a70      	ldr	r2, [pc, #448]	; (8008ba4 <HAL_SPI_Init+0x1e4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00f      	beq.n	8008a06 <HAL_SPI_Init+0x46>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a6f      	ldr	r2, [pc, #444]	; (8008ba8 <HAL_SPI_Init+0x1e8>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00a      	beq.n	8008a06 <HAL_SPI_Init+0x46>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a6d      	ldr	r2, [pc, #436]	; (8008bac <HAL_SPI_Init+0x1ec>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d005      	beq.n	8008a06 <HAL_SPI_Init+0x46>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	2b0f      	cmp	r3, #15
 8008a00:	d901      	bls.n	8008a06 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e0ca      	b.n	8008b9c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f8d2 	bl	8008bb0 <SPI_GetPacketSize>
 8008a0c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a64      	ldr	r2, [pc, #400]	; (8008ba4 <HAL_SPI_Init+0x1e4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00c      	beq.n	8008a32 <HAL_SPI_Init+0x72>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a62      	ldr	r2, [pc, #392]	; (8008ba8 <HAL_SPI_Init+0x1e8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d007      	beq.n	8008a32 <HAL_SPI_Init+0x72>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a61      	ldr	r2, [pc, #388]	; (8008bac <HAL_SPI_Init+0x1ec>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d002      	beq.n	8008a32 <HAL_SPI_Init+0x72>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b08      	cmp	r3, #8
 8008a30:	d811      	bhi.n	8008a56 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a36:	4a5b      	ldr	r2, [pc, #364]	; (8008ba4 <HAL_SPI_Init+0x1e4>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d009      	beq.n	8008a50 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a59      	ldr	r2, [pc, #356]	; (8008ba8 <HAL_SPI_Init+0x1e8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_SPI_Init+0x90>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a58      	ldr	r2, [pc, #352]	; (8008bac <HAL_SPI_Init+0x1ec>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d104      	bne.n	8008a5a <HAL_SPI_Init+0x9a>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d901      	bls.n	8008a5a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e0a0      	b.n	8008b9c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d106      	bne.n	8008a74 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7f8 fa7e 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0201 	bic.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a94:	d110      	bne.n	8008ab8 <HAL_SPI_Init+0xf8>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9e:	d10b      	bne.n	8008ab8 <HAL_SPI_Init+0xf8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d107      	bne.n	8008ab8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ab6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aca:	ea42 0103 	orr.w	r1, r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b18:	ea42 0103 	orr.w	r1, r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d113      	bne.n	8008b58 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b42:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b56:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	40013000 	.word	0x40013000
 8008ba8:	40003800 	.word	0x40003800
 8008bac:	40003c00 	.word	0x40003c00

08008bb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	3307      	adds	r3, #7
 8008bce:	08db      	lsrs	r3, r3, #3
 8008bd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e049      	b.n	8008c8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7f8 fc2d 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f000 fb4d 	bl	80092c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e049      	b.n	8008d3a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f841 	bl	8008d42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f000 faf6 	bl	80092c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e049      	b.n	8008dfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f841 	bl	8008e04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f000 fa95 	bl	80092c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e064      	b.n	8008efc <HAL_TIM_OC_ConfigChannel+0xe4>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b14      	cmp	r3, #20
 8008e3e:	d857      	bhi.n	8008ef0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008e40:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008ef1 	.word	0x08008ef1
 8008e50:	08008ef1 	.word	0x08008ef1
 8008e54:	08008ef1 	.word	0x08008ef1
 8008e58:	08008eab 	.word	0x08008eab
 8008e5c:	08008ef1 	.word	0x08008ef1
 8008e60:	08008ef1 	.word	0x08008ef1
 8008e64:	08008ef1 	.word	0x08008ef1
 8008e68:	08008eb9 	.word	0x08008eb9
 8008e6c:	08008ef1 	.word	0x08008ef1
 8008e70:	08008ef1 	.word	0x08008ef1
 8008e74:	08008ef1 	.word	0x08008ef1
 8008e78:	08008ec7 	.word	0x08008ec7
 8008e7c:	08008ef1 	.word	0x08008ef1
 8008e80:	08008ef1 	.word	0x08008ef1
 8008e84:	08008ef1 	.word	0x08008ef1
 8008e88:	08008ed5 	.word	0x08008ed5
 8008e8c:	08008ef1 	.word	0x08008ef1
 8008e90:	08008ef1 	.word	0x08008ef1
 8008e94:	08008ef1 	.word	0x08008ef1
 8008e98:	08008ee3 	.word	0x08008ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 faa8 	bl	80093f8 <TIM_OC1_SetConfig>
      break;
 8008ea8:	e023      	b.n	8008ef2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fb31 	bl	8009518 <TIM_OC2_SetConfig>
      break;
 8008eb6:	e01c      	b.n	8008ef2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68b9      	ldr	r1, [r7, #8]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fbb4 	bl	800962c <TIM_OC3_SetConfig>
      break;
 8008ec4:	e015      	b.n	8008ef2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fc33 	bl	8009738 <TIM_OC4_SetConfig>
      break;
 8008ed2:	e00e      	b.n	8008ef2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68b9      	ldr	r1, [r7, #8]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fc94 	bl	8009808 <TIM_OC5_SetConfig>
      break;
 8008ee0:	e007      	b.n	8008ef2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68b9      	ldr	r1, [r7, #8]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fcef 	bl	80098cc <TIM_OC6_SetConfig>
      break;
 8008eee:	e000      	b.n	8008ef2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e0fd      	b.n	800911a <HAL_TIM_PWM_ConfigChannel+0x216>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b14      	cmp	r3, #20
 8008f2a:	f200 80f0 	bhi.w	800910e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f89 	.word	0x08008f89
 8008f38:	0800910f 	.word	0x0800910f
 8008f3c:	0800910f 	.word	0x0800910f
 8008f40:	0800910f 	.word	0x0800910f
 8008f44:	08008fc9 	.word	0x08008fc9
 8008f48:	0800910f 	.word	0x0800910f
 8008f4c:	0800910f 	.word	0x0800910f
 8008f50:	0800910f 	.word	0x0800910f
 8008f54:	0800900b 	.word	0x0800900b
 8008f58:	0800910f 	.word	0x0800910f
 8008f5c:	0800910f 	.word	0x0800910f
 8008f60:	0800910f 	.word	0x0800910f
 8008f64:	0800904b 	.word	0x0800904b
 8008f68:	0800910f 	.word	0x0800910f
 8008f6c:	0800910f 	.word	0x0800910f
 8008f70:	0800910f 	.word	0x0800910f
 8008f74:	0800908d 	.word	0x0800908d
 8008f78:	0800910f 	.word	0x0800910f
 8008f7c:	0800910f 	.word	0x0800910f
 8008f80:	0800910f 	.word	0x0800910f
 8008f84:	080090cd 	.word	0x080090cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fa32 	bl	80093f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0208 	orr.w	r2, r2, #8
 8008fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0204 	bic.w	r2, r2, #4
 8008fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6999      	ldr	r1, [r3, #24]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	619a      	str	r2, [r3, #24]
      break;
 8008fc6:	e0a3      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 faa2 	bl	8009518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6999      	ldr	r1, [r3, #24]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	021a      	lsls	r2, r3, #8
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	619a      	str	r2, [r3, #24]
      break;
 8009008:	e082      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fb0b 	bl	800962c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0208 	orr.w	r2, r2, #8
 8009024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0204 	bic.w	r2, r2, #4
 8009034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69d9      	ldr	r1, [r3, #28]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	61da      	str	r2, [r3, #28]
      break;
 8009048:	e062      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fb71 	bl	8009738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69da      	ldr	r2, [r3, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	021a      	lsls	r2, r3, #8
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	61da      	str	r2, [r3, #28]
      break;
 800908a:	e041      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fbb8 	bl	8009808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0208 	orr.w	r2, r2, #8
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0204 	bic.w	r2, r2, #4
 80090b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090ca:	e021      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fbfa 	bl	80098cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	021a      	lsls	r2, r3, #8
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800910c:	e000      	b.n	8009110 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800910e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop

08009124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <HAL_TIM_ConfigClockSource+0x18>
 8009138:	2302      	movs	r3, #2
 800913a:	e0b7      	b.n	80092ac <HAL_TIM_ConfigClockSource+0x188>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4b57      	ldr	r3, [pc, #348]	; (80092b4 <HAL_TIM_ConfigClockSource+0x190>)
 8009158:	4013      	ands	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009162:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b70      	cmp	r3, #112	; 0x70
 8009172:	d02e      	beq.n	80091d2 <HAL_TIM_ConfigClockSource+0xae>
 8009174:	2b70      	cmp	r3, #112	; 0x70
 8009176:	d812      	bhi.n	800919e <HAL_TIM_ConfigClockSource+0x7a>
 8009178:	2b30      	cmp	r3, #48	; 0x30
 800917a:	f000 8084 	beq.w	8009286 <HAL_TIM_ConfigClockSource+0x162>
 800917e:	2b30      	cmp	r3, #48	; 0x30
 8009180:	d806      	bhi.n	8009190 <HAL_TIM_ConfigClockSource+0x6c>
 8009182:	2b10      	cmp	r3, #16
 8009184:	d07f      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
 8009186:	2b20      	cmp	r3, #32
 8009188:	d07d      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d07b      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800918e:	e084      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009190:	2b50      	cmp	r3, #80	; 0x50
 8009192:	d048      	beq.n	8009226 <HAL_TIM_ConfigClockSource+0x102>
 8009194:	2b60      	cmp	r3, #96	; 0x60
 8009196:	d056      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x122>
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d064      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800919c:	e07d      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800919e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091a2:	d070      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
 80091a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091a8:	d809      	bhi.n	80091be <HAL_TIM_ConfigClockSource+0x9a>
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ae:	d027      	beq.n	8009200 <HAL_TIM_ConfigClockSource+0xdc>
 80091b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091b4:	d067      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
 80091b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ba:	d06d      	beq.n	8009298 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091bc:	e06d      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80091be:	4a3e      	ldr	r2, [pc, #248]	; (80092b8 <HAL_TIM_ConfigClockSource+0x194>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d060      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
 80091c4:	4a3d      	ldr	r2, [pc, #244]	; (80092bc <HAL_TIM_ConfigClockSource+0x198>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d05d      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
 80091ca:	4a3d      	ldr	r2, [pc, #244]	; (80092c0 <HAL_TIM_ConfigClockSource+0x19c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d05a      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80091d0:	e063      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6899      	ldr	r1, [r3, #8]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f000 fc55 	bl	8009a90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	609a      	str	r2, [r3, #8]
      break;
 80091fe:	e04c      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6818      	ldr	r0, [r3, #0]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	6899      	ldr	r1, [r3, #8]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f000 fc3e 	bl	8009a90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009222:	609a      	str	r2, [r3, #8]
      break;
 8009224:	e039      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6859      	ldr	r1, [r3, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	461a      	mov	r2, r3
 8009234:	f000 fbae 	bl	8009994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2150      	movs	r1, #80	; 0x50
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fc08 	bl	8009a54 <TIM_ITRx_SetConfig>
      break;
 8009244:	e029      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6859      	ldr	r1, [r3, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	461a      	mov	r2, r3
 8009254:	f000 fbcd 	bl	80099f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2160      	movs	r1, #96	; 0x60
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fbf8 	bl	8009a54 <TIM_ITRx_SetConfig>
      break;
 8009264:	e019      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6818      	ldr	r0, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	6859      	ldr	r1, [r3, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	461a      	mov	r2, r3
 8009274:	f000 fb8e 	bl	8009994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2140      	movs	r1, #64	; 0x40
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fbe8 	bl	8009a54 <TIM_ITRx_SetConfig>
      break;
 8009284:	e009      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f000 fbdf 	bl	8009a54 <TIM_ITRx_SetConfig>
      break;
 8009296:	e000      	b.n	800929a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009298:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	ffceff88 	.word	0xffceff88
 80092b8:	00100030 	.word	0x00100030
 80092bc:	00100040 	.word	0x00100040
 80092c0:	00100020 	.word	0x00100020

080092c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a40      	ldr	r2, [pc, #256]	; (80093d8 <TIM_Base_SetConfig+0x114>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d013      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e2:	d00f      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a3d      	ldr	r2, [pc, #244]	; (80093dc <TIM_Base_SetConfig+0x118>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d00b      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a3c      	ldr	r2, [pc, #240]	; (80093e0 <TIM_Base_SetConfig+0x11c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d007      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a3b      	ldr	r2, [pc, #236]	; (80093e4 <TIM_Base_SetConfig+0x120>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d003      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a3a      	ldr	r2, [pc, #232]	; (80093e8 <TIM_Base_SetConfig+0x124>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d108      	bne.n	8009316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800930a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a2f      	ldr	r2, [pc, #188]	; (80093d8 <TIM_Base_SetConfig+0x114>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01f      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009324:	d01b      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a2c      	ldr	r2, [pc, #176]	; (80093dc <TIM_Base_SetConfig+0x118>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d017      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2b      	ldr	r2, [pc, #172]	; (80093e0 <TIM_Base_SetConfig+0x11c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a2a      	ldr	r2, [pc, #168]	; (80093e4 <TIM_Base_SetConfig+0x120>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00f      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a29      	ldr	r2, [pc, #164]	; (80093e8 <TIM_Base_SetConfig+0x124>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d00b      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a28      	ldr	r2, [pc, #160]	; (80093ec <TIM_Base_SetConfig+0x128>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d007      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a27      	ldr	r2, [pc, #156]	; (80093f0 <TIM_Base_SetConfig+0x12c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d003      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a26      	ldr	r2, [pc, #152]	; (80093f4 <TIM_Base_SetConfig+0x130>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d108      	bne.n	8009370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a10      	ldr	r2, [pc, #64]	; (80093d8 <TIM_Base_SetConfig+0x114>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d00f      	beq.n	80093bc <TIM_Base_SetConfig+0xf8>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a12      	ldr	r2, [pc, #72]	; (80093e8 <TIM_Base_SetConfig+0x124>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00b      	beq.n	80093bc <TIM_Base_SetConfig+0xf8>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a11      	ldr	r2, [pc, #68]	; (80093ec <TIM_Base_SetConfig+0x128>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d007      	beq.n	80093bc <TIM_Base_SetConfig+0xf8>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a10      	ldr	r2, [pc, #64]	; (80093f0 <TIM_Base_SetConfig+0x12c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d003      	beq.n	80093bc <TIM_Base_SetConfig+0xf8>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a0f      	ldr	r2, [pc, #60]	; (80093f4 <TIM_Base_SetConfig+0x130>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d103      	bne.n	80093c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	615a      	str	r2, [r3, #20]
}
 80093ca:	bf00      	nop
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	40010000 	.word	0x40010000
 80093dc:	40000400 	.word	0x40000400
 80093e0:	40000800 	.word	0x40000800
 80093e4:	40000c00 	.word	0x40000c00
 80093e8:	40010400 	.word	0x40010400
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800

080093f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	f023 0201 	bic.w	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4b37      	ldr	r3, [pc, #220]	; (8009500 <TIM_OC1_SetConfig+0x108>)
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0303 	bic.w	r3, r3, #3
 800942e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f023 0302 	bic.w	r3, r3, #2
 8009440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a2d      	ldr	r2, [pc, #180]	; (8009504 <TIM_OC1_SetConfig+0x10c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00f      	beq.n	8009474 <TIM_OC1_SetConfig+0x7c>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a2c      	ldr	r2, [pc, #176]	; (8009508 <TIM_OC1_SetConfig+0x110>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00b      	beq.n	8009474 <TIM_OC1_SetConfig+0x7c>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a2b      	ldr	r2, [pc, #172]	; (800950c <TIM_OC1_SetConfig+0x114>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d007      	beq.n	8009474 <TIM_OC1_SetConfig+0x7c>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a2a      	ldr	r2, [pc, #168]	; (8009510 <TIM_OC1_SetConfig+0x118>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_OC1_SetConfig+0x7c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a29      	ldr	r2, [pc, #164]	; (8009514 <TIM_OC1_SetConfig+0x11c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d10c      	bne.n	800948e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f023 0308 	bic.w	r3, r3, #8
 800947a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f023 0304 	bic.w	r3, r3, #4
 800948c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <TIM_OC1_SetConfig+0x10c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d00f      	beq.n	80094b6 <TIM_OC1_SetConfig+0xbe>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a1b      	ldr	r2, [pc, #108]	; (8009508 <TIM_OC1_SetConfig+0x110>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d00b      	beq.n	80094b6 <TIM_OC1_SetConfig+0xbe>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a1a      	ldr	r2, [pc, #104]	; (800950c <TIM_OC1_SetConfig+0x114>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d007      	beq.n	80094b6 <TIM_OC1_SetConfig+0xbe>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a19      	ldr	r2, [pc, #100]	; (8009510 <TIM_OC1_SetConfig+0x118>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d003      	beq.n	80094b6 <TIM_OC1_SetConfig+0xbe>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a18      	ldr	r2, [pc, #96]	; (8009514 <TIM_OC1_SetConfig+0x11c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d111      	bne.n	80094da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	621a      	str	r2, [r3, #32]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	fffeff8f 	.word	0xfffeff8f
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800

08009518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f023 0210 	bic.w	r2, r3, #16
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4b34      	ldr	r3, [pc, #208]	; (8009614 <TIM_OC2_SetConfig+0xfc>)
 8009544:	4013      	ands	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0320 	bic.w	r3, r3, #32
 8009562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a29      	ldr	r2, [pc, #164]	; (8009618 <TIM_OC2_SetConfig+0x100>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_OC2_SetConfig+0x68>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a28      	ldr	r2, [pc, #160]	; (800961c <TIM_OC2_SetConfig+0x104>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d10d      	bne.n	800959c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800959a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <TIM_OC2_SetConfig+0x100>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d00f      	beq.n	80095c4 <TIM_OC2_SetConfig+0xac>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a1d      	ldr	r2, [pc, #116]	; (800961c <TIM_OC2_SetConfig+0x104>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00b      	beq.n	80095c4 <TIM_OC2_SetConfig+0xac>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a1c      	ldr	r2, [pc, #112]	; (8009620 <TIM_OC2_SetConfig+0x108>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d007      	beq.n	80095c4 <TIM_OC2_SetConfig+0xac>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a1b      	ldr	r2, [pc, #108]	; (8009624 <TIM_OC2_SetConfig+0x10c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d003      	beq.n	80095c4 <TIM_OC2_SetConfig+0xac>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a1a      	ldr	r2, [pc, #104]	; (8009628 <TIM_OC2_SetConfig+0x110>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d113      	bne.n	80095ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	621a      	str	r2, [r3, #32]
}
 8009606:	bf00      	nop
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	feff8fff 	.word	0xfeff8fff
 8009618:	40010000 	.word	0x40010000
 800961c:	40010400 	.word	0x40010400
 8009620:	40014000 	.word	0x40014000
 8009624:	40014400 	.word	0x40014400
 8009628:	40014800 	.word	0x40014800

0800962c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0303 	bic.w	r3, r3, #3
 8009662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a27      	ldr	r2, [pc, #156]	; (8009724 <TIM_OC3_SetConfig+0xf8>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d003      	beq.n	8009692 <TIM_OC3_SetConfig+0x66>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a26      	ldr	r2, [pc, #152]	; (8009728 <TIM_OC3_SetConfig+0xfc>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10d      	bne.n	80096ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <TIM_OC3_SetConfig+0xf8>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00f      	beq.n	80096d6 <TIM_OC3_SetConfig+0xaa>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <TIM_OC3_SetConfig+0xfc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00b      	beq.n	80096d6 <TIM_OC3_SetConfig+0xaa>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a1a      	ldr	r2, [pc, #104]	; (800972c <TIM_OC3_SetConfig+0x100>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d007      	beq.n	80096d6 <TIM_OC3_SetConfig+0xaa>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a19      	ldr	r2, [pc, #100]	; (8009730 <TIM_OC3_SetConfig+0x104>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d003      	beq.n	80096d6 <TIM_OC3_SetConfig+0xaa>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a18      	ldr	r2, [pc, #96]	; (8009734 <TIM_OC3_SetConfig+0x108>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d113      	bne.n	80096fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	621a      	str	r2, [r3, #32]
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	40010000 	.word	0x40010000
 8009728:	40010400 	.word	0x40010400
 800972c:	40014000 	.word	0x40014000
 8009730:	40014400 	.word	0x40014400
 8009734:	40014800 	.word	0x40014800

08009738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800976e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	031b      	lsls	r3, r3, #12
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a18      	ldr	r2, [pc, #96]	; (80097f4 <TIM_OC4_SetConfig+0xbc>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00f      	beq.n	80097b8 <TIM_OC4_SetConfig+0x80>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a17      	ldr	r2, [pc, #92]	; (80097f8 <TIM_OC4_SetConfig+0xc0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d00b      	beq.n	80097b8 <TIM_OC4_SetConfig+0x80>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a16      	ldr	r2, [pc, #88]	; (80097fc <TIM_OC4_SetConfig+0xc4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_OC4_SetConfig+0x80>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a15      	ldr	r2, [pc, #84]	; (8009800 <TIM_OC4_SetConfig+0xc8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_OC4_SetConfig+0x80>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a14      	ldr	r2, [pc, #80]	; (8009804 <TIM_OC4_SetConfig+0xcc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d109      	bne.n	80097cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	019b      	lsls	r3, r3, #6
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	621a      	str	r2, [r3, #32]
}
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400
 80097fc:	40014000 	.word	0x40014000
 8009800:	40014400 	.word	0x40014400
 8009804:	40014800 	.word	0x40014800

08009808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	041b      	lsls	r3, r3, #16
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	4313      	orrs	r3, r2
 8009854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a17      	ldr	r2, [pc, #92]	; (80098b8 <TIM_OC5_SetConfig+0xb0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00f      	beq.n	800987e <TIM_OC5_SetConfig+0x76>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a16      	ldr	r2, [pc, #88]	; (80098bc <TIM_OC5_SetConfig+0xb4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00b      	beq.n	800987e <TIM_OC5_SetConfig+0x76>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a15      	ldr	r2, [pc, #84]	; (80098c0 <TIM_OC5_SetConfig+0xb8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d007      	beq.n	800987e <TIM_OC5_SetConfig+0x76>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a14      	ldr	r2, [pc, #80]	; (80098c4 <TIM_OC5_SetConfig+0xbc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d003      	beq.n	800987e <TIM_OC5_SetConfig+0x76>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <TIM_OC5_SetConfig+0xc0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d109      	bne.n	8009892 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	621a      	str	r2, [r3, #32]
}
 80098ac:	bf00      	nop
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	40010000 	.word	0x40010000
 80098bc:	40010400 	.word	0x40010400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40014400 	.word	0x40014400
 80098c8:	40014800 	.word	0x40014800

080098cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800990e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a18      	ldr	r2, [pc, #96]	; (8009980 <TIM_OC6_SetConfig+0xb4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00f      	beq.n	8009944 <TIM_OC6_SetConfig+0x78>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a17      	ldr	r2, [pc, #92]	; (8009984 <TIM_OC6_SetConfig+0xb8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00b      	beq.n	8009944 <TIM_OC6_SetConfig+0x78>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a16      	ldr	r2, [pc, #88]	; (8009988 <TIM_OC6_SetConfig+0xbc>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d007      	beq.n	8009944 <TIM_OC6_SetConfig+0x78>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a15      	ldr	r2, [pc, #84]	; (800998c <TIM_OC6_SetConfig+0xc0>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_OC6_SetConfig+0x78>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a14      	ldr	r2, [pc, #80]	; (8009990 <TIM_OC6_SetConfig+0xc4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d109      	bne.n	8009958 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800994a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	029b      	lsls	r3, r3, #10
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	40010000 	.word	0x40010000
 8009984:	40010400 	.word	0x40010400
 8009988:	40014000 	.word	0x40014000
 800998c:	40014400 	.word	0x40014400
 8009990:	40014800 	.word	0x40014800

08009994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f023 0201 	bic.w	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f023 030a 	bic.w	r3, r3, #10
 80099d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	621a      	str	r2, [r3, #32]
}
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b087      	sub	sp, #28
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	f023 0210 	bic.w	r2, r3, #16
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	031b      	lsls	r3, r3, #12
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	621a      	str	r2, [r3, #32]
}
 8009a46:	bf00      	nop
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <TIM_ITRx_SetConfig+0x38>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	f043 0307 	orr.w	r3, r3, #7
 8009a76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	609a      	str	r2, [r3, #8]
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	ffcfff8f 	.word	0xffcfff8f

08009a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	021a      	lsls	r2, r3, #8
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	609a      	str	r2, [r3, #8]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e068      	b.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a2e      	ldr	r2, [pc, #184]	; (8009bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a2d      	ldr	r2, [pc, #180]	; (8009bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d108      	bne.n	8009b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d01d      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5a:	d018      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a1b      	ldr	r2, [pc, #108]	; (8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d013      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a1a      	ldr	r2, [pc, #104]	; (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d00e      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a18      	ldr	r2, [pc, #96]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d009      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a13      	ldr	r2, [pc, #76]	; (8009bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d004      	beq.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d10c      	bne.n	8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40010000 	.word	0x40010000
 8009bcc:	40010400 	.word	0x40010400
 8009bd0:	40000400 	.word	0x40000400
 8009bd4:	40000800 	.word	0x40000800
 8009bd8:	40000c00 	.word	0x40000c00
 8009bdc:	40001800 	.word	0x40001800

08009be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e042      	b.n	8009c78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7f7 fd3d 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2224      	movs	r2, #36	; 0x24
 8009c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0201 	bic.w	r2, r2, #1
 8009c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fb2e 	bl	800a284 <UART_SetConfig>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e022      	b.n	8009c78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 f8d2 	bl	800ade4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f959 	bl	800af28 <UART_CheckIdleState>
 8009c76:	4603      	mov	r3, r0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	; 0x28
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	f040 8083 	bne.w	8009da2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <HAL_UART_Transmit+0x28>
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e07b      	b.n	8009da4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_UART_Transmit+0x3a>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e074      	b.n	8009da4 <HAL_UART_Transmit+0x124>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2221      	movs	r2, #33	; 0x21
 8009cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009cd2:	f7f7 fe13 	bl	80018fc <HAL_GetTick>
 8009cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	88fa      	ldrh	r2, [r7, #6]
 8009cdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	88fa      	ldrh	r2, [r7, #6]
 8009ce4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf0:	d108      	bne.n	8009d04 <HAL_UART_Transmit+0x84>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d104      	bne.n	8009d04 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	e003      	b.n	8009d0c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009d14:	e02c      	b.n	8009d70 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f001 f949 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e039      	b.n	8009da4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10b      	bne.n	8009d4e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	3302      	adds	r3, #2
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e007      	b.n	8009d5e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1cc      	bne.n	8009d16 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2200      	movs	r2, #0
 8009d84:	2140      	movs	r1, #64	; 0x40
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f001 f916 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e006      	b.n	8009da4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e000      	b.n	8009da4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009da2:	2302      	movs	r3, #2
  }
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	f040 80bc 	bne.w	8009f3e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <HAL_UART_Receive_IT+0x26>
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e0b4      	b.n	8009f40 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d101      	bne.n	8009de4 <HAL_UART_Receive_IT+0x38>
 8009de0:	2302      	movs	r3, #2
 8009de2:	e0ad      	b.n	8009f40 <HAL_UART_Receive_IT+0x194>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	88fa      	ldrh	r2, [r7, #6]
 8009df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	88fa      	ldrh	r2, [r7, #6]
 8009dfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e10:	d10e      	bne.n	8009e30 <HAL_UART_Receive_IT+0x84>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d105      	bne.n	8009e26 <HAL_UART_Receive_IT+0x7a>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e24:	e02d      	b.n	8009e82 <HAL_UART_Receive_IT+0xd6>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	22ff      	movs	r2, #255	; 0xff
 8009e2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e2e:	e028      	b.n	8009e82 <HAL_UART_Receive_IT+0xd6>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10d      	bne.n	8009e54 <HAL_UART_Receive_IT+0xa8>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d104      	bne.n	8009e4a <HAL_UART_Receive_IT+0x9e>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	22ff      	movs	r2, #255	; 0xff
 8009e44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e48:	e01b      	b.n	8009e82 <HAL_UART_Receive_IT+0xd6>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	227f      	movs	r2, #127	; 0x7f
 8009e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e52:	e016      	b.n	8009e82 <HAL_UART_Receive_IT+0xd6>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e5c:	d10d      	bne.n	8009e7a <HAL_UART_Receive_IT+0xce>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <HAL_UART_Receive_IT+0xc4>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	227f      	movs	r2, #127	; 0x7f
 8009e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e6e:	e008      	b.n	8009e82 <HAL_UART_Receive_IT+0xd6>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	223f      	movs	r2, #63	; 0x3f
 8009e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e78:	e003      	b.n	8009e82 <HAL_UART_Receive_IT+0xd6>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2222      	movs	r2, #34	; 0x22
 8009e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f042 0201 	orr.w	r2, r2, #1
 8009ea0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eaa:	d12a      	bne.n	8009f02 <HAL_UART_Receive_IT+0x156>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eb2:	88fa      	ldrh	r2, [r7, #6]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d324      	bcc.n	8009f02 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec0:	d107      	bne.n	8009ed2 <HAL_UART_Receive_IT+0x126>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d103      	bne.n	8009ed2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <HAL_UART_Receive_IT+0x1a0>)
 8009ece:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ed0:	e002      	b.n	8009ed8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4a1e      	ldr	r2, [pc, #120]	; (8009f50 <HAL_UART_Receive_IT+0x1a4>)
 8009ed6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009eee:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009efe:	609a      	str	r2, [r3, #8]
 8009f00:	e01b      	b.n	8009f3a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0a:	d107      	bne.n	8009f1c <HAL_UART_Receive_IT+0x170>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4a0f      	ldr	r2, [pc, #60]	; (8009f54 <HAL_UART_Receive_IT+0x1a8>)
 8009f18:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f1a:	e002      	b.n	8009f22 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4a0e      	ldr	r2, [pc, #56]	; (8009f58 <HAL_UART_Receive_IT+0x1ac>)
 8009f20:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009f38:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e000      	b.n	8009f40 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009f3e:	2302      	movs	r3, #2
  }
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	0800b3bd 	.word	0x0800b3bd
 8009f50:	0800b2b5 	.word	0x0800b2b5
 8009f54:	0800b20b 	.word	0x0800b20b
 8009f58:	0800b161 	.word	0x0800b161

08009f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f82:	4013      	ands	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d118      	bne.n	8009fbe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d013      	beq.n	8009fbe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	f003 0320 	and.w	r3, r3, #32
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d104      	bne.n	8009faa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 8145 	beq.w	800a23e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
      }
      return;
 8009fbc:	e13f      	b.n	800a23e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 80e8 	beq.w	800a196 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4ba1      	ldr	r3, [pc, #644]	; (800a250 <HAL_UART_IRQHandler+0x2f4>)
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d105      	bne.n	8009fdc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009fd0:	69ba      	ldr	r2, [r7, #24]
 8009fd2:	4ba0      	ldr	r3, [pc, #640]	; (800a254 <HAL_UART_IRQHandler+0x2f8>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80dd 	beq.w	800a196 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d010      	beq.n	800a008 <HAL_UART_IRQHandler+0xac>
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffe:	f043 0201 	orr.w	r2, r3, #1
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d010      	beq.n	800a034 <HAL_UART_IRQHandler+0xd8>
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2202      	movs	r2, #2
 800a022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02a:	f043 0204 	orr.w	r2, r3, #4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	f003 0304 	and.w	r3, r3, #4
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d010      	beq.n	800a060 <HAL_UART_IRQHandler+0x104>
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2204      	movs	r2, #4
 800a04e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a056:	f043 0202 	orr.w	r2, r3, #2
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f003 0308 	and.w	r3, r3, #8
 800a066:	2b00      	cmp	r3, #0
 800a068:	d015      	beq.n	800a096 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4b76      	ldr	r3, [pc, #472]	; (800a250 <HAL_UART_IRQHandler+0x2f4>)
 800a078:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00b      	beq.n	800a096 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2208      	movs	r2, #8
 800a084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08c:	f043 0208 	orr.w	r2, r3, #8
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d011      	beq.n	800a0c4 <HAL_UART_IRQHandler+0x168>
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00c      	beq.n	800a0c4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ba:	f043 0220 	orr.w	r2, r3, #32
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80b9 	beq.w	800a242 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d011      	beq.n	800a0fe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d007      	beq.n	800a0fe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a104:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	d004      	beq.n	800a11e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d031      	beq.n	800a182 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 ffca 	bl	800b0b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12e:	2b40      	cmp	r3, #64	; 0x40
 800a130:	d123      	bne.n	800a17a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a140:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a146:	2b00      	cmp	r3, #0
 800a148:	d013      	beq.n	800a172 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a14e:	4a42      	ldr	r2, [pc, #264]	; (800a258 <HAL_UART_IRQHandler+0x2fc>)
 800a150:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a156:	4618      	mov	r0, r3
 800a158:	f7f9 f920 	bl	800339c <HAL_DMA_Abort_IT>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d017      	beq.n	800a192 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a170:	e00f      	b.n	800a192 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f87c 	bl	800a270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a178:	e00b      	b.n	800a192 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f878 	bl	800a270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a180:	e007      	b.n	800a192 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f874 	bl	800a270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a190:	e057      	b.n	800a242 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a192:	bf00      	nop
    return;
 800a194:	e055      	b.n	800a242 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00d      	beq.n	800a1bc <HAL_UART_IRQHandler+0x260>
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d008      	beq.n	800a1bc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 f985 	bl	800b4c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1ba:	e045      	b.n	800a248 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d012      	beq.n	800a1ec <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d008      	beq.n	800a1ec <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d031      	beq.n	800a246 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
    }
    return;
 800a1ea:	e02c      	b.n	800a246 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d008      	beq.n	800a208 <HAL_UART_IRQHandler+0x2ac>
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 ff93 	bl	800b12c <UART_EndTransmit_IT>
    return;
 800a206:	e01f      	b.n	800a248 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d008      	beq.n	800a224 <HAL_UART_IRQHandler+0x2c8>
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f001 f965 	bl	800b4ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a222:	e011      	b.n	800a248 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <HAL_UART_IRQHandler+0x2ec>
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	da09      	bge.n	800a248 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 f94f 	bl	800b4d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a23a:	bf00      	nop
 800a23c:	e004      	b.n	800a248 <HAL_UART_IRQHandler+0x2ec>
      return;
 800a23e:	bf00      	nop
 800a240:	e002      	b.n	800a248 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a246:	bf00      	nop
  }
}
 800a248:	3720      	adds	r7, #32
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	10000001 	.word	0x10000001
 800a254:	04000120 	.word	0x04000120
 800a258:	0800b101 	.word	0x0800b101

0800a25c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a284:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a288:	b08e      	sub	sp, #56	; 0x38
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	4bc1      	ldr	r3, [pc, #772]	; (800a5c4 <UART_SetConfig+0x340>)
 800a2be:	4013      	ands	r3, r2
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4ab7      	ldr	r2, [pc, #732]	; (800a5c8 <UART_SetConfig+0x344>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d004      	beq.n	800a2fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	4bb2      	ldr	r3, [pc, #712]	; (800a5cc <UART_SetConfig+0x348>)
 800a302:	4013      	ands	r3, r2
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a30a:	430b      	orrs	r3, r1
 800a30c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	f023 010f 	bic.w	r1, r3, #15
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4aa9      	ldr	r2, [pc, #676]	; (800a5d0 <UART_SetConfig+0x34c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d177      	bne.n	800a41e <UART_SetConfig+0x19a>
 800a32e:	4ba9      	ldr	r3, [pc, #676]	; (800a5d4 <UART_SetConfig+0x350>)
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a336:	2b28      	cmp	r3, #40	; 0x28
 800a338:	d86c      	bhi.n	800a414 <UART_SetConfig+0x190>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <UART_SetConfig+0xbc>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a3e5 	.word	0x0800a3e5
 800a344:	0800a415 	.word	0x0800a415
 800a348:	0800a415 	.word	0x0800a415
 800a34c:	0800a415 	.word	0x0800a415
 800a350:	0800a415 	.word	0x0800a415
 800a354:	0800a415 	.word	0x0800a415
 800a358:	0800a415 	.word	0x0800a415
 800a35c:	0800a415 	.word	0x0800a415
 800a360:	0800a3ed 	.word	0x0800a3ed
 800a364:	0800a415 	.word	0x0800a415
 800a368:	0800a415 	.word	0x0800a415
 800a36c:	0800a415 	.word	0x0800a415
 800a370:	0800a415 	.word	0x0800a415
 800a374:	0800a415 	.word	0x0800a415
 800a378:	0800a415 	.word	0x0800a415
 800a37c:	0800a415 	.word	0x0800a415
 800a380:	0800a3f5 	.word	0x0800a3f5
 800a384:	0800a415 	.word	0x0800a415
 800a388:	0800a415 	.word	0x0800a415
 800a38c:	0800a415 	.word	0x0800a415
 800a390:	0800a415 	.word	0x0800a415
 800a394:	0800a415 	.word	0x0800a415
 800a398:	0800a415 	.word	0x0800a415
 800a39c:	0800a415 	.word	0x0800a415
 800a3a0:	0800a3fd 	.word	0x0800a3fd
 800a3a4:	0800a415 	.word	0x0800a415
 800a3a8:	0800a415 	.word	0x0800a415
 800a3ac:	0800a415 	.word	0x0800a415
 800a3b0:	0800a415 	.word	0x0800a415
 800a3b4:	0800a415 	.word	0x0800a415
 800a3b8:	0800a415 	.word	0x0800a415
 800a3bc:	0800a415 	.word	0x0800a415
 800a3c0:	0800a405 	.word	0x0800a405
 800a3c4:	0800a415 	.word	0x0800a415
 800a3c8:	0800a415 	.word	0x0800a415
 800a3cc:	0800a415 	.word	0x0800a415
 800a3d0:	0800a415 	.word	0x0800a415
 800a3d4:	0800a415 	.word	0x0800a415
 800a3d8:	0800a415 	.word	0x0800a415
 800a3dc:	0800a415 	.word	0x0800a415
 800a3e0:	0800a40d 	.word	0x0800a40d
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e233      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e22f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a3f4:	2308      	movs	r3, #8
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e22b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e227      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a404:	2320      	movs	r3, #32
 800a406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40a:	e223      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a40c:	2340      	movs	r3, #64	; 0x40
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a412:	e21f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a414:	2380      	movs	r3, #128	; 0x80
 800a416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41a:	bf00      	nop
 800a41c:	e21a      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a6d      	ldr	r2, [pc, #436]	; (800a5d8 <UART_SetConfig+0x354>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d132      	bne.n	800a48e <UART_SetConfig+0x20a>
 800a428:	4b6a      	ldr	r3, [pc, #424]	; (800a5d4 <UART_SetConfig+0x350>)
 800a42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42c:	f003 0307 	and.w	r3, r3, #7
 800a430:	2b05      	cmp	r3, #5
 800a432:	d827      	bhi.n	800a484 <UART_SetConfig+0x200>
 800a434:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <UART_SetConfig+0x1b8>)
 800a436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43a:	bf00      	nop
 800a43c:	0800a455 	.word	0x0800a455
 800a440:	0800a45d 	.word	0x0800a45d
 800a444:	0800a465 	.word	0x0800a465
 800a448:	0800a46d 	.word	0x0800a46d
 800a44c:	0800a475 	.word	0x0800a475
 800a450:	0800a47d 	.word	0x0800a47d
 800a454:	2300      	movs	r3, #0
 800a456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45a:	e1fb      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a45c:	2304      	movs	r3, #4
 800a45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a462:	e1f7      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a464:	2308      	movs	r3, #8
 800a466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46a:	e1f3      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a46c:	2310      	movs	r3, #16
 800a46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a472:	e1ef      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a474:	2320      	movs	r3, #32
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	e1eb      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a47c:	2340      	movs	r3, #64	; 0x40
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e1e7      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	bf00      	nop
 800a48c:	e1e2      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a52      	ldr	r2, [pc, #328]	; (800a5dc <UART_SetConfig+0x358>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d132      	bne.n	800a4fe <UART_SetConfig+0x27a>
 800a498:	4b4e      	ldr	r3, [pc, #312]	; (800a5d4 <UART_SetConfig+0x350>)
 800a49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49c:	f003 0307 	and.w	r3, r3, #7
 800a4a0:	2b05      	cmp	r3, #5
 800a4a2:	d827      	bhi.n	800a4f4 <UART_SetConfig+0x270>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <UART_SetConfig+0x228>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a4c5 	.word	0x0800a4c5
 800a4b0:	0800a4cd 	.word	0x0800a4cd
 800a4b4:	0800a4d5 	.word	0x0800a4d5
 800a4b8:	0800a4dd 	.word	0x0800a4dd
 800a4bc:	0800a4e5 	.word	0x0800a4e5
 800a4c0:	0800a4ed 	.word	0x0800a4ed
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ca:	e1c3      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d2:	e1bf      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4d4:	2308      	movs	r3, #8
 800a4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4da:	e1bb      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4dc:	2310      	movs	r3, #16
 800a4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e2:	e1b7      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ea:	e1b3      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4ec:	2340      	movs	r3, #64	; 0x40
 800a4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f2:	e1af      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4f4:	2380      	movs	r3, #128	; 0x80
 800a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fa:	bf00      	nop
 800a4fc:	e1aa      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a37      	ldr	r2, [pc, #220]	; (800a5e0 <UART_SetConfig+0x35c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d132      	bne.n	800a56e <UART_SetConfig+0x2ea>
 800a508:	4b32      	ldr	r3, [pc, #200]	; (800a5d4 <UART_SetConfig+0x350>)
 800a50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	2b05      	cmp	r3, #5
 800a512:	d827      	bhi.n	800a564 <UART_SetConfig+0x2e0>
 800a514:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <UART_SetConfig+0x298>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a535 	.word	0x0800a535
 800a520:	0800a53d 	.word	0x0800a53d
 800a524:	0800a545 	.word	0x0800a545
 800a528:	0800a54d 	.word	0x0800a54d
 800a52c:	0800a555 	.word	0x0800a555
 800a530:	0800a55d 	.word	0x0800a55d
 800a534:	2300      	movs	r3, #0
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e18b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a53c:	2304      	movs	r3, #4
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e187      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a544:	2308      	movs	r3, #8
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e183      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a54c:	2310      	movs	r3, #16
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e17f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a554:	2320      	movs	r3, #32
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e17b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a55c:	2340      	movs	r3, #64	; 0x40
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e177      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a564:	2380      	movs	r3, #128	; 0x80
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	bf00      	nop
 800a56c:	e172      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a1c      	ldr	r2, [pc, #112]	; (800a5e4 <UART_SetConfig+0x360>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d144      	bne.n	800a602 <UART_SetConfig+0x37e>
 800a578:	4b16      	ldr	r3, [pc, #88]	; (800a5d4 <UART_SetConfig+0x350>)
 800a57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57c:	f003 0307 	and.w	r3, r3, #7
 800a580:	2b05      	cmp	r3, #5
 800a582:	d839      	bhi.n	800a5f8 <UART_SetConfig+0x374>
 800a584:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <UART_SetConfig+0x308>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a5a5 	.word	0x0800a5a5
 800a590:	0800a5ad 	.word	0x0800a5ad
 800a594:	0800a5b5 	.word	0x0800a5b5
 800a598:	0800a5bd 	.word	0x0800a5bd
 800a59c:	0800a5e9 	.word	0x0800a5e9
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5aa:	e153      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b2:	e14f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ba:	e14b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c2:	e147      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a5c4:	cfff69f3 	.word	0xcfff69f3
 800a5c8:	58000c00 	.word	0x58000c00
 800a5cc:	11fff4ff 	.word	0x11fff4ff
 800a5d0:	40011000 	.word	0x40011000
 800a5d4:	58024400 	.word	0x58024400
 800a5d8:	40004400 	.word	0x40004400
 800a5dc:	40004800 	.word	0x40004800
 800a5e0:	40004c00 	.word	0x40004c00
 800a5e4:	40005000 	.word	0x40005000
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e131      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a5f0:	2340      	movs	r3, #64	; 0x40
 800a5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f6:	e12d      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a5f8:	2380      	movs	r3, #128	; 0x80
 800a5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fe:	bf00      	nop
 800a600:	e128      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4ab6      	ldr	r2, [pc, #728]	; (800a8e0 <UART_SetConfig+0x65c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d178      	bne.n	800a6fe <UART_SetConfig+0x47a>
 800a60c:	4bb5      	ldr	r3, [pc, #724]	; (800a8e4 <UART_SetConfig+0x660>)
 800a60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a614:	2b28      	cmp	r3, #40	; 0x28
 800a616:	d86d      	bhi.n	800a6f4 <UART_SetConfig+0x470>
 800a618:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <UART_SetConfig+0x39c>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a6c5 	.word	0x0800a6c5
 800a624:	0800a6f5 	.word	0x0800a6f5
 800a628:	0800a6f5 	.word	0x0800a6f5
 800a62c:	0800a6f5 	.word	0x0800a6f5
 800a630:	0800a6f5 	.word	0x0800a6f5
 800a634:	0800a6f5 	.word	0x0800a6f5
 800a638:	0800a6f5 	.word	0x0800a6f5
 800a63c:	0800a6f5 	.word	0x0800a6f5
 800a640:	0800a6cd 	.word	0x0800a6cd
 800a644:	0800a6f5 	.word	0x0800a6f5
 800a648:	0800a6f5 	.word	0x0800a6f5
 800a64c:	0800a6f5 	.word	0x0800a6f5
 800a650:	0800a6f5 	.word	0x0800a6f5
 800a654:	0800a6f5 	.word	0x0800a6f5
 800a658:	0800a6f5 	.word	0x0800a6f5
 800a65c:	0800a6f5 	.word	0x0800a6f5
 800a660:	0800a6d5 	.word	0x0800a6d5
 800a664:	0800a6f5 	.word	0x0800a6f5
 800a668:	0800a6f5 	.word	0x0800a6f5
 800a66c:	0800a6f5 	.word	0x0800a6f5
 800a670:	0800a6f5 	.word	0x0800a6f5
 800a674:	0800a6f5 	.word	0x0800a6f5
 800a678:	0800a6f5 	.word	0x0800a6f5
 800a67c:	0800a6f5 	.word	0x0800a6f5
 800a680:	0800a6dd 	.word	0x0800a6dd
 800a684:	0800a6f5 	.word	0x0800a6f5
 800a688:	0800a6f5 	.word	0x0800a6f5
 800a68c:	0800a6f5 	.word	0x0800a6f5
 800a690:	0800a6f5 	.word	0x0800a6f5
 800a694:	0800a6f5 	.word	0x0800a6f5
 800a698:	0800a6f5 	.word	0x0800a6f5
 800a69c:	0800a6f5 	.word	0x0800a6f5
 800a6a0:	0800a6e5 	.word	0x0800a6e5
 800a6a4:	0800a6f5 	.word	0x0800a6f5
 800a6a8:	0800a6f5 	.word	0x0800a6f5
 800a6ac:	0800a6f5 	.word	0x0800a6f5
 800a6b0:	0800a6f5 	.word	0x0800a6f5
 800a6b4:	0800a6f5 	.word	0x0800a6f5
 800a6b8:	0800a6f5 	.word	0x0800a6f5
 800a6bc:	0800a6f5 	.word	0x0800a6f5
 800a6c0:	0800a6ed 	.word	0x0800a6ed
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ca:	e0c3      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d2:	e0bf      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6da:	e0bb      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e2:	e0b7      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6e4:	2320      	movs	r3, #32
 800a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ea:	e0b3      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6ec:	2340      	movs	r3, #64	; 0x40
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f2:	e0af      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fa:	bf00      	nop
 800a6fc:	e0aa      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a79      	ldr	r2, [pc, #484]	; (800a8e8 <UART_SetConfig+0x664>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d132      	bne.n	800a76e <UART_SetConfig+0x4ea>
 800a708:	4b76      	ldr	r3, [pc, #472]	; (800a8e4 <UART_SetConfig+0x660>)
 800a70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	2b05      	cmp	r3, #5
 800a712:	d827      	bhi.n	800a764 <UART_SetConfig+0x4e0>
 800a714:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <UART_SetConfig+0x498>)
 800a716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71a:	bf00      	nop
 800a71c:	0800a735 	.word	0x0800a735
 800a720:	0800a73d 	.word	0x0800a73d
 800a724:	0800a745 	.word	0x0800a745
 800a728:	0800a74d 	.word	0x0800a74d
 800a72c:	0800a755 	.word	0x0800a755
 800a730:	0800a75d 	.word	0x0800a75d
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73a:	e08b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a73c:	2304      	movs	r3, #4
 800a73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a742:	e087      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a744:	2308      	movs	r3, #8
 800a746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74a:	e083      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a752:	e07f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a754:	2320      	movs	r3, #32
 800a756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75a:	e07b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e077      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a764:	2380      	movs	r3, #128	; 0x80
 800a766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76a:	bf00      	nop
 800a76c:	e072      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a5e      	ldr	r2, [pc, #376]	; (800a8ec <UART_SetConfig+0x668>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d132      	bne.n	800a7de <UART_SetConfig+0x55a>
 800a778:	4b5a      	ldr	r3, [pc, #360]	; (800a8e4 <UART_SetConfig+0x660>)
 800a77a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	2b05      	cmp	r3, #5
 800a782:	d827      	bhi.n	800a7d4 <UART_SetConfig+0x550>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <UART_SetConfig+0x508>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7a5 	.word	0x0800a7a5
 800a790:	0800a7ad 	.word	0x0800a7ad
 800a794:	0800a7b5 	.word	0x0800a7b5
 800a798:	0800a7bd 	.word	0x0800a7bd
 800a79c:	0800a7c5 	.word	0x0800a7c5
 800a7a0:	0800a7cd 	.word	0x0800a7cd
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7aa:	e053      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7ac:	2304      	movs	r3, #4
 800a7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b2:	e04f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7b4:	2308      	movs	r3, #8
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e04b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7bc:	2310      	movs	r3, #16
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	e047      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7c4:	2320      	movs	r3, #32
 800a7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ca:	e043      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7cc:	2340      	movs	r3, #64	; 0x40
 800a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d2:	e03f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7d4:	2380      	movs	r3, #128	; 0x80
 800a7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7da:	bf00      	nop
 800a7dc:	e03a      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a43      	ldr	r2, [pc, #268]	; (800a8f0 <UART_SetConfig+0x66c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d132      	bne.n	800a84e <UART_SetConfig+0x5ca>
 800a7e8:	4b3e      	ldr	r3, [pc, #248]	; (800a8e4 <UART_SetConfig+0x660>)
 800a7ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	2b05      	cmp	r3, #5
 800a7f2:	d827      	bhi.n	800a844 <UART_SetConfig+0x5c0>
 800a7f4:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <UART_SetConfig+0x578>)
 800a7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fa:	bf00      	nop
 800a7fc:	0800a815 	.word	0x0800a815
 800a800:	0800a81d 	.word	0x0800a81d
 800a804:	0800a825 	.word	0x0800a825
 800a808:	0800a82d 	.word	0x0800a82d
 800a80c:	0800a835 	.word	0x0800a835
 800a810:	0800a83d 	.word	0x0800a83d
 800a814:	2302      	movs	r3, #2
 800a816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81a:	e01b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a81c:	2304      	movs	r3, #4
 800a81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a822:	e017      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a824:	2308      	movs	r3, #8
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e013      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a82c:	2310      	movs	r3, #16
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e00f      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a834:	2320      	movs	r3, #32
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e00b      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a83c:	2340      	movs	r3, #64	; 0x40
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e007      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a844:	2380      	movs	r3, #128	; 0x80
 800a846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84a:	bf00      	nop
 800a84c:	e002      	b.n	800a854 <UART_SetConfig+0x5d0>
 800a84e:	2380      	movs	r3, #128	; 0x80
 800a850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a25      	ldr	r2, [pc, #148]	; (800a8f0 <UART_SetConfig+0x66c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	f040 80b8 	bne.w	800a9d0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a860:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a864:	2b08      	cmp	r3, #8
 800a866:	d019      	beq.n	800a89c <UART_SetConfig+0x618>
 800a868:	2b08      	cmp	r3, #8
 800a86a:	dc04      	bgt.n	800a876 <UART_SetConfig+0x5f2>
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d009      	beq.n	800a884 <UART_SetConfig+0x600>
 800a870:	2b04      	cmp	r3, #4
 800a872:	d00b      	beq.n	800a88c <UART_SetConfig+0x608>
 800a874:	e042      	b.n	800a8fc <UART_SetConfig+0x678>
 800a876:	2b20      	cmp	r3, #32
 800a878:	d02b      	beq.n	800a8d2 <UART_SetConfig+0x64e>
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	d02c      	beq.n	800a8d8 <UART_SetConfig+0x654>
 800a87e:	2b10      	cmp	r3, #16
 800a880:	d014      	beq.n	800a8ac <UART_SetConfig+0x628>
 800a882:	e03b      	b.n	800a8fc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a884:	f7fd fc8a 	bl	800819c <HAL_RCCEx_GetD3PCLK1Freq>
 800a888:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a88a:	e03d      	b.n	800a908 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a88c:	f107 0314 	add.w	r3, r7, #20
 800a890:	4618      	mov	r0, r3
 800a892:	f7fd fc99 	bl	80081c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a89a:	e035      	b.n	800a908 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fd fddd 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8aa:	e02d      	b.n	800a908 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <UART_SetConfig+0x660>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0320 	and.w	r3, r3, #32
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d009      	beq.n	800a8cc <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <UART_SetConfig+0x660>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	08db      	lsrs	r3, r3, #3
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	4a0c      	ldr	r2, [pc, #48]	; (800a8f4 <UART_SetConfig+0x670>)
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8ca:	e01d      	b.n	800a908 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <UART_SetConfig+0x670>)
 800a8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d0:	e01a      	b.n	800a908 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <UART_SetConfig+0x674>)
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d6:	e017      	b.n	800a908 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8de:	e013      	b.n	800a908 <UART_SetConfig+0x684>
 800a8e0:	40011400 	.word	0x40011400
 800a8e4:	58024400 	.word	0x58024400
 800a8e8:	40007800 	.word	0x40007800
 800a8ec:	40007c00 	.word	0x40007c00
 800a8f0:	58000c00 	.word	0x58000c00
 800a8f4:	03d09000 	.word	0x03d09000
 800a8f8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a906:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 824d 	beq.w	800adaa <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	4aad      	ldr	r2, [pc, #692]	; (800abcc <UART_SetConfig+0x948>)
 800a916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a91a:	461a      	mov	r2, r3
 800a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a922:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	4413      	add	r3, r2
 800a92e:	6a3a      	ldr	r2, [r7, #32]
 800a930:	429a      	cmp	r2, r3
 800a932:	d305      	bcc.n	800a940 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a93a:	6a3a      	ldr	r2, [r7, #32]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d903      	bls.n	800a948 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a946:	e230      	b.n	800adaa <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	4618      	mov	r0, r3
 800a94c:	f04f 0100 	mov.w	r1, #0
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	4a9d      	ldr	r2, [pc, #628]	; (800abcc <UART_SetConfig+0x948>)
 800a956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	f04f 0400 	mov.w	r4, #0
 800a960:	461a      	mov	r2, r3
 800a962:	4623      	mov	r3, r4
 800a964:	f7f5 fcc0 	bl	80002e8 <__aeabi_uldivmod>
 800a968:	4603      	mov	r3, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4619      	mov	r1, r3
 800a96e:	4622      	mov	r2, r4
 800a970:	f04f 0300 	mov.w	r3, #0
 800a974:	f04f 0400 	mov.w	r4, #0
 800a978:	0214      	lsls	r4, r2, #8
 800a97a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a97e:	020b      	lsls	r3, r1, #8
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	6852      	ldr	r2, [r2, #4]
 800a984:	0852      	lsrs	r2, r2, #1
 800a986:	4611      	mov	r1, r2
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	eb13 0b01 	adds.w	fp, r3, r1
 800a990:	eb44 0c02 	adc.w	ip, r4, r2
 800a994:	4658      	mov	r0, fp
 800a996:	4661      	mov	r1, ip
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f04f 0400 	mov.w	r4, #0
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4623      	mov	r3, r4
 800a9a4:	f7f5 fca0 	bl	80002e8 <__aeabi_uldivmod>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9b4:	d308      	bcc.n	800a9c8 <UART_SetConfig+0x744>
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9bc:	d204      	bcs.n	800a9c8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c4:	60da      	str	r2, [r3, #12]
 800a9c6:	e1f0      	b.n	800adaa <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a9ce:	e1ec      	b.n	800adaa <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9d8:	f040 8100 	bne.w	800abdc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a9dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9e0:	2b40      	cmp	r3, #64	; 0x40
 800a9e2:	f200 80b7 	bhi.w	800ab54 <UART_SetConfig+0x8d0>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <UART_SetConfig+0x768>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800aaf1 	.word	0x0800aaf1
 800a9f0:	0800aaf9 	.word	0x0800aaf9
 800a9f4:	0800ab55 	.word	0x0800ab55
 800a9f8:	0800ab55 	.word	0x0800ab55
 800a9fc:	0800ab01 	.word	0x0800ab01
 800aa00:	0800ab55 	.word	0x0800ab55
 800aa04:	0800ab55 	.word	0x0800ab55
 800aa08:	0800ab55 	.word	0x0800ab55
 800aa0c:	0800ab11 	.word	0x0800ab11
 800aa10:	0800ab55 	.word	0x0800ab55
 800aa14:	0800ab55 	.word	0x0800ab55
 800aa18:	0800ab55 	.word	0x0800ab55
 800aa1c:	0800ab55 	.word	0x0800ab55
 800aa20:	0800ab55 	.word	0x0800ab55
 800aa24:	0800ab55 	.word	0x0800ab55
 800aa28:	0800ab55 	.word	0x0800ab55
 800aa2c:	0800ab21 	.word	0x0800ab21
 800aa30:	0800ab55 	.word	0x0800ab55
 800aa34:	0800ab55 	.word	0x0800ab55
 800aa38:	0800ab55 	.word	0x0800ab55
 800aa3c:	0800ab55 	.word	0x0800ab55
 800aa40:	0800ab55 	.word	0x0800ab55
 800aa44:	0800ab55 	.word	0x0800ab55
 800aa48:	0800ab55 	.word	0x0800ab55
 800aa4c:	0800ab55 	.word	0x0800ab55
 800aa50:	0800ab55 	.word	0x0800ab55
 800aa54:	0800ab55 	.word	0x0800ab55
 800aa58:	0800ab55 	.word	0x0800ab55
 800aa5c:	0800ab55 	.word	0x0800ab55
 800aa60:	0800ab55 	.word	0x0800ab55
 800aa64:	0800ab55 	.word	0x0800ab55
 800aa68:	0800ab55 	.word	0x0800ab55
 800aa6c:	0800ab47 	.word	0x0800ab47
 800aa70:	0800ab55 	.word	0x0800ab55
 800aa74:	0800ab55 	.word	0x0800ab55
 800aa78:	0800ab55 	.word	0x0800ab55
 800aa7c:	0800ab55 	.word	0x0800ab55
 800aa80:	0800ab55 	.word	0x0800ab55
 800aa84:	0800ab55 	.word	0x0800ab55
 800aa88:	0800ab55 	.word	0x0800ab55
 800aa8c:	0800ab55 	.word	0x0800ab55
 800aa90:	0800ab55 	.word	0x0800ab55
 800aa94:	0800ab55 	.word	0x0800ab55
 800aa98:	0800ab55 	.word	0x0800ab55
 800aa9c:	0800ab55 	.word	0x0800ab55
 800aaa0:	0800ab55 	.word	0x0800ab55
 800aaa4:	0800ab55 	.word	0x0800ab55
 800aaa8:	0800ab55 	.word	0x0800ab55
 800aaac:	0800ab55 	.word	0x0800ab55
 800aab0:	0800ab55 	.word	0x0800ab55
 800aab4:	0800ab55 	.word	0x0800ab55
 800aab8:	0800ab55 	.word	0x0800ab55
 800aabc:	0800ab55 	.word	0x0800ab55
 800aac0:	0800ab55 	.word	0x0800ab55
 800aac4:	0800ab55 	.word	0x0800ab55
 800aac8:	0800ab55 	.word	0x0800ab55
 800aacc:	0800ab55 	.word	0x0800ab55
 800aad0:	0800ab55 	.word	0x0800ab55
 800aad4:	0800ab55 	.word	0x0800ab55
 800aad8:	0800ab55 	.word	0x0800ab55
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab55 	.word	0x0800ab55
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab55 	.word	0x0800ab55
 800aaec:	0800ab4d 	.word	0x0800ab4d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf0:	f7fc fc3a 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 800aaf4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aaf6:	e033      	b.n	800ab60 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaf8:	f7fc fc4c 	bl	8007394 <HAL_RCC_GetPCLK2Freq>
 800aafc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aafe:	e02f      	b.n	800ab60 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab00:	f107 0314 	add.w	r3, r7, #20
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fd fb5f 	bl	80081c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab0e:	e027      	b.n	800ab60 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab10:	f107 0308 	add.w	r3, r7, #8
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fd fca3 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab1e:	e01f      	b.n	800ab60 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab20:	4b2b      	ldr	r3, [pc, #172]	; (800abd0 <UART_SetConfig+0x94c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d009      	beq.n	800ab40 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab2c:	4b28      	ldr	r3, [pc, #160]	; (800abd0 <UART_SetConfig+0x94c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	08db      	lsrs	r3, r3, #3
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	4a27      	ldr	r2, [pc, #156]	; (800abd4 <UART_SetConfig+0x950>)
 800ab38:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab3e:	e00f      	b.n	800ab60 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800ab40:	4b24      	ldr	r3, [pc, #144]	; (800abd4 <UART_SetConfig+0x950>)
 800ab42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab44:	e00c      	b.n	800ab60 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab46:	4b24      	ldr	r3, [pc, #144]	; (800abd8 <UART_SetConfig+0x954>)
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab4a:	e009      	b.n	800ab60 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab52:	e005      	b.n	800ab60 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 8121 	beq.w	800adaa <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	4a17      	ldr	r2, [pc, #92]	; (800abcc <UART_SetConfig+0x948>)
 800ab6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab72:	461a      	mov	r2, r3
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab7a:	005a      	lsls	r2, r3, #1
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	085b      	lsrs	r3, r3, #1
 800ab82:	441a      	add	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	2b0f      	cmp	r3, #15
 800ab94:	d916      	bls.n	800abc4 <UART_SetConfig+0x940>
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab9c:	d212      	bcs.n	800abc4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f023 030f 	bic.w	r3, r3, #15
 800aba6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	b29b      	uxth	r3, r3
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abb6:	4313      	orrs	r3, r2
 800abb8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800abc0:	60da      	str	r2, [r3, #12]
 800abc2:	e0f2      	b.n	800adaa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800abca:	e0ee      	b.n	800adaa <UART_SetConfig+0xb26>
 800abcc:	0800c4dc 	.word	0x0800c4dc
 800abd0:	58024400 	.word	0x58024400
 800abd4:	03d09000 	.word	0x03d09000
 800abd8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800abdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abe0:	2b40      	cmp	r3, #64	; 0x40
 800abe2:	f200 80b7 	bhi.w	800ad54 <UART_SetConfig+0xad0>
 800abe6:	a201      	add	r2, pc, #4	; (adr r2, 800abec <UART_SetConfig+0x968>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800acf1 	.word	0x0800acf1
 800abf0:	0800acf9 	.word	0x0800acf9
 800abf4:	0800ad55 	.word	0x0800ad55
 800abf8:	0800ad55 	.word	0x0800ad55
 800abfc:	0800ad01 	.word	0x0800ad01
 800ac00:	0800ad55 	.word	0x0800ad55
 800ac04:	0800ad55 	.word	0x0800ad55
 800ac08:	0800ad55 	.word	0x0800ad55
 800ac0c:	0800ad11 	.word	0x0800ad11
 800ac10:	0800ad55 	.word	0x0800ad55
 800ac14:	0800ad55 	.word	0x0800ad55
 800ac18:	0800ad55 	.word	0x0800ad55
 800ac1c:	0800ad55 	.word	0x0800ad55
 800ac20:	0800ad55 	.word	0x0800ad55
 800ac24:	0800ad55 	.word	0x0800ad55
 800ac28:	0800ad55 	.word	0x0800ad55
 800ac2c:	0800ad21 	.word	0x0800ad21
 800ac30:	0800ad55 	.word	0x0800ad55
 800ac34:	0800ad55 	.word	0x0800ad55
 800ac38:	0800ad55 	.word	0x0800ad55
 800ac3c:	0800ad55 	.word	0x0800ad55
 800ac40:	0800ad55 	.word	0x0800ad55
 800ac44:	0800ad55 	.word	0x0800ad55
 800ac48:	0800ad55 	.word	0x0800ad55
 800ac4c:	0800ad55 	.word	0x0800ad55
 800ac50:	0800ad55 	.word	0x0800ad55
 800ac54:	0800ad55 	.word	0x0800ad55
 800ac58:	0800ad55 	.word	0x0800ad55
 800ac5c:	0800ad55 	.word	0x0800ad55
 800ac60:	0800ad55 	.word	0x0800ad55
 800ac64:	0800ad55 	.word	0x0800ad55
 800ac68:	0800ad55 	.word	0x0800ad55
 800ac6c:	0800ad47 	.word	0x0800ad47
 800ac70:	0800ad55 	.word	0x0800ad55
 800ac74:	0800ad55 	.word	0x0800ad55
 800ac78:	0800ad55 	.word	0x0800ad55
 800ac7c:	0800ad55 	.word	0x0800ad55
 800ac80:	0800ad55 	.word	0x0800ad55
 800ac84:	0800ad55 	.word	0x0800ad55
 800ac88:	0800ad55 	.word	0x0800ad55
 800ac8c:	0800ad55 	.word	0x0800ad55
 800ac90:	0800ad55 	.word	0x0800ad55
 800ac94:	0800ad55 	.word	0x0800ad55
 800ac98:	0800ad55 	.word	0x0800ad55
 800ac9c:	0800ad55 	.word	0x0800ad55
 800aca0:	0800ad55 	.word	0x0800ad55
 800aca4:	0800ad55 	.word	0x0800ad55
 800aca8:	0800ad55 	.word	0x0800ad55
 800acac:	0800ad55 	.word	0x0800ad55
 800acb0:	0800ad55 	.word	0x0800ad55
 800acb4:	0800ad55 	.word	0x0800ad55
 800acb8:	0800ad55 	.word	0x0800ad55
 800acbc:	0800ad55 	.word	0x0800ad55
 800acc0:	0800ad55 	.word	0x0800ad55
 800acc4:	0800ad55 	.word	0x0800ad55
 800acc8:	0800ad55 	.word	0x0800ad55
 800accc:	0800ad55 	.word	0x0800ad55
 800acd0:	0800ad55 	.word	0x0800ad55
 800acd4:	0800ad55 	.word	0x0800ad55
 800acd8:	0800ad55 	.word	0x0800ad55
 800acdc:	0800ad55 	.word	0x0800ad55
 800ace0:	0800ad55 	.word	0x0800ad55
 800ace4:	0800ad55 	.word	0x0800ad55
 800ace8:	0800ad55 	.word	0x0800ad55
 800acec:	0800ad4d 	.word	0x0800ad4d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf0:	f7fc fb3a 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 800acf4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800acf6:	e033      	b.n	800ad60 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf8:	f7fc fb4c 	bl	8007394 <HAL_RCC_GetPCLK2Freq>
 800acfc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800acfe:	e02f      	b.n	800ad60 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad00:	f107 0314 	add.w	r3, r7, #20
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fd fa5f 	bl	80081c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad0e:	e027      	b.n	800ad60 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fd fba3 	bl	8008460 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad1e:	e01f      	b.n	800ad60 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad20:	4b2c      	ldr	r3, [pc, #176]	; (800add4 <UART_SetConfig+0xb50>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0320 	and.w	r3, r3, #32
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d009      	beq.n	800ad40 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad2c:	4b29      	ldr	r3, [pc, #164]	; (800add4 <UART_SetConfig+0xb50>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	08db      	lsrs	r3, r3, #3
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	4a28      	ldr	r2, [pc, #160]	; (800add8 <UART_SetConfig+0xb54>)
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad3e:	e00f      	b.n	800ad60 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800ad40:	4b25      	ldr	r3, [pc, #148]	; (800add8 <UART_SetConfig+0xb54>)
 800ad42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad44:	e00c      	b.n	800ad60 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad46:	4b25      	ldr	r3, [pc, #148]	; (800addc <UART_SetConfig+0xb58>)
 800ad48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad4a:	e009      	b.n	800ad60 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad52:	e005      	b.n	800ad60 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad5e:	bf00      	nop
    }

    if (pclk != 0U)
 800ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d021      	beq.n	800adaa <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	4a1d      	ldr	r2, [pc, #116]	; (800ade0 <UART_SetConfig+0xb5c>)
 800ad6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad70:	461a      	mov	r2, r3
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	085b      	lsrs	r3, r3, #1
 800ad7e:	441a      	add	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	2b0f      	cmp	r3, #15
 800ad90:	d908      	bls.n	800ada4 <UART_SetConfig+0xb20>
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad98:	d204      	bcs.n	800ada4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ada0:	60da      	str	r2, [r3, #12]
 800ada2:	e002      	b.n	800adaa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800adc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3738      	adds	r7, #56	; 0x38
 800adce:	46bd      	mov	sp, r7
 800add0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800add4:	58024400 	.word	0x58024400
 800add8:	03d09000 	.word	0x03d09000
 800addc:	003d0900 	.word	0x003d0900
 800ade0:	0800c4dc 	.word	0x0800c4dc

0800ade4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00a      	beq.n	800ae0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae12:	f003 0302 	and.w	r3, r3, #2
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae78:	f003 0310 	and.w	r3, r3, #16
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00a      	beq.n	800ae96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d01a      	beq.n	800aefa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aee2:	d10a      	bne.n	800aefa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00a      	beq.n	800af1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	430a      	orrs	r2, r1
 800af1a:	605a      	str	r2, [r3, #4]
  }
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800af38:	f7f6 fce0 	bl	80018fc <HAL_GetTick>
 800af3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0308 	and.w	r3, r3, #8
 800af48:	2b08      	cmp	r3, #8
 800af4a:	d10e      	bne.n	800af6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f82c 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af66:	2303      	movs	r3, #3
 800af68:	e022      	b.n	800afb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b04      	cmp	r3, #4
 800af76:	d10e      	bne.n	800af96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f816 	bl	800afb8 <UART_WaitOnFlagUntilTimeout>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e00c      	b.n	800afb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2220      	movs	r2, #32
 800af9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	4613      	mov	r3, r2
 800afc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc8:	e062      	b.n	800b090 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d05e      	beq.n	800b090 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd2:	f7f6 fc93 	bl	80018fc <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d302      	bcc.n	800afe8 <UART_WaitOnFlagUntilTimeout+0x30>
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11d      	bne.n	800b024 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aff6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0201 	bic.w	r2, r2, #1
 800b006:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2220      	movs	r2, #32
 800b014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	e045      	b.n	800b0b0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0304 	and.w	r3, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d02e      	beq.n	800b090 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b03c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b040:	d126      	bne.n	800b090 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b04a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b05a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2220      	movs	r2, #32
 800b070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2220      	movs	r2, #32
 800b078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2220      	movs	r2, #32
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e00f      	b.n	800b0b0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	69da      	ldr	r2, [r3, #28]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	4013      	ands	r3, r2
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	bf0c      	ite	eq
 800b0a0:	2301      	moveq	r3, #1
 800b0a2:	2300      	movne	r3, #0
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d08d      	beq.n	800afca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6899      	ldr	r1, [r3, #8]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	4b08      	ldr	r3, [pc, #32]	; (800b0fc <UART_EndRxTransfer+0x44>)
 800b0dc:	400b      	ands	r3, r1
 800b0de:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	effffffe 	.word	0xeffffffe

0800b100 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff f8a6 	bl	800a270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b124:	bf00      	nop
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b142:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2220      	movs	r2, #32
 800b148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff f882 	bl	800a25c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b16e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b176:	2b22      	cmp	r3, #34	; 0x22
 800b178:	d13b      	bne.n	800b1f2 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b182:	89bb      	ldrh	r3, [r7, #12]
 800b184:	b2d9      	uxtb	r1, r3
 800b186:	89fb      	ldrh	r3, [r7, #14]
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18e:	400a      	ands	r2, r1
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d122      	bne.n	800b202 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689a      	ldr	r2, [r3, #8]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f022 0201 	bic.w	r2, r2, #1
 800b1da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fad0 	bl	800b790 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1f0:	e007      	b.n	800b202 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	699a      	ldr	r2, [r3, #24]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0208 	orr.w	r2, r2, #8
 800b200:	619a      	str	r2, [r3, #24]
}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b218:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b220:	2b22      	cmp	r3, #34	; 0x22
 800b222:	d13b      	bne.n	800b29c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b230:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b232:	89ba      	ldrh	r2, [r7, #12]
 800b234:	89fb      	ldrh	r3, [r7, #14]
 800b236:	4013      	ands	r3, r2
 800b238:	b29a      	uxth	r2, r3
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b242:	1c9a      	adds	r2, r3, #2
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b24e:	b29b      	uxth	r3, r3
 800b250:	3b01      	subs	r3, #1
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b260:	b29b      	uxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d122      	bne.n	800b2ac <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b274:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	689a      	ldr	r2, [r3, #8]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f022 0201 	bic.w	r2, r2, #1
 800b284:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa7b 	bl	800b790 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b29a:	e007      	b.n	800b2ac <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	699a      	ldr	r2, [r3, #24]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0208 	orr.w	r2, r2, #8
 800b2aa:	619a      	str	r2, [r3, #24]
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2c2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2ca:	2b22      	cmp	r3, #34	; 0x22
 800b2cc:	d166      	bne.n	800b39c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2d4:	81fb      	strh	r3, [r7, #14]
 800b2d6:	e03d      	b.n	800b354 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2e0:	893b      	ldrh	r3, [r7, #8]
 800b2e2:	b2d9      	uxtb	r1, r3
 800b2e4:	89bb      	ldrh	r3, [r7, #12]
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ec:	400a      	ands	r2, r1
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b302:	b29b      	uxth	r3, r3
 800b304:	3b01      	subs	r3, #1
 800b306:	b29a      	uxth	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b314:	b29b      	uxth	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d119      	bne.n	800b34e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b328:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6899      	ldr	r1, [r3, #8]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4b1f      	ldr	r3, [pc, #124]	; (800b3b4 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800b336:	400b      	ands	r3, r1
 800b338:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fa21 	bl	800b790 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b34e:	89fb      	ldrh	r3, [r7, #14]
 800b350:	3b01      	subs	r3, #1
 800b352:	81fb      	strh	r3, [r7, #14]
 800b354:	89fb      	ldrh	r3, [r7, #14]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1be      	bne.n	800b2d8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b360:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b362:	897b      	ldrh	r3, [r7, #10]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d021      	beq.n	800b3ac <UART_RxISR_8BIT_FIFOEN+0xf8>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b36e:	897a      	ldrh	r2, [r7, #10]
 800b370:	429a      	cmp	r2, r3
 800b372:	d21b      	bcs.n	800b3ac <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b382:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a0c      	ldr	r2, [pc, #48]	; (800b3b8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800b388:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f042 0220 	orr.w	r2, r2, #32
 800b398:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b39a:	e007      	b.n	800b3ac <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	699a      	ldr	r2, [r3, #24]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0208 	orr.w	r2, r2, #8
 800b3aa:	619a      	str	r2, [r3, #24]
}
 800b3ac:	bf00      	nop
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	effffffe 	.word	0xeffffffe
 800b3b8:	0800b161 	.word	0x0800b161

0800b3bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3ca:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3d2:	2b22      	cmp	r3, #34	; 0x22
 800b3d4:	d166      	bne.n	800b4a4 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b3dc:	82fb      	strh	r3, [r7, #22]
 800b3de:	e03d      	b.n	800b45c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ec:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b3ee:	8a3a      	ldrh	r2, [r7, #16]
 800b3f0:	8abb      	ldrh	r3, [r7, #20]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3fe:	1c9a      	adds	r2, r3, #2
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	3b01      	subs	r3, #1
 800b40e:	b29a      	uxth	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d119      	bne.n	800b456 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b430:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6899      	ldr	r1, [r3, #8]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	4b1f      	ldr	r3, [pc, #124]	; (800b4bc <UART_RxISR_16BIT_FIFOEN+0x100>)
 800b43e:	400b      	ands	r3, r1
 800b440:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f99d 	bl	800b790 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b456:	8afb      	ldrh	r3, [r7, #22]
 800b458:	3b01      	subs	r3, #1
 800b45a:	82fb      	strh	r3, [r7, #22]
 800b45c:	8afb      	ldrh	r3, [r7, #22]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1be      	bne.n	800b3e0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b468:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b46a:	8a7b      	ldrh	r3, [r7, #18]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d021      	beq.n	800b4b4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b476:	8a7a      	ldrh	r2, [r7, #18]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d21b      	bcs.n	800b4b4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689a      	ldr	r2, [r3, #8]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b48a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a0c      	ldr	r2, [pc, #48]	; (800b4c0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800b490:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f042 0220 	orr.w	r2, r2, #32
 800b4a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4a2:	e007      	b.n	800b4b4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	699a      	ldr	r2, [r3, #24]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0208 	orr.w	r2, r2, #8
 800b4b2:	619a      	str	r2, [r3, #24]
}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	effffffe 	.word	0xeffffffe
 800b4c0:	0800b20b 	.word	0x0800b20b

0800b4c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d101      	bne.n	800b516 <HAL_UARTEx_DisableFifoMode+0x16>
 800b512:	2302      	movs	r3, #2
 800b514:	e027      	b.n	800b566 <HAL_UARTEx_DisableFifoMode+0x66>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2224      	movs	r2, #36	; 0x24
 800b522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f022 0201 	bic.w	r2, r2, #1
 800b53c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b544:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2220      	movs	r2, #32
 800b558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b084      	sub	sp, #16
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b582:	2b01      	cmp	r3, #1
 800b584:	d101      	bne.n	800b58a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b586:	2302      	movs	r3, #2
 800b588:	e02d      	b.n	800b5e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2224      	movs	r2, #36	; 0x24
 800b596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f022 0201 	bic.w	r2, r2, #1
 800b5b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	430a      	orrs	r2, r1
 800b5c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f850 	bl	800b66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d101      	bne.n	800b606 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b602:	2302      	movs	r3, #2
 800b604:	e02d      	b.n	800b662 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2224      	movs	r2, #36	; 0x24
 800b612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f022 0201 	bic.w	r2, r2, #1
 800b62c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f812 	bl	800b66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b089      	sub	sp, #36	; 0x24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b674:	4a2f      	ldr	r2, [pc, #188]	; (800b734 <UARTEx_SetNbDataToProcess+0xc8>)
 800b676:	f107 0314 	add.w	r3, r7, #20
 800b67a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b67e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b682:	4a2d      	ldr	r2, [pc, #180]	; (800b738 <UARTEx_SetNbDataToProcess+0xcc>)
 800b684:	f107 030c 	add.w	r3, r7, #12
 800b688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b68c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b694:	2b00      	cmp	r3, #0
 800b696:	d108      	bne.n	800b6aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6a8:	e03d      	b.n	800b726 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6aa:	2310      	movs	r3, #16
 800b6ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6ae:	2310      	movs	r3, #16
 800b6b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	0e5b      	lsrs	r3, r3, #25
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	f003 0307 	and.w	r3, r3, #7
 800b6c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	0f5b      	lsrs	r3, r3, #29
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	f003 0307 	and.w	r3, r3, #7
 800b6d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b6d2:	7fbb      	ldrb	r3, [r7, #30]
 800b6d4:	7f3a      	ldrb	r2, [r7, #28]
 800b6d6:	f107 0120 	add.w	r1, r7, #32
 800b6da:	440a      	add	r2, r1
 800b6dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b6e0:	fb02 f303 	mul.w	r3, r2, r3
 800b6e4:	7f3a      	ldrb	r2, [r7, #28]
 800b6e6:	f107 0120 	add.w	r1, r7, #32
 800b6ea:	440a      	add	r2, r1
 800b6ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b6fc:	7ffb      	ldrb	r3, [r7, #31]
 800b6fe:	7f7a      	ldrb	r2, [r7, #29]
 800b700:	f107 0120 	add.w	r1, r7, #32
 800b704:	440a      	add	r2, r1
 800b706:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b70a:	fb02 f303 	mul.w	r3, r2, r3
 800b70e:	7f7a      	ldrb	r2, [r7, #29]
 800b710:	f107 0120 	add.w	r1, r7, #32
 800b714:	440a      	add	r2, r1
 800b716:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b71a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b71e:	b29a      	uxth	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b726:	bf00      	nop
 800b728:	3724      	adds	r7, #36	; 0x24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	0800c4b4 	.word	0x0800c4b4
 800b738:	0800c4bc 	.word	0x0800c4bc

0800b73c <GPS_Init>:
uint8_t isDebug = 0, recvChr, recvBuf[200], recvCount = 0, gpsFlag = 0, recvFlag = 0, LEDflag = 0;
uint8_t (*GPS_Parsers[])(GPS_INFO*, uint8_t*) = {GPS_RMC_Parse, GPS_GGA_Parse, GPS_GSV_Parse};
GPS_INFO mGPS;

void GPS_Init(UART_HandleTypeDef *GPShuart, UART_HandleTypeDef *DebugHuart)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  if(DebugHuart != NULL)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <GPS_Init+0x16>
  {
    isDebug = 1;
 800b74c:	4b08      	ldr	r3, [pc, #32]	; (800b770 <GPS_Init+0x34>)
 800b74e:	2201      	movs	r2, #1
 800b750:	701a      	strb	r2, [r3, #0]
  }
  mGPSuart = GPShuart;
 800b752:	4a08      	ldr	r2, [pc, #32]	; (800b774 <GPS_Init+0x38>)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6013      	str	r3, [r2, #0]
  DebugHuart = DebugHuart;
  HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b758:	4b06      	ldr	r3, [pc, #24]	; (800b774 <GPS_Init+0x38>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2201      	movs	r2, #1
 800b75e:	4906      	ldr	r1, [pc, #24]	; (800b778 <GPS_Init+0x3c>)
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fb23 	bl	8009dac <HAL_UART_Receive_IT>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	24000044 	.word	0x24000044
 800b774:	2400a4b0 	.word	0x2400a4b0
 800b778:	2400a3e0 	.word	0x2400a3e0

0800b77c <get_GPS_INFO>:

const GPS_INFO * get_GPS_INFO()
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
	return (const GPS_INFO *)(&mGPS);
 800b780:	4b02      	ldr	r3, [pc, #8]	; (800b78c <get_GPS_INFO+0x10>)
}
 800b782:	4618      	mov	r0, r3
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr
 800b78c:	2400a4b8 	.word	0x2400a4b8

0800b790 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(recvChr == '$')  //如果收到字符'$'，便开始接收
 800b798:	4b33      	ldr	r3, [pc, #204]	; (800b868 <HAL_UART_RxCpltCallback+0xd8>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b24      	cmp	r3, #36	; 0x24
 800b79e:	d109      	bne.n	800b7b4 <HAL_UART_RxCpltCallback+0x24>
	{
		recvFlag = 1;
 800b7a0:	4b32      	ldr	r3, [pc, #200]	; (800b86c <HAL_UART_RxCpltCallback+0xdc>)
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	701a      	strb	r2, [r3, #0]
		recvBuf[0] = '$';
 800b7a6:	4b32      	ldr	r3, [pc, #200]	; (800b870 <HAL_UART_RxCpltCallback+0xe0>)
 800b7a8:	2224      	movs	r2, #36	; 0x24
 800b7aa:	701a      	strb	r2, [r3, #0]
    	recvCount = 1;
 800b7ac:	4b31      	ldr	r3, [pc, #196]	; (800b874 <HAL_UART_RxCpltCallback+0xe4>)
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	701a      	strb	r2, [r3, #0]
 800b7b2:	e021      	b.n	800b7f8 <HAL_UART_RxCpltCallback+0x68>
  } else if(recvFlag == 1)  //标志位为1，开始接收
 800b7b4:	4b2d      	ldr	r3, [pc, #180]	; (800b86c <HAL_UART_RxCpltCallback+0xdc>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d11d      	bne.n	800b7f8 <HAL_UART_RxCpltCallback+0x68>
	{
		recvBuf[recvCount++] = recvChr;  //字符存到数组中
 800b7bc:	4b2d      	ldr	r3, [pc, #180]	; (800b874 <HAL_UART_RxCpltCallback+0xe4>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	b2d1      	uxtb	r1, r2
 800b7c4:	4a2b      	ldr	r2, [pc, #172]	; (800b874 <HAL_UART_RxCpltCallback+0xe4>)
 800b7c6:	7011      	strb	r1, [r2, #0]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4b27      	ldr	r3, [pc, #156]	; (800b868 <HAL_UART_RxCpltCallback+0xd8>)
 800b7cc:	7819      	ldrb	r1, [r3, #0]
 800b7ce:	4b28      	ldr	r3, [pc, #160]	; (800b870 <HAL_UART_RxCpltCallback+0xe0>)
 800b7d0:	5499      	strb	r1, [r3, r2]
		if(recvChr == '\n')     //如果接收到换行
 800b7d2:	4b25      	ldr	r3, [pc, #148]	; (800b868 <HAL_UART_RxCpltCallback+0xd8>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b0a      	cmp	r3, #10
 800b7d8:	d10e      	bne.n	800b7f8 <HAL_UART_RxCpltCallback+0x68>
		{
			recvBuf[recvCount] = '\0';
 800b7da:	4b26      	ldr	r3, [pc, #152]	; (800b874 <HAL_UART_RxCpltCallback+0xe4>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	4b23      	ldr	r3, [pc, #140]	; (800b870 <HAL_UART_RxCpltCallback+0xe0>)
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	5499      	strb	r1, [r3, r2]
		  recvFlag = 0;
 800b7e6:	4b21      	ldr	r3, [pc, #132]	; (800b86c <HAL_UART_RxCpltCallback+0xdc>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
			  gpsFlag = 1;
 800b7ec:	4b22      	ldr	r3, [pc, #136]	; (800b878 <HAL_UART_RxCpltCallback+0xe8>)
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	701a      	strb	r2, [r3, #0]
			recvCount = 1;
 800b7f2:	4b20      	ldr	r3, [pc, #128]	; (800b874 <HAL_UART_RxCpltCallback+0xe4>)
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	701a      	strb	r2, [r3, #0]
		}
	}
  if(gpsFlag == 1)
 800b7f8:	4b1f      	ldr	r3, [pc, #124]	; (800b878 <HAL_UART_RxCpltCallback+0xe8>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d128      	bne.n	800b852 <HAL_UART_RxCpltCallback+0xc2>
  {
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b800:	2300      	movs	r3, #0
 800b802:	60fb      	str	r3, [r7, #12]
 800b804:	e01f      	b.n	800b846 <HAL_UART_RxCpltCallback+0xb6>
		{
			if(GPS_Parsers[i](&mGPS, recvBuf))
 800b806:	4a1d      	ldr	r2, [pc, #116]	; (800b87c <HAL_UART_RxCpltCallback+0xec>)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b80e:	4918      	ldr	r1, [pc, #96]	; (800b870 <HAL_UART_RxCpltCallback+0xe0>)
 800b810:	481b      	ldr	r0, [pc, #108]	; (800b880 <HAL_UART_RxCpltCallback+0xf0>)
 800b812:	4798      	blx	r3
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d012      	beq.n	800b840 <HAL_UART_RxCpltCallback+0xb0>
			{
				HAL_GPIO_WritePin(LED_GPS_GPIO_Port, LED_GPS_Pin, LEDflag);
 800b81a:	4b1a      	ldr	r3, [pc, #104]	; (800b884 <HAL_UART_RxCpltCallback+0xf4>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b824:	4818      	ldr	r0, [pc, #96]	; (800b888 <HAL_UART_RxCpltCallback+0xf8>)
 800b826:	f7fa f96f 	bl	8005b08 <HAL_GPIO_WritePin>
				LEDflag = !LEDflag;
 800b82a:	4b16      	ldr	r3, [pc, #88]	; (800b884 <HAL_UART_RxCpltCallback+0xf4>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bf0c      	ite	eq
 800b832:	2301      	moveq	r3, #1
 800b834:	2300      	movne	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	4b12      	ldr	r3, [pc, #72]	; (800b884 <HAL_UART_RxCpltCallback+0xf4>)
 800b83c:	701a      	strb	r2, [r3, #0]
				break;
 800b83e:	e005      	b.n	800b84c <HAL_UART_RxCpltCallback+0xbc>
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	3301      	adds	r3, #1
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d9dc      	bls.n	800b806 <HAL_UART_RxCpltCallback+0x76>
			}
		}
		gpsFlag = 0;
 800b84c:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <HAL_UART_RxCpltCallback+0xe8>)
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b852:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <HAL_UART_RxCpltCallback+0xfc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2201      	movs	r2, #1
 800b858:	4903      	ldr	r1, [pc, #12]	; (800b868 <HAL_UART_RxCpltCallback+0xd8>)
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe faa6 	bl	8009dac <HAL_UART_Receive_IT>
}
 800b860:	bf00      	nop
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	2400a3e0 	.word	0x2400a3e0
 800b86c:	24000047 	.word	0x24000047
 800b870:	2400a3e8 	.word	0x2400a3e8
 800b874:	24000045 	.word	0x24000045
 800b878:	24000046 	.word	0x24000046
 800b87c:	24000010 	.word	0x24000010
 800b880:	2400a4b8 	.word	0x2400a4b8
 800b884:	24000048 	.word	0x24000048
 800b888:	58020400 	.word	0x58020400
 800b88c:	2400a4b0 	.word	0x2400a4b0

0800b890 <GPS_RMC_Parse>:
// 返 回 值：
//			 1: 解析GPRMC完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_RMC_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08a      	sub	sp, #40	; 0x28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
	uint8_t ch, status, tmp;
	float lati_cent_tmp, lati_second_tmp;
	float long_cent_tmp, long_second_tmp;
	float speed_tmp;
	uint8_t *buf = line;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
	ch = buf[5];
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	795b      	ldrb	r3, [r3, #5]
 800b8a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status = buf[GetComma(2, buf)];
 800b8a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f000 fd87 	bl	800c3bc <GetComma>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	4413      	add	r3, r2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	if (ch == 'C')  //如果第五个字符是C，($GPRMC)
 800b8bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8c0:	2b43      	cmp	r3, #67	; 0x43
 800b8c2:	f040 8169 	bne.w	800bb98 <GPS_RMC_Parse+0x308>
	{
		if (status == 'A')  //如果数据有效，则分析
 800b8c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8ca:	2b41      	cmp	r3, #65	; 0x41
 800b8cc:	f040 8164 	bne.w	800bb98 <GPS_RMC_Parse+0x308>
		{
			GPS -> NS       = buf[GetComma(4, buf)];
 800b8d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8d2:	2004      	movs	r0, #4
 800b8d4:	f000 fd72 	bl	800c3bc <GetComma>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	4413      	add	r3, r2
 800b8e0:	781a      	ldrb	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			GPS -> EW       = buf[GetComma(6, buf)];
 800b8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8ea:	2006      	movs	r0, #6
 800b8ec:	f000 fd66 	bl	800c3bc <GetComma>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	4413      	add	r3, r2
 800b8f8:	781a      	ldrb	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

			GPS->latitude   = Get_Double_Number(&buf[GetComma(3, buf)]);
 800b900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b902:	2003      	movs	r0, #3
 800b904:	f000 fd5a 	bl	800c3bc <GetComma>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	4413      	add	r3, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fd23 	bl	800c35c <Get_Double_Number>
 800b916:	eeb0 7b40 	vmov.f64	d7, d0
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	ed83 7b00 	vstr	d7, [r3]
			GPS->longitude  = Get_Double_Number(&buf[GetComma( 5, buf)]);
 800b920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b922:	2005      	movs	r0, #5
 800b924:	f000 fd4a 	bl	800c3bc <GetComma>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	4413      	add	r3, r2
 800b930:	4618      	mov	r0, r3
 800b932:	f000 fd13 	bl	800c35c <Get_Double_Number>
 800b936:	eeb0 7b40 	vmov.f64	d7, d0
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	ed83 7b02 	vstr	d7, [r3, #8]

      GPS->latitude_Degree  = (int32_t)GPS->latitude / 100;       //分离纬度
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	ed93 7b00 	vldr	d7, [r3]
 800b946:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b94a:	ee17 1a90 	vmov	r1, s15
 800b94e:	4b98      	ldr	r3, [pc, #608]	; (800bbb0 <GPS_RMC_Parse+0x320>)
 800b950:	fb83 2301 	smull	r2, r3, r3, r1
 800b954:	115a      	asrs	r2, r3, #5
 800b956:	17cb      	asrs	r3, r1, #31
 800b958:	1ad2      	subs	r2, r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	621a      	str	r2, [r3, #32]
			lati_cent_tmp         = (GPS->latitude - GPS->latitude_Degree * 100);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	ed93 6b00 	vldr	d6, [r3]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	2264      	movs	r2, #100	; 0x64
 800b96a:	fb02 f303 	mul.w	r3, r2, r3
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b976:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b97a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b97e:	edc7 7a07 	vstr	s15, [r7, #28]
			GPS->latitude_Cent    = (int32_t)lati_cent_tmp;
 800b982:	edd7 7a07 	vldr	s15, [r7, #28]
 800b986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b98a:	ee17 2a90 	vmov	r2, s15
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	625a      	str	r2, [r3, #36]	; 0x24
			lati_second_tmp       = (lati_cent_tmp - GPS->latitude_Cent) * 60;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	ee07 3a90 	vmov	s15, r3
 800b99a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b99e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9a6:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bbb4 <GPS_RMC_Parse+0x324>
 800b9aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9ae:	edc7 7a06 	vstr	s15, [r7, #24]
			GPS->latitude_Second  = (int32_t)lati_second_tmp;
 800b9b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ba:	ee17 2a90 	vmov	r2, s15
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	629a      	str	r2, [r3, #40]	; 0x28

			GPS->longitude_Degree = (int32_t)GPS->longitude / 100;	//分离经度
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9c8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b9cc:	ee17 1a90 	vmov	r1, s15
 800b9d0:	4b77      	ldr	r3, [pc, #476]	; (800bbb0 <GPS_RMC_Parse+0x320>)
 800b9d2:	fb83 2301 	smull	r2, r3, r3, r1
 800b9d6:	115a      	asrs	r2, r3, #5
 800b9d8:	17cb      	asrs	r3, r1, #31
 800b9da:	1ad2      	subs	r2, r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	62da      	str	r2, [r3, #44]	; 0x2c
			long_cent_tmp         = (GPS->longitude - GPS->longitude_Degree * 100);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	ed93 6b02 	vldr	d6, [r3, #8]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ea:	2264      	movs	r2, #100	; 0x64
 800b9ec:	fb02 f303 	mul.w	r3, r2, r3
 800b9f0:	ee07 3a90 	vmov	s15, r3
 800b9f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b9f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b9fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba00:	edc7 7a05 	vstr	s15, [r7, #20]
			GPS->longitude_Cent   = (int32_t)long_cent_tmp;    
 800ba04:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba0c:	ee17 2a90 	vmov	r2, s15
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	631a      	str	r2, [r3, #48]	; 0x30
			long_second_tmp       = (long_cent_tmp - GPS->longitude_Cent) * 60;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba20:	ed97 7a05 	vldr	s14, [r7, #20]
 800ba24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba28:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800bbb4 <GPS_RMC_Parse+0x324>
 800ba2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba30:	edc7 7a04 	vstr	s15, [r7, #16]
			GPS->longitude_Second = (int32_t)long_second_tmp;
 800ba34:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba3c:	ee17 2a90 	vmov	r2, s15
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	635a      	str	r2, [r3, #52]	; 0x34

			speed_tmp      = Get_Float_Number(&buf[GetComma(7, buf)]);    //速度(单位：海里/时)
 800ba44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba46:	2007      	movs	r0, #7
 800ba48:	f000 fcb8 	bl	800c3bc <GetComma>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	461a      	mov	r2, r3
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	4413      	add	r3, r2
 800ba54:	4618      	mov	r0, r3
 800ba56:	f000 fb81 	bl	800c15c <Get_Float_Number>
 800ba5a:	ed87 0a03 	vstr	s0, [r7, #12]
			GPS->speed     = speed_tmp * 1.85;                           //1海里=1.85公里
 800ba5e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba66:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800bba8 <GPS_RMC_Parse+0x318>
 800ba6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	edc3 7a05 	vstr	s15, [r3, #20]
			GPS->direction = Get_Float_Number(&buf[GetComma(8, buf)]); //角度			
 800ba78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba7a:	2008      	movs	r0, #8
 800ba7c:	f000 fc9e 	bl	800c3bc <GetComma>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	4413      	add	r3, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 fb67 	bl	800c15c <Get_Float_Number>
 800ba8e:	eef0 7a40 	vmov.f32	s15, s0
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	edc3 7a06 	vstr	s15, [r3, #24]

			GPS->D.hour    = (buf[7] - '0') * 10 + (buf[8] - '0');		//时间
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	3307      	adds	r3, #7
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	461a      	mov	r2, r3
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	3308      	adds	r3, #8
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	3b30      	subs	r3, #48	; 0x30
 800bab4:	441a      	add	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	64da      	str	r2, [r3, #76]	; 0x4c
			GPS->D.minute  = (buf[9] - '0') * 10 + (buf[10] - '0');
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	3309      	adds	r3, #9
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bac4:	4613      	mov	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	461a      	mov	r2, r3
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	330a      	adds	r3, #10
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	3b30      	subs	r3, #48	; 0x30
 800bad6:	441a      	add	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	651a      	str	r2, [r3, #80]	; 0x50
			GPS->D.second  = (buf[11] - '0') * 10 + (buf[12] - '0');
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	330b      	adds	r3, #11
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	461a      	mov	r2, r3
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	330c      	adds	r3, #12
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	3b30      	subs	r3, #48	; 0x30
 800baf8:	441a      	add	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	655a      	str	r2, [r3, #84]	; 0x54
			tmp = GetComma(9, buf);
 800bafe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb00:	2009      	movs	r0, #9
 800bb02:	f000 fc5b 	bl	800c3bc <GetComma>
 800bb06:	4603      	mov	r3, r0
 800bb08:	72fb      	strb	r3, [r7, #11]
			GPS->D.day     = (buf[tmp + 0] - '0') * 10 + (buf[tmp + 1] - '0'); //日期
 800bb0a:	7afb      	ldrb	r3, [r7, #11]
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	4413      	add	r3, r2
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	4619      	mov	r1, r3
 800bb20:	7afb      	ldrb	r3, [r7, #11]
 800bb22:	3301      	adds	r3, #1
 800bb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb26:	4413      	add	r3, r2
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	3b30      	subs	r3, #48	; 0x30
 800bb2c:	18ca      	adds	r2, r1, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	649a      	str	r2, [r3, #72]	; 0x48
			GPS->D.month   = (buf[tmp + 2] - '0') * 10 + (buf[tmp + 3] - '0');
 800bb32:	7afb      	ldrb	r3, [r7, #11]
 800bb34:	3302      	adds	r3, #2
 800bb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb38:	4413      	add	r3, r2
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	4619      	mov	r1, r3
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
 800bb4c:	3303      	adds	r3, #3
 800bb4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb50:	4413      	add	r3, r2
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	3b30      	subs	r3, #48	; 0x30
 800bb56:	18ca      	adds	r2, r1, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	645a      	str	r2, [r3, #68]	; 0x44
			GPS->D.year    = (buf[tmp + 4] - '0') * 10 + (buf[tmp + 5] - '0')+2000;
 800bb5c:	7afb      	ldrb	r3, [r7, #11]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb62:	4413      	add	r3, r2
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	4619      	mov	r1, r3
 800bb74:	7afb      	ldrb	r3, [r7, #11]
 800bb76:	3305      	adds	r3, #5
 800bb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7a:	4413      	add	r3, r2
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	3b30      	subs	r3, #48	; 0x30
 800bb80:	440b      	add	r3, r1
 800bb82:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	641a      	str	r2, [r3, #64]	; 0x40

			UTC2BTC(&GPS->D);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3340      	adds	r3, #64	; 0x40
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 f875 	bl	800bc7e <UTC2BTC>
			
			return 1;
 800bb94:	2301      	movs	r3, #1
 800bb96:	e000      	b.n	800bb9a <GPS_RMC_Parse+0x30a>
		}		
	}
	
	return 0;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3728      	adds	r7, #40	; 0x28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	f3af 8000 	nop.w
 800bba8:	9999999a 	.word	0x9999999a
 800bbac:	3ffd9999 	.word	0x3ffd9999
 800bbb0:	51eb851f 	.word	0x51eb851f
 800bbb4:	42700000 	.word	0x42700000

0800bbb8 <GPS_GGA_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GGA_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
	uint8_t ch, status;
	uint8_t *buf = line;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	60fb      	str	r3, [r7, #12]
	ch = buf[4];
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	791b      	ldrb	r3, [r3, #4]
 800bbca:	72fb      	strb	r3, [r7, #11]
	status = buf[GetComma(2, buf)];
 800bbcc:	68f9      	ldr	r1, [r7, #12]
 800bbce:	2002      	movs	r0, #2
 800bbd0:	f000 fbf4 	bl	800c3bc <GetComma>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	72bb      	strb	r3, [r7, #10]

	if (ch == 'G')  //$GPGGA
 800bbe0:	7afb      	ldrb	r3, [r7, #11]
 800bbe2:	2b47      	cmp	r3, #71	; 0x47
 800bbe4:	d124      	bne.n	800bc30 <GPS_GGA_Parse+0x78>
	{
		if (status != ',')
 800bbe6:	7abb      	ldrb	r3, [r7, #10]
 800bbe8:	2b2c      	cmp	r3, #44	; 0x2c
 800bbea:	d021      	beq.n	800bc30 <GPS_GGA_Parse+0x78>
		{
			GPS->height_sea = Get_Float_Number(&buf[GetComma(9, buf)]);
 800bbec:	68f9      	ldr	r1, [r7, #12]
 800bbee:	2009      	movs	r0, #9
 800bbf0:	f000 fbe4 	bl	800c3bc <GetComma>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f000 faad 	bl	800c15c <Get_Float_Number>
 800bc02:	eef0 7a40 	vmov.f32	s15, s0
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	edc3 7a04 	vstr	s15, [r3, #16]
			GPS->height_ground = Get_Float_Number(&buf[GetComma(11, buf)]);
 800bc0c:	68f9      	ldr	r1, [r7, #12]
 800bc0e:	200b      	movs	r0, #11
 800bc10:	f000 fbd4 	bl	800c3bc <GetComma>
 800bc14:	4603      	mov	r3, r0
 800bc16:	461a      	mov	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 fa9d 	bl	800c15c <Get_Float_Number>
 800bc22:	eef0 7a40 	vmov.f32	s15, s0
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	edc3 7a07 	vstr	s15, [r3, #28]

			return 1;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e000      	b.n	800bc32 <GPS_GGA_Parse+0x7a>
		}
	}
	
	return 0;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <GPS_GSV_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GSV_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
	uint8_t ch;
	uint8_t *buf = line;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	60fb      	str	r3, [r7, #12]
	ch = buf[5];
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	795b      	ldrb	r3, [r3, #5]
 800bc4c:	72fb      	strb	r3, [r7, #11]

	if (ch == 'V')  //$GPGSV
 800bc4e:	7afb      	ldrb	r3, [r7, #11]
 800bc50:	2b56      	cmp	r3, #86	; 0x56
 800bc52:	d10f      	bne.n	800bc74 <GPS_GSV_Parse+0x3a>
	{
		GPS->satellite = Get_Int_Number(&buf[GetComma(3, buf)]);
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	2003      	movs	r0, #3
 800bc58:	f000 fbb0 	bl	800c3bc <GetComma>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 f9a7 	bl	800bfb8 <Get_Int_Number>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38
		return 1;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e000      	b.n	800bc76 <GPS_GSV_Parse+0x3c>
	}
	
	return 0;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <UTC2BTC>:
// 实现功能：转化时间为北京时区的时间
// 参    数：存放时间的结构体
// 返 回 值：无
//====================================================================//
void UTC2BTC(DATE_TIME *date_time)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
	date_time->second ++;  
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	615a      	str	r2, [r3, #20]
	if(date_time->second > 59)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	2b3b      	cmp	r3, #59	; 0x3b
 800bc96:	dd13      	ble.n	800bcc0 <UTC2BTC+0x42>
	{
		date_time->second = 0;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	615a      	str	r2, [r3, #20]
		date_time->minute ++;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	611a      	str	r2, [r3, #16]
		if(date_time->minute > 59)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	2b3b      	cmp	r3, #59	; 0x3b
 800bcae:	dd07      	ble.n	800bcc0 <UTC2BTC+0x42>
		{
			date_time->minute = 0;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	611a      	str	r2, [r3, #16]
			date_time->hour ++;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	60da      	str	r2, [r3, #12]
		}
	}	

    date_time->hour = date_time->hour + 8;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f103 0208 	add.w	r2, r3, #8
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	60da      	str	r2, [r3, #12]
	if(date_time->hour > 23)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	2b17      	cmp	r3, #23
 800bcd2:	dd6d      	ble.n	800bdb0 <UTC2BTC+0x132>
	{
		date_time->hour -= 24;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f1a3 0218 	sub.w	r2, r3, #24
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	60da      	str	r2, [r3, #12]
		date_time->day += 1;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	609a      	str	r2, [r3, #8]
		if(date_time->month == 2 ||
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d00f      	beq.n	800bd12 <UTC2BTC+0x94>
		   		date_time->month == 4 ||
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	685b      	ldr	r3, [r3, #4]
		if(date_time->month == 2 ||
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d00b      	beq.n	800bd12 <UTC2BTC+0x94>
		   		date_time->month == 6 ||
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 4 ||
 800bcfe:	2b06      	cmp	r3, #6
 800bd00:	d007      	beq.n	800bd12 <UTC2BTC+0x94>
		   		date_time->month == 9 ||
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 6 ||
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d003      	beq.n	800bd12 <UTC2BTC+0x94>
		   		date_time->month == 11 )
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 9 ||
 800bd0e:	2b0b      	cmp	r3, #11
 800bd10:	d10c      	bne.n	800bd2c <UTC2BTC+0xae>
		{
			if(date_time->day > 30)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	2b1e      	cmp	r3, #30
 800bd18:	dd14      	ble.n	800bd44 <UTC2BTC+0xc6>
			{
		   		date_time->day = 1;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	609a      	str	r2, [r3, #8]
				date_time->month++;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	605a      	str	r2, [r3, #4]
			if(date_time->day > 30)
 800bd2a:	e00b      	b.n	800bd44 <UTC2BTC+0xc6>
			}
		}
		else
		{
			if(date_time->day > 31)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	2b1f      	cmp	r3, #31
 800bd32:	dd07      	ble.n	800bd44 <UTC2BTC+0xc6>
			{	
		   		date_time->day = 1;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	1c5a      	adds	r2, r3, #1
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->year % 4 == 0 )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 0303 	and.w	r3, r3, #3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d110      	bne.n	800bd72 <UTC2BTC+0xf4>
		{
	   		if(date_time->day > 29 && date_time->month == 2)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	2b1d      	cmp	r3, #29
 800bd56:	dd1c      	ble.n	800bd92 <UTC2BTC+0x114>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d118      	bne.n	800bd92 <UTC2BTC+0x114>
			{		
	   			date_time->day = 1;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	605a      	str	r2, [r3, #4]
 800bd70:	e00f      	b.n	800bd92 <UTC2BTC+0x114>
			}
		}
		else
		{
	   		if(date_time->day > 28 &&date_time->month == 2)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	2b1c      	cmp	r3, #28
 800bd78:	dd0b      	ble.n	800bd92 <UTC2BTC+0x114>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d107      	bne.n	800bd92 <UTC2BTC+0x114>
			{
	   			date_time->day = 1;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->month > 12)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	2b0c      	cmp	r3, #12
 800bd98:	dd0a      	ble.n	800bdb0 <UTC2BTC+0x132>
		{
			date_time->month -= 12;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	f1a3 020c 	sub.w	r2, r3, #12
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	605a      	str	r2, [r3, #4]
			date_time->year ++;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	601a      	str	r2, [r3, #0]
		}		
	}
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <Init>:
  Init,
  ReadAngle
};

void Init(I2C_HandleTypeDef *hi2c)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  mHi2c = hi2c;
 800bdc4:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <Init+0x1c>)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6013      	str	r3, [r2, #0]
}
 800bdca:	bf00      	nop
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	2400a510 	.word	0x2400a510

0800bddc <ReadAngle>:

float ReadAngle(uint8_t axis)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	4603      	mov	r3, r0
 800bde4:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2] = {0, 0};
 800bde6:	2300      	movs	r3, #0
 800bde8:	733b      	strb	r3, [r7, #12]
 800bdea:	2300      	movs	r3, #0
 800bdec:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(mHi2c, JY_ADDR, axis, 1, data, 2, 10000);
 800bdee:	4b14      	ldr	r3, [pc, #80]	; (800be40 <ReadAngle+0x64>)
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	f242 7310 	movw	r3, #10000	; 0x2710
 800bdfa:	9302      	str	r3, [sp, #8]
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	f107 030c 	add.w	r3, r7, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	2301      	movs	r3, #1
 800be08:	2150      	movs	r1, #80	; 0x50
 800be0a:	f7f9 ff27 	bl	8005c5c <HAL_I2C_Mem_Read>
  return ((data[1] << 8) | data[0]) / 32768 * 180;
 800be0e:	7b7b      	ldrb	r3, [r7, #13]
 800be10:	021b      	lsls	r3, r3, #8
 800be12:	7b3a      	ldrb	r2, [r7, #12]
 800be14:	4313      	orrs	r3, r2
 800be16:	2b00      	cmp	r3, #0
 800be18:	da03      	bge.n	800be22 <ReadAngle+0x46>
 800be1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800be1e:	441a      	add	r2, r3
 800be20:	4613      	mov	r3, r2
 800be22:	13db      	asrs	r3, r3, #15
 800be24:	461a      	mov	r2, r3
 800be26:	23b4      	movs	r3, #180	; 0xb4
 800be28:	fb03 f302 	mul.w	r3, r3, r2
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800be34:	eeb0 0a67 	vmov.f32	s0, s15
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	2400a510 	.word	0x2400a510

0800be44 <StartOV2640>:
		}
	}
}

void StartOV2640()//拍照的线程
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800be48:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <StartOV2640+0x38>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	4b0a      	ldr	r3, [pc, #40]	; (800be7c <StartOV2640+0x38>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f042 0201 	orr.w	r2, r2, #1
 800be5a:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800be5c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800be60:	2100      	movs	r1, #0
 800be62:	4807      	ldr	r0, [pc, #28]	; (800be80 <StartOV2640+0x3c>)
 800be64:	f000 fafc 	bl	800c460 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800be68:	4b04      	ldr	r3, [pc, #16]	; (800be7c <StartOV2640+0x38>)
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	4a04      	ldr	r2, [pc, #16]	; (800be80 <StartOV2640+0x3c>)
 800be6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be72:	2102      	movs	r1, #2
 800be74:	f7f5 fee4 	bl	8001c40 <HAL_DCMI_Start_DMA>

}
 800be78:	bf00      	nop
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	2400a514 	.word	0x2400a514
 800be80:	2400004c 	.word	0x2400004c

0800be84 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800be8c:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <HAL_DCMI_FrameEventCallback+0x6c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4618      	mov	r0, r3
 800be92:	f7f5 fff7 	bl	8001e84 <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800be96:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <HAL_DCMI_FrameEventCallback+0x6c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7f5 ff92 	bl	8001dc4 <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800bea0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bea4:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800bea6:	e009      	b.n	800bebc <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3b01      	subs	r3, #1
 800beac:	4a11      	ldr	r2, [pc, #68]	; (800bef4 <HAL_DCMI_FrameEventCallback+0x70>)
 800beae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3b01      	subs	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	dcf2      	bgt.n	800bea8 <HAL_DCMI_FrameEventCallback+0x24>
 800bec2:	e000      	b.n	800bec6 <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800bec4:	bf00      	nop
	}
	pictureLength*=4;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <HAL_DCMI_FrameEventCallback+0x74>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d007      	beq.n	800bee4 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800bed4:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <HAL_DCMI_FrameEventCallback+0x74>)
 800bed6:	6818      	ldr	r0, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	b29a      	uxth	r2, r3
 800bedc:	4b07      	ldr	r3, [pc, #28]	; (800befc <HAL_DCMI_FrameEventCallback+0x78>)
 800bede:	4905      	ldr	r1, [pc, #20]	; (800bef4 <HAL_DCMI_FrameEventCallback+0x70>)
 800bee0:	f7fd fece 	bl	8009c80 <HAL_UART_Transmit>

	StartOV2640();
 800bee4:	f7ff ffae 	bl	800be44 <StartOV2640>
}
 800bee8:	bf00      	nop
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	2400a514 	.word	0x2400a514
 800bef4:	2400004c 	.word	0x2400004c
 800bef8:	2400a518 	.word	0x2400a518
 800befc:	000186a0 	.word	0x000186a0

0800bf00 <Str_To_Int>:
// 实现功能： 把一个字符串转化成整数
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Str_To_Int(uint8_t *buf)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b087      	sub	sp, #28
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
	int32_t rev = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	617b      	str	r3, [r7, #20]
	int32_t dat;
	uint8_t *str = buf;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800bf10:	e046      	b.n	800bfa0 <Str_To_Int+0xa0>
	{
		switch(*str)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	3b30      	subs	r3, #48	; 0x30
 800bf18:	2b09      	cmp	r3, #9
 800bf1a:	d835      	bhi.n	800bf88 <Str_To_Int+0x88>
 800bf1c:	a201      	add	r2, pc, #4	; (adr r2, 800bf24 <Str_To_Int+0x24>)
 800bf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf22:	bf00      	nop
 800bf24:	0800bf4d 	.word	0x0800bf4d
 800bf28:	0800bf53 	.word	0x0800bf53
 800bf2c:	0800bf59 	.word	0x0800bf59
 800bf30:	0800bf5f 	.word	0x0800bf5f
 800bf34:	0800bf65 	.word	0x0800bf65
 800bf38:	0800bf6b 	.word	0x0800bf6b
 800bf3c:	0800bf71 	.word	0x0800bf71
 800bf40:	0800bf77 	.word	0x0800bf77
 800bf44:	0800bf7d 	.word	0x0800bf7d
 800bf48:	0800bf83 	.word	0x0800bf83
		{
			case '0':
				dat = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	613b      	str	r3, [r7, #16]
				break;
 800bf50:	e01a      	b.n	800bf88 <Str_To_Int+0x88>
			case '1':
				dat = 1;
 800bf52:	2301      	movs	r3, #1
 800bf54:	613b      	str	r3, [r7, #16]
				break;
 800bf56:	e017      	b.n	800bf88 <Str_To_Int+0x88>
			case '2':
				dat = 2;
 800bf58:	2302      	movs	r3, #2
 800bf5a:	613b      	str	r3, [r7, #16]
				break;		
 800bf5c:	e014      	b.n	800bf88 <Str_To_Int+0x88>
			case '3':
				dat = 3;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	613b      	str	r3, [r7, #16]
				break;
 800bf62:	e011      	b.n	800bf88 <Str_To_Int+0x88>
			case '4':
				dat = 4;
 800bf64:	2304      	movs	r3, #4
 800bf66:	613b      	str	r3, [r7, #16]
				break;
 800bf68:	e00e      	b.n	800bf88 <Str_To_Int+0x88>
			case '5':
				dat = 5;
 800bf6a:	2305      	movs	r3, #5
 800bf6c:	613b      	str	r3, [r7, #16]
				break;
 800bf6e:	e00b      	b.n	800bf88 <Str_To_Int+0x88>
			case '6':
				dat = 6;
 800bf70:	2306      	movs	r3, #6
 800bf72:	613b      	str	r3, [r7, #16]
				break;
 800bf74:	e008      	b.n	800bf88 <Str_To_Int+0x88>
			case '7':
				dat = 7;
 800bf76:	2307      	movs	r3, #7
 800bf78:	613b      	str	r3, [r7, #16]
				break;
 800bf7a:	e005      	b.n	800bf88 <Str_To_Int+0x88>
			case '8':
				dat = 8;
 800bf7c:	2308      	movs	r3, #8
 800bf7e:	613b      	str	r3, [r7, #16]
				break;
 800bf80:	e002      	b.n	800bf88 <Str_To_Int+0x88>
			case '9':
				dat = 9;
 800bf82:	2309      	movs	r3, #9
 800bf84:	613b      	str	r3, [r7, #16]
				break;
 800bf86:	bf00      	nop
		}

		rev = rev * 10 + dat;
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	461a      	mov	r2, r3
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	617b      	str	r3, [r7, #20]
		str ++;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1b4      	bne.n	800bf12 <Str_To_Int+0x12>
	}

	return rev;
 800bfa8:	697b      	ldr	r3, [r7, #20]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	371c      	adds	r7, #28
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop

0800bfb8 <Get_Int_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成整型
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Get_Int_Number(uint8_t *s)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	int32_t rev;
	i=GetComma(1, s);
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	f000 f9fa 	bl	800c3bc <GetComma>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800bfcc:	7ffb      	ldrb	r3, [r7, #31]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800bfd2:	7ffa      	ldrb	r2, [r7, #31]
 800bfd4:	f107 030c 	add.w	r3, r7, #12
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fa48 	bl	800c470 <strncpy>
	buf[i] = 0;
 800bfe0:	7ffb      	ldrb	r3, [r7, #31]
 800bfe2:	f107 0220 	add.w	r2, r7, #32
 800bfe6:	4413      	add	r3, r2
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Int(buf);
 800bfee:	f107 030c 	add.w	r3, r7, #12
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff ff84 	bl	800bf00 <Str_To_Int>
 800bff8:	61b8      	str	r0, [r7, #24]
	return rev;	
 800bffa:	69bb      	ldr	r3, [r7, #24]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <Str_To_Float>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Str_To_Float(uint8_t *buf)
{
 800c004:	b480      	push	{r7}
 800c006:	b089      	sub	sp, #36	; 0x24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
	float rev = 0;
 800c00c:	f04f 0300 	mov.w	r3, #0
 800c010:	61fb      	str	r3, [r7, #28]
	float dat;
	int32_t integer = 1;
 800c012:	2301      	movs	r3, #1
 800c014:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800c01a:	e082      	b.n	800c122 <Str_To_Float+0x11e>
	{
		switch(*str)
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	3b2e      	subs	r3, #46	; 0x2e
 800c022:	2b0b      	cmp	r3, #11
 800c024:	d840      	bhi.n	800c0a8 <Str_To_Float+0xa4>
 800c026:	a201      	add	r2, pc, #4	; (adr r2, 800c02c <Str_To_Float+0x28>)
 800c028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02c:	0800c0a3 	.word	0x0800c0a3
 800c030:	0800c0a9 	.word	0x0800c0a9
 800c034:	0800c05d 	.word	0x0800c05d
 800c038:	0800c065 	.word	0x0800c065
 800c03c:	0800c06d 	.word	0x0800c06d
 800c040:	0800c075 	.word	0x0800c075
 800c044:	0800c07b 	.word	0x0800c07b
 800c048:	0800c083 	.word	0x0800c083
 800c04c:	0800c089 	.word	0x0800c089
 800c050:	0800c08f 	.word	0x0800c08f
 800c054:	0800c095 	.word	0x0800c095
 800c058:	0800c09d 	.word	0x0800c09d
		{
			case '0':
				dat = 0;
 800c05c:	f04f 0300 	mov.w	r3, #0
 800c060:	61bb      	str	r3, [r7, #24]
				break;
 800c062:	e021      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '1':
				dat = 1;
 800c064:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c068:	61bb      	str	r3, [r7, #24]
				break;
 800c06a:	e01d      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '2':
				dat = 2;
 800c06c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c070:	61bb      	str	r3, [r7, #24]
				break;		
 800c072:	e019      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '3':
				dat = 3;
 800c074:	4b32      	ldr	r3, [pc, #200]	; (800c140 <Str_To_Float+0x13c>)
 800c076:	61bb      	str	r3, [r7, #24]
				break;
 800c078:	e016      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '4':
				dat = 4;
 800c07a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800c07e:	61bb      	str	r3, [r7, #24]
				break;
 800c080:	e012      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '5':
				dat = 5;
 800c082:	4b30      	ldr	r3, [pc, #192]	; (800c144 <Str_To_Float+0x140>)
 800c084:	61bb      	str	r3, [r7, #24]
				break;
 800c086:	e00f      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '6':
				dat = 6;
 800c088:	4b2f      	ldr	r3, [pc, #188]	; (800c148 <Str_To_Float+0x144>)
 800c08a:	61bb      	str	r3, [r7, #24]
				break;
 800c08c:	e00c      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '7':
				dat = 7;
 800c08e:	4b2f      	ldr	r3, [pc, #188]	; (800c14c <Str_To_Float+0x148>)
 800c090:	61bb      	str	r3, [r7, #24]
				break;
 800c092:	e009      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '8':
				dat = 8;
 800c094:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800c098:	61bb      	str	r3, [r7, #24]
				break;
 800c09a:	e005      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '9':
				dat = 9;
 800c09c:	4b2c      	ldr	r3, [pc, #176]	; (800c150 <Str_To_Float+0x14c>)
 800c09e:	61bb      	str	r3, [r7, #24]
				break;
 800c0a0:	e002      	b.n	800c0a8 <Str_To_Float+0xa4>
			case '.':
				dat = '.';
 800c0a2:	4b2c      	ldr	r3, [pc, #176]	; (800c154 <Str_To_Float+0x150>)
 800c0a4:	61bb      	str	r3, [r7, #24]
				break;
 800c0a6:	bf00      	nop
		}
		if(dat == '.')
 800c0a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c158 <Str_To_Float+0x154>
 800c0b0:	eef4 7a47 	vcmp.f32	s15, s14
 800c0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b8:	d107      	bne.n	800c0ca <Str_To_Float+0xc6>
		{
			integer = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
			i = 1;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	60fb      	str	r3, [r7, #12]
			str ++;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	613b      	str	r3, [r7, #16]
			continue;
 800c0c8:	e02b      	b.n	800c122 <Str_To_Float+0x11e>
		}
		if( integer == 1 )
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d10c      	bne.n	800c0ea <Str_To_Float+0xe6>
		{
			rev = rev * 10 + dat;
 800c0d0:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c0d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0dc:	ed97 7a06 	vldr	s14, [r7, #24]
 800c0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e4:	edc7 7a07 	vstr	s15, [r7, #28]
 800c0e8:	e018      	b.n	800c11c <Str_To_Float+0x118>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	ee07 3a90 	vmov	s15, r3
 800c0f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0fc:	edd7 6a06 	vldr	s13, [r7, #24]
 800c100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c104:	ed97 7a07 	vldr	s14, [r7, #28]
 800c108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c10c:	edc7 7a07 	vstr	s15, [r7, #28]
			i = i * 10 ;
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	3301      	adds	r3, #1
 800c120:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	f47f af78 	bne.w	800c01c <Str_To_Float+0x18>
	}
	return rev;
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	ee07 3a90 	vmov	s15, r3

}
 800c132:	eeb0 0a67 	vmov.f32	s0, s15
 800c136:	3724      	adds	r7, #36	; 0x24
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	40400000 	.word	0x40400000
 800c144:	40a00000 	.word	0x40a00000
 800c148:	40c00000 	.word	0x40c00000
 800c14c:	40e00000 	.word	0x40e00000
 800c150:	41100000 	.word	0x41100000
 800c154:	42380000 	.word	0x42380000
 800c158:	42380000 	.word	0x42380000

0800c15c <Get_Float_Number>:
// 实现功能： 把给定字符串第一个逗号之前的字符转化成单精度型
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Get_Float_Number(uint8_t *s)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	float rev;
	i=GetComma(1, s);
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	2001      	movs	r0, #1
 800c168:	f000 f928 	bl	800c3bc <GetComma>
 800c16c:	4603      	mov	r3, r0
 800c16e:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800c170:	7ffb      	ldrb	r3, [r7, #31]
 800c172:	3b01      	subs	r3, #1
 800c174:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800c176:	7ffa      	ldrb	r2, [r7, #31]
 800c178:	f107 030c 	add.w	r3, r7, #12
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 f976 	bl	800c470 <strncpy>
	buf[i] = 0;
 800c184:	7ffb      	ldrb	r3, [r7, #31]
 800c186:	f107 0220 	add.w	r2, r7, #32
 800c18a:	4413      	add	r3, r2
 800c18c:	2200      	movs	r2, #0
 800c18e:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Float(buf);
 800c192:	f107 030c 	add.w	r3, r7, #12
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff ff34 	bl	800c004 <Str_To_Float>
 800c19c:	ed87 0a06 	vstr	s0, [r7, #24]
	return rev;	
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	ee07 3a90 	vmov	s15, r3
}
 800c1a6:	eeb0 0a67 	vmov.f32	s0, s15
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <Str_To_Double>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Str_To_Double(uint8_t *buf)
{
 800c1b0:	b490      	push	{r4, r7}
 800c1b2:	b08a      	sub	sp, #40	; 0x28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	double rev = 0;
 800c1b8:	f04f 0300 	mov.w	r3, #0
 800c1bc:	f04f 0400 	mov.w	r4, #0
 800c1c0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dat;
	int32_t integer = 1;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800c1cc:	e0a1      	b.n	800c312 <Str_To_Double+0x162>
	{
		switch(*str)
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	3b2e      	subs	r3, #46	; 0x2e
 800c1d4:	2b0b      	cmp	r3, #11
 800c1d6:	d85f      	bhi.n	800c298 <Str_To_Double+0xe8>
 800c1d8:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <Str_To_Double+0x30>)
 800c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c28d 	.word	0x0800c28d
 800c1e4:	0800c299 	.word	0x0800c299
 800c1e8:	0800c211 	.word	0x0800c211
 800c1ec:	0800c21f 	.word	0x0800c21f
 800c1f0:	0800c22b 	.word	0x0800c22b
 800c1f4:	0800c239 	.word	0x0800c239
 800c1f8:	0800c245 	.word	0x0800c245
 800c1fc:	0800c251 	.word	0x0800c251
 800c200:	0800c25d 	.word	0x0800c25d
 800c204:	0800c269 	.word	0x0800c269
 800c208:	0800c275 	.word	0x0800c275
 800c20c:	0800c281 	.word	0x0800c281
		{
			case '0':
				dat = 0;
 800c210:	f04f 0300 	mov.w	r3, #0
 800c214:	f04f 0400 	mov.w	r4, #0
 800c218:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c21c:	e03c      	b.n	800c298 <Str_To_Double+0xe8>
			case '1':
				dat = 1;
 800c21e:	f04f 0300 	mov.w	r3, #0
 800c222:	4c45      	ldr	r4, [pc, #276]	; (800c338 <Str_To_Double+0x188>)
 800c224:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c228:	e036      	b.n	800c298 <Str_To_Double+0xe8>
			case '2':
				dat = 2;
 800c22a:	f04f 0300 	mov.w	r3, #0
 800c22e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800c232:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;		
 800c236:	e02f      	b.n	800c298 <Str_To_Double+0xe8>
			case '3':
				dat = 3;
 800c238:	f04f 0300 	mov.w	r3, #0
 800c23c:	4c3f      	ldr	r4, [pc, #252]	; (800c33c <Str_To_Double+0x18c>)
 800c23e:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c242:	e029      	b.n	800c298 <Str_To_Double+0xe8>
			case '4':
				dat = 4;
 800c244:	f04f 0300 	mov.w	r3, #0
 800c248:	4c3d      	ldr	r4, [pc, #244]	; (800c340 <Str_To_Double+0x190>)
 800c24a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c24e:	e023      	b.n	800c298 <Str_To_Double+0xe8>
			case '5':
				dat = 5;
 800c250:	f04f 0300 	mov.w	r3, #0
 800c254:	4c3b      	ldr	r4, [pc, #236]	; (800c344 <Str_To_Double+0x194>)
 800c256:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c25a:	e01d      	b.n	800c298 <Str_To_Double+0xe8>
			case '6':
				dat = 6;
 800c25c:	f04f 0300 	mov.w	r3, #0
 800c260:	4c39      	ldr	r4, [pc, #228]	; (800c348 <Str_To_Double+0x198>)
 800c262:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c266:	e017      	b.n	800c298 <Str_To_Double+0xe8>
			case '7':
				dat = 7;
 800c268:	f04f 0300 	mov.w	r3, #0
 800c26c:	4c37      	ldr	r4, [pc, #220]	; (800c34c <Str_To_Double+0x19c>)
 800c26e:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c272:	e011      	b.n	800c298 <Str_To_Double+0xe8>
			case '8':
				dat = 8;
 800c274:	f04f 0300 	mov.w	r3, #0
 800c278:	4c35      	ldr	r4, [pc, #212]	; (800c350 <Str_To_Double+0x1a0>)
 800c27a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c27e:	e00b      	b.n	800c298 <Str_To_Double+0xe8>
			case '9':
				dat = 9;
 800c280:	f04f 0300 	mov.w	r3, #0
 800c284:	4c33      	ldr	r4, [pc, #204]	; (800c354 <Str_To_Double+0x1a4>)
 800c286:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c28a:	e005      	b.n	800c298 <Str_To_Double+0xe8>
			case '.':
				dat = '.';
 800c28c:	f04f 0300 	mov.w	r3, #0
 800c290:	4c31      	ldr	r4, [pc, #196]	; (800c358 <Str_To_Double+0x1a8>)
 800c292:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c296:	bf00      	nop
		}
		if(dat == '.')
 800c298:	ed97 7b06 	vldr	d7, [r7, #24]
 800c29c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800c330 <Str_To_Double+0x180>
 800c2a0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a8:	d107      	bne.n	800c2ba <Str_To_Double+0x10a>
		{
			integer = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	617b      	str	r3, [r7, #20]
			i = 1;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	60fb      	str	r3, [r7, #12]
			str ++;
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	613b      	str	r3, [r7, #16]
			continue;
 800c2b8:	e02b      	b.n	800c312 <Str_To_Double+0x162>
		}
		if( integer == 1 )
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d10c      	bne.n	800c2da <Str_To_Double+0x12a>
		{
			rev = rev * 10 + dat;
 800c2c0:	ed97 7b08 	vldr	d7, [r7, #32]
 800c2c4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c2c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2cc:	ed97 6b06 	vldr	d6, [r7, #24]
 800c2d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c2d4:	ed87 7b08 	vstr	d7, [r7, #32]
 800c2d8:	e018      	b.n	800c30c <Str_To_Double+0x15c>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	ee07 3a90 	vmov	s15, r3
 800c2e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c2ec:	ed97 5b06 	vldr	d5, [r7, #24]
 800c2f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c2f4:	ed97 6b08 	vldr	d6, [r7, #32]
 800c2f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c2fc:	ed87 7b08 	vstr	d7, [r7, #32]
			i = i * 10 ;
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	4613      	mov	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4413      	add	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	3301      	adds	r3, #1
 800c310:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	f47f af59 	bne.w	800c1ce <Str_To_Double+0x1e>
	}
	return rev;
 800c31c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c320:	ec44 3b17 	vmov	d7, r3, r4
}
 800c324:	eeb0 0b47 	vmov.f64	d0, d7
 800c328:	3728      	adds	r7, #40	; 0x28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bc90      	pop	{r4, r7}
 800c32e:	4770      	bx	lr
 800c330:	00000000 	.word	0x00000000
 800c334:	40470000 	.word	0x40470000
 800c338:	3ff00000 	.word	0x3ff00000
 800c33c:	40080000 	.word	0x40080000
 800c340:	40100000 	.word	0x40100000
 800c344:	40140000 	.word	0x40140000
 800c348:	40180000 	.word	0x40180000
 800c34c:	401c0000 	.word	0x401c0000
 800c350:	40200000 	.word	0x40200000
 800c354:	40220000 	.word	0x40220000
 800c358:	40470000 	.word	0x40470000

0800c35c <Get_Double_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成双精度型
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Get_Double_Number(uint8_t *s)
{
 800c35c:	b590      	push	{r4, r7, lr}
 800c35e:	b08b      	sub	sp, #44	; 0x2c
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	double rev;
	i=GetComma(1, s);
 800c364:	6879      	ldr	r1, [r7, #4]
 800c366:	2001      	movs	r0, #1
 800c368:	f000 f828 	bl	800c3bc <GetComma>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	i = i - 1;
 800c372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c376:	3b01      	subs	r3, #1
 800c378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	strncpy(buf, s, i);
 800c37c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c380:	f107 030c 	add.w	r3, r7, #12
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f872 	bl	800c470 <strncpy>
	buf[i] = 0;
 800c38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c390:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c394:	4413      	add	r3, r2
 800c396:	2200      	movs	r2, #0
 800c398:	f803 2c1c 	strb.w	r2, [r3, #-28]
	rev=Str_To_Double(buf);
 800c39c:	f107 030c 	add.w	r3, r7, #12
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff ff05 	bl	800c1b0 <Str_To_Double>
 800c3a6:	ed87 0b06 	vstr	d0, [r7, #24]
	return rev;	
 800c3aa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c3ae:	ec44 3b17 	vmov	d7, r3, r4
}
 800c3b2:	eeb0 0b47 	vmov.f64	d0, d7
 800c3b6:	372c      	adds	r7, #44	; 0x2c
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd90      	pop	{r4, r7, pc}

0800c3bc <GetComma>:
// 实现功能：计算字符串中各个逗号的位置
// 参    数：查找的逗号是第几个的个数，需要查找的字符串
// 返 回 值：0
//====================================================================//
uint8_t GetComma(uint8_t num,uint8_t *str)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	6039      	str	r1, [r7, #0]
 800c3c6:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73bb      	strb	r3, [r7, #14]
	int32_t len=strlen(str);
 800c3cc:	6838      	ldr	r0, [r7, #0]
 800c3ce:	f7f3 ff83 	bl	80002d8 <strlen>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	60bb      	str	r3, [r7, #8]

	for(i = 0;i < len;i ++)
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]
 800c3da:	e013      	b.n	800c404 <GetComma+0x48>
	{
		if(str[i] == ',')
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b2c      	cmp	r3, #44	; 0x2c
 800c3e6:	d102      	bne.n	800c3ee <GetComma+0x32>
			j++;
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	73bb      	strb	r3, [r7, #14]
		if(j == num)
 800c3ee:	7bba      	ldrb	r2, [r7, #14]
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d103      	bne.n	800c3fe <GetComma+0x42>
			return i + 1;	
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	e007      	b.n	800c40e <GetComma+0x52>
	for(i = 0;i < len;i ++)
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	3301      	adds	r3, #1
 800c402:	73fb      	strb	r3, [r7, #15]
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	429a      	cmp	r2, r3
 800c40a:	dce7      	bgt.n	800c3dc <GetComma+0x20>
	}

	return 0;	
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <__libc_init_array>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	4e0d      	ldr	r6, [pc, #52]	; (800c450 <__libc_init_array+0x38>)
 800c41c:	4c0d      	ldr	r4, [pc, #52]	; (800c454 <__libc_init_array+0x3c>)
 800c41e:	1ba4      	subs	r4, r4, r6
 800c420:	10a4      	asrs	r4, r4, #2
 800c422:	2500      	movs	r5, #0
 800c424:	42a5      	cmp	r5, r4
 800c426:	d109      	bne.n	800c43c <__libc_init_array+0x24>
 800c428:	4e0b      	ldr	r6, [pc, #44]	; (800c458 <__libc_init_array+0x40>)
 800c42a:	4c0c      	ldr	r4, [pc, #48]	; (800c45c <__libc_init_array+0x44>)
 800c42c:	f000 f836 	bl	800c49c <_init>
 800c430:	1ba4      	subs	r4, r4, r6
 800c432:	10a4      	asrs	r4, r4, #2
 800c434:	2500      	movs	r5, #0
 800c436:	42a5      	cmp	r5, r4
 800c438:	d105      	bne.n	800c446 <__libc_init_array+0x2e>
 800c43a:	bd70      	pop	{r4, r5, r6, pc}
 800c43c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c440:	4798      	blx	r3
 800c442:	3501      	adds	r5, #1
 800c444:	e7ee      	b.n	800c424 <__libc_init_array+0xc>
 800c446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c44a:	4798      	blx	r3
 800c44c:	3501      	adds	r5, #1
 800c44e:	e7f2      	b.n	800c436 <__libc_init_array+0x1e>
 800c450:	0800c4fc 	.word	0x0800c4fc
 800c454:	0800c4fc 	.word	0x0800c4fc
 800c458:	0800c4fc 	.word	0x0800c4fc
 800c45c:	0800c500 	.word	0x0800c500

0800c460 <memset>:
 800c460:	4402      	add	r2, r0
 800c462:	4603      	mov	r3, r0
 800c464:	4293      	cmp	r3, r2
 800c466:	d100      	bne.n	800c46a <memset+0xa>
 800c468:	4770      	bx	lr
 800c46a:	f803 1b01 	strb.w	r1, [r3], #1
 800c46e:	e7f9      	b.n	800c464 <memset+0x4>

0800c470 <strncpy>:
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	3901      	subs	r1, #1
 800c474:	4604      	mov	r4, r0
 800c476:	b902      	cbnz	r2, 800c47a <strncpy+0xa>
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	4623      	mov	r3, r4
 800c47c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c480:	f803 5b01 	strb.w	r5, [r3], #1
 800c484:	1e56      	subs	r6, r2, #1
 800c486:	b92d      	cbnz	r5, 800c494 <strncpy+0x24>
 800c488:	4414      	add	r4, r2
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	d0f4      	beq.n	800c478 <strncpy+0x8>
 800c48e:	f803 5b01 	strb.w	r5, [r3], #1
 800c492:	e7fa      	b.n	800c48a <strncpy+0x1a>
 800c494:	461c      	mov	r4, r3
 800c496:	4632      	mov	r2, r6
 800c498:	e7ed      	b.n	800c476 <strncpy+0x6>
	...

0800c49c <_init>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr

0800c4a8 <_fini>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr
