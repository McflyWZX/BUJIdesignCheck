
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c53c  0800c53c  0001c53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c584  0800c584  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c584  0800c584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  24000000  0800c58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a504  24000038  0800c5c0  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400a53c  0800c5c0  0002a53c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030fa5  00000000  00000000  00020062  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d4c  00000000  00000000  00051007  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001810  00000000  00000000  00055d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  00057568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a523  00000000  00000000  00058b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a5cd  00000000  00000000  000930a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00169250  00000000  00000000  000ad670  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002168c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000644c  00000000  00000000  0021693c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000038 	.word	0x24000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c524 	.word	0x0800c524

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400003c 	.word	0x2400003c
 80002d4:	0800c524 	.word	0x0800c524

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_DCMI_Init+0x60>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_DCMI_Init+0x64>)
 80005f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_DCMI_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_DCMI_Init+0x60>)
 80005fa:	2220      	movs	r2, #32
 80005fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_DCMI_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_DCMI_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_DCMI_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DCMI_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DCMI_Init+0x60>)
 8000618:	2208      	movs	r2, #8
 800061a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_DCMI_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DCMI_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_DCMI_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_DCMI_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_DCMI_Init+0x60>)
 8000636:	f001 fa8f 	bl	8001b58 <HAL_DCMI_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 fc3e 	bl	8000ec0 <Error_Handler>
  }

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2400a0d4 	.word	0x2400a0d4
 800064c:	48020000 	.word	0x48020000

08000650 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a7a      	ldr	r2, [pc, #488]	; (8000858 <HAL_DCMI_MspInit+0x208>)
 800066e:	4293      	cmp	r3, r2
 8000670:	f040 80ed 	bne.w	800084e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000674:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	4a78      	ldr	r2, [pc, #480]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000684:	4b75      	ldr	r3, [pc, #468]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	623b      	str	r3, [r7, #32]
 8000690:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000692:	4b72      	ldr	r3, [pc, #456]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	4a70      	ldr	r2, [pc, #448]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a2:	4b6e      	ldr	r3, [pc, #440]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	4a69      	ldr	r2, [pc, #420]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c0:	4b66      	ldr	r3, [pc, #408]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a61      	ldr	r2, [pc, #388]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b5b      	ldr	r3, [pc, #364]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a5a      	ldr	r2, [pc, #360]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b57      	ldr	r3, [pc, #348]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a52      	ldr	r2, [pc, #328]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_DCMI_MspInit+0x20c>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000728:	2370      	movs	r3, #112	; 0x70
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000738:	230d      	movs	r3, #13
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4847      	ldr	r0, [pc, #284]	; (8000860 <HAL_DCMI_MspInit+0x210>)
 8000744:	f005 f836 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000748:	2350      	movs	r3, #80	; 0x50
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000758:	230d      	movs	r3, #13
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	4619      	mov	r1, r3
 8000762:	4840      	ldr	r0, [pc, #256]	; (8000864 <HAL_DCMI_MspInit+0x214>)
 8000764:	f005 f826 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000768:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800077a:	230d      	movs	r3, #13
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	4838      	ldr	r0, [pc, #224]	; (8000868 <HAL_DCMI_MspInit+0x218>)
 8000786:	f005 f815 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800078a:	2308      	movs	r3, #8
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800079a:	230d      	movs	r3, #13
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	4831      	ldr	r0, [pc, #196]	; (800086c <HAL_DCMI_MspInit+0x21c>)
 80007a6:	f005 f805 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007ba:	230d      	movs	r3, #13
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <HAL_DCMI_MspInit+0x220>)
 80007c6:	f004 fff5 	bl	80057b4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007cc:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <HAL_DCMI_MspInit+0x228>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d2:	224b      	movs	r2, #75	; 0x4b
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 80007fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000800:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000804:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000808:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800080c:	2204      	movs	r2, #4
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000812:	2203      	movs	r2, #3
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000824:	f001 fcdc 	bl	80021e0 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800082e:	f000 fb47 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 8000836:	649a      	str	r2, [r3, #72]	; 0x48
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_DCMI_MspInit+0x224>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	204e      	movs	r0, #78	; 0x4e
 8000844:	f001 f953 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000848:	204e      	movs	r0, #78	; 0x4e
 800084a:	f001 f96a 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800084e:	bf00      	nop
 8000850:	3738      	adds	r7, #56	; 0x38
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	48020000 	.word	0x48020000
 800085c:	58024400 	.word	0x58024400
 8000860:	58021000 	.word	0x58021000
 8000864:	58020000 	.word	0x58020000
 8000868:	58020800 	.word	0x58020800
 800086c:	58020c00 	.word	0x58020c00
 8000870:	58020400 	.word	0x58020400
 8000874:	2400a05c 	.word	0x2400a05c
 8000878:	40020010 	.word	0x40020010

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DMA_Init+0x4c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MX_DMA_Init+0x4c>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_DMA_Init+0x4c>)
 8000894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	200b      	movs	r0, #11
 80008a6:	f001 f922 	bl	8001aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008aa:	200b      	movs	r0, #11
 80008ac:	f001 f939 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	200c      	movs	r0, #12
 80008b6:	f001 f91a 	bl	8001aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008ba:	200c      	movs	r0, #12
 80008bc:	f001 f931 	bl	8001b22 <HAL_NVIC_EnableIRQ>

}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400

080008cc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a6c      	ldr	r2, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	4a65      	ldr	r2, [pc, #404]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a5d      	ldr	r2, [pc, #372]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4a56      	ldr	r2, [pc, #344]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1d0>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2104      	movs	r1, #4
 800099a:	4841      	ldr	r0, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 800099c:	f005 f8ba 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <MX_GPIO_Init+0x1d8>)
 80009a6:	f005 f8b5 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2103      	movs	r1, #3
 80009ae:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 80009b0:	f005 f8b0 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009ba:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 80009bc:	f005 f8aa 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4839      	ldr	r0, [pc, #228]	; (8000aac <MX_GPIO_Init+0x1e0>)
 80009c6:	f005 f8a5 	bl	8005b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009ca:	2304      	movs	r3, #4
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 80009e2:	f004 fee7 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0x1d8>)
 80009fe:	f004 fed9 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 8000a02:	f247 0303 	movw	r3, #28675	; 0x7003
 8000a06:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4823      	ldr	r0, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a1c:	f004 feca 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a34:	f004 febe 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000a52:	f004 feaf 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0x1d4>)
 8000a74:	f004 fe9e 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_GPIO_Init+0x1e0>)
 8000a90:	f004 fe90 	bl	80057b4 <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	58020800 	.word	0x58020800
 8000aa8:	58020400 	.word	0x58020400
 8000aac:	58020c00 	.word	0x58020c00

08000ab0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_I2C1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x7c>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000aec:	f005 f82c 	bl	8005b48 <HAL_I2C_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000af6:	f000 f9e3 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000afe:	f005 fb95 	bl	800622c <HAL_I2CEx_ConfigAnalogFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f000 f9da 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000b10:	f005 fbd7 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f9d1 	bl	8000ec0 <Error_Handler>
  }

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2400a124 	.word	0x2400a124
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	009034b6 	.word	0x009034b6

08000b30 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_I2C2_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x009034B6;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_I2C2_Init+0x7c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b6c:	f004 ffec 	bl	8005b48 <HAL_I2C_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b76:	f000 f9a3 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b7e:	f005 fb55 	bl	800622c <HAL_I2CEx_ConfigAnalogFilter>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f99a 	bl	8000ec0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b90:	f005 fb97 	bl	80062c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 f991 	bl	8000ec0 <Error_Handler>
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2400a170 	.word	0x2400a170
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	009034b6 	.word	0x009034b6

08000bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <HAL_I2C_MspInit+0xf4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12f      	bne.n	8000c32 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bf0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4827      	ldr	r0, [pc, #156]	; (8000cac <HAL_I2C_MspInit+0xfc>)
 8000c0e:	f004 fdd1 	bl	80057b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c30:	e033      	b.n	8000c9a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_I2C_MspInit+0x100>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d12e      	bne.n	8000c9a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <HAL_I2C_MspInit+0xfc>)
 8000c78:	f004 fd9c 	bl	80057b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_I2C_MspInit+0xf8>)
 8000c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	40005800 	.word	0x40005800

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fda0 	bl	80017fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f83a 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fe04 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f7ff fdda 	bl	800087c <MX_DMA_Init>
  MX_DCMI_Init();
 8000cc8:	f7ff fc8e 	bl	80005e8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000ccc:	f7ff fef0 	bl	8000ab0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cd0:	f7ff ff2e 	bl	8000b30 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cd4:	f000 f8fc 	bl	8000ed0 <MX_SPI1_Init>
  MX_UART4_Init();
 8000cd8:	f000 fc8e 	bl	80015f8 <MX_UART4_Init>
  MX_TIM4_Init();
 8000cdc:	f000 fab2 	bl	8001244 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ce0:	f000 fb3e 	bl	8001360 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init(&huart4, NULL);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <main+0x6c>)
 8000ce8:	f00a fd2e 	bl	800b748 <GPS_Init>
  jy61p.Init(&hi2c2);
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <main+0x70>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <main+0x74>)
 8000cf2:	4798      	blx	r3
  testGPS = get_GPS_INFO();
 8000cf4:	f00a fd48 	bl	800b788 <get_GPS_INFO>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <main+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    testAngle = jy61p.getAtti();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <main+0x70>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	4798      	blx	r3
 8000d04:	eef0 6a40 	vmov.f32	s13, s0
 8000d08:	eeb0 7a60 	vmov.f32	s14, s1
 8000d0c:	eef0 7a41 	vmov.f32	s15, s2
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <main+0x7c>)
 8000d12:	edc3 6a00 	vstr	s13, [r3]
 8000d16:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d1a:	edc3 7a02 	vstr	s15, [r3, #8]
 8000d1e:	e7ee      	b.n	8000cfe <main+0x4a>
 8000d20:	2400a364 	.word	0x2400a364
 8000d24:	2400001c 	.word	0x2400001c
 8000d28:	2400a170 	.word	0x2400a170
 8000d2c:	2400a1bc 	.word	0x2400a1bc
 8000d30:	2400a1c0 	.word	0x2400a1c0

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0cc      	sub	sp, #304	; 0x130
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d3e:	224c      	movs	r2, #76	; 0x4c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00b fbd0 	bl	800c4e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f00b fbc9 	bl	800c4e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	23bc      	movs	r3, #188	; 0xbc
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	f00b fbc1 	bl	800c4e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f005 faf8 	bl	800635c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <SystemClock_Config+0x184>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <SystemClock_Config+0x184>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d7e:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <SystemClock_Config+0x184>)
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	f003 0201 	and.w	r2, r3, #1
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <SystemClock_Config+0x188>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <SystemClock_Config+0x188>)
 8000d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <SystemClock_Config+0x188>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da6:	bf00      	nop
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <SystemClock_Config+0x188>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db4:	d1f8      	bne.n	8000da8 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000de2:	23c8      	movs	r3, #200	; 0xc8
 8000de4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 fadd 	bl	80063d0 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e1c:	f000 f850 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	233f      	movs	r3, #63	; 0x3f
 8000e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e32:	2308      	movs	r3, #8
 8000e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e38:	2340      	movs	r3, #64	; 0x40
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e52:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 fec9 	bl	8006bf0 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e64:	f000 f82c 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e70:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	2200      	movs	r2, #0
 8000e80:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4618      	mov	r0, r3
 8000e92:	f006 fa9b 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e9c:	f000 f810 	bl	8000ec0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000ea0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f006 f858 	bl	8006f5c <HAL_RCC_MCOConfig>
}
 8000eac:	bf00      	nop
 8000eae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	58000400 	.word	0x58000400
 8000ebc:	58024800 	.word	0x58024800

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000ed6:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <MX_SPI1_Init+0xa8>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000edc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000efc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_SPI1_Init+0xa4>)
 8000f62:	f007 fd33 	bl	80089cc <HAL_SPI_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f6c:	f7ff ffa8 	bl	8000ec0 <Error_Handler>
  }

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400a1cc 	.word	0x2400a1cc
 8000f78:	40013000 	.word	0x40013000

08000f7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <HAL_SPI_MspInit+0xc8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d14d      	bne.n	800103a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fa4:	4a28      	ldr	r2, [pc, #160]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000faa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_SPI_MspInit+0xcc>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000ff8:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <HAL_SPI_MspInit+0xd0>)
 8001016:	f004 fbcd 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800101a:	2310      	movs	r3, #16
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_SPI_MspInit+0xd4>)
 8001036:	f004 fbbd 	bl	80057b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40013000 	.word	0x40013000
 8001048:	58024400 	.word	0x58024400
 800104c:	58020000 	.word	0x58020000
 8001050:	58020400 	.word	0x58020400

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_MspInit+0x30>)
 800105c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001060:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x30>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x30>)
 800106c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	58024400 	.word	0x58024400

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 fc04 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Stream0_IRQHandler+0x10>)
 80010e2:	f002 fba5 	bl	8003830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2400a05c 	.word	0x2400a05c

080010f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Stream1_IRQHandler+0x10>)
 80010f6:	f002 fb9b 	bl	8003830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2400a2ec 	.word	0x2400a2ec

08001104 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <UART4_IRQHandler+0x10>)
 800110a:	f008 ff2d 	bl	8009f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2400a364 	.word	0x2400a364

08001118 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DCMI_IRQHandler+0x10>)
 800111e:	f000 ff0f 	bl	8001f40 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2400a0d4 	.word	0x2400a0d4

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <SystemInit+0xec>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a38      	ldr	r2, [pc, #224]	; (8001218 <SystemInit+0xec>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <SystemInit+0xf0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	2b06      	cmp	r3, #6
 800114a:	d807      	bhi.n	800115c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <SystemInit+0xf0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 030f 	bic.w	r3, r3, #15
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <SystemInit+0xf0>)
 8001156:	f043 0307 	orr.w	r3, r3, #7
 800115a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <SystemInit+0xf4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <SystemInit+0xf4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <SystemInit+0xf4>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <SystemInit+0xf4>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	492b      	ldr	r1, [pc, #172]	; (8001220 <SystemInit+0xf4>)
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <SystemInit+0xf8>)
 8001176:	4013      	ands	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <SystemInit+0xf0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	2b07      	cmp	r3, #7
 8001184:	d907      	bls.n	8001196 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <SystemInit+0xf0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 030f 	bic.w	r3, r3, #15
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <SystemInit+0xf0>)
 8001190:	f043 0307 	orr.w	r3, r3, #7
 8001194:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <SystemInit+0xf4>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <SystemInit+0xf4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <SystemInit+0xf4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <SystemInit+0xf4>)
 80011aa:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <SystemInit+0xfc>)
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <SystemInit+0xf4>)
 80011b0:	4a1e      	ldr	r2, [pc, #120]	; (800122c <SystemInit+0x100>)
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <SystemInit+0xf4>)
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <SystemInit+0x104>)
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <SystemInit+0xf4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <SystemInit+0xf4>)
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <SystemInit+0x104>)
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <SystemInit+0xf4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <SystemInit+0xf4>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <SystemInit+0x104>)
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <SystemInit+0xf4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <SystemInit+0xf4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a10      	ldr	r2, [pc, #64]	; (8001220 <SystemInit+0xf4>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <SystemInit+0xf4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <SystemInit+0x108>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <SystemInit+0x10c>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f6:	d202      	bcs.n	80011fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <SystemInit+0x110>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <SystemInit+0x114>)
 8001200:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001204:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SystemInit+0xec>)
 8001208:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800120c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	52002000 	.word	0x52002000
 8001220:	58024400 	.word	0x58024400
 8001224:	eaf6ed7f 	.word	0xeaf6ed7f
 8001228:	02020200 	.word	0x02020200
 800122c:	01ff0000 	.word	0x01ff0000
 8001230:	01010280 	.word	0x01010280
 8001234:	5c001000 	.word	0x5c001000
 8001238:	ffff0000 	.word	0xffff0000
 800123c:	51008108 	.word	0x51008108
 8001240:	52004000 	.word	0x52004000

08001244 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <MX_TIM4_Init+0x114>)
 8001278:	4a38      	ldr	r2, [pc, #224]	; (800135c <MX_TIM4_Init+0x118>)
 800127a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800127c:	4b36      	ldr	r3, [pc, #216]	; (8001358 <MX_TIM4_Init+0x114>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <MX_TIM4_Init+0x114>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <MX_TIM4_Init+0x114>)
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <MX_TIM4_Init+0x114>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <MX_TIM4_Init+0x114>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800129c:	482e      	ldr	r0, [pc, #184]	; (8001358 <MX_TIM4_Init+0x114>)
 800129e:	f007 fca8 	bl	8008bf2 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80012a8:	f7ff fe0a 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4827      	ldr	r0, [pc, #156]	; (8001358 <MX_TIM4_Init+0x114>)
 80012ba:	f007 ff39 	bl	8009130 <HAL_TIM_ConfigClockSource>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012c4:	f7ff fdfc 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012c8:	4823      	ldr	r0, [pc, #140]	; (8001358 <MX_TIM4_Init+0x114>)
 80012ca:	f007 fd4a 	bl	8008d62 <HAL_TIM_PWM_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012d4:	f7ff fdf4 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	481c      	ldr	r0, [pc, #112]	; (8001358 <MX_TIM4_Init+0x114>)
 80012e8:	f008 fbf8 	bl	8009adc <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012f2:	f7ff fde5 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_TIM4_Init+0x114>)
 800130e:	f007 fdff 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001318:	f7ff fdd2 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM4_Init+0x114>)
 8001324:	f007 fdf4 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800132e:	f7ff fdc7 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	2208      	movs	r2, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM4_Init+0x114>)
 800133a:	f007 fde9 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001344:	f7ff fdbc 	bl	8000ec0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM4_Init+0x114>)
 800134a:	f000 f8cf 	bl	80014ec <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2400a254 	.word	0x2400a254
 800135c:	40000800 	.word	0x40000800

08001360 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <MX_TIM5_Init+0x110>)
 8001394:	4a37      	ldr	r2, [pc, #220]	; (8001474 <MX_TIM5_Init+0x114>)
 8001396:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <MX_TIM5_Init+0x110>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <MX_TIM5_Init+0x110>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <MX_TIM5_Init+0x110>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295
 80013aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <MX_TIM5_Init+0x110>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_TIM5_Init+0x110>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013b8:	482d      	ldr	r0, [pc, #180]	; (8001470 <MX_TIM5_Init+0x110>)
 80013ba:	f007 fc1a 	bl	8008bf2 <HAL_TIM_Base_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013c4:	f7ff fd7c 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4826      	ldr	r0, [pc, #152]	; (8001470 <MX_TIM5_Init+0x110>)
 80013d6:	f007 feab 	bl	8009130 <HAL_TIM_ConfigClockSource>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013e0:	f7ff fd6e 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80013e4:	4822      	ldr	r0, [pc, #136]	; (8001470 <MX_TIM5_Init+0x110>)
 80013e6:	f007 fc5b 	bl	8008ca0 <HAL_TIM_OC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013f0:	f7ff fd66 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013f4:	481e      	ldr	r0, [pc, #120]	; (8001470 <MX_TIM5_Init+0x110>)
 80013f6:	f007 fcb4 	bl	8008d62 <HAL_TIM_PWM_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM5_Init+0xa4>
  {
    Error_Handler();
 8001400:	f7ff fd5e 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <MX_TIM5_Init+0x110>)
 8001414:	f008 fb62 	bl	8009adc <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 800141e:	f7ff fd4f 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	2208      	movs	r2, #8
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_TIM5_Init+0x110>)
 800143a:	f007 fcf3 	bl	8008e24 <HAL_TIM_OC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM5_Init+0xe8>
  {
    Error_Handler();
 8001444:	f7ff fd3c 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	220c      	movs	r2, #12
 8001450:	4619      	mov	r1, r3
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <MX_TIM5_Init+0x110>)
 8001454:	f007 fd5c 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 800145e:	f7ff fd2f 	bl	8000ec0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <MX_TIM5_Init+0x110>)
 8001464:	f000 f842 	bl	80014ec <HAL_TIM_MspPostInit>

}
 8001468:	bf00      	nop
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2400a2a0 	.word	0x2400a2a0
 8001474:	40000c00 	.word	0x40000c00

08001478 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_TIM_Base_MspInit+0x68>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10f      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_TIM_Base_MspInit+0x6c>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_TIM_Base_MspInit+0x6c>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_TIM_Base_MspInit+0x6c>)
 800149c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80014a8:	e013      	b.n	80014d2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM5)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_TIM_Base_MspInit+0x70>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d10e      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_TIM_Base_MspInit+0x6c>)
 80014b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_TIM_Base_MspInit+0x6c>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_TIM_Base_MspInit+0x6c>)
 80014c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40000800 	.word	0x40000800
 80014e4:	58024400 	.word	0x58024400
 80014e8:	40000c00 	.word	0x40000c00

080014ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a35      	ldr	r2, [pc, #212]	; (80015e0 <HAL_TIM_MspPostInit+0xf4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d140      	bne.n	8001590 <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800154a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800155c:	2302      	movs	r3, #2
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <HAL_TIM_MspPostInit+0xfc>)
 8001568:	f004 f924 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800156c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800157e:	2302      	movs	r3, #2
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4818      	ldr	r0, [pc, #96]	; (80015ec <HAL_TIM_MspPostInit+0x100>)
 800158a:	f004 f913 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800158e:	e023      	b.n	80015d8 <HAL_TIM_MspPostInit+0xec>
  else if(timHandle->Instance==TIM5)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_TIM_MspPostInit+0x104>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d11e      	bne.n	80015d8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_TIM_MspPostInit+0xf8>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b8:	2308      	movs	r3, #8
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015c8:	2302      	movs	r3, #2
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4808      	ldr	r0, [pc, #32]	; (80015f4 <HAL_TIM_MspPostInit+0x108>)
 80015d4:	f004 f8ee 	bl	80057b4 <HAL_GPIO_Init>
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40000800 	.word	0x40000800
 80015e4:	58024400 	.word	0x58024400
 80015e8:	58020c00 	.word	0x58020c00
 80015ec:	58020400 	.word	0x58020400
 80015f0:	40000c00 	.word	0x40000c00
 80015f4:	58020000 	.word	0x58020000

080015f8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_UART4_Init+0x90>)
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <MX_UART4_Init+0x94>)
 8001600:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_UART4_Init+0x90>)
 8001604:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001608:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_UART4_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_UART4_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_UART4_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_UART4_Init+0x90>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_UART4_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_UART4_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_UART4_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_UART4_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_UART4_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_UART4_Init+0x90>)
 8001642:	f008 fad3 	bl	8009bec <HAL_UART_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800164c:	f7ff fc38 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_UART4_Init+0x90>)
 8001654:	f009 ff93 	bl	800b57e <HAL_UARTEx_SetTxFifoThreshold>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800165e:	f7ff fc2f 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <MX_UART4_Init+0x90>)
 8001666:	f009 ffc8 	bl	800b5fa <HAL_UARTEx_SetRxFifoThreshold>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001670:	f7ff fc26 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_UART4_Init+0x90>)
 8001676:	f009 ff49 	bl	800b50c <HAL_UARTEx_DisableFifoMode>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001680:	f7ff fc1e 	bl	8000ec0 <Error_Handler>
  }

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2400a364 	.word	0x2400a364
 800168c:	40004c00 	.word	0x40004c00

08001690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a39      	ldr	r2, [pc, #228]	; (8001794 <HAL_UART_MspInit+0x104>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d16c      	bne.n	800178c <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_UART_MspInit+0x108>)
 80016b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b8:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_UART_MspInit+0x108>)
 80016ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_UART_MspInit+0x108>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_UART_MspInit+0x108>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a30      	ldr	r2, [pc, #192]	; (8001798 <HAL_UART_MspInit+0x108>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_UART_MspInit+0x108>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ee:	2303      	movs	r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016fe:	2308      	movs	r3, #8
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4824      	ldr	r0, [pc, #144]	; (800179c <HAL_UART_MspInit+0x10c>)
 800170a:	f004 f853 	bl	80057b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001710:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <HAL_UART_MspInit+0x114>)
 8001712:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001716:	223f      	movs	r2, #63	; 0x3f
 8001718:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_UART_MspInit+0x110>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_UART_MspInit+0x110>)
 800173c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001740:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_MspInit+0x110>)
 800174a:	2204      	movs	r2, #4
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001750:	2203      	movs	r2, #3
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_UART_MspInit+0x110>)
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001762:	f000 fd3d 	bl	80021e0 <HAL_DMA_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 800176c:	f7ff fba8 	bl	8000ec0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001774:	679a      	str	r2, [r3, #120]	; 0x78
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_UART_MspInit+0x110>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2034      	movs	r0, #52	; 0x34
 8001782:	f000 f9b4 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001786:	2034      	movs	r0, #52	; 0x34
 8001788:	f000 f9cb 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40004c00 	.word	0x40004c00
 8001798:	58024400 	.word	0x58024400
 800179c:	58020000 	.word	0x58020000
 80017a0:	2400a2ec 	.word	0x2400a2ec
 80017a4:	40020028 	.word	0x40020028

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ae:	e003      	b.n	80017b8 <LoopCopyDataInit>

080017b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017b6:	3104      	adds	r1, #4

080017b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017c0:	d3f6      	bcc.n	80017b0 <CopyDataInit>
  ldr  r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017c4:	e002      	b.n	80017cc <LoopFillZerobss>

080017c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017c8:	f842 3b04 	str.w	r3, [r2], #4

080017cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017d0:	d3f9      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017d2:	f7ff fcab 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f00a fe63 	bl	800c4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff fa6b 	bl	8000cb4 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80017e4:	0800c58c 	.word	0x0800c58c
  ldr  r0, =_sdata
 80017e8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80017ec:	24000034 	.word	0x24000034
  ldr  r2, =_sbss
 80017f0:	24000038 	.word	0x24000038
  ldr  r3, = _ebss
 80017f4:	2400a53c 	.word	0x2400a53c

080017f8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC3_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001802:	2003      	movs	r0, #3
 8001804:	f000 f968 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001808:	f005 fc12 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 800180c:	4601      	mov	r1, r0
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_Init+0x68>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <HAL_Init+0x6c>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	fa21 f303 	lsr.w	r3, r1, r3
 8001824:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_Init+0x68>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_Init+0x6c>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_Init+0x70>)
 800183e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_Init+0x74>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f814 	bl	8001874 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e002      	b.n	800185c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001856:	f7ff fbfd 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58024400 	.word	0x58024400
 8001868:	0800c54c 	.word	0x0800c54c
 800186c:	24000004 	.word	0x24000004
 8001870:	24000000 	.word	0x24000000

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_InitTick+0x60>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e021      	b.n	80018cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_InitTick+0x64>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_InitTick+0x60>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f94d 	bl	8001b3e <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f917 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x68>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2400000c 	.word	0x2400000c
 80018d8:	24000000 	.word	0x24000000
 80018dc:	24000008 	.word	0x24000008

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2400000c 	.word	0x2400000c
 8001904:	2400a3f0 	.word	0x2400a3f0

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2400a3f0 	.word	0x2400a3f0

08001920 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetREVID+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0c1b      	lsrs	r3, r3, #16
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	5c001000 	.word	0x5c001000

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <__NVIC_SetPriorityGrouping+0x40>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	4313      	orrs	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x40>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00
 800197c:	05fa0000 	.word	0x05fa0000

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff29 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff40 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff90 	bl	8001a2c <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5f 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff33 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa4 	bl	8001a94 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e069      	b.n	8001c3e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7fe fd6a 	bl	8000650 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_DCMI_Init+0xf0>)
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001bb6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001bc2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001bce:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001bda:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001be6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d112      	bne.n	8001c1e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f1b      	ldrb	r3, [r3, #28]
 8001bfc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7f5b      	ldrb	r3, [r3, #29]
 8001c02:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001c04:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7f9b      	ldrb	r3, [r3, #30]
 8001c0a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7fdb      	ldrb	r3, [r3, #31]
 8001c14:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001c1a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001c1c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 021e 	orr.w	r2, r2, #30
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	ffe0f007 	.word	0xffe0f007

08001c4c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_DCMI_Start_DMA+0x1c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e0ab      	b.n	8001dc0 <HAL_DCMI_Start_DMA+0x174>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c86:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0202 	bic.w	r2, r2, #2
 8001c96:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cac:	4a46      	ldr	r2, [pc, #280]	; (8001dc8 <HAL_DCMI_Start_DMA+0x17c>)
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	4a45      	ldr	r2, [pc, #276]	; (8001dcc <HAL_DCMI_Start_DMA+0x180>)
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d219      	bcs.n	8001d14 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3328      	adds	r3, #40	; 0x28
 8001cea:	4619      	mov	r1, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	f000 fdd2 	bl	8002898 <HAL_DMA_Start_IT>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d055      	beq.n	8001da6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e055      	b.n	8001dc0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_DCMI_Start_DMA+0x17c>)
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001d2e:	e009      	b.n	8001d44 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	085a      	lsrs	r2, r3, #1
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	005a      	lsls	r2, r3, #1
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4c:	d2f0      	bcs.n	8001d30 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	1e9a      	subs	r2, r3, #2
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3328      	adds	r3, #40	; 0x28
 8001d76:	4619      	mov	r1, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	f003 f867 	bl	8004e54 <HAL_DMAEx_MultiBufferStart_IT>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00c      	b.n	8001dc0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	08002081 	.word	0x08002081
 8001dcc:	080021a7 	.word	0x080021a7

08001dd0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_DCMI_Stop+0xb8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <HAL_DCMI_Stop+0xbc>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a5b      	lsrs	r3, r3, #9
 8001de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_DCMI_Stop+0x30>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e03f      	b.n	8001e80 <HAL_DCMI_Stop+0xb0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d108      	bne.n	8001e3e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8001e3c:	e006      	b.n	8001e4c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e9      	bne.n	8001e20 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 ff83 	bl	8002d6c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	24000000 	.word	0x24000000
 8001e8c:	10624dd3 	.word	0x10624dd3

08001e90 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_DCMI_Suspend+0xa8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_DCMI_Suspend+0xac>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0a5b      	lsrs	r3, r3, #9
 8001ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_DCMI_Suspend+0x30>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e034      	b.n	8001f2a <HAL_DCMI_Suspend+0x9a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d125      	bne.n	8001f20 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10c      	bne.n	8001f12 <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	72fb      	strb	r3, [r7, #11]
        break;
 8001f10:	e006      	b.n	8001f20 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e5      	bne.n	8001eec <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	24000000 	.word	0x24000000
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f043 0202 	orr.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7a:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_DCMI_IRQHandler+0x100>)
 8001f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fa10 	bl	80033a8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <HAL_DCMI_IRQHandler+0x100>)
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 f9f4 	bl	80033a8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2210      	movs	r2, #16
 8001fd0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f840 	bl	8002058 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f83e 	bl	800206c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01d      	beq.n	8002036 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d107      	bne.n	8002018 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 021e 	bic.w	r2, r2, #30
 8002016:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f009 ff69 	bl	800bf08 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	080021a7 	.word	0x080021a7

08002044 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d043      	beq.n	800211e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <DCMI_DMAXferCplt+0x62>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	00da      	lsls	r2, r3, #3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	2200      	movs	r2, #0
 80020d0:	4619      	mov	r1, r3
 80020d2:	f003 fa1d 	bl	8005510 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
 80020e0:	e044      	b.n	800216c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d13c      	bne.n	800216c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	00da      	lsls	r2, r3, #3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4413      	add	r3, r2
 800210a:	2201      	movs	r2, #1
 800210c:	4619      	mov	r1, r3
 800210e:	f003 f9ff 	bl	8005510 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
 800211c:	e026      	b.n	800216c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e017      	b.n	800216c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	440a      	add	r2, r1
 8002162:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	429a      	cmp	r2, r3
 8002176:	d112      	bne.n	800219e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d103      	bne.n	800219e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d009      	beq.n	80021d2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff ff36 	bl	8002044 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fb8e 	bl	8001908 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e316      	b.n	8002826 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a66      	ldr	r2, [pc, #408]	; (8002398 <HAL_DMA_Init+0x1b8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04a      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a65      	ldr	r2, [pc, #404]	; (800239c <HAL_DMA_Init+0x1bc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d045      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a63      	ldr	r2, [pc, #396]	; (80023a0 <HAL_DMA_Init+0x1c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d040      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a62      	ldr	r2, [pc, #392]	; (80023a4 <HAL_DMA_Init+0x1c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d03b      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a60      	ldr	r2, [pc, #384]	; (80023a8 <HAL_DMA_Init+0x1c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d036      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a5f      	ldr	r2, [pc, #380]	; (80023ac <HAL_DMA_Init+0x1cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d031      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5d      	ldr	r2, [pc, #372]	; (80023b0 <HAL_DMA_Init+0x1d0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02c      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5c      	ldr	r2, [pc, #368]	; (80023b4 <HAL_DMA_Init+0x1d4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d027      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a5a      	ldr	r2, [pc, #360]	; (80023b8 <HAL_DMA_Init+0x1d8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d022      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a59      	ldr	r2, [pc, #356]	; (80023bc <HAL_DMA_Init+0x1dc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d01d      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_DMA_Init+0x1e0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d018      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a56      	ldr	r2, [pc, #344]	; (80023c4 <HAL_DMA_Init+0x1e4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a54      	ldr	r2, [pc, #336]	; (80023c8 <HAL_DMA_Init+0x1e8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00e      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a53      	ldr	r2, [pc, #332]	; (80023cc <HAL_DMA_Init+0x1ec>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a51      	ldr	r2, [pc, #324]	; (80023d0 <HAL_DMA_Init+0x1f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_DMA_Init+0xb8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <HAL_DMA_Init+0x1f4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_DMA_Init+0xbc>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_DMA_Init+0xbe>
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 813b 	beq.w	800251a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a37      	ldr	r2, [pc, #220]	; (8002398 <HAL_DMA_Init+0x1b8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d04a      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a36      	ldr	r2, [pc, #216]	; (800239c <HAL_DMA_Init+0x1bc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d045      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_DMA_Init+0x1c0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d040      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <HAL_DMA_Init+0x1c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d03b      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <HAL_DMA_Init+0x1c8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d036      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_DMA_Init+0x1cc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <HAL_DMA_Init+0x1d0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02c      	beq.n	8002354 <HAL_DMA_Init+0x174>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <HAL_DMA_Init+0x1d4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d027      	beq.n	8002354 <HAL_DMA_Init+0x174>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2b      	ldr	r2, [pc, #172]	; (80023b8 <HAL_DMA_Init+0x1d8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d022      	beq.n	8002354 <HAL_DMA_Init+0x174>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2a      	ldr	r2, [pc, #168]	; (80023bc <HAL_DMA_Init+0x1dc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d01d      	beq.n	8002354 <HAL_DMA_Init+0x174>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <HAL_DMA_Init+0x1e0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d018      	beq.n	8002354 <HAL_DMA_Init+0x174>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_DMA_Init+0x1e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_DMA_Init+0x174>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_DMA_Init+0x1e8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00e      	beq.n	8002354 <HAL_DMA_Init+0x174>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_DMA_Init+0x1ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_DMA_Init+0x174>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_DMA_Init+0x1f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_DMA_Init+0x174>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_DMA_Init+0x1f4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d108      	bne.n	8002366 <HAL_DMA_Init+0x186>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e007      	b.n	8002376 <HAL_DMA_Init+0x196>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002376:	e02f      	b.n	80023d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002378:	f7ff fac6 	bl	8001908 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b05      	cmp	r3, #5
 8002384:	d928      	bls.n	80023d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e246      	b.n	8002826 <HAL_DMA_Init+0x646>
 8002398:	40020010 	.word	0x40020010
 800239c:	40020028 	.word	0x40020028
 80023a0:	40020040 	.word	0x40020040
 80023a4:	40020058 	.word	0x40020058
 80023a8:	40020070 	.word	0x40020070
 80023ac:	40020088 	.word	0x40020088
 80023b0:	400200a0 	.word	0x400200a0
 80023b4:	400200b8 	.word	0x400200b8
 80023b8:	40020410 	.word	0x40020410
 80023bc:	40020428 	.word	0x40020428
 80023c0:	40020440 	.word	0x40020440
 80023c4:	40020458 	.word	0x40020458
 80023c8:	40020470 	.word	0x40020470
 80023cc:	40020488 	.word	0x40020488
 80023d0:	400204a0 	.word	0x400204a0
 80023d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1c8      	bne.n	8002378 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4b83      	ldr	r3, [pc, #524]	; (8002600 <HAL_DMA_Init+0x420>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800243c:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_DMA_Init+0x424>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b71      	ldr	r3, [pc, #452]	; (8002608 <HAL_DMA_Init+0x428>)
 8002442:	4013      	ands	r3, r2
 8002444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002448:	d328      	bcc.n	800249c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b28      	cmp	r3, #40	; 0x28
 8002450:	d903      	bls.n	800245a <HAL_DMA_Init+0x27a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b2e      	cmp	r3, #46	; 0x2e
 8002458:	d917      	bls.n	800248a <HAL_DMA_Init+0x2aa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b3e      	cmp	r3, #62	; 0x3e
 8002460:	d903      	bls.n	800246a <HAL_DMA_Init+0x28a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b42      	cmp	r3, #66	; 0x42
 8002468:	d90f      	bls.n	800248a <HAL_DMA_Init+0x2aa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b46      	cmp	r3, #70	; 0x46
 8002470:	d903      	bls.n	800247a <HAL_DMA_Init+0x29a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b48      	cmp	r3, #72	; 0x48
 8002478:	d907      	bls.n	800248a <HAL_DMA_Init+0x2aa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b4e      	cmp	r3, #78	; 0x4e
 8002480:	d905      	bls.n	800248e <HAL_DMA_Init+0x2ae>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b52      	cmp	r3, #82	; 0x52
 8002488:	d801      	bhi.n	800248e <HAL_DMA_Init+0x2ae>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_DMA_Init+0x2b0>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d117      	bne.n	80024f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f002 fb31 	bl	8004b40 <DMA_CheckFifoParam>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e197      	b.n	8002826 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f002 fa6c 	bl	80049dc <DMA_CalcBaseAndBitshift>
 8002504:	4603      	mov	r3, r0
 8002506:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e0cd      	b.n	80026b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_DMA_Init+0x42c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Init+0x38a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a39      	ldr	r2, [pc, #228]	; (8002610 <HAL_DMA_Init+0x430>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_DMA_Init+0x38a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_DMA_Init+0x434>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_DMA_Init+0x38a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a36      	ldr	r2, [pc, #216]	; (8002618 <HAL_DMA_Init+0x438>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_DMA_Init+0x38a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a35      	ldr	r2, [pc, #212]	; (800261c <HAL_DMA_Init+0x43c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Init+0x38a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a33      	ldr	r2, [pc, #204]	; (8002620 <HAL_DMA_Init+0x440>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_DMA_Init+0x38a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a32      	ldr	r2, [pc, #200]	; (8002624 <HAL_DMA_Init+0x444>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Init+0x38a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_DMA_Init+0x448>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_DMA_Init+0x38e>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_DMA_Init+0x390>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8097 	beq.w	80026a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a24      	ldr	r2, [pc, #144]	; (800260c <HAL_DMA_Init+0x42c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d021      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <HAL_DMA_Init+0x430>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01c      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_DMA_Init+0x434>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d017      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_DMA_Init+0x438>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d012      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_DMA_Init+0x43c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_DMA_Init+0x440>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d008      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <HAL_DMA_Init+0x444>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <HAL_DMA_Init+0x3e4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_DMA_Init+0x448>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_DMA_Init+0x44c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d020      	beq.n	8002630 <HAL_DMA_Init+0x450>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d102      	bne.n	80025fc <HAL_DMA_Init+0x41c>
 80025f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025fa:	e01a      	b.n	8002632 <HAL_DMA_Init+0x452>
 80025fc:	2300      	movs	r3, #0
 80025fe:	e018      	b.n	8002632 <HAL_DMA_Init+0x452>
 8002600:	fe10803f 	.word	0xfe10803f
 8002604:	5c001000 	.word	0x5c001000
 8002608:	ffff0000 	.word	0xffff0000
 800260c:	58025408 	.word	0x58025408
 8002610:	5802541c 	.word	0x5802541c
 8002614:	58025430 	.word	0x58025430
 8002618:	58025444 	.word	0x58025444
 800261c:	58025458 	.word	0x58025458
 8002620:	5802546c 	.word	0x5802546c
 8002624:	58025480 	.word	0x58025480
 8002628:	58025494 	.word	0x58025494
 800262c:	fffe000f 	.word	0xfffe000f
 8002630:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002660:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b6e      	ldr	r3, [pc, #440]	; (8002830 <HAL_DMA_Init+0x650>)
 8002678:	4413      	add	r3, r2
 800267a:	4a6e      	ldr	r2, [pc, #440]	; (8002834 <HAL_DMA_Init+0x654>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f002 f9a7 	bl	80049dc <DMA_CalcBaseAndBitshift>
 800268e:	4603      	mov	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2201      	movs	r2, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	e008      	b.n	80026b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0b7      	b.n	8002826 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5f      	ldr	r2, [pc, #380]	; (8002838 <HAL_DMA_Init+0x658>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d072      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5d      	ldr	r2, [pc, #372]	; (800283c <HAL_DMA_Init+0x65c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d06d      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5c      	ldr	r2, [pc, #368]	; (8002840 <HAL_DMA_Init+0x660>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d068      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5a      	ldr	r2, [pc, #360]	; (8002844 <HAL_DMA_Init+0x664>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d063      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a59      	ldr	r2, [pc, #356]	; (8002848 <HAL_DMA_Init+0x668>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d05e      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a57      	ldr	r2, [pc, #348]	; (800284c <HAL_DMA_Init+0x66c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d059      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_DMA_Init+0x670>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d054      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <HAL_DMA_Init+0x674>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04f      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_DMA_Init+0x678>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d04a      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a51      	ldr	r2, [pc, #324]	; (800285c <HAL_DMA_Init+0x67c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d045      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a50      	ldr	r2, [pc, #320]	; (8002860 <HAL_DMA_Init+0x680>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d040      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a4e      	ldr	r2, [pc, #312]	; (8002864 <HAL_DMA_Init+0x684>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d03b      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a4d      	ldr	r2, [pc, #308]	; (8002868 <HAL_DMA_Init+0x688>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d036      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_DMA_Init+0x68c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_DMA_Init+0x690>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d02c      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a48      	ldr	r2, [pc, #288]	; (8002874 <HAL_DMA_Init+0x694>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d027      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_DMA_Init+0x698>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a45      	ldr	r2, [pc, #276]	; (800287c <HAL_DMA_Init+0x69c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01d      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a44      	ldr	r2, [pc, #272]	; (8002880 <HAL_DMA_Init+0x6a0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d018      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_DMA_Init+0x6a4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a41      	ldr	r2, [pc, #260]	; (8002888 <HAL_DMA_Init+0x6a8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00e      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3f      	ldr	r2, [pc, #252]	; (800288c <HAL_DMA_Init+0x6ac>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d009      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a3e      	ldr	r2, [pc, #248]	; (8002890 <HAL_DMA_Init+0x6b0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_DMA_Init+0x5c6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_DMA_Init+0x6b4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_DMA_Init+0x5ca>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_DMA_Init+0x5cc>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f002 fa41 	bl	8004c38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d102      	bne.n	80027c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_DMA_Init+0x624>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d80c      	bhi.n	8002804 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f002 fabe 	bl	8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	e008      	b.n	8002816 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	a7fdabf8 	.word	0xa7fdabf8
 8002834:	cccccccd 	.word	0xcccccccd
 8002838:	40020010 	.word	0x40020010
 800283c:	40020028 	.word	0x40020028
 8002840:	40020040 	.word	0x40020040
 8002844:	40020058 	.word	0x40020058
 8002848:	40020070 	.word	0x40020070
 800284c:	40020088 	.word	0x40020088
 8002850:	400200a0 	.word	0x400200a0
 8002854:	400200b8 	.word	0x400200b8
 8002858:	40020410 	.word	0x40020410
 800285c:	40020428 	.word	0x40020428
 8002860:	40020440 	.word	0x40020440
 8002864:	40020458 	.word	0x40020458
 8002868:	40020470 	.word	0x40020470
 800286c:	40020488 	.word	0x40020488
 8002870:	400204a0 	.word	0x400204a0
 8002874:	400204b8 	.word	0x400204b8
 8002878:	58025408 	.word	0x58025408
 800287c:	5802541c 	.word	0x5802541c
 8002880:	58025430 	.word	0x58025430
 8002884:	58025444 	.word	0x58025444
 8002888:	58025458 	.word	0x58025458
 800288c:	5802546c 	.word	0x5802546c
 8002890:	58025480 	.word	0x58025480
 8002894:	58025494 	.word	0x58025494

08002898 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e226      	b.n	8002d02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_DMA_Start_IT+0x2a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e21f      	b.n	8002d02 <HAL_DMA_Start_IT+0x46a>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 820a 	bne.w	8002cec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a68      	ldr	r2, [pc, #416]	; (8002a8c <HAL_DMA_Start_IT+0x1f4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d04a      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a66      	ldr	r2, [pc, #408]	; (8002a90 <HAL_DMA_Start_IT+0x1f8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d045      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a65      	ldr	r2, [pc, #404]	; (8002a94 <HAL_DMA_Start_IT+0x1fc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d040      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_DMA_Start_IT+0x200>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d03b      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a62      	ldr	r2, [pc, #392]	; (8002a9c <HAL_DMA_Start_IT+0x204>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d036      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <HAL_DMA_Start_IT+0x208>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a5f      	ldr	r2, [pc, #380]	; (8002aa4 <HAL_DMA_Start_IT+0x20c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d02c      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a5d      	ldr	r2, [pc, #372]	; (8002aa8 <HAL_DMA_Start_IT+0x210>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d027      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a5c      	ldr	r2, [pc, #368]	; (8002aac <HAL_DMA_Start_IT+0x214>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5a      	ldr	r2, [pc, #360]	; (8002ab0 <HAL_DMA_Start_IT+0x218>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a59      	ldr	r2, [pc, #356]	; (8002ab4 <HAL_DMA_Start_IT+0x21c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d018      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_DMA_Start_IT+0x220>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a56      	ldr	r2, [pc, #344]	; (8002abc <HAL_DMA_Start_IT+0x224>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a54      	ldr	r2, [pc, #336]	; (8002ac0 <HAL_DMA_Start_IT+0x228>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a53      	ldr	r2, [pc, #332]	; (8002ac4 <HAL_DMA_Start_IT+0x22c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_DMA_Start_IT+0xee>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_DMA_Start_IT+0x230>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <HAL_DMA_Start_IT+0x100>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_DMA_Start_IT+0x110>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f001 fe68 	bl	8004684 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <HAL_DMA_Start_IT+0x1f4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d04a      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a33      	ldr	r2, [pc, #204]	; (8002a90 <HAL_DMA_Start_IT+0x1f8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d045      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a31      	ldr	r2, [pc, #196]	; (8002a94 <HAL_DMA_Start_IT+0x1fc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d040      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a30      	ldr	r2, [pc, #192]	; (8002a98 <HAL_DMA_Start_IT+0x200>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d03b      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <HAL_DMA_Start_IT+0x204>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d036      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <HAL_DMA_Start_IT+0x208>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d031      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <HAL_DMA_Start_IT+0x20c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02c      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_DMA_Start_IT+0x210>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d027      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_DMA_Start_IT+0x214>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d022      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <HAL_DMA_Start_IT+0x218>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d01d      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <HAL_DMA_Start_IT+0x21c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a24      	ldr	r2, [pc, #144]	; (8002ab8 <HAL_DMA_Start_IT+0x220>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <HAL_DMA_Start_IT+0x224>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <HAL_DMA_Start_IT+0x228>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_DMA_Start_IT+0x22c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_DMA_Start_IT+0x1bc>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <HAL_DMA_Start_IT+0x230>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_DMA_Start_IT+0x1c0>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_DMA_Start_IT+0x1c2>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 021e 	bic.w	r2, r3, #30
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0216 	orr.w	r2, r2, #22
 8002a70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03e      	beq.n	8002af8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0208 	orr.w	r2, r2, #8
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e035      	b.n	8002af8 <HAL_DMA_Start_IT+0x260>
 8002a8c:	40020010 	.word	0x40020010
 8002a90:	40020028 	.word	0x40020028
 8002a94:	40020040 	.word	0x40020040
 8002a98:	40020058 	.word	0x40020058
 8002a9c:	40020070 	.word	0x40020070
 8002aa0:	40020088 	.word	0x40020088
 8002aa4:	400200a0 	.word	0x400200a0
 8002aa8:	400200b8 	.word	0x400200b8
 8002aac:	40020410 	.word	0x40020410
 8002ab0:	40020428 	.word	0x40020428
 8002ab4:	40020440 	.word	0x40020440
 8002ab8:	40020458 	.word	0x40020458
 8002abc:	40020470 	.word	0x40020470
 8002ac0:	40020488 	.word	0x40020488
 8002ac4:	400204a0 	.word	0x400204a0
 8002ac8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 020e 	bic.w	r2, r3, #14
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 020a 	orr.w	r2, r2, #10
 8002ade:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0204 	orr.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <HAL_DMA_Start_IT+0x474>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d072      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a82      	ldr	r2, [pc, #520]	; (8002d10 <HAL_DMA_Start_IT+0x478>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d06d      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a80      	ldr	r2, [pc, #512]	; (8002d14 <HAL_DMA_Start_IT+0x47c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d068      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7f      	ldr	r2, [pc, #508]	; (8002d18 <HAL_DMA_Start_IT+0x480>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d063      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7d      	ldr	r2, [pc, #500]	; (8002d1c <HAL_DMA_Start_IT+0x484>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d05e      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <HAL_DMA_Start_IT+0x488>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d059      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7a      	ldr	r2, [pc, #488]	; (8002d24 <HAL_DMA_Start_IT+0x48c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d054      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a79      	ldr	r2, [pc, #484]	; (8002d28 <HAL_DMA_Start_IT+0x490>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d04f      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a77      	ldr	r2, [pc, #476]	; (8002d2c <HAL_DMA_Start_IT+0x494>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d04a      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a76      	ldr	r2, [pc, #472]	; (8002d30 <HAL_DMA_Start_IT+0x498>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d045      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a74      	ldr	r2, [pc, #464]	; (8002d34 <HAL_DMA_Start_IT+0x49c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d040      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a73      	ldr	r2, [pc, #460]	; (8002d38 <HAL_DMA_Start_IT+0x4a0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d03b      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_DMA_Start_IT+0x4a4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d036      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a70      	ldr	r2, [pc, #448]	; (8002d40 <HAL_DMA_Start_IT+0x4a8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d031      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <HAL_DMA_Start_IT+0x4ac>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02c      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6d      	ldr	r2, [pc, #436]	; (8002d48 <HAL_DMA_Start_IT+0x4b0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d027      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6b      	ldr	r2, [pc, #428]	; (8002d4c <HAL_DMA_Start_IT+0x4b4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d022      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6a      	ldr	r2, [pc, #424]	; (8002d50 <HAL_DMA_Start_IT+0x4b8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d01d      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a68      	ldr	r2, [pc, #416]	; (8002d54 <HAL_DMA_Start_IT+0x4bc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d018      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a67      	ldr	r2, [pc, #412]	; (8002d58 <HAL_DMA_Start_IT+0x4c0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a65      	ldr	r2, [pc, #404]	; (8002d5c <HAL_DMA_Start_IT+0x4c4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00e      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a64      	ldr	r2, [pc, #400]	; (8002d60 <HAL_DMA_Start_IT+0x4c8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a62      	ldr	r2, [pc, #392]	; (8002d64 <HAL_DMA_Start_IT+0x4cc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Start_IT+0x350>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a61      	ldr	r2, [pc, #388]	; (8002d68 <HAL_DMA_Start_IT+0x4d0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Start_IT+0x354>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_DMA_Start_IT+0x356>
 8002bec:	2300      	movs	r3, #0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01a      	beq.n	8002c28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a37      	ldr	r2, [pc, #220]	; (8002d0c <HAL_DMA_Start_IT+0x474>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d04a      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_DMA_Start_IT+0x478>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d045      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <HAL_DMA_Start_IT+0x47c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d040      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a33      	ldr	r2, [pc, #204]	; (8002d18 <HAL_DMA_Start_IT+0x480>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d03b      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a31      	ldr	r2, [pc, #196]	; (8002d1c <HAL_DMA_Start_IT+0x484>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d036      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_DMA_Start_IT+0x488>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d031      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_DMA_Start_IT+0x48c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02c      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <HAL_DMA_Start_IT+0x490>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d027      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_DMA_Start_IT+0x494>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d022      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <HAL_DMA_Start_IT+0x498>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_DMA_Start_IT+0x49c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d018      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_DMA_Start_IT+0x4a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_DMA_Start_IT+0x4a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_DMA_Start_IT+0x4a8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMA_Start_IT+0x4ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_DMA_Start_IT+0x430>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_DMA_Start_IT+0x4b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <HAL_DMA_Start_IT+0x442>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e012      	b.n	8002d00 <HAL_DMA_Start_IT+0x468>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e009      	b.n	8002d00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8
 8002d4c:	58025408 	.word	0x58025408
 8002d50:	5802541c 	.word	0x5802541c
 8002d54:	58025430 	.word	0x58025430
 8002d58:	58025444 	.word	0x58025444
 8002d5c:	58025458 	.word	0x58025458
 8002d60:	5802546c 	.word	0x5802546c
 8002d64:	58025480 	.word	0x58025480
 8002d68:	58025494 	.word	0x58025494

08002d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7fe fdc8 	bl	8001908 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e2dc      	b.n	800333e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d008      	beq.n	8002da2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e2cd      	b.n	800333e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a76      	ldr	r2, [pc, #472]	; (8002f80 <HAL_DMA_Abort+0x214>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04a      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a74      	ldr	r2, [pc, #464]	; (8002f84 <HAL_DMA_Abort+0x218>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d045      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a73      	ldr	r2, [pc, #460]	; (8002f88 <HAL_DMA_Abort+0x21c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d040      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a71      	ldr	r2, [pc, #452]	; (8002f8c <HAL_DMA_Abort+0x220>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03b      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a70      	ldr	r2, [pc, #448]	; (8002f90 <HAL_DMA_Abort+0x224>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6e      	ldr	r2, [pc, #440]	; (8002f94 <HAL_DMA_Abort+0x228>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6d      	ldr	r2, [pc, #436]	; (8002f98 <HAL_DMA_Abort+0x22c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d02c      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6b      	ldr	r2, [pc, #428]	; (8002f9c <HAL_DMA_Abort+0x230>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_DMA_Abort+0x234>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a68      	ldr	r2, [pc, #416]	; (8002fa4 <HAL_DMA_Abort+0x238>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a67      	ldr	r2, [pc, #412]	; (8002fa8 <HAL_DMA_Abort+0x23c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_DMA_Abort+0x240>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a64      	ldr	r2, [pc, #400]	; (8002fb0 <HAL_DMA_Abort+0x244>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a62      	ldr	r2, [pc, #392]	; (8002fb4 <HAL_DMA_Abort+0x248>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a61      	ldr	r2, [pc, #388]	; (8002fb8 <HAL_DMA_Abort+0x24c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_Abort+0xd6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5f      	ldr	r2, [pc, #380]	; (8002fbc <HAL_DMA_Abort+0x250>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Abort+0xda>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_DMA_Abort+0xdc>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 021e 	bic.w	r2, r2, #30
 8002e5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e00a      	b.n	8002e8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020e 	bic.w	r2, r2, #14
 8002e82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a3c      	ldr	r2, [pc, #240]	; (8002f80 <HAL_DMA_Abort+0x214>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d072      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <HAL_DMA_Abort+0x218>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d06d      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a39      	ldr	r2, [pc, #228]	; (8002f88 <HAL_DMA_Abort+0x21c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d068      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <HAL_DMA_Abort+0x220>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d063      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <HAL_DMA_Abort+0x224>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d05e      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <HAL_DMA_Abort+0x228>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d059      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a33      	ldr	r2, [pc, #204]	; (8002f98 <HAL_DMA_Abort+0x22c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d054      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a31      	ldr	r2, [pc, #196]	; (8002f9c <HAL_DMA_Abort+0x230>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d04f      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <HAL_DMA_Abort+0x234>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d04a      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_DMA_Abort+0x238>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d045      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_DMA_Abort+0x23c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d040      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <HAL_DMA_Abort+0x240>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d03b      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <HAL_DMA_Abort+0x244>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d036      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_DMA_Abort+0x248>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d031      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_DMA_Abort+0x24c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d02c      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <HAL_DMA_Abort+0x250>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d027      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <HAL_DMA_Abort+0x254>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_DMA_Abort+0x258>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <HAL_DMA_Abort+0x25c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_DMA_Abort+0x260>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_DMA_Abort+0x264>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <HAL_DMA_Abort+0x268>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_DMA_Abort+0x26c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_DMA_Abort+0x20e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_DMA_Abort+0x270>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d132      	bne.n	8002fe0 <HAL_DMA_Abort+0x274>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e031      	b.n	8002fe2 <HAL_DMA_Abort+0x276>
 8002f7e:	bf00      	nop
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
 8002fc0:	58025408 	.word	0x58025408
 8002fc4:	5802541c 	.word	0x5802541c
 8002fc8:	58025430 	.word	0x58025430
 8002fcc:	58025444 	.word	0x58025444
 8002fd0:	58025458 	.word	0x58025458
 8002fd4:	5802546c 	.word	0x5802546c
 8002fd8:	58025480 	.word	0x58025480
 8002fdc:	58025494 	.word	0x58025494
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6d      	ldr	r2, [pc, #436]	; (80031b0 <HAL_DMA_Abort+0x444>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a6b      	ldr	r2, [pc, #428]	; (80031b4 <HAL_DMA_Abort+0x448>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6a      	ldr	r2, [pc, #424]	; (80031b8 <HAL_DMA_Abort+0x44c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a68      	ldr	r2, [pc, #416]	; (80031bc <HAL_DMA_Abort+0x450>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a67      	ldr	r2, [pc, #412]	; (80031c0 <HAL_DMA_Abort+0x454>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <HAL_DMA_Abort+0x458>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a64      	ldr	r2, [pc, #400]	; (80031c8 <HAL_DMA_Abort+0x45c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a62      	ldr	r2, [pc, #392]	; (80031cc <HAL_DMA_Abort+0x460>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a61      	ldr	r2, [pc, #388]	; (80031d0 <HAL_DMA_Abort+0x464>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5f      	ldr	r2, [pc, #380]	; (80031d4 <HAL_DMA_Abort+0x468>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <HAL_DMA_Abort+0x46c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_DMA_Abort+0x470>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5b      	ldr	r2, [pc, #364]	; (80031e0 <HAL_DMA_Abort+0x474>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a59      	ldr	r2, [pc, #356]	; (80031e4 <HAL_DMA_Abort+0x478>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_DMA_Abort+0x47c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort+0x32a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a56      	ldr	r2, [pc, #344]	; (80031ec <HAL_DMA_Abort+0x480>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <HAL_DMA_Abort+0x33c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e007      	b.n	80030b8 <HAL_DMA_Abort+0x34c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030b8:	e013      	b.n	80030e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ba:	f7fe fc25 	bl	8001908 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d90c      	bls.n	80030e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2203      	movs	r2, #3
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12d      	b.n	800333e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e5      	bne.n	80030ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2f      	ldr	r2, [pc, #188]	; (80031b0 <HAL_DMA_Abort+0x444>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_Abort+0x422>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <HAL_DMA_Abort+0x448>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <HAL_DMA_Abort+0x44c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_Abort+0x422>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <HAL_DMA_Abort+0x450>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <HAL_DMA_Abort+0x454>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <HAL_DMA_Abort+0x458>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_Abort+0x422>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <HAL_DMA_Abort+0x45c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_DMA_Abort+0x460>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_Abort+0x422>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <HAL_DMA_Abort+0x464>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_DMA_Abort+0x468>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <HAL_DMA_Abort+0x46c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_Abort+0x422>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_DMA_Abort+0x470>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_DMA_Abort+0x474>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_DMA_Abort+0x478>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_Abort+0x422>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_DMA_Abort+0x47c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Abort+0x422>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_DMA_Abort+0x480>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_DMA_Abort+0x426>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_DMA_Abort+0x428>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02b      	beq.n	80031f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	223f      	movs	r2, #63	; 0x3f
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	e02a      	b.n	8003206 <HAL_DMA_Abort+0x49a>
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4f      	ldr	r2, [pc, #316]	; (8003348 <HAL_DMA_Abort+0x5dc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d072      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4d      	ldr	r2, [pc, #308]	; (800334c <HAL_DMA_Abort+0x5e0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d06d      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4c      	ldr	r2, [pc, #304]	; (8003350 <HAL_DMA_Abort+0x5e4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d068      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <HAL_DMA_Abort+0x5e8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d063      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a49      	ldr	r2, [pc, #292]	; (8003358 <HAL_DMA_Abort+0x5ec>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d05e      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a47      	ldr	r2, [pc, #284]	; (800335c <HAL_DMA_Abort+0x5f0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d059      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a46      	ldr	r2, [pc, #280]	; (8003360 <HAL_DMA_Abort+0x5f4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d054      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a44      	ldr	r2, [pc, #272]	; (8003364 <HAL_DMA_Abort+0x5f8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d04f      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_DMA_Abort+0x5fc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04a      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_DMA_Abort+0x600>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d045      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a40      	ldr	r2, [pc, #256]	; (8003370 <HAL_DMA_Abort+0x604>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d040      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3e      	ldr	r2, [pc, #248]	; (8003374 <HAL_DMA_Abort+0x608>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d03b      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <HAL_DMA_Abort+0x60c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d036      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3b      	ldr	r2, [pc, #236]	; (800337c <HAL_DMA_Abort+0x610>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_DMA_Abort+0x614>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d02c      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_DMA_Abort+0x618>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d027      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_DMA_Abort+0x61c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <HAL_DMA_Abort+0x620>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_DMA_Abort+0x624>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a32      	ldr	r2, [pc, #200]	; (8003394 <HAL_DMA_Abort+0x628>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a31      	ldr	r2, [pc, #196]	; (8003398 <HAL_DMA_Abort+0x62c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <HAL_DMA_Abort+0x630>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2e      	ldr	r2, [pc, #184]	; (80033a0 <HAL_DMA_Abort+0x634>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_DMA_Abort+0x58a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2c      	ldr	r2, [pc, #176]	; (80033a4 <HAL_DMA_Abort+0x638>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_DMA_Abort+0x58e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_DMA_Abort+0x590>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003308:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003320:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800332a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40020010 	.word	0x40020010
 800334c:	40020028 	.word	0x40020028
 8003350:	40020040 	.word	0x40020040
 8003354:	40020058 	.word	0x40020058
 8003358:	40020070 	.word	0x40020070
 800335c:	40020088 	.word	0x40020088
 8003360:	400200a0 	.word	0x400200a0
 8003364:	400200b8 	.word	0x400200b8
 8003368:	40020410 	.word	0x40020410
 800336c:	40020428 	.word	0x40020428
 8003370:	40020440 	.word	0x40020440
 8003374:	40020458 	.word	0x40020458
 8003378:	40020470 	.word	0x40020470
 800337c:	40020488 	.word	0x40020488
 8003380:	400204a0 	.word	0x400204a0
 8003384:	400204b8 	.word	0x400204b8
 8003388:	58025408 	.word	0x58025408
 800338c:	5802541c 	.word	0x5802541c
 8003390:	58025430 	.word	0x58025430
 8003394:	58025444 	.word	0x58025444
 8003398:	58025458 	.word	0x58025458
 800339c:	5802546c 	.word	0x5802546c
 80033a0:	58025480 	.word	0x58025480
 80033a4:	58025494 	.word	0x58025494

080033a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e205      	b.n	80037c6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e1fa      	b.n	80037c6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a8c      	ldr	r2, [pc, #560]	; (8003608 <HAL_DMA_Abort_IT+0x260>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d04a      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a8b      	ldr	r2, [pc, #556]	; (800360c <HAL_DMA_Abort_IT+0x264>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d045      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a89      	ldr	r2, [pc, #548]	; (8003610 <HAL_DMA_Abort_IT+0x268>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d040      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a88      	ldr	r2, [pc, #544]	; (8003614 <HAL_DMA_Abort_IT+0x26c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d03b      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a86      	ldr	r2, [pc, #536]	; (8003618 <HAL_DMA_Abort_IT+0x270>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d036      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a85      	ldr	r2, [pc, #532]	; (800361c <HAL_DMA_Abort_IT+0x274>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d031      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a83      	ldr	r2, [pc, #524]	; (8003620 <HAL_DMA_Abort_IT+0x278>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02c      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a82      	ldr	r2, [pc, #520]	; (8003624 <HAL_DMA_Abort_IT+0x27c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d027      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a80      	ldr	r2, [pc, #512]	; (8003628 <HAL_DMA_Abort_IT+0x280>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7f      	ldr	r2, [pc, #508]	; (800362c <HAL_DMA_Abort_IT+0x284>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01d      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a7d      	ldr	r2, [pc, #500]	; (8003630 <HAL_DMA_Abort_IT+0x288>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7c      	ldr	r2, [pc, #496]	; (8003634 <HAL_DMA_Abort_IT+0x28c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7a      	ldr	r2, [pc, #488]	; (8003638 <HAL_DMA_Abort_IT+0x290>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a79      	ldr	r2, [pc, #484]	; (800363c <HAL_DMA_Abort_IT+0x294>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a77      	ldr	r2, [pc, #476]	; (8003640 <HAL_DMA_Abort_IT+0x298>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_DMA_Abort_IT+0xc8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a76      	ldr	r2, [pc, #472]	; (8003644 <HAL_DMA_Abort_IT+0x29c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_DMA_Abort_IT+0xcc>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_DMA_Abort_IT+0xce>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d065      	beq.n	8003546 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2204      	movs	r2, #4
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a60      	ldr	r2, [pc, #384]	; (8003608 <HAL_DMA_Abort_IT+0x260>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_DMA_Abort_IT+0x264>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a5d      	ldr	r2, [pc, #372]	; (8003610 <HAL_DMA_Abort_IT+0x268>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a5b      	ldr	r2, [pc, #364]	; (8003614 <HAL_DMA_Abort_IT+0x26c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5a      	ldr	r2, [pc, #360]	; (8003618 <HAL_DMA_Abort_IT+0x270>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_DMA_Abort_IT+0x274>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a57      	ldr	r2, [pc, #348]	; (8003620 <HAL_DMA_Abort_IT+0x278>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a55      	ldr	r2, [pc, #340]	; (8003624 <HAL_DMA_Abort_IT+0x27c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a54      	ldr	r2, [pc, #336]	; (8003628 <HAL_DMA_Abort_IT+0x280>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a52      	ldr	r2, [pc, #328]	; (800362c <HAL_DMA_Abort_IT+0x284>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a51      	ldr	r2, [pc, #324]	; (8003630 <HAL_DMA_Abort_IT+0x288>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a4f      	ldr	r2, [pc, #316]	; (8003634 <HAL_DMA_Abort_IT+0x28c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4e      	ldr	r2, [pc, #312]	; (8003638 <HAL_DMA_Abort_IT+0x290>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a4c      	ldr	r2, [pc, #304]	; (800363c <HAL_DMA_Abort_IT+0x294>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a4b      	ldr	r2, [pc, #300]	; (8003640 <HAL_DMA_Abort_IT+0x298>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_Abort_IT+0x17a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a49      	ldr	r2, [pc, #292]	; (8003644 <HAL_DMA_Abort_IT+0x29c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <HAL_DMA_Abort_IT+0x18c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e147      	b.n	80037c4 <HAL_DMA_Abort_IT+0x41c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e13e      	b.n	80037c4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 020e 	bic.w	r2, r2, #14
 8003554:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <HAL_DMA_Abort_IT+0x260>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_DMA_Abort_IT+0x264>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_DMA_Abort_IT+0x268>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_DMA_Abort_IT+0x26c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a25      	ldr	r2, [pc, #148]	; (8003618 <HAL_DMA_Abort_IT+0x270>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <HAL_DMA_Abort_IT+0x274>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_DMA_Abort_IT+0x278>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <HAL_DMA_Abort_IT+0x27c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_DMA_Abort_IT+0x280>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_DMA_Abort_IT+0x284>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <HAL_DMA_Abort_IT+0x288>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_DMA_Abort_IT+0x28c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_DMA_Abort_IT+0x290>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_DMA_Abort_IT+0x294>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_DMA_Abort_IT+0x298>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x24e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <HAL_DMA_Abort_IT+0x29c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d128      	bne.n	8003648 <HAL_DMA_Abort_IT+0x2a0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e027      	b.n	8003658 <HAL_DMA_Abort_IT+0x2b0>
 8003608:	40020010 	.word	0x40020010
 800360c:	40020028 	.word	0x40020028
 8003610:	40020040 	.word	0x40020040
 8003614:	40020058 	.word	0x40020058
 8003618:	40020070 	.word	0x40020070
 800361c:	40020088 	.word	0x40020088
 8003620:	400200a0 	.word	0x400200a0
 8003624:	400200b8 	.word	0x400200b8
 8003628:	40020410 	.word	0x40020410
 800362c:	40020428 	.word	0x40020428
 8003630:	40020440 	.word	0x40020440
 8003634:	40020458 	.word	0x40020458
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204a0 	.word	0x400204a0
 8003644:	400204b8 	.word	0x400204b8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5c      	ldr	r2, [pc, #368]	; (80037d0 <HAL_DMA_Abort_IT+0x428>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d072      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5b      	ldr	r2, [pc, #364]	; (80037d4 <HAL_DMA_Abort_IT+0x42c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d06d      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a59      	ldr	r2, [pc, #356]	; (80037d8 <HAL_DMA_Abort_IT+0x430>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d068      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_DMA_Abort_IT+0x434>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d063      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a56      	ldr	r2, [pc, #344]	; (80037e0 <HAL_DMA_Abort_IT+0x438>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d05e      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a55      	ldr	r2, [pc, #340]	; (80037e4 <HAL_DMA_Abort_IT+0x43c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d059      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a53      	ldr	r2, [pc, #332]	; (80037e8 <HAL_DMA_Abort_IT+0x440>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d054      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a52      	ldr	r2, [pc, #328]	; (80037ec <HAL_DMA_Abort_IT+0x444>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d04f      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a50      	ldr	r2, [pc, #320]	; (80037f0 <HAL_DMA_Abort_IT+0x448>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d04a      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4f      	ldr	r2, [pc, #316]	; (80037f4 <HAL_DMA_Abort_IT+0x44c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d045      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a4d      	ldr	r2, [pc, #308]	; (80037f8 <HAL_DMA_Abort_IT+0x450>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d040      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4c      	ldr	r2, [pc, #304]	; (80037fc <HAL_DMA_Abort_IT+0x454>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d03b      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <HAL_DMA_Abort_IT+0x458>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d036      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a49      	ldr	r2, [pc, #292]	; (8003804 <HAL_DMA_Abort_IT+0x45c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d031      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a47      	ldr	r2, [pc, #284]	; (8003808 <HAL_DMA_Abort_IT+0x460>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02c      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a46      	ldr	r2, [pc, #280]	; (800380c <HAL_DMA_Abort_IT+0x464>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d027      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a44      	ldr	r2, [pc, #272]	; (8003810 <HAL_DMA_Abort_IT+0x468>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a43      	ldr	r2, [pc, #268]	; (8003814 <HAL_DMA_Abort_IT+0x46c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d01d      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a41      	ldr	r2, [pc, #260]	; (8003818 <HAL_DMA_Abort_IT+0x470>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <HAL_DMA_Abort_IT+0x474>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3e      	ldr	r2, [pc, #248]	; (8003820 <HAL_DMA_Abort_IT+0x478>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3d      	ldr	r2, [pc, #244]	; (8003824 <HAL_DMA_Abort_IT+0x47c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <HAL_DMA_Abort_IT+0x480>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_DMA_Abort_IT+0x3a0>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a3a      	ldr	r2, [pc, #232]	; (800382c <HAL_DMA_Abort_IT+0x484>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_DMA_Abort_IT+0x3a4>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_DMA_Abort_IT+0x3a6>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003780:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003798:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
 8003810:	58025408 	.word	0x58025408
 8003814:	5802541c 	.word	0x5802541c
 8003818:	58025430 	.word	0x58025430
 800381c:	58025444 	.word	0x58025444
 8003820:	58025458 	.word	0x58025458
 8003824:	5802546c 	.word	0x5802546c
 8003828:	58025480 	.word	0x58025480
 800382c:	58025494 	.word	0x58025494

08003830 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800383c:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_DMA_IRQHandler+0x1ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a67      	ldr	r2, [pc, #412]	; (80039e0 <HAL_DMA_IRQHandler+0x1b0>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0a9b      	lsrs	r3, r3, #10
 8003848:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5f      	ldr	r2, [pc, #380]	; (80039e4 <HAL_DMA_IRQHandler+0x1b4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d04a      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5d      	ldr	r2, [pc, #372]	; (80039e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d045      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5c      	ldr	r2, [pc, #368]	; (80039ec <HAL_DMA_IRQHandler+0x1bc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d040      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d03b      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a59      	ldr	r2, [pc, #356]	; (80039f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d036      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_DMA_IRQHandler+0x1c8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d031      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a56      	ldr	r2, [pc, #344]	; (80039fc <HAL_DMA_IRQHandler+0x1cc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d02c      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a54      	ldr	r2, [pc, #336]	; (8003a00 <HAL_DMA_IRQHandler+0x1d0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d027      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a53      	ldr	r2, [pc, #332]	; (8003a04 <HAL_DMA_IRQHandler+0x1d4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d022      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a51      	ldr	r2, [pc, #324]	; (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01d      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a50      	ldr	r2, [pc, #320]	; (8003a0c <HAL_DMA_IRQHandler+0x1dc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d018      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_DMA_IRQHandler+0x1e0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <HAL_DMA_IRQHandler+0x1e4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	; (8003a18 <HAL_DMA_IRQHandler+0x1e8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d009      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <HAL_DMA_IRQHandler+0x1ec>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_DMA_IRQHandler+0xd2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_DMA_IRQHandler+0x1f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_DMA_IRQHandler+0xd6>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_DMA_IRQHandler+0xd8>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 842b 	beq.w	8004164 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2208      	movs	r2, #8
 8003918:	409a      	lsls	r2, r3
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80a2 	beq.w	8003a68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <HAL_DMA_IRQHandler+0x1b4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d04a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d045      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_DMA_IRQHandler+0x1bc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d040      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d03b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_DMA_IRQHandler+0x1c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d031      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <HAL_DMA_IRQHandler+0x1cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02c      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <HAL_DMA_IRQHandler+0x1d0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d027      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_DMA_IRQHandler+0x1d4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d022      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_DMA_IRQHandler+0x1d8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d01d      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_DMA_IRQHandler+0x1dc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d018      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <HAL_DMA_IRQHandler+0x1e0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_DMA_IRQHandler+0x1e4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00e      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <HAL_DMA_IRQHandler+0x1e8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_DMA_IRQHandler+0x1ec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x194>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_DMA_IRQHandler+0x1f0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d12f      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x1f4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf14      	ite	ne
 80039d2:	2301      	movne	r3, #1
 80039d4:	2300      	moveq	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	e02e      	b.n	8003a38 <HAL_DMA_IRQHandler+0x208>
 80039da:	bf00      	nop
 80039dc:	24000000 	.word	0x24000000
 80039e0:	1b4e81b5 	.word	0x1b4e81b5
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2208      	movs	r2, #8
 8003a56:	409a      	lsls	r2, r3
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d06e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a69      	ldr	r2, [pc, #420]	; (8003c28 <HAL_DMA_IRQHandler+0x3f8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a67      	ldr	r2, [pc, #412]	; (8003c2c <HAL_DMA_IRQHandler+0x3fc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a66      	ldr	r2, [pc, #408]	; (8003c30 <HAL_DMA_IRQHandler+0x400>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a64      	ldr	r2, [pc, #400]	; (8003c34 <HAL_DMA_IRQHandler+0x404>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a63      	ldr	r2, [pc, #396]	; (8003c38 <HAL_DMA_IRQHandler+0x408>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a61      	ldr	r2, [pc, #388]	; (8003c3c <HAL_DMA_IRQHandler+0x40c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a60      	ldr	r2, [pc, #384]	; (8003c40 <HAL_DMA_IRQHandler+0x410>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_DMA_IRQHandler+0x414>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_DMA_IRQHandler+0x418>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a5b      	ldr	r2, [pc, #364]	; (8003c4c <HAL_DMA_IRQHandler+0x41c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a5a      	ldr	r2, [pc, #360]	; (8003c50 <HAL_DMA_IRQHandler+0x420>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_DMA_IRQHandler+0x424>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a57      	ldr	r2, [pc, #348]	; (8003c58 <HAL_DMA_IRQHandler+0x428>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a55      	ldr	r2, [pc, #340]	; (8003c5c <HAL_DMA_IRQHandler+0x42c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <HAL_DMA_IRQHandler+0x430>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2ee>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a52      	ldr	r2, [pc, #328]	; (8003c64 <HAL_DMA_IRQHandler+0x434>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10a      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x304>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e003      	b.n	8003b3c <HAL_DMA_IRQHandler+0x30c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2201      	movs	r2, #1
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2204      	movs	r2, #4
 8003b66:	409a      	lsls	r2, r3
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808f 	beq.w	8003c90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <HAL_DMA_IRQHandler+0x3f8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d04a      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <HAL_DMA_IRQHandler+0x3fc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d045      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <HAL_DMA_IRQHandler+0x400>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d040      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_DMA_IRQHandler+0x404>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <HAL_DMA_IRQHandler+0x408>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d036      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a24      	ldr	r2, [pc, #144]	; (8003c3c <HAL_DMA_IRQHandler+0x40c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d031      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <HAL_DMA_IRQHandler+0x410>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d02c      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <HAL_DMA_IRQHandler+0x414>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d027      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <HAL_DMA_IRQHandler+0x418>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <HAL_DMA_IRQHandler+0x41c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01d      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_DMA_IRQHandler+0x420>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <HAL_DMA_IRQHandler+0x424>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <HAL_DMA_IRQHandler+0x428>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_DMA_IRQHandler+0x42c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <HAL_DMA_IRQHandler+0x430>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x3e2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <HAL_DMA_IRQHandler+0x434>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12a      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x438>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e023      	b.n	8003c70 <HAL_DMA_IRQHandler+0x440>
 8003c28:	40020010 	.word	0x40020010
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	40020040 	.word	0x40020040
 8003c34:	40020058 	.word	0x40020058
 8003c38:	40020070 	.word	0x40020070
 8003c3c:	40020088 	.word	0x40020088
 8003c40:	400200a0 	.word	0x400200a0
 8003c44:	400200b8 	.word	0x400200b8
 8003c48:	40020410 	.word	0x40020410
 8003c4c:	40020428 	.word	0x40020428
 8003c50:	40020440 	.word	0x40020440
 8003c54:	40020458 	.word	0x40020458
 8003c58:	40020470 	.word	0x40020470
 8003c5c:	40020488 	.word	0x40020488
 8003c60:	400204a0 	.word	0x400204a0
 8003c64:	400204b8 	.word	0x400204b8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2210      	movs	r2, #16
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a6 	beq.w	8003df2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a85      	ldr	r2, [pc, #532]	; (8003ec0 <HAL_DMA_IRQHandler+0x690>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a83      	ldr	r2, [pc, #524]	; (8003ec4 <HAL_DMA_IRQHandler+0x694>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a82      	ldr	r2, [pc, #520]	; (8003ec8 <HAL_DMA_IRQHandler+0x698>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a80      	ldr	r2, [pc, #512]	; (8003ecc <HAL_DMA_IRQHandler+0x69c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7f      	ldr	r2, [pc, #508]	; (8003ed0 <HAL_DMA_IRQHandler+0x6a0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a7d      	ldr	r2, [pc, #500]	; (8003ed4 <HAL_DMA_IRQHandler+0x6a4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_DMA_IRQHandler+0x6a8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a7a      	ldr	r2, [pc, #488]	; (8003edc <HAL_DMA_IRQHandler+0x6ac>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a79      	ldr	r2, [pc, #484]	; (8003ee0 <HAL_DMA_IRQHandler+0x6b0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a77      	ldr	r2, [pc, #476]	; (8003ee4 <HAL_DMA_IRQHandler+0x6b4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a76      	ldr	r2, [pc, #472]	; (8003ee8 <HAL_DMA_IRQHandler+0x6b8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a74      	ldr	r2, [pc, #464]	; (8003eec <HAL_DMA_IRQHandler+0x6bc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a73      	ldr	r2, [pc, #460]	; (8003ef0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a71      	ldr	r2, [pc, #452]	; (8003ef4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a70      	ldr	r2, [pc, #448]	; (8003ef8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x516>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_DMA_IRQHandler+0x6cc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10a      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x52c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e009      	b.n	8003d70 <HAL_DMA_IRQHandler+0x540>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d03e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d024      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e01f      	b.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
 8003dc2:	e016      	b.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8110 	beq.w	8004028 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <HAL_DMA_IRQHandler+0x690>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <HAL_DMA_IRQHandler+0x694>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <HAL_DMA_IRQHandler+0x698>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <HAL_DMA_IRQHandler+0x69c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_DMA_IRQHandler+0x6a0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <HAL_DMA_IRQHandler+0x6a4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_DMA_IRQHandler+0x6a8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_DMA_IRQHandler+0x6ac>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <HAL_DMA_IRQHandler+0x6b0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_DMA_IRQHandler+0x6b4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_DMA_IRQHandler+0x6b8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <HAL_DMA_IRQHandler+0x6bc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x678>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <HAL_DMA_IRQHandler+0x6cc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d12b      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x6d0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e02a      	b.n	8003f14 <HAL_DMA_IRQHandler+0x6e4>
 8003ebe:	bf00      	nop
 8003ec0:	40020010 	.word	0x40020010
 8003ec4:	40020028 	.word	0x40020028
 8003ec8:	40020040 	.word	0x40020040
 8003ecc:	40020058 	.word	0x40020058
 8003ed0:	40020070 	.word	0x40020070
 8003ed4:	40020088 	.word	0x40020088
 8003ed8:	400200a0 	.word	0x400200a0
 8003edc:	400200b8 	.word	0x400200b8
 8003ee0:	40020410 	.word	0x40020410
 8003ee4:	40020428 	.word	0x40020428
 8003ee8:	40020440 	.word	0x40020440
 8003eec:	40020458 	.word	0x40020458
 8003ef0:	40020470 	.word	0x40020470
 8003ef4:	40020488 	.word	0x40020488
 8003ef8:	400204a0 	.word	0x400204a0
 8003efc:	400204b8 	.word	0x400204b8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8087 	beq.w	8004028 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2220      	movs	r2, #32
 8003f24:	409a      	lsls	r2, r3
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d139      	bne.n	8003faa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0216 	bic.w	r2, r2, #22
 8003f44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x736>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0208 	bic.w	r2, r2, #8
 8003f74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	223f      	movs	r2, #63	; 0x3f
 8003f80:	409a      	lsls	r2, r3
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 834a 	beq.w	8004634 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
          }
          return;
 8003fa8:	e344      	b.n	8004634 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02c      	beq.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
 8003fd6:	e027      	b.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d023      	beq.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
 8003fe8:	e01e      	b.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10f      	bne.n	8004018 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0210 	bic.w	r2, r2, #16
 8004006:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8306 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8088 	beq.w	8004150 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7a      	ldr	r2, [pc, #488]	; (8004238 <HAL_DMA_IRQHandler+0xa08>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d04a      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a79      	ldr	r2, [pc, #484]	; (800423c <HAL_DMA_IRQHandler+0xa0c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d045      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a77      	ldr	r2, [pc, #476]	; (8004240 <HAL_DMA_IRQHandler+0xa10>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d040      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a76      	ldr	r2, [pc, #472]	; (8004244 <HAL_DMA_IRQHandler+0xa14>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d03b      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a74      	ldr	r2, [pc, #464]	; (8004248 <HAL_DMA_IRQHandler+0xa18>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d036      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a73      	ldr	r2, [pc, #460]	; (800424c <HAL_DMA_IRQHandler+0xa1c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d031      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a71      	ldr	r2, [pc, #452]	; (8004250 <HAL_DMA_IRQHandler+0xa20>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d02c      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a70      	ldr	r2, [pc, #448]	; (8004254 <HAL_DMA_IRQHandler+0xa24>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d027      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_DMA_IRQHandler+0xa28>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6d      	ldr	r2, [pc, #436]	; (800425c <HAL_DMA_IRQHandler+0xa2c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01d      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6b      	ldr	r2, [pc, #428]	; (8004260 <HAL_DMA_IRQHandler+0xa30>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d018      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <HAL_DMA_IRQHandler+0xa34>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a68      	ldr	r2, [pc, #416]	; (8004268 <HAL_DMA_IRQHandler+0xa38>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a67      	ldr	r2, [pc, #412]	; (800426c <HAL_DMA_IRQHandler+0xa3c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a65      	ldr	r2, [pc, #404]	; (8004270 <HAL_DMA_IRQHandler+0xa40>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x8b8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a64      	ldr	r2, [pc, #400]	; (8004274 <HAL_DMA_IRQHandler+0xa44>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <HAL_DMA_IRQHandler+0x8ca>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e007      	b.n	800410a <HAL_DMA_IRQHandler+0x8da>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004112:	429a      	cmp	r2, r3
 8004114:	d307      	bcc.n	8004126 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f2      	bne.n	800410a <HAL_DMA_IRQHandler+0x8da>
 8004124:	e000      	b.n	8004128 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004126:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004146:	e003      	b.n	8004150 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8272 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e26c      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a43      	ldr	r2, [pc, #268]	; (8004278 <HAL_DMA_IRQHandler+0xa48>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a42      	ldr	r2, [pc, #264]	; (800427c <HAL_DMA_IRQHandler+0xa4c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01d      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a40      	ldr	r2, [pc, #256]	; (8004280 <HAL_DMA_IRQHandler+0xa50>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <HAL_DMA_IRQHandler+0xa54>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3d      	ldr	r2, [pc, #244]	; (8004288 <HAL_DMA_IRQHandler+0xa58>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3c      	ldr	r2, [pc, #240]	; (800428c <HAL_DMA_IRQHandler+0xa5c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <HAL_DMA_IRQHandler+0xa60>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x984>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a39      	ldr	r2, [pc, #228]	; (8004294 <HAL_DMA_IRQHandler+0xa64>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x988>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_DMA_IRQHandler+0x98a>
 80041b8:	2300      	movs	r3, #0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 823f 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80cd 	beq.w	8004378 <HAL_DMA_IRQHandler+0xb48>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80c7 	beq.w	8004378 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2204      	movs	r2, #4
 80041f4:	409a      	lsls	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d049      	beq.n	8004298 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8210 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004220:	e20a      	b.n	8004638 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8206 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004234:	e200      	b.n	8004638 <HAL_DMA_IRQHandler+0xe08>
 8004236:	bf00      	nop
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
 8004278:	58025408 	.word	0x58025408
 800427c:	5802541c 	.word	0x5802541c
 8004280:	58025430 	.word	0x58025430
 8004284:	58025444 	.word	0x58025444
 8004288:	58025458 	.word	0x58025458
 800428c:	5802546c 	.word	0x5802546c
 8004290:	58025480 	.word	0x58025480
 8004294:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d160      	bne.n	8004364 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a8c      	ldr	r2, [pc, #560]	; (80044d8 <HAL_DMA_IRQHandler+0xca8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d04a      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a8a      	ldr	r2, [pc, #552]	; (80044dc <HAL_DMA_IRQHandler+0xcac>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d045      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a89      	ldr	r2, [pc, #548]	; (80044e0 <HAL_DMA_IRQHandler+0xcb0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d040      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a87      	ldr	r2, [pc, #540]	; (80044e4 <HAL_DMA_IRQHandler+0xcb4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a86      	ldr	r2, [pc, #536]	; (80044e8 <HAL_DMA_IRQHandler+0xcb8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d036      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a84      	ldr	r2, [pc, #528]	; (80044ec <HAL_DMA_IRQHandler+0xcbc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a83      	ldr	r2, [pc, #524]	; (80044f0 <HAL_DMA_IRQHandler+0xcc0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d02c      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a81      	ldr	r2, [pc, #516]	; (80044f4 <HAL_DMA_IRQHandler+0xcc4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d027      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a80      	ldr	r2, [pc, #512]	; (80044f8 <HAL_DMA_IRQHandler+0xcc8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7e      	ldr	r2, [pc, #504]	; (80044fc <HAL_DMA_IRQHandler+0xccc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a7d      	ldr	r2, [pc, #500]	; (8004500 <HAL_DMA_IRQHandler+0xcd0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7b      	ldr	r2, [pc, #492]	; (8004504 <HAL_DMA_IRQHandler+0xcd4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7a      	ldr	r2, [pc, #488]	; (8004508 <HAL_DMA_IRQHandler+0xcd8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a78      	ldr	r2, [pc, #480]	; (800450c <HAL_DMA_IRQHandler+0xcdc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_DMA_IRQHandler+0xce0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_DMA_IRQHandler+0xb12>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a75      	ldr	r2, [pc, #468]	; (8004514 <HAL_DMA_IRQHandler+0xce4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_DMA_IRQHandler+0xb24>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e007      	b.n	8004364 <HAL_DMA_IRQHandler+0xb34>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0204 	bic.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8165 	beq.w	8004638 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004376:	e15f      	b.n	8004638 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2202      	movs	r2, #2
 8004382:	409a      	lsls	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80c5 	beq.w	8004518 <HAL_DMA_IRQHandler+0xce8>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80bf 	beq.w	8004518 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2202      	movs	r2, #2
 80043a4:	409a      	lsls	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 813a 	beq.w	800463c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d0:	e134      	b.n	800463c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8130 	beq.w	800463c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e4:	e12a      	b.n	800463c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d168      	bne.n	80044c2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a38      	ldr	r2, [pc, #224]	; (80044d8 <HAL_DMA_IRQHandler+0xca8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a37      	ldr	r2, [pc, #220]	; (80044dc <HAL_DMA_IRQHandler+0xcac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <HAL_DMA_IRQHandler+0xcb0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a34      	ldr	r2, [pc, #208]	; (80044e4 <HAL_DMA_IRQHandler+0xcb4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_DMA_IRQHandler+0xcb8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a31      	ldr	r2, [pc, #196]	; (80044ec <HAL_DMA_IRQHandler+0xcbc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_DMA_IRQHandler+0xcc0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <HAL_DMA_IRQHandler+0xcc4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <HAL_DMA_IRQHandler+0xcc8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <HAL_DMA_IRQHandler+0xccc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_DMA_IRQHandler+0xcd0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a28      	ldr	r2, [pc, #160]	; (8004504 <HAL_DMA_IRQHandler+0xcd4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <HAL_DMA_IRQHandler+0xcd8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <HAL_DMA_IRQHandler+0xcdc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <HAL_DMA_IRQHandler+0xce0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_DMA_IRQHandler+0xc60>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a22      	ldr	r2, [pc, #136]	; (8004514 <HAL_DMA_IRQHandler+0xce4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <HAL_DMA_IRQHandler+0xc72>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0214 	bic.w	r2, r2, #20
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e007      	b.n	80044b2 <HAL_DMA_IRQHandler+0xc82>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 020a 	bic.w	r2, r2, #10
 80044b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80b8 	beq.w	800463c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d4:	e0b2      	b.n	800463c <HAL_DMA_IRQHandler+0xe0c>
 80044d6:	bf00      	nop
 80044d8:	40020010 	.word	0x40020010
 80044dc:	40020028 	.word	0x40020028
 80044e0:	40020040 	.word	0x40020040
 80044e4:	40020058 	.word	0x40020058
 80044e8:	40020070 	.word	0x40020070
 80044ec:	40020088 	.word	0x40020088
 80044f0:	400200a0 	.word	0x400200a0
 80044f4:	400200b8 	.word	0x400200b8
 80044f8:	40020410 	.word	0x40020410
 80044fc:	40020428 	.word	0x40020428
 8004500:	40020440 	.word	0x40020440
 8004504:	40020458 	.word	0x40020458
 8004508:	40020470 	.word	0x40020470
 800450c:	40020488 	.word	0x40020488
 8004510:	400204a0 	.word	0x400204a0
 8004514:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2208      	movs	r2, #8
 8004522:	409a      	lsls	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8088 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8082 	beq.w	800463e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a41      	ldr	r2, [pc, #260]	; (8004644 <HAL_DMA_IRQHandler+0xe14>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <HAL_DMA_IRQHandler+0xe18>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a3e      	ldr	r2, [pc, #248]	; (800464c <HAL_DMA_IRQHandler+0xe1c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a3c      	ldr	r2, [pc, #240]	; (8004650 <HAL_DMA_IRQHandler+0xe20>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <HAL_DMA_IRQHandler+0xe24>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a39      	ldr	r2, [pc, #228]	; (8004658 <HAL_DMA_IRQHandler+0xe28>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a38      	ldr	r2, [pc, #224]	; (800465c <HAL_DMA_IRQHandler+0xe2c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a36      	ldr	r2, [pc, #216]	; (8004660 <HAL_DMA_IRQHandler+0xe30>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a35      	ldr	r2, [pc, #212]	; (8004664 <HAL_DMA_IRQHandler+0xe34>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a33      	ldr	r2, [pc, #204]	; (8004668 <HAL_DMA_IRQHandler+0xe38>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a32      	ldr	r2, [pc, #200]	; (800466c <HAL_DMA_IRQHandler+0xe3c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a30      	ldr	r2, [pc, #192]	; (8004670 <HAL_DMA_IRQHandler+0xe40>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <HAL_DMA_IRQHandler+0xe44>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <HAL_DMA_IRQHandler+0xe48>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	; (800467c <HAL_DMA_IRQHandler+0xe4c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_IRQHandler+0xdaa>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <HAL_DMA_IRQHandler+0xe50>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_IRQHandler+0xdbc>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 021c 	bic.w	r2, r2, #28
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e007      	b.n	80045fc <HAL_DMA_IRQHandler+0xdcc>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 020e 	bic.w	r2, r2, #14
 80045fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
 8004632:	e004      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800463e:	3728      	adds	r7, #40	; 0x28
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40020010 	.word	0x40020010
 8004648:	40020028 	.word	0x40020028
 800464c:	40020040 	.word	0x40020040
 8004650:	40020058 	.word	0x40020058
 8004654:	40020070 	.word	0x40020070
 8004658:	40020088 	.word	0x40020088
 800465c:	400200a0 	.word	0x400200a0
 8004660:	400200b8 	.word	0x400200b8
 8004664:	40020410 	.word	0x40020410
 8004668:	40020428 	.word	0x40020428
 800466c:	40020440 	.word	0x40020440
 8004670:	40020458 	.word	0x40020458
 8004674:	40020470 	.word	0x40020470
 8004678:	40020488 	.word	0x40020488
 800467c:	400204a0 	.word	0x400204a0
 8004680:	400204b8 	.word	0x400204b8

08004684 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <DMA_SetConfig+0x230>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d072      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a82      	ldr	r2, [pc, #520]	; (80048b8 <DMA_SetConfig+0x234>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d06d      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a81      	ldr	r2, [pc, #516]	; (80048bc <DMA_SetConfig+0x238>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d068      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a7f      	ldr	r2, [pc, #508]	; (80048c0 <DMA_SetConfig+0x23c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d063      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7e      	ldr	r2, [pc, #504]	; (80048c4 <DMA_SetConfig+0x240>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d05e      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a7c      	ldr	r2, [pc, #496]	; (80048c8 <DMA_SetConfig+0x244>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d059      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7b      	ldr	r2, [pc, #492]	; (80048cc <DMA_SetConfig+0x248>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d054      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a79      	ldr	r2, [pc, #484]	; (80048d0 <DMA_SetConfig+0x24c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d04f      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a78      	ldr	r2, [pc, #480]	; (80048d4 <DMA_SetConfig+0x250>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d04a      	beq.n	800478e <DMA_SetConfig+0x10a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a76      	ldr	r2, [pc, #472]	; (80048d8 <DMA_SetConfig+0x254>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d045      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a75      	ldr	r2, [pc, #468]	; (80048dc <DMA_SetConfig+0x258>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d040      	beq.n	800478e <DMA_SetConfig+0x10a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a73      	ldr	r2, [pc, #460]	; (80048e0 <DMA_SetConfig+0x25c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d03b      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a72      	ldr	r2, [pc, #456]	; (80048e4 <DMA_SetConfig+0x260>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d036      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a70      	ldr	r2, [pc, #448]	; (80048e8 <DMA_SetConfig+0x264>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d031      	beq.n	800478e <DMA_SetConfig+0x10a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6f      	ldr	r2, [pc, #444]	; (80048ec <DMA_SetConfig+0x268>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d02c      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a6d      	ldr	r2, [pc, #436]	; (80048f0 <DMA_SetConfig+0x26c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d027      	beq.n	800478e <DMA_SetConfig+0x10a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6c      	ldr	r2, [pc, #432]	; (80048f4 <DMA_SetConfig+0x270>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a6a      	ldr	r2, [pc, #424]	; (80048f8 <DMA_SetConfig+0x274>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a69      	ldr	r2, [pc, #420]	; (80048fc <DMA_SetConfig+0x278>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <DMA_SetConfig+0x10a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a67      	ldr	r2, [pc, #412]	; (8004900 <DMA_SetConfig+0x27c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a66      	ldr	r2, [pc, #408]	; (8004904 <DMA_SetConfig+0x280>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a64      	ldr	r2, [pc, #400]	; (8004908 <DMA_SetConfig+0x284>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <DMA_SetConfig+0x10a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a63      	ldr	r2, [pc, #396]	; (800490c <DMA_SetConfig+0x288>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <DMA_SetConfig+0x10a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a61      	ldr	r2, [pc, #388]	; (8004910 <DMA_SetConfig+0x28c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <DMA_SetConfig+0x10e>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <DMA_SetConfig+0x110>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3e      	ldr	r2, [pc, #248]	; (80048b4 <DMA_SetConfig+0x230>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04a      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3d      	ldr	r2, [pc, #244]	; (80048b8 <DMA_SetConfig+0x234>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d045      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3b      	ldr	r2, [pc, #236]	; (80048bc <DMA_SetConfig+0x238>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d040      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3a      	ldr	r2, [pc, #232]	; (80048c0 <DMA_SetConfig+0x23c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d03b      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <DMA_SetConfig+0x240>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d036      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <DMA_SetConfig+0x244>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d031      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a35      	ldr	r2, [pc, #212]	; (80048cc <DMA_SetConfig+0x248>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02c      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a34      	ldr	r2, [pc, #208]	; (80048d0 <DMA_SetConfig+0x24c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d027      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a32      	ldr	r2, [pc, #200]	; (80048d4 <DMA_SetConfig+0x250>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a31      	ldr	r2, [pc, #196]	; (80048d8 <DMA_SetConfig+0x254>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01d      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <DMA_SetConfig+0x258>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2e      	ldr	r2, [pc, #184]	; (80048e0 <DMA_SetConfig+0x25c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <DMA_SetConfig+0x260>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2b      	ldr	r2, [pc, #172]	; (80048e8 <DMA_SetConfig+0x264>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a29      	ldr	r2, [pc, #164]	; (80048ec <DMA_SetConfig+0x268>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <DMA_SetConfig+0x1d0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <DMA_SetConfig+0x26c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <DMA_SetConfig+0x1d4>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <DMA_SetConfig+0x1d6>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d05a      	beq.n	8004914 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	223f      	movs	r2, #63	; 0x3f
 8004868:	409a      	lsls	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800487c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d108      	bne.n	80048a0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800489e:	e087      	b.n	80049b0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	60da      	str	r2, [r3, #12]
}
 80048b0:	e07e      	b.n	80049b0 <DMA_SetConfig+0x32c>
 80048b2:	bf00      	nop
 80048b4:	40020010 	.word	0x40020010
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020070 	.word	0x40020070
 80048c8:	40020088 	.word	0x40020088
 80048cc:	400200a0 	.word	0x400200a0
 80048d0:	400200b8 	.word	0x400200b8
 80048d4:	40020410 	.word	0x40020410
 80048d8:	40020428 	.word	0x40020428
 80048dc:	40020440 	.word	0x40020440
 80048e0:	40020458 	.word	0x40020458
 80048e4:	40020470 	.word	0x40020470
 80048e8:	40020488 	.word	0x40020488
 80048ec:	400204a0 	.word	0x400204a0
 80048f0:	400204b8 	.word	0x400204b8
 80048f4:	58025408 	.word	0x58025408
 80048f8:	5802541c 	.word	0x5802541c
 80048fc:	58025430 	.word	0x58025430
 8004900:	58025444 	.word	0x58025444
 8004904:	58025458 	.word	0x58025458
 8004908:	5802546c 	.word	0x5802546c
 800490c:	58025480 	.word	0x58025480
 8004910:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <DMA_SetConfig+0x338>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <DMA_SetConfig+0x33c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d01d      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <DMA_SetConfig+0x340>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <DMA_SetConfig+0x344>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <DMA_SetConfig+0x348>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <DMA_SetConfig+0x34c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <DMA_SetConfig+0x350>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <DMA_SetConfig+0x2e0>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <DMA_SetConfig+0x354>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <DMA_SetConfig+0x2e4>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <DMA_SetConfig+0x2e6>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2201      	movs	r2, #1
 8004978:	409a      	lsls	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d108      	bne.n	80049a0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	60da      	str	r2, [r3, #12]
}
 800499e:	e007      	b.n	80049b0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	58025408 	.word	0x58025408
 80049c0:	5802541c 	.word	0x5802541c
 80049c4:	58025430 	.word	0x58025430
 80049c8:	58025444 	.word	0x58025444
 80049cc:	58025458 	.word	0x58025458
 80049d0:	5802546c 	.word	0x5802546c
 80049d4:	58025480 	.word	0x58025480
 80049d8:	58025494 	.word	0x58025494

080049dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a42      	ldr	r2, [pc, #264]	; (8004af4 <DMA_CalcBaseAndBitshift+0x118>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d04a      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a41      	ldr	r2, [pc, #260]	; (8004af8 <DMA_CalcBaseAndBitshift+0x11c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d045      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <DMA_CalcBaseAndBitshift+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d040      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3e      	ldr	r2, [pc, #248]	; (8004b00 <DMA_CalcBaseAndBitshift+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d03b      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3c      	ldr	r2, [pc, #240]	; (8004b04 <DMA_CalcBaseAndBitshift+0x128>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d036      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3b      	ldr	r2, [pc, #236]	; (8004b08 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d031      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <DMA_CalcBaseAndBitshift+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02c      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <DMA_CalcBaseAndBitshift+0x134>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d027      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a36      	ldr	r2, [pc, #216]	; (8004b14 <DMA_CalcBaseAndBitshift+0x138>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d022      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01d      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a33      	ldr	r2, [pc, #204]	; (8004b1c <DMA_CalcBaseAndBitshift+0x140>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d018      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a32      	ldr	r2, [pc, #200]	; (8004b20 <DMA_CalcBaseAndBitshift+0x144>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a30      	ldr	r2, [pc, #192]	; (8004b24 <DMA_CalcBaseAndBitshift+0x148>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2f      	ldr	r2, [pc, #188]	; (8004b28 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2d      	ldr	r2, [pc, #180]	; (8004b2c <DMA_CalcBaseAndBitshift+0x150>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <DMA_CalcBaseAndBitshift+0xa8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <DMA_CalcBaseAndBitshift+0x154>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <DMA_CalcBaseAndBitshift+0xac>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <DMA_CalcBaseAndBitshift+0xae>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d024      	beq.n	8004ad8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3b10      	subs	r3, #16
 8004a96:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <DMA_CalcBaseAndBitshift+0x158>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	4a24      	ldr	r2, [pc, #144]	; (8004b38 <DMA_CalcBaseAndBitshift+0x15c>)
 8004aa8:	5cd3      	ldrb	r3, [r2, r3]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d908      	bls.n	8004ac8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <DMA_CalcBaseAndBitshift+0x160>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	1d1a      	adds	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ac6:	e00d      	b.n	8004ae4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <DMA_CalcBaseAndBitshift+0x160>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad6:	e005      	b.n	8004ae4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	aaaaaaab 	.word	0xaaaaaaab
 8004b38:	0800c55c 	.word	0x0800c55c
 8004b3c:	fffffc00 	.word	0xfffffc00

08004b40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d120      	bne.n	8004b96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d858      	bhi.n	8004c0e <DMA_CheckFifoParam+0xce>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <DMA_CheckFifoParam+0x24>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b87 	.word	0x08004b87
 8004b6c:	08004b75 	.word	0x08004b75
 8004b70:	08004c0f 	.word	0x08004c0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d048      	beq.n	8004c12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b84:	e045      	b.n	8004c12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b8e:	d142      	bne.n	8004c16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b94:	e03f      	b.n	8004c16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	d123      	bne.n	8004be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d838      	bhi.n	8004c1a <DMA_CheckFifoParam+0xda>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <DMA_CheckFifoParam+0x70>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc7 	.word	0x08004bc7
 8004bb8:	08004bc1 	.word	0x08004bc1
 8004bbc:	08004bd9 	.word	0x08004bd9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
        break;
 8004bc4:	e030      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d025      	beq.n	8004c1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bd6:	e022      	b.n	8004c1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004be0:	d11f      	bne.n	8004c22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004be6:	e01c      	b.n	8004c22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d902      	bls.n	8004bf6 <DMA_CheckFifoParam+0xb6>
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d003      	beq.n	8004bfc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004bf4:	e018      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bfa:	e015      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8004c0c:	e00b      	b.n	8004c26 <DMA_CheckFifoParam+0xe6>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e00a      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        break;
 8004c12:	bf00      	nop
 8004c14:	e008      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        break;
 8004c16:	bf00      	nop
 8004c18:	e006      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e004      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
        break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
    break;
 8004c26:	bf00      	nop
    }
  }

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a38      	ldr	r2, [pc, #224]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a36      	ldr	r2, [pc, #216]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a35      	ldr	r2, [pc, #212]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a32      	ldr	r2, [pc, #200]	; (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a30      	ldr	r2, [pc, #192]	; (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2f      	ldr	r2, [pc, #188]	; (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3b08      	subs	r3, #8
 8004ca8:	4a28      	ldr	r2, [pc, #160]	; (8004d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	461a      	mov	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004cc4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2201      	movs	r2, #1
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cd4:	e024      	b.n	8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3b10      	subs	r3, #16
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d806      	bhi.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d902      	bls.n	8004cfe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	58025408 	.word	0x58025408
 8004d30:	5802541c 	.word	0x5802541c
 8004d34:	58025430 	.word	0x58025430
 8004d38:	58025444 	.word	0x58025444
 8004d3c:	58025458 	.word	0x58025458
 8004d40:	5802546c 	.word	0x5802546c
 8004d44:	58025480 	.word	0x58025480
 8004d48:	58025494 	.word	0x58025494
 8004d4c:	cccccccd 	.word	0xcccccccd
 8004d50:	16009600 	.word	0x16009600
 8004d54:	58025880 	.word	0x58025880
 8004d58:	aaaaaaab 	.word	0xaaaaaaab
 8004d5c:	400204b8 	.word	0x400204b8
 8004d60:	4002040f 	.word	0x4002040f
 8004d64:	10008200 	.word	0x10008200
 8004d68:	40020880 	.word	0x40020880

08004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04a      	beq.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d847      	bhi.n	8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a25      	ldr	r2, [pc, #148]	; (8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d022      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d01d      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d101      	bne.n	8004ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004df4:	671a      	str	r2, [r3, #112]	; 0x70
 8004df6:	e009      	b.n	8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	461a      	mov	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e0a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	58025408 	.word	0x58025408
 8004e28:	5802541c 	.word	0x5802541c
 8004e2c:	58025430 	.word	0x58025430
 8004e30:	58025444 	.word	0x58025444
 8004e34:	58025458 	.word	0x58025458
 8004e38:	5802546c 	.word	0x5802546c
 8004e3c:	58025480 	.word	0x58025480
 8004e40:	58025494 	.word	0x58025494
 8004e44:	1600963f 	.word	0x1600963f
 8004e48:	58025940 	.word	0x58025940
 8004e4c:	1000823f 	.word	0x1000823f
 8004e50:	40020940 	.word	0x40020940

08004e54 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d105      	bne.n	8004e7a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e325      	b.n	80054c6 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e31e      	b.n	80054c6 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f040 830d 	bne.w	80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a82      	ldr	r2, [pc, #520]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d04a      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a81      	ldr	r2, [pc, #516]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d045      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7f      	ldr	r2, [pc, #508]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d040      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7e      	ldr	r2, [pc, #504]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d03b      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a7c      	ldr	r2, [pc, #496]	; (80050cc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d036      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a7b      	ldr	r2, [pc, #492]	; (80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d031      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a79      	ldr	r2, [pc, #484]	; (80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d02c      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a78      	ldr	r2, [pc, #480]	; (80050d8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d027      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a76      	ldr	r2, [pc, #472]	; (80050dc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a75      	ldr	r2, [pc, #468]	; (80050e0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d01d      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a73      	ldr	r2, [pc, #460]	; (80050e4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a72      	ldr	r2, [pc, #456]	; (80050e8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a70      	ldr	r2, [pc, #448]	; (80050ec <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6f      	ldr	r2, [pc, #444]	; (80050f0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a6d      	ldr	r2, [pc, #436]	; (80050f4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6c      	ldr	r2, [pc, #432]	; (80050f8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d101      	bne.n	8004f50 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f64:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	3308      	adds	r3, #8
 8004f74:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	223f      	movs	r2, #63	; 0x3f
 8004f80:	409a      	lsls	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e018      	b.n	8004fba <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6819      	ldr	r1, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f248 0320 	movw	r3, #32800	; 0x8020
 8004f96:	430b      	orrs	r3, r1
 8004f98:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fb41 	bl	8005648 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d072      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a3a      	ldr	r2, [pc, #232]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d06d      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a39      	ldr	r2, [pc, #228]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d068      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d063      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a36      	ldr	r2, [pc, #216]	; (80050cc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d05e      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a34      	ldr	r2, [pc, #208]	; (80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d059      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a33      	ldr	r2, [pc, #204]	; (80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d054      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a31      	ldr	r2, [pc, #196]	; (80050d8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d04f      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a30      	ldr	r2, [pc, #192]	; (80050dc <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04a      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d045      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2d      	ldr	r2, [pc, #180]	; (80050e4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d040      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d03b      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d036      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d031      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d02c      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d027      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a24      	ldr	r2, [pc, #144]	; (80050fc <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a22      	ldr	r2, [pc, #136]	; (8005100 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a21      	ldr	r2, [pc, #132]	; (8005104 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d132      	bne.n	800511c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e031      	b.n	800511e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80050ba:	bf00      	nop
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
 80050fc:	58025408 	.word	0x58025408
 8005100:	5802541c 	.word	0x5802541c
 8005104:	58025430 	.word	0x58025430
 8005108:	58025444 	.word	0x58025444
 800510c:	58025458 	.word	0x58025458
 8005110:	5802546c 	.word	0x5802546c
 8005114:	58025480 	.word	0x58025480
 8005118:	58025494 	.word	0x58025494
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00d      	beq.n	800513e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800512a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800513c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a85      	ldr	r2, [pc, #532]	; (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a83      	ldr	r2, [pc, #524]	; (800535c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a82      	ldr	r2, [pc, #520]	; (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a80      	ldr	r2, [pc, #512]	; (8005364 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7f      	ldr	r2, [pc, #508]	; (8005368 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7d      	ldr	r2, [pc, #500]	; (800536c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7c      	ldr	r2, [pc, #496]	; (8005370 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a7a      	ldr	r2, [pc, #488]	; (8005374 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a79      	ldr	r2, [pc, #484]	; (8005378 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a77      	ldr	r2, [pc, #476]	; (800537c <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a76      	ldr	r2, [pc, #472]	; (8005380 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a74      	ldr	r2, [pc, #464]	; (8005384 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a73      	ldr	r2, [pc, #460]	; (8005388 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a71      	ldr	r2, [pc, #452]	; (800538c <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a70      	ldr	r2, [pc, #448]	; (8005390 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a6e      	ldr	r2, [pc, #440]	; (8005394 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d022      	beq.n	800522e <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 021e 	bic.w	r2, r3, #30
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0216 	orr.w	r2, r2, #22
 80051fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800520a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005218:	2b00      	cmp	r3, #0
 800521a:	d022      	beq.n	8005262 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e019      	b.n	8005262 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f023 020e 	bic.w	r2, r3, #14
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 020a 	orr.w	r2, r2, #10
 8005240:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0204 	orr.w	r2, r2, #4
 8005260:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a3c      	ldr	r2, [pc, #240]	; (8005358 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d072      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a3a      	ldr	r2, [pc, #232]	; (800535c <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d06d      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a39      	ldr	r2, [pc, #228]	; (8005360 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d068      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a37      	ldr	r2, [pc, #220]	; (8005364 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d063      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a36      	ldr	r2, [pc, #216]	; (8005368 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d05e      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a34      	ldr	r2, [pc, #208]	; (800536c <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d059      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a33      	ldr	r2, [pc, #204]	; (8005370 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d054      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a31      	ldr	r2, [pc, #196]	; (8005374 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d04f      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a30      	ldr	r2, [pc, #192]	; (8005378 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d04a      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2e      	ldr	r2, [pc, #184]	; (800537c <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d045      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d040      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d03b      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d036      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a28      	ldr	r2, [pc, #160]	; (800538c <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d031      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d02c      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d027      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01d      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d132      	bne.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 8005352:	2301      	movs	r3, #1
 8005354:	e031      	b.n	80053ba <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8005356:	bf00      	nop
 8005358:	40020010 	.word	0x40020010
 800535c:	40020028 	.word	0x40020028
 8005360:	40020040 	.word	0x40020040
 8005364:	40020058 	.word	0x40020058
 8005368:	40020070 	.word	0x40020070
 800536c:	40020088 	.word	0x40020088
 8005370:	400200a0 	.word	0x400200a0
 8005374:	400200b8 	.word	0x400200b8
 8005378:	40020410 	.word	0x40020410
 800537c:	40020428 	.word	0x40020428
 8005380:	40020440 	.word	0x40020440
 8005384:	40020458 	.word	0x40020458
 8005388:	40020470 	.word	0x40020470
 800538c:	40020488 	.word	0x40020488
 8005390:	400204a0 	.word	0x400204a0
 8005394:	400204b8 	.word	0x400204b8
 8005398:	58025408 	.word	0x58025408
 800539c:	5802541c 	.word	0x5802541c
 80053a0:	58025430 	.word	0x58025430
 80053a4:	58025444 	.word	0x58025444
 80053a8:	58025458 	.word	0x58025458
 80053ac:	5802546c 	.word	0x5802546c
 80053b0:	58025480 	.word	0x58025480
 80053b4:	58025494 	.word	0x58025494
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01a      	beq.n	80053f4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a35      	ldr	r2, [pc, #212]	; (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d04a      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d045      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a32      	ldr	r2, [pc, #200]	; (80054d8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d040      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a31      	ldr	r2, [pc, #196]	; (80054dc <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d03b      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2f      	ldr	r2, [pc, #188]	; (80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d036      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2e      	ldr	r2, [pc, #184]	; (80054e4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d031      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02c      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d027      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d022      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d01d      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a25      	ldr	r2, [pc, #148]	; (80054fc <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a23      	ldr	r2, [pc, #140]	; (8005500 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a22      	ldr	r2, [pc, #136]	; (8005504 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a20      	ldr	r2, [pc, #128]	; (8005508 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1f      	ldr	r2, [pc, #124]	; (800550c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e00e      	b.n	80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e005      	b.n	80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40020010 	.word	0x40020010
 80054d4:	40020028 	.word	0x40020028
 80054d8:	40020040 	.word	0x40020040
 80054dc:	40020058 	.word	0x40020058
 80054e0:	40020070 	.word	0x40020070
 80054e4:	40020088 	.word	0x40020088
 80054e8:	400200a0 	.word	0x400200a0
 80054ec:	400200b8 	.word	0x400200b8
 80054f0:	40020410 	.word	0x40020410
 80054f4:	40020428 	.word	0x40020428
 80054f8:	40020440 	.word	0x40020440
 80054fc:	40020458 	.word	0x40020458
 8005500:	40020470 	.word	0x40020470
 8005504:	40020488 	.word	0x40020488
 8005508:	400204a0 	.word	0x400204a0
 800550c:	400204b8 	.word	0x400204b8

08005510 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a39      	ldr	r2, [pc, #228]	; (8005608 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d04a      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a37      	ldr	r2, [pc, #220]	; (800560c <HAL_DMAEx_ChangeMemory+0xfc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d045      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a36      	ldr	r2, [pc, #216]	; (8005610 <HAL_DMAEx_ChangeMemory+0x100>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d040      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a34      	ldr	r2, [pc, #208]	; (8005614 <HAL_DMAEx_ChangeMemory+0x104>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d03b      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a33      	ldr	r2, [pc, #204]	; (8005618 <HAL_DMAEx_ChangeMemory+0x108>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d036      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a31      	ldr	r2, [pc, #196]	; (800561c <HAL_DMAEx_ChangeMemory+0x10c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d031      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a30      	ldr	r2, [pc, #192]	; (8005620 <HAL_DMAEx_ChangeMemory+0x110>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d02c      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <HAL_DMAEx_ChangeMemory+0x114>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d027      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <HAL_DMAEx_ChangeMemory+0x118>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2b      	ldr	r2, [pc, #172]	; (800562c <HAL_DMAEx_ChangeMemory+0x11c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01d      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <HAL_DMAEx_ChangeMemory+0x120>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <HAL_DMAEx_ChangeMemory+0x124>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HAL_DMAEx_ChangeMemory+0x128>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <HAL_DMAEx_ChangeMemory+0x12c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a24      	ldr	r2, [pc, #144]	; (8005640 <HAL_DMAEx_ChangeMemory+0x130>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_DMAEx_ChangeMemory+0xae>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <HAL_DMAEx_ChangeMemory+0x134>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_DMAEx_ChangeMemory+0xb2>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_DMAEx_ChangeMemory+0xb4>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e010      	b.n	80055fa <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	611a      	str	r2, [r3, #16]
 80055e0:	e00b      	b.n	80055fa <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	60da      	str	r2, [r3, #12]
 80055f0:	e003      	b.n	80055fa <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8

08005648 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a46      	ldr	r2, [pc, #280]	; (8005774 <DMA_MultiBufferSetConfig+0x12c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d04a      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a44      	ldr	r2, [pc, #272]	; (8005778 <DMA_MultiBufferSetConfig+0x130>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d045      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a43      	ldr	r2, [pc, #268]	; (800577c <DMA_MultiBufferSetConfig+0x134>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d040      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a41      	ldr	r2, [pc, #260]	; (8005780 <DMA_MultiBufferSetConfig+0x138>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d03b      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a40      	ldr	r2, [pc, #256]	; (8005784 <DMA_MultiBufferSetConfig+0x13c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d036      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a3e      	ldr	r2, [pc, #248]	; (8005788 <DMA_MultiBufferSetConfig+0x140>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d031      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a3d      	ldr	r2, [pc, #244]	; (800578c <DMA_MultiBufferSetConfig+0x144>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d02c      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a3b      	ldr	r2, [pc, #236]	; (8005790 <DMA_MultiBufferSetConfig+0x148>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d027      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3a      	ldr	r2, [pc, #232]	; (8005794 <DMA_MultiBufferSetConfig+0x14c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a38      	ldr	r2, [pc, #224]	; (8005798 <DMA_MultiBufferSetConfig+0x150>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01d      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a37      	ldr	r2, [pc, #220]	; (800579c <DMA_MultiBufferSetConfig+0x154>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a35      	ldr	r2, [pc, #212]	; (80057a0 <DMA_MultiBufferSetConfig+0x158>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a34      	ldr	r2, [pc, #208]	; (80057a4 <DMA_MultiBufferSetConfig+0x15c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a32      	ldr	r2, [pc, #200]	; (80057a8 <DMA_MultiBufferSetConfig+0x160>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a31      	ldr	r2, [pc, #196]	; (80057ac <DMA_MultiBufferSetConfig+0x164>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <DMA_MultiBufferSetConfig+0xae>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <DMA_MultiBufferSetConfig+0x168>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <DMA_MultiBufferSetConfig+0xb2>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <DMA_MultiBufferSetConfig+0xb4>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d019      	beq.n	8005734 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d108      	bne.n	8005722 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005720:	e021      	b.n	8005766 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]
}
 8005732:	e018      	b.n	8005766 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d108      	bne.n	8005756 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	60da      	str	r2, [r3, #12]
}
 8005754:	e007      	b.n	8005766 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40020010 	.word	0x40020010
 8005778:	40020028 	.word	0x40020028
 800577c:	40020040 	.word	0x40020040
 8005780:	40020058 	.word	0x40020058
 8005784:	40020070 	.word	0x40020070
 8005788:	40020088 	.word	0x40020088
 800578c:	400200a0 	.word	0x400200a0
 8005790:	400200b8 	.word	0x400200b8
 8005794:	40020410 	.word	0x40020410
 8005798:	40020428 	.word	0x40020428
 800579c:	40020440 	.word	0x40020440
 80057a0:	40020458 	.word	0x40020458
 80057a4:	40020470 	.word	0x40020470
 80057a8:	40020488 	.word	0x40020488
 80057ac:	400204a0 	.word	0x400204a0
 80057b0:	400204b8 	.word	0x400204b8

080057b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057c2:	4b89      	ldr	r3, [pc, #548]	; (80059e8 <HAL_GPIO_Init+0x234>)
 80057c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057c6:	e194      	b.n	8005af2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	2101      	movs	r1, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8186 	beq.w	8005aec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d00b      	beq.n	8005800 <HAL_GPIO_Init+0x4c>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d007      	beq.n	8005800 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057f4:	2b11      	cmp	r3, #17
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b12      	cmp	r3, #18
 80057fe:	d130      	bne.n	8005862 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	2203      	movs	r2, #3
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005836:	2201      	movs	r2, #1
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 0201 	and.w	r2, r3, #1
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2203      	movs	r2, #3
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_Init+0xee>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b12      	cmp	r3, #18
 80058a0:	d123      	bne.n	80058ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	08da      	lsrs	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3208      	adds	r2, #8
 80058aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	08da      	lsrs	r2, r3, #3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3208      	adds	r2, #8
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	2203      	movs	r2, #3
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0203 	and.w	r2, r3, #3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80e0 	beq.w	8005aec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592c:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <HAL_GPIO_Init+0x238>)
 800592e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005932:	4a2e      	ldr	r2, [pc, #184]	; (80059ec <HAL_GPIO_Init+0x238>)
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800593c:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <HAL_GPIO_Init+0x238>)
 800593e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800594a:	4a29      	ldr	r2, [pc, #164]	; (80059f0 <HAL_GPIO_Init+0x23c>)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	3302      	adds	r3, #2
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	220f      	movs	r2, #15
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <HAL_GPIO_Init+0x240>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d052      	beq.n	8005a1c <HAL_GPIO_Init+0x268>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_GPIO_Init+0x244>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d031      	beq.n	80059e2 <HAL_GPIO_Init+0x22e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_GPIO_Init+0x248>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <HAL_GPIO_Init+0x22a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <HAL_GPIO_Init+0x24c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d025      	beq.n	80059da <HAL_GPIO_Init+0x226>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1c      	ldr	r2, [pc, #112]	; (8005a04 <HAL_GPIO_Init+0x250>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01f      	beq.n	80059d6 <HAL_GPIO_Init+0x222>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <HAL_GPIO_Init+0x254>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d019      	beq.n	80059d2 <HAL_GPIO_Init+0x21e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	; (8005a0c <HAL_GPIO_Init+0x258>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_GPIO_Init+0x21a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_GPIO_Init+0x25c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00d      	beq.n	80059ca <HAL_GPIO_Init+0x216>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <HAL_GPIO_Init+0x260>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <HAL_GPIO_Init+0x212>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <HAL_GPIO_Init+0x264>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_GPIO_Init+0x20e>
 80059be:	2309      	movs	r3, #9
 80059c0:	e02d      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059c2:	230a      	movs	r3, #10
 80059c4:	e02b      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059c6:	2308      	movs	r3, #8
 80059c8:	e029      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059ca:	2307      	movs	r3, #7
 80059cc:	e027      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059ce:	2306      	movs	r3, #6
 80059d0:	e025      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059d2:	2305      	movs	r3, #5
 80059d4:	e023      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059d6:	2304      	movs	r3, #4
 80059d8:	e021      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059da:	2303      	movs	r3, #3
 80059dc:	e01f      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e01d      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e01b      	b.n	8005a1e <HAL_GPIO_Init+0x26a>
 80059e6:	bf00      	nop
 80059e8:	58000080 	.word	0x58000080
 80059ec:	58024400 	.word	0x58024400
 80059f0:	58000400 	.word	0x58000400
 80059f4:	58020000 	.word	0x58020000
 80059f8:	58020400 	.word	0x58020400
 80059fc:	58020800 	.word	0x58020800
 8005a00:	58020c00 	.word	0x58020c00
 8005a04:	58021000 	.word	0x58021000
 8005a08:	58021400 	.word	0x58021400
 8005a0c:	58021800 	.word	0x58021800
 8005a10:	58021c00 	.word	0x58021c00
 8005a14:	58022000 	.word	0x58022000
 8005a18:	58022400 	.word	0x58022400
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	f002 0203 	and.w	r2, r2, #3
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	4093      	lsls	r3, r2
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a2e:	4938      	ldr	r1, [pc, #224]	; (8005b10 <HAL_GPIO_Init+0x35c>)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	3302      	adds	r3, #2
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f ae63 	bne.w	80057c8 <HAL_GPIO_Init+0x14>
  }
}
 8005b02:	bf00      	nop
 8005b04:	3724      	adds	r7, #36	; 0x24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	58000400 	.word	0x58000400

08005b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	807b      	strh	r3, [r7, #2]
 8005b20:	4613      	mov	r3, r2
 8005b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b24:	787b      	ldrb	r3, [r7, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b2a:	887a      	ldrh	r2, [r7, #2]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b30:	e003      	b.n	8005b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	041a      	lsls	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	619a      	str	r2, [r3, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e07f      	b.n	8005c5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fb f81e 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2224      	movs	r2, #36	; 0x24
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bbe:	609a      	str	r2, [r3, #8]
 8005bc0:	e006      	b.n	8005bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d104      	bne.n	8005be2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_I2C_Init+0x11c>)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	ea42 0103 	orr.w	r1, r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	02008000 	.word	0x02008000

08005c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	817b      	strh	r3, [r7, #10]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	813b      	strh	r3, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	f040 80fd 	bne.w	8005e8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_I2C_Mem_Read+0x34>
 8005c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0f1      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_I2C_Mem_Read+0x4e>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e0ea      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cbe:	f7fb fe23 	bl	8001908 <HAL_GetTick>
 8005cc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	2319      	movs	r3, #25
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f95b 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0d5      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2222      	movs	r2, #34	; 0x22
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2240      	movs	r2, #64	; 0x40
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a3a      	ldr	r2, [r7, #32]
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d08:	88f8      	ldrh	r0, [r7, #6]
 8005d0a:	893a      	ldrh	r2, [r7, #8]
 8005d0c:	8979      	ldrh	r1, [r7, #10]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4603      	mov	r3, r0
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f8bf 	bl	8005e9c <I2C_RequestMemoryRead>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0ad      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2bff      	cmp	r3, #255	; 0xff
 8005d38:	d90e      	bls.n	8005d58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	8979      	ldrh	r1, [r7, #10]
 8005d48:	4b52      	ldr	r3, [pc, #328]	; (8005e94 <HAL_I2C_Mem_Read+0x22c>)
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fa3d 	bl	80061d0 <I2C_TransferConfig>
 8005d56:	e00f      	b.n	8005d78 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	8979      	ldrh	r1, [r7, #10]
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_I2C_Mem_Read+0x22c>)
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa2c 	bl	80061d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2104      	movs	r1, #4
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f902 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07c      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d034      	beq.n	8005e38 <HAL_I2C_Mem_Read+0x1d0>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d130      	bne.n	8005e38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2180      	movs	r1, #128	; 0x80
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f8d3 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e04d      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2bff      	cmp	r3, #255	; 0xff
 8005df8:	d90e      	bls.n	8005e18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	22ff      	movs	r2, #255	; 0xff
 8005dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	8979      	ldrh	r1, [r7, #10]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f9dd 	bl	80061d0 <I2C_TransferConfig>
 8005e16:	e00f      	b.n	8005e38 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f9cc 	bl	80061d0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d19a      	bne.n	8005d78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f920 	bl	800608c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01a      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_I2C_Mem_Read+0x230>)
 8005e6a:	400b      	ands	r3, r1
 8005e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	80002400 	.word	0x80002400
 8005e98:	fe00e800 	.word	0xfe00e800

08005e9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	817b      	strh	r3, [r7, #10]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	813b      	strh	r3, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	8979      	ldrh	r1, [r7, #10]
 8005ebc:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <I2C_RequestMemoryRead+0xa4>)
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f984 	bl	80061d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	69b9      	ldr	r1, [r7, #24]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f89d 	bl	800600c <I2C_WaitOnTXISFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e02c      	b.n	8005f36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d105      	bne.n	8005eee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee2:	893b      	ldrh	r3, [r7, #8]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
 8005eec:	e015      	b.n	8005f1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005eee:	893b      	ldrh	r3, [r7, #8]
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	69b9      	ldr	r1, [r7, #24]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f883 	bl	800600c <I2C_WaitOnTXISFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e012      	b.n	8005f36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f10:	893b      	ldrh	r3, [r7, #8]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2140      	movs	r1, #64	; 0x40
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f831 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	80002000 	.word	0x80002000

08005f44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d103      	bne.n	8005f62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d007      	beq.n	8005f80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	619a      	str	r2, [r3, #24]
  }
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f9c:	e022      	b.n	8005fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d01e      	beq.n	8005fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fb fcaf 	bl	8001908 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d113      	bne.n	8005fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e00f      	b.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4013      	ands	r3, r2
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2301      	moveq	r3, #1
 8005ff6:	2300      	movne	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d0cd      	beq.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006018:	e02c      	b.n	8006074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f870 	bl	8006104 <I2C_IsAcknowledgeFailed>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e02a      	b.n	8006084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d01e      	beq.n	8006074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006036:	f7fb fc67 	bl	8001908 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	d302      	bcc.n	800604c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d113      	bne.n	8006074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e007      	b.n	8006084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d1cb      	bne.n	800601a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006098:	e028      	b.n	80060ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f830 	bl	8006104 <I2C_IsAcknowledgeFailed>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e026      	b.n	80060fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ae:	f7fb fc2b 	bl	8001908 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d302      	bcc.n	80060c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d113      	bne.n	80060ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e007      	b.n	80060fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d1cf      	bne.n	800609a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b10      	cmp	r3, #16
 800611c:	d151      	bne.n	80061c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800611e:	e022      	b.n	8006166 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d01e      	beq.n	8006166 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fb fbee 	bl	8001908 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <I2C_IsAcknowledgeFailed+0x3a>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d113      	bne.n	8006166 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	f043 0220 	orr.w	r2, r3, #32
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e02e      	b.n	80061c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b20      	cmp	r3, #32
 8006172:	d1d5      	bne.n	8006120 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2220      	movs	r2, #32
 8006182:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fedd 	bl	8005f44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <I2C_IsAcknowledgeFailed+0xc8>)
 8006196:	400b      	ands	r3, r1
 8006198:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	f043 0204 	orr.w	r2, r3, #4
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	fe00e800 	.word	0xfe00e800

080061d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	817b      	strh	r3, [r7, #10]
 80061de:	4613      	mov	r3, r2
 80061e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	0d5b      	lsrs	r3, r3, #21
 80061ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80061f0:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <I2C_TransferConfig+0x58>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	43db      	mvns	r3, r3
 80061f6:	ea02 0103 	and.w	r1, r2, r3
 80061fa:	897b      	ldrh	r3, [r7, #10]
 80061fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006200:	7a7b      	ldrb	r3, [r7, #9]
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	431a      	orrs	r2, r3
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	431a      	orrs	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	03ff63ff 	.word	0x03ff63ff

0800622c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d138      	bne.n	80062b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800624c:	2302      	movs	r3, #2
 800624e:	e032      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6819      	ldr	r1, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d139      	bne.n	800634c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e033      	b.n	800634e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2224      	movs	r2, #36	; 0x24
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006314:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	e000      	b.n	800634e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800634c:	2302      	movs	r3, #2
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_PWREx_ConfigSupply+0x70>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b04      	cmp	r3, #4
 800636e:	d00a      	beq.n	8006386 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_PWREx_ConfigSupply+0x70>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d001      	beq.n	8006382 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e01f      	b.n	80063c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e01d      	b.n	80063c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <HAL_PWREx_ConfigSupply+0x70>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f023 0207 	bic.w	r2, r3, #7
 800638e:	490f      	ldr	r1, [pc, #60]	; (80063cc <HAL_PWREx_ConfigSupply+0x70>)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4313      	orrs	r3, r2
 8006394:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006396:	f7fb fab7 	bl	8001908 <HAL_GetTick>
 800639a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800639c:	e009      	b.n	80063b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800639e:	f7fb fab3 	bl	8001908 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ac:	d901      	bls.n	80063b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e007      	b.n	80063c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <HAL_PWREx_ConfigSupply+0x70>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	d1ee      	bne.n	800639e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	58024800 	.word	0x58024800

080063d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	; 0x30
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e3ff      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 8087 	beq.w	80064fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f0:	4b99      	ldr	r3, [pc, #612]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063fa:	4b97      	ldr	r3, [pc, #604]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	2b10      	cmp	r3, #16
 8006404:	d007      	beq.n	8006416 <HAL_RCC_OscConfig+0x46>
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b18      	cmp	r3, #24
 800640a:	d110      	bne.n	800642e <HAL_RCC_OscConfig+0x5e>
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d10b      	bne.n	800642e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006416:	4b90      	ldr	r3, [pc, #576]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d06c      	beq.n	80064fc <HAL_RCC_OscConfig+0x12c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d168      	bne.n	80064fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e3d9      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d106      	bne.n	8006446 <HAL_RCC_OscConfig+0x76>
 8006438:	4b87      	ldr	r3, [pc, #540]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a86      	ldr	r2, [pc, #536]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800643e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	e02e      	b.n	80064a4 <HAL_RCC_OscConfig+0xd4>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10c      	bne.n	8006468 <HAL_RCC_OscConfig+0x98>
 800644e:	4b82      	ldr	r3, [pc, #520]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a81      	ldr	r2, [pc, #516]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	4b7f      	ldr	r3, [pc, #508]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7e      	ldr	r2, [pc, #504]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	e01d      	b.n	80064a4 <HAL_RCC_OscConfig+0xd4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006470:	d10c      	bne.n	800648c <HAL_RCC_OscConfig+0xbc>
 8006472:	4b79      	ldr	r3, [pc, #484]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a78      	ldr	r2, [pc, #480]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	4b76      	ldr	r3, [pc, #472]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a75      	ldr	r2, [pc, #468]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	e00b      	b.n	80064a4 <HAL_RCC_OscConfig+0xd4>
 800648c:	4b72      	ldr	r3, [pc, #456]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a71      	ldr	r2, [pc, #452]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	4b6f      	ldr	r3, [pc, #444]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a6e      	ldr	r2, [pc, #440]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800649e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d013      	beq.n	80064d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fb fa2c 	bl	8001908 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064b4:	f7fb fa28 	bl	8001908 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b64      	cmp	r3, #100	; 0x64
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e38d      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064c6:	4b64      	ldr	r3, [pc, #400]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0xe4>
 80064d2:	e014      	b.n	80064fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fb fa18 	bl	8001908 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064dc:	f7fb fa14 	bl	8001908 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	; 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e379      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064ee:	4b5a      	ldr	r3, [pc, #360]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x10c>
 80064fa:	e000      	b.n	80064fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80ae 	beq.w	8006668 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800650c:	4b52      	ldr	r3, [pc, #328]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006514:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006516:	4b50      	ldr	r3, [pc, #320]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <HAL_RCC_OscConfig+0x162>
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	2b18      	cmp	r3, #24
 8006526:	d13a      	bne.n	800659e <HAL_RCC_OscConfig+0x1ce>
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d135      	bne.n	800659e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006532:	4b49      	ldr	r3, [pc, #292]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_RCC_OscConfig+0x17a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e34b      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654a:	f7fb f9e9 	bl	8001920 <HAL_GetREVID>
 800654e:	4602      	mov	r2, r0
 8006550:	f241 0303 	movw	r3, #4099	; 0x1003
 8006554:	429a      	cmp	r2, r3
 8006556:	d817      	bhi.n	8006588 <HAL_RCC_OscConfig+0x1b8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	d108      	bne.n	8006572 <HAL_RCC_OscConfig+0x1a2>
 8006560:	4b3d      	ldr	r3, [pc, #244]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006568:	4a3b      	ldr	r2, [pc, #236]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006570:	e07a      	b.n	8006668 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006572:	4b39      	ldr	r3, [pc, #228]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	031b      	lsls	r3, r3, #12
 8006580:	4935      	ldr	r1, [pc, #212]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006582:	4313      	orrs	r3, r2
 8006584:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006586:	e06f      	b.n	8006668 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006588:	4b33      	ldr	r3, [pc, #204]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	061b      	lsls	r3, r3, #24
 8006596:	4930      	ldr	r1, [pc, #192]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006598:	4313      	orrs	r3, r2
 800659a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800659c:	e064      	b.n	8006668 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d045      	beq.n	8006632 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065a6:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f023 0219 	bic.w	r2, r3, #25
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4929      	ldr	r1, [pc, #164]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fb f9a6 	bl	8001908 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c0:	f7fb f9a2 	bl	8001908 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e307      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065d2:	4b21      	ldr	r3, [pc, #132]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f0      	beq.n	80065c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065de:	f7fb f99f 	bl	8001920 <HAL_GetREVID>
 80065e2:	4602      	mov	r2, r0
 80065e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d817      	bhi.n	800661c <HAL_RCC_OscConfig+0x24c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d108      	bne.n	8006606 <HAL_RCC_OscConfig+0x236>
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065fc:	4a16      	ldr	r2, [pc, #88]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 80065fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006602:	6053      	str	r3, [r2, #4]
 8006604:	e030      	b.n	8006668 <HAL_RCC_OscConfig+0x298>
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	031b      	lsls	r3, r3, #12
 8006614:	4910      	ldr	r1, [pc, #64]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006616:	4313      	orrs	r3, r2
 8006618:	604b      	str	r3, [r1, #4]
 800661a:	e025      	b.n	8006668 <HAL_RCC_OscConfig+0x298>
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	490b      	ldr	r1, [pc, #44]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
 8006630:	e01a      	b.n	8006668 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a08      	ldr	r2, [pc, #32]	; (8006658 <HAL_RCC_OscConfig+0x288>)
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663e:	f7fb f963 	bl	8001908 <HAL_GetTick>
 8006642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006644:	e00a      	b.n	800665c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006646:	f7fb f95f 	bl	8001908 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d903      	bls.n	800665c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e2c4      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
 8006658:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800665c:	4ba4      	ldr	r3, [pc, #656]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1ee      	bne.n	8006646 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80a9 	beq.w	80067c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006676:	4b9e      	ldr	r3, [pc, #632]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800667e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006680:	4b9b      	ldr	r3, [pc, #620]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b08      	cmp	r3, #8
 800668a:	d007      	beq.n	800669c <HAL_RCC_OscConfig+0x2cc>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b18      	cmp	r3, #24
 8006690:	d13a      	bne.n	8006708 <HAL_RCC_OscConfig+0x338>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d135      	bne.n	8006708 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800669c:	4b94      	ldr	r3, [pc, #592]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_OscConfig+0x2e4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	2b80      	cmp	r3, #128	; 0x80
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e296      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066b4:	f7fb f934 	bl	8001920 <HAL_GetREVID>
 80066b8:	4602      	mov	r2, r0
 80066ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80066be:	429a      	cmp	r2, r3
 80066c0:	d817      	bhi.n	80066f2 <HAL_RCC_OscConfig+0x322>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d108      	bne.n	80066dc <HAL_RCC_OscConfig+0x30c>
 80066ca:	4b89      	ldr	r3, [pc, #548]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066d2:	4a87      	ldr	r2, [pc, #540]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80066d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066da:	e075      	b.n	80067c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066dc:	4b84      	ldr	r3, [pc, #528]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	069b      	lsls	r3, r3, #26
 80066ea:	4981      	ldr	r1, [pc, #516]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066f0:	e06a      	b.n	80067c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066f2:	4b7f      	ldr	r3, [pc, #508]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	497b      	ldr	r1, [pc, #492]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006702:	4313      	orrs	r3, r2
 8006704:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006706:	e05f      	b.n	80067c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d042      	beq.n	8006796 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006710:	4b77      	ldr	r3, [pc, #476]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a76      	ldr	r2, [pc, #472]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fb f8f4 	bl	8001908 <HAL_GetTick>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006724:	f7fb f8f0 	bl	8001908 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e255      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006736:	4b6e      	ldr	r3, [pc, #440]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006742:	f7fb f8ed 	bl	8001920 <HAL_GetREVID>
 8006746:	4602      	mov	r2, r0
 8006748:	f241 0303 	movw	r3, #4099	; 0x1003
 800674c:	429a      	cmp	r2, r3
 800674e:	d817      	bhi.n	8006780 <HAL_RCC_OscConfig+0x3b0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	2b20      	cmp	r3, #32
 8006756:	d108      	bne.n	800676a <HAL_RCC_OscConfig+0x39a>
 8006758:	4b65      	ldr	r3, [pc, #404]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006760:	4a63      	ldr	r2, [pc, #396]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006766:	6053      	str	r3, [r2, #4]
 8006768:	e02e      	b.n	80067c8 <HAL_RCC_OscConfig+0x3f8>
 800676a:	4b61      	ldr	r3, [pc, #388]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	069b      	lsls	r3, r3, #26
 8006778:	495d      	ldr	r1, [pc, #372]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800677a:	4313      	orrs	r3, r2
 800677c:	604b      	str	r3, [r1, #4]
 800677e:	e023      	b.n	80067c8 <HAL_RCC_OscConfig+0x3f8>
 8006780:	4b5b      	ldr	r3, [pc, #364]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	4958      	ldr	r1, [pc, #352]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006790:	4313      	orrs	r3, r2
 8006792:	60cb      	str	r3, [r1, #12]
 8006794:	e018      	b.n	80067c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006796:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a55      	ldr	r2, [pc, #340]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800679c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fb f8b1 	bl	8001908 <HAL_GetTick>
 80067a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067aa:	f7fb f8ad 	bl	8001908 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e212      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067bc:	4b4c      	ldr	r3, [pc, #304]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f0      	bne.n	80067aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d036      	beq.n	8006842 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d019      	beq.n	8006810 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067dc:	4b44      	ldr	r3, [pc, #272]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80067de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e0:	4a43      	ldr	r2, [pc, #268]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e8:	f7fb f88e 	bl	8001908 <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067f0:	f7fb f88a 	bl	8001908 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e1ef      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006802:	4b3b      	ldr	r3, [pc, #236]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0x420>
 800680e:	e018      	b.n	8006842 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006810:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006814:	4a36      	ldr	r2, [pc, #216]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fb f874 	bl	8001908 <HAL_GetTick>
 8006820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006824:	f7fb f870 	bl	8001908 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e1d5      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006836:	4b2e      	ldr	r3, [pc, #184]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d036      	beq.n	80068bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d019      	beq.n	800688a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a25      	ldr	r2, [pc, #148]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800685c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006862:	f7fb f851 	bl	8001908 <HAL_GetTick>
 8006866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800686a:	f7fb f84d 	bl	8001908 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e1b2      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800687c:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x49a>
 8006888:	e018      	b.n	80068bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800688a:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 8006890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006894:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006896:	f7fb f837 	bl	8001908 <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800689e:	f7fb f833 	bl	8001908 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e198      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <HAL_RCC_OscConfig+0x520>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f0      	bne.n	800689e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8085 	beq.w	80069d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <HAL_RCC_OscConfig+0x524>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_RCC_OscConfig+0x524>)
 80068d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068d6:	f7fb f817 	bl	8001908 <HAL_GetTick>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068dc:	e00c      	b.n	80068f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068de:	f7fb f813 	bl	8001908 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b64      	cmp	r3, #100	; 0x64
 80068ea:	d905      	bls.n	80068f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e178      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
 80068f0:	58024400 	.word	0x58024400
 80068f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f8:	4b96      	ldr	r3, [pc, #600]	; (8006b54 <HAL_RCC_OscConfig+0x784>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0ec      	beq.n	80068de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d106      	bne.n	800691a <HAL_RCC_OscConfig+0x54a>
 800690c:	4b92      	ldr	r3, [pc, #584]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	4a91      	ldr	r2, [pc, #580]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	6713      	str	r3, [r2, #112]	; 0x70
 8006918:	e02d      	b.n	8006976 <HAL_RCC_OscConfig+0x5a6>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10c      	bne.n	800693c <HAL_RCC_OscConfig+0x56c>
 8006922:	4b8d      	ldr	r3, [pc, #564]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	4a8c      	ldr	r2, [pc, #560]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	6713      	str	r3, [r2, #112]	; 0x70
 800692e:	4b8a      	ldr	r3, [pc, #552]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	4a89      	ldr	r2, [pc, #548]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	6713      	str	r3, [r2, #112]	; 0x70
 800693a:	e01c      	b.n	8006976 <HAL_RCC_OscConfig+0x5a6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b05      	cmp	r3, #5
 8006942:	d10c      	bne.n	800695e <HAL_RCC_OscConfig+0x58e>
 8006944:	4b84      	ldr	r3, [pc, #528]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a83      	ldr	r2, [pc, #524]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 800694a:	f043 0304 	orr.w	r3, r3, #4
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
 8006950:	4b81      	ldr	r3, [pc, #516]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006954:	4a80      	ldr	r2, [pc, #512]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	6713      	str	r3, [r2, #112]	; 0x70
 800695c:	e00b      	b.n	8006976 <HAL_RCC_OscConfig+0x5a6>
 800695e:	4b7e      	ldr	r3, [pc, #504]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a7d      	ldr	r2, [pc, #500]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	6713      	str	r3, [r2, #112]	; 0x70
 800696a:	4b7b      	ldr	r3, [pc, #492]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	4a7a      	ldr	r2, [pc, #488]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d015      	beq.n	80069aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697e:	f7fa ffc3 	bl	8001908 <HAL_GetTick>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fa ffbf 	bl	8001908 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e122      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800699c:	4b6e      	ldr	r3, [pc, #440]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0ee      	beq.n	8006986 <HAL_RCC_OscConfig+0x5b6>
 80069a8:	e014      	b.n	80069d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069aa:	f7fa ffad 	bl	8001908 <HAL_GetTick>
 80069ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fa ffa9 	bl	8001908 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e10c      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069c8:	4b63      	ldr	r3, [pc, #396]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1ee      	bne.n	80069b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8101 	beq.w	8006be0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069de:	4b5e      	ldr	r3, [pc, #376]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e6:	2b18      	cmp	r3, #24
 80069e8:	f000 80bc 	beq.w	8006b64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	f040 8095 	bne.w	8006b20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f6:	4b58      	ldr	r3, [pc, #352]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a57      	ldr	r2, [pc, #348]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 80069fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a02:	f7fa ff81 	bl	8001908 <HAL_GetTick>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0a:	f7fa ff7d 	bl	8001908 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e0e2      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a1c:	4b4e      	ldr	r3, [pc, #312]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f0      	bne.n	8006a0a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a28:	4b4b      	ldr	r3, [pc, #300]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <HAL_RCC_OscConfig+0x78c>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a38:	0112      	lsls	r2, r2, #4
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	4946      	ldr	r1, [pc, #280]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	628b      	str	r3, [r1, #40]	; 0x28
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	3b01      	subs	r3, #1
 8006a48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a50:	3b01      	subs	r3, #1
 8006a52:	025b      	lsls	r3, r3, #9
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a72:	4939      	ldr	r1, [pc, #228]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a78:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	4a36      	ldr	r2, [pc, #216]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a84:	4b34      	ldr	r3, [pc, #208]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a88:	4b35      	ldr	r3, [pc, #212]	; (8006b60 <HAL_RCC_OscConfig+0x790>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a90:	00d2      	lsls	r2, r2, #3
 8006a92:	4931      	ldr	r1, [pc, #196]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a98:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	f023 020c 	bic.w	r2, r3, #12
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	492c      	ldr	r1, [pc, #176]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006aaa:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	f023 0202 	bic.w	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab6:	4928      	ldr	r1, [pc, #160]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006abc:	4b26      	ldr	r3, [pc, #152]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	4a25      	ldr	r2, [pc, #148]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac8:	4b23      	ldr	r3, [pc, #140]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ad4:	4b20      	ldr	r3, [pc, #128]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aec:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af8:	f7fa ff06 	bl	8001908 <HAL_GetTick>
 8006afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b00:	f7fa ff02 	bl	8001908 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e067      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x730>
 8006b1e:	e05f      	b.n	8006be0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b20:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fa feec 	bl	8001908 <HAL_GetTick>
 8006b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b34:	f7fa fee8 	bl	8001908 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e04d      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b46:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <HAL_RCC_OscConfig+0x788>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x764>
 8006b52:	e045      	b.n	8006be0 <HAL_RCC_OscConfig+0x810>
 8006b54:	58024800 	.word	0x58024800
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	fffffc0c 	.word	0xfffffc0c
 8006b60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b64:	4b21      	ldr	r3, [pc, #132]	; (8006bec <HAL_RCC_OscConfig+0x81c>)
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_RCC_OscConfig+0x81c>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d031      	beq.n	8006bdc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f003 0203 	and.w	r2, r3, #3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d12a      	bne.n	8006bdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d122      	bne.n	8006bdc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d11a      	bne.n	8006bdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d111      	bne.n	8006bdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d108      	bne.n	8006bdc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	0e1b      	lsrs	r3, r3, #24
 8006bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d001      	beq.n	8006be0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e000      	b.n	8006be2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3730      	adds	r7, #48	; 0x30
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	58024400 	.word	0x58024400

08006bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e19c      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c04:	4b8a      	ldr	r3, [pc, #552]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 030f 	and.w	r3, r3, #15
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d910      	bls.n	8006c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b87      	ldr	r3, [pc, #540]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 020f 	bic.w	r2, r3, #15
 8006c1a:	4985      	ldr	r1, [pc, #532]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b83      	ldr	r3, [pc, #524]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e184      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d908      	bls.n	8006c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c50:	4b78      	ldr	r3, [pc, #480]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	4975      	ldr	r1, [pc, #468]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d010      	beq.n	8006c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	4b70      	ldr	r3, [pc, #448]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d908      	bls.n	8006c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c7e:	4b6d      	ldr	r3, [pc, #436]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	496a      	ldr	r1, [pc, #424]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	4b64      	ldr	r3, [pc, #400]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d908      	bls.n	8006cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cac:	4b61      	ldr	r3, [pc, #388]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	495e      	ldr	r1, [pc, #376]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d010      	beq.n	8006cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69da      	ldr	r2, [r3, #28]
 8006cce:	4b59      	ldr	r3, [pc, #356]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d908      	bls.n	8006cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cda:	4b56      	ldr	r3, [pc, #344]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	4953      	ldr	r1, [pc, #332]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d908      	bls.n	8006d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b4a      	ldr	r3, [pc, #296]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f023 020f 	bic.w	r2, r3, #15
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	4947      	ldr	r1, [pc, #284]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d055      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d26:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	4940      	ldr	r1, [pc, #256]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d40:	4b3c      	ldr	r3, [pc, #240]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d121      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0f6      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d58:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d115      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0ea      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d70:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0de      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d80:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0d6      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f023 0207 	bic.w	r2, r3, #7
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4925      	ldr	r1, [pc, #148]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da2:	f7fa fdb1 	bl	8001908 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006daa:	f7fa fdad 	bl	8001908 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e0be      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d1eb      	bne.n	8006daa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d010      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d208      	bcs.n	8006e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dee:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f023 020f 	bic.w	r2, r3, #15
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	490e      	ldr	r1, [pc, #56]	; (8006e34 <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d214      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f023 020f 	bic.w	r2, r3, #15
 8006e16:	4906      	ldr	r1, [pc, #24]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1e:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <HAL_RCC_ClockConfig+0x240>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e086      	b.n	8006f3e <HAL_RCC_ClockConfig+0x34e>
 8006e30:	52002000 	.word	0x52002000
 8006e34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d208      	bcs.n	8006e66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e54:	4b3c      	ldr	r3, [pc, #240]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	4939      	ldr	r1, [pc, #228]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d010      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	4b34      	ldr	r3, [pc, #208]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d208      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e82:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	492e      	ldr	r1, [pc, #184]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699a      	ldr	r2, [r3, #24]
 8006ea4:	4b28      	ldr	r3, [pc, #160]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d208      	bcs.n	8006ec2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	4922      	ldr	r1, [pc, #136]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69da      	ldr	r2, [r3, #28]
 8006ed2:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d208      	bcs.n	8006ef0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ede:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	4917      	ldr	r1, [pc, #92]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ef0:	f000 f89e 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	4a12      	ldr	r2, [pc, #72]	; (8006f4c <HAL_RCC_ClockConfig+0x35c>)
 8006f02:	5cd3      	ldrb	r3, [r2, r3]
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	fa21 f303 	lsr.w	r3, r1, r3
 8006f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	4a0d      	ldr	r2, [pc, #52]	; (8006f4c <HAL_RCC_ClockConfig+0x35c>)
 8006f18:	5cd3      	ldrb	r3, [r2, r3]
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <HAL_RCC_ClockConfig+0x360>)
 8006f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f28:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <HAL_RCC_ClockConfig+0x364>)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <HAL_RCC_ClockConfig+0x368>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fa fc9e 	bl	8001874 <HAL_InitTick>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	0800c54c 	.word	0x0800c54c
 8006f50:	24000004 	.word	0x24000004
 8006f54:	24000000 	.word	0x24000000
 8006f58:	24000008 	.word	0x24000008

08006f5c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08c      	sub	sp, #48	; 0x30
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d12a      	bne.n	8006fc4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006f6e:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f74:	4a2b      	ldr	r2, [pc, #172]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f7e:	4b29      	ldr	r3, [pc, #164]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f92:	2302      	movs	r3, #2
 8006f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f96:	2303      	movs	r3, #3
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006fa2:	f107 031c 	add.w	r3, r7, #28
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	481f      	ldr	r0, [pc, #124]	; (8007028 <HAL_RCC_MCOConfig+0xcc>)
 8006faa:	f7fe fc03 	bl	80057b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006fae:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	4919      	ldr	r1, [pc, #100]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006fc2:	e02a      	b.n	800701a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fca:	4a16      	ldr	r2, [pc, #88]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006fcc:	f043 0304 	orr.w	r3, r3, #4
 8006fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8006fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fec:	2303      	movs	r3, #3
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006ff8:	f107 031c 	add.w	r3, r7, #28
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	480b      	ldr	r0, [pc, #44]	; (800702c <HAL_RCC_MCOConfig+0xd0>)
 8007000:	f7fe fbd8 	bl	80057b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	01d9      	lsls	r1, r3, #7
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	430b      	orrs	r3, r1
 8007014:	4903      	ldr	r1, [pc, #12]	; (8007024 <HAL_RCC_MCOConfig+0xc8>)
 8007016:	4313      	orrs	r3, r2
 8007018:	610b      	str	r3, [r1, #16]
}
 800701a:	bf00      	nop
 800701c:	3730      	adds	r7, #48	; 0x30
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
 8007028:	58020000 	.word	0x58020000
 800702c:	58020800 	.word	0x58020800

08007030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007030:	b480      	push	{r7}
 8007032:	b089      	sub	sp, #36	; 0x24
 8007034:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007036:	4baf      	ldr	r3, [pc, #700]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800703e:	2b18      	cmp	r3, #24
 8007040:	f200 814e 	bhi.w	80072e0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	080070b1 	.word	0x080070b1
 8007050:	080072e1 	.word	0x080072e1
 8007054:	080072e1 	.word	0x080072e1
 8007058:	080072e1 	.word	0x080072e1
 800705c:	080072e1 	.word	0x080072e1
 8007060:	080072e1 	.word	0x080072e1
 8007064:	080072e1 	.word	0x080072e1
 8007068:	080072e1 	.word	0x080072e1
 800706c:	080070d7 	.word	0x080070d7
 8007070:	080072e1 	.word	0x080072e1
 8007074:	080072e1 	.word	0x080072e1
 8007078:	080072e1 	.word	0x080072e1
 800707c:	080072e1 	.word	0x080072e1
 8007080:	080072e1 	.word	0x080072e1
 8007084:	080072e1 	.word	0x080072e1
 8007088:	080072e1 	.word	0x080072e1
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080072e1 	.word	0x080072e1
 8007094:	080072e1 	.word	0x080072e1
 8007098:	080072e1 	.word	0x080072e1
 800709c:	080072e1 	.word	0x080072e1
 80070a0:	080072e1 	.word	0x080072e1
 80070a4:	080072e1 	.word	0x080072e1
 80070a8:	080072e1 	.word	0x080072e1
 80070ac:	080070e3 	.word	0x080070e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b0:	4b90      	ldr	r3, [pc, #576]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070bc:	4b8d      	ldr	r3, [pc, #564]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	08db      	lsrs	r3, r3, #3
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	4a8c      	ldr	r2, [pc, #560]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80070ce:	e10a      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070d0:	4b89      	ldr	r3, [pc, #548]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070d2:	61bb      	str	r3, [r7, #24]
    break;
 80070d4:	e107      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80070d6:	4b89      	ldr	r3, [pc, #548]	; (80072fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80070d8:	61bb      	str	r3, [r7, #24]
    break;
 80070da:	e104      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80070dc:	4b88      	ldr	r3, [pc, #544]	; (8007300 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80070de:	61bb      	str	r3, [r7, #24]
    break;
 80070e0:	e101      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e2:	4b84      	ldr	r3, [pc, #528]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070ec:	4b81      	ldr	r3, [pc, #516]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070f8:	4b7e      	ldr	r3, [pc, #504]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007102:	4b7c      	ldr	r3, [pc, #496]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	08db      	lsrs	r3, r3, #3
 8007108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80da 	beq.w	80072da <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d05a      	beq.n	80071e2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800712c:	2b01      	cmp	r3, #1
 800712e:	d302      	bcc.n	8007136 <HAL_RCC_GetSysClockFreq+0x106>
 8007130:	2b02      	cmp	r3, #2
 8007132:	d078      	beq.n	8007226 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007134:	e099      	b.n	800726a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007136:	4b6f      	ldr	r3, [pc, #444]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d02d      	beq.n	800719e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007142:	4b6c      	ldr	r3, [pc, #432]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	08db      	lsrs	r3, r3, #3
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	4a6a      	ldr	r2, [pc, #424]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800714e:	fa22 f303 	lsr.w	r3, r2, r3
 8007152:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716c:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007180:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007304 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007198:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800719c:	e087      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007308 <HAL_RCC_GetSysClockFreq+0x2d8>
 80071ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b0:	4b50      	ldr	r3, [pc, #320]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007304 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e0:	e065      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ec:	eddf 6a47 	vldr	s13, [pc, #284]	; 800730c <HAL_RCC_GetSysClockFreq+0x2dc>
 80071f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f4:	4b3f      	ldr	r3, [pc, #252]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	ee07 3a90 	vmov	s15, r3
 8007200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007204:	ed97 6a02 	vldr	s12, [r7, #8]
 8007208:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007304 <HAL_RCC_GetSysClockFreq+0x2d4>
 800720c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007220:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007224:	e043      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	ee07 3a90 	vmov	s15, r3
 800722c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007230:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007310 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007238:	4b2e      	ldr	r3, [pc, #184]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007248:	ed97 6a02 	vldr	s12, [r7, #8]
 800724c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007304 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007264:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007268:	e021      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007274:	eddf 6a25 	vldr	s13, [pc, #148]	; 800730c <HAL_RCC_GetSysClockFreq+0x2dc>
 8007278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727c:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007284:	ee07 3a90 	vmov	s15, r3
 8007288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007290:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007304 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ac:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072ae:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	0a5b      	lsrs	r3, r3, #9
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b8:	3301      	adds	r3, #1
 80072ba:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d2:	ee17 3a90 	vmov	r3, s15
 80072d6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80072d8:	e005      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
    break;
 80072de:	e002      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80072e2:	61bb      	str	r3, [r7, #24]
    break;
 80072e4:	bf00      	nop
  }

  return sysclockfreq;
 80072e6:	69bb      	ldr	r3, [r7, #24]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3724      	adds	r7, #36	; 0x24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	58024400 	.word	0x58024400
 80072f8:	03d09000 	.word	0x03d09000
 80072fc:	003d0900 	.word	0x003d0900
 8007300:	01e84800 	.word	0x01e84800
 8007304:	46000000 	.word	0x46000000
 8007308:	4c742400 	.word	0x4c742400
 800730c:	4a742400 	.word	0x4a742400
 8007310:	4bf42400 	.word	0x4bf42400

08007314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800731a:	f7ff fe89 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 800731e:	4601      	mov	r1, r0
 8007320:	4b10      	ldr	r3, [pc, #64]	; (8007364 <HAL_RCC_GetHCLKFreq+0x50>)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	0a1b      	lsrs	r3, r3, #8
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	4a0f      	ldr	r2, [pc, #60]	; (8007368 <HAL_RCC_GetHCLKFreq+0x54>)
 800732c:	5cd3      	ldrb	r3, [r2, r3]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	fa21 f303 	lsr.w	r3, r1, r3
 8007336:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <HAL_RCC_GetHCLKFreq+0x50>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	4a09      	ldr	r2, [pc, #36]	; (8007368 <HAL_RCC_GetHCLKFreq+0x54>)
 8007342:	5cd3      	ldrb	r3, [r2, r3]
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	4a07      	ldr	r2, [pc, #28]	; (800736c <HAL_RCC_GetHCLKFreq+0x58>)
 8007350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007352:	4a07      	ldr	r2, [pc, #28]	; (8007370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <HAL_RCC_GetHCLKFreq+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	58024400 	.word	0x58024400
 8007368:	0800c54c 	.word	0x0800c54c
 800736c:	24000004 	.word	0x24000004
 8007370:	24000000 	.word	0x24000000

08007374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007378:	f7ff ffcc 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 800737c:	4601      	mov	r1, r0
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	091b      	lsrs	r3, r3, #4
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	4a04      	ldr	r2, [pc, #16]	; (800739c <HAL_RCC_GetPCLK1Freq+0x28>)
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	58024400 	.word	0x58024400
 800739c:	0800c54c 	.word	0x0800c54c

080073a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073a4:	f7ff ffb6 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 80073a8:	4601      	mov	r1, r0
 80073aa:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	0a1b      	lsrs	r3, r3, #8
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073b6:	5cd3      	ldrb	r3, [r2, r3]
 80073b8:	f003 031f 	and.w	r3, r3, #31
 80073bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	58024400 	.word	0x58024400
 80073c8:	0800c54c 	.word	0x0800c54c

080073cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073d8:	2300      	movs	r3, #0
 80073da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d03d      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f0:	d013      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80073f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f6:	d802      	bhi.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80073fc:	e01f      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80073fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007402:	d013      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007408:	d01c      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800740a:	e018      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4baf      	ldr	r3, [pc, #700]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4aae      	ldr	r2, [pc, #696]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007418:	e015      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f96f 	bl	8008704 <RCCEx_PLL2_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800742a:	e00c      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3324      	adds	r3, #36	; 0x24
 8007430:	2102      	movs	r1, #2
 8007432:	4618      	mov	r0, r3
 8007434:	f001 fa18 	bl	8008868 <RCCEx_PLL3_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800743c:	e003      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
      break;
 8007442:	e000      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800744c:	4b9f      	ldr	r3, [pc, #636]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800744e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007458:	499c      	ldr	r1, [pc, #624]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800745a:	4313      	orrs	r3, r2
 800745c:	650b      	str	r3, [r1, #80]	; 0x50
 800745e:	e001      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746c:	2b00      	cmp	r3, #0
 800746e:	d03d      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	2b04      	cmp	r3, #4
 8007476:	d826      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	08007495 	.word	0x08007495
 8007484:	080074a3 	.word	0x080074a3
 8007488:	080074b5 	.word	0x080074b5
 800748c:	080074cd 	.word	0x080074cd
 8007490:	080074cd 	.word	0x080074cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007494:	4b8d      	ldr	r3, [pc, #564]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a8c      	ldr	r2, [pc, #560]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800749a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a0:	e015      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f92b 	bl	8008704 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074b2:	e00c      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f9d4 	bl	8008868 <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074c4:	e003      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ca:	e000      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80074cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074d4:	4b7d      	ldr	r3, [pc, #500]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	f023 0207 	bic.w	r2, r3, #7
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e0:	497a      	ldr	r1, [pc, #488]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	650b      	str	r3, [r1, #80]	; 0x50
 80074e6:	e001      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d03e      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fc:	2b80      	cmp	r3, #128	; 0x80
 80074fe:	d01c      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007500:	2b80      	cmp	r3, #128	; 0x80
 8007502:	d804      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	d00d      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800750c:	e01e      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800750e:	2bc0      	cmp	r3, #192	; 0xc0
 8007510:	d01f      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007516:	d01e      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007518:	e018      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751a:	4b6c      	ldr	r3, [pc, #432]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	4a6b      	ldr	r2, [pc, #428]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007526:	e017      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f001 f8e8 	bl	8008704 <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007538:	e00e      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f991 	bl	8008868 <RCCEx_PLL3_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800754a:	e005      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
      break;
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800755e:	4b5b      	ldr	r3, [pc, #364]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007562:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756a:	4958      	ldr	r1, [pc, #352]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800756c:	4313      	orrs	r3, r2
 800756e:	650b      	str	r3, [r1, #80]	; 0x50
 8007570:	e001      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800757e:	2b00      	cmp	r3, #0
 8007580:	d044      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758c:	d01f      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800758e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007592:	d805      	bhi.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800759c:	d00e      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800759e:	e01f      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80075a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075a4:	d01f      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80075a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075aa:	d01e      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80075ac:	e018      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ae:	4b47      	ldr	r3, [pc, #284]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	4a46      	ldr	r2, [pc, #280]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ba:	e017      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f89e 	bl	8008704 <RCCEx_PLL2_Config>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075cc:	e00e      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3324      	adds	r3, #36	; 0x24
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 f947 	bl	8008868 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075de:	e005      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
      break;
 80075e4:	e002      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80075ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075f2:	4b36      	ldr	r3, [pc, #216]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007600:	4932      	ldr	r1, [pc, #200]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007602:	4313      	orrs	r3, r2
 8007604:	658b      	str	r3, [r1, #88]	; 0x58
 8007606:	e001      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007614:	2b00      	cmp	r3, #0
 8007616:	d044      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800761e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007622:	d01f      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007628:	d805      	bhi.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800762e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007632:	d00e      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007634:	e01f      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007636:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800763a:	d01f      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800763c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007640:	d01e      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007642:	e018      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007644:	4b21      	ldr	r3, [pc, #132]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	4a20      	ldr	r2, [pc, #128]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800764a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800764e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007650:	e017      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3304      	adds	r3, #4
 8007656:	2100      	movs	r1, #0
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f853 	bl	8008704 <RCCEx_PLL2_Config>
 800765e:	4603      	mov	r3, r0
 8007660:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007662:	e00e      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3324      	adds	r3, #36	; 0x24
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f001 f8fc 	bl	8008868 <RCCEx_PLL3_Config>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007674:	e005      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
      break;
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007696:	490d      	ldr	r1, [pc, #52]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007698:	4313      	orrs	r3, r2
 800769a:	658b      	str	r3, [r1, #88]	; 0x58
 800769c:	e001      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d035      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d00c      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d802      	bhi.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01b      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80076be:	e017      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d00c      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x312>
 80076c4:	2b30      	cmp	r3, #48	; 0x30
 80076c6:	d018      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80076c8:	e012      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80076ca:	bf00      	nop
 80076cc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4baf      	ldr	r3, [pc, #700]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4aae      	ldr	r2, [pc, #696]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076dc:	e00e      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2102      	movs	r1, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f80d 	bl	8008704 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076ee:	e005      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80076fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007702:	4ba3      	ldr	r3, [pc, #652]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007706:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	49a0      	ldr	r1, [pc, #640]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007710:	4313      	orrs	r3, r2
 8007712:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007714:	e001      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d042      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772e:	d01f      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007734:	d805      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800773a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773e:	d00e      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007740:	e01f      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007746:	d01f      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800774c:	d01e      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800774e:	e018      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007750:	4b8f      	ldr	r3, [pc, #572]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a8e      	ldr	r2, [pc, #568]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800775a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800775c:	e017      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3304      	adds	r3, #4
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f000 ffcd 	bl	8008704 <RCCEx_PLL2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800776e:	e00e      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3324      	adds	r3, #36	; 0x24
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f001 f876 	bl	8008868 <RCCEx_PLL3_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007780:	e005      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	75fb      	strb	r3, [r7, #23]
      break;
 8007786:	e002      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007788:	bf00      	nop
 800778a:	e000      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800778c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007794:	4b7e      	ldr	r3, [pc, #504]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a0:	497b      	ldr	r1, [pc, #492]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	650b      	str	r3, [r1, #80]	; 0x50
 80077a6:	e001      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d042      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c0:	d01b      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c6:	d805      	bhi.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d022      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d0:	d00a      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80077d2:	e01b      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80077d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077d8:	d01d      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80077da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077de:	d01c      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80077e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077e4:	d01b      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80077e6:	e011      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 ff88 	bl	8008704 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077f8:	e012      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3324      	adds	r3, #36	; 0x24
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f001 f831 	bl	8008868 <RCCEx_PLL3_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800780a:	e009      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	e006      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007812:	bf00      	nop
 8007814:	e004      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007816:	bf00      	nop
 8007818:	e002      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800781a:	bf00      	nop
 800781c:	e000      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800781e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007826:	4b5a      	ldr	r3, [pc, #360]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007832:	4957      	ldr	r1, [pc, #348]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007834:	4313      	orrs	r3, r2
 8007836:	650b      	str	r3, [r1, #80]	; 0x50
 8007838:	e001      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d044      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007854:	d01b      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785a:	d805      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800785c:	2b00      	cmp	r3, #0
 800785e:	d022      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007864:	d00a      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007866:	e01b      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d01d      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800786e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007872:	d01c      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007878:	d01b      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800787a:	e011      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3304      	adds	r3, #4
 8007880:	2101      	movs	r1, #1
 8007882:	4618      	mov	r0, r3
 8007884:	f000 ff3e 	bl	8008704 <RCCEx_PLL2_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800788c:	e012      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3324      	adds	r3, #36	; 0x24
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f000 ffe7 	bl	8008868 <RCCEx_PLL3_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800789e:	e009      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	75fb      	strb	r3, [r7, #23]
      break;
 80078a4:	e006      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078a6:	bf00      	nop
 80078a8:	e004      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078aa:	bf00      	nop
 80078ac:	e002      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078ae:	bf00      	nop
 80078b0:	e000      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80078b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078ba:	4b35      	ldr	r3, [pc, #212]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078c8:	4931      	ldr	r1, [pc, #196]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	658b      	str	r3, [r1, #88]	; 0x58
 80078ce:	e001      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d02d      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078e8:	d005      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80078ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ee:	d009      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d013      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80078f4:	e00f      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f6:	4b26      	ldr	r3, [pc, #152]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	4a25      	ldr	r2, [pc, #148]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007902:	e00c      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	2101      	movs	r1, #1
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fefa 	bl	8008704 <RCCEx_PLL2_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007914:	e003      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
      break;
 800791a:	e000      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800791c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007924:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007928:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007930:	4917      	ldr	r1, [pc, #92]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007932:	4313      	orrs	r3, r2
 8007934:	650b      	str	r3, [r1, #80]	; 0x50
 8007936:	e001      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d035      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794c:	2b03      	cmp	r3, #3
 800794e:	d81b      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007995 	.word	0x08007995
 800795c:	08007969 	.word	0x08007969
 8007960:	08007977 	.word	0x08007977
 8007964:	08007995 	.word	0x08007995
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	4a08      	ldr	r2, [pc, #32]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800796e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007974:	e00f      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3304      	adds	r3, #4
 800797a:	2102      	movs	r1, #2
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fec1 	bl	8008704 <RCCEx_PLL2_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007986:	e006      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	75fb      	strb	r3, [r7, #23]
      break;
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800798e:	bf00      	nop
 8007990:	58024400 	.word	0x58024400
      break;
 8007994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d109      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800799c:	4bba      	ldr	r3, [pc, #744]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800799e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a0:	f023 0203 	bic.w	r2, r3, #3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a8:	49b7      	ldr	r1, [pc, #732]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079ae:	e001      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8086 	beq.w	8007ace <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079c2:	4bb2      	ldr	r3, [pc, #712]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4ab1      	ldr	r2, [pc, #708]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80079c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ce:	f7f9 ff9b 	bl	8001908 <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079d4:	e009      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079d6:	f7f9 ff97 	bl	8001908 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b64      	cmp	r3, #100	; 0x64
 80079e2:	d902      	bls.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	75fb      	strb	r3, [r7, #23]
        break;
 80079e8:	e005      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079ea:	4ba8      	ldr	r3, [pc, #672]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0ef      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d166      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079fc:	4ba2      	ldr	r3, [pc, #648]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a06:	4053      	eors	r3, r2
 8007a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d013      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a10:	4b9d      	ldr	r3, [pc, #628]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a18:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a1a:	4b9b      	ldr	r3, [pc, #620]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	4a9a      	ldr	r2, [pc, #616]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a26:	4b98      	ldr	r3, [pc, #608]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	4a97      	ldr	r2, [pc, #604]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a32:	4a95      	ldr	r2, [pc, #596]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a42:	d115      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7f9 ff60 	bl	8001908 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a4a:	e00b      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a4c:	f7f9 ff5c 	bl	8001908 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d902      	bls.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	75fb      	strb	r3, [r7, #23]
            break;
 8007a62:	e005      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a64:	4b88      	ldr	r3, [pc, #544]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0ed      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d126      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a84:	d10d      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007a86:	4b80      	ldr	r3, [pc, #512]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a94:	0919      	lsrs	r1, r3, #4
 8007a96:	4b7e      	ldr	r3, [pc, #504]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007a98:	400b      	ands	r3, r1
 8007a9a:	497b      	ldr	r1, [pc, #492]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	610b      	str	r3, [r1, #16]
 8007aa0:	e005      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007aa2:	4b79      	ldr	r3, [pc, #484]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	4a78      	ldr	r2, [pc, #480]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007aa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007aac:	6113      	str	r3, [r2, #16]
 8007aae:	4b76      	ldr	r3, [pc, #472]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ab0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007abc:	4972      	ldr	r1, [pc, #456]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	670b      	str	r3, [r1, #112]	; 0x70
 8007ac2:	e004      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
 8007ac6:	75bb      	strb	r3, [r7, #22]
 8007ac8:	e001      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d07d      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ade:	2b28      	cmp	r3, #40	; 0x28
 8007ae0:	d866      	bhi.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007bb7 	.word	0x08007bb7
 8007aec:	08007bb1 	.word	0x08007bb1
 8007af0:	08007bb1 	.word	0x08007bb1
 8007af4:	08007bb1 	.word	0x08007bb1
 8007af8:	08007bb1 	.word	0x08007bb1
 8007afc:	08007bb1 	.word	0x08007bb1
 8007b00:	08007bb1 	.word	0x08007bb1
 8007b04:	08007bb1 	.word	0x08007bb1
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007bb1 	.word	0x08007bb1
 8007b10:	08007bb1 	.word	0x08007bb1
 8007b14:	08007bb1 	.word	0x08007bb1
 8007b18:	08007bb1 	.word	0x08007bb1
 8007b1c:	08007bb1 	.word	0x08007bb1
 8007b20:	08007bb1 	.word	0x08007bb1
 8007b24:	08007bb1 	.word	0x08007bb1
 8007b28:	08007b9f 	.word	0x08007b9f
 8007b2c:	08007bb1 	.word	0x08007bb1
 8007b30:	08007bb1 	.word	0x08007bb1
 8007b34:	08007bb1 	.word	0x08007bb1
 8007b38:	08007bb1 	.word	0x08007bb1
 8007b3c:	08007bb1 	.word	0x08007bb1
 8007b40:	08007bb1 	.word	0x08007bb1
 8007b44:	08007bb1 	.word	0x08007bb1
 8007b48:	08007bb7 	.word	0x08007bb7
 8007b4c:	08007bb1 	.word	0x08007bb1
 8007b50:	08007bb1 	.word	0x08007bb1
 8007b54:	08007bb1 	.word	0x08007bb1
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bb7 	.word	0x08007bb7
 8007b6c:	08007bb1 	.word	0x08007bb1
 8007b70:	08007bb1 	.word	0x08007bb1
 8007b74:	08007bb1 	.word	0x08007bb1
 8007b78:	08007bb1 	.word	0x08007bb1
 8007b7c:	08007bb1 	.word	0x08007bb1
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007bb1 	.word	0x08007bb1
 8007b88:	08007bb7 	.word	0x08007bb7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	2101      	movs	r1, #1
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fdb6 	bl	8008704 <RCCEx_PLL2_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b9c:	e00c      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3324      	adds	r3, #36	; 0x24
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fe5f 	bl	8008868 <RCCEx_PLL3_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bae:	e003      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bbe:	4b32      	ldr	r3, [pc, #200]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bca:	492f      	ldr	r1, [pc, #188]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	654b      	str	r3, [r1, #84]	; 0x54
 8007bd0:	e001      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d037      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d820      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c33 	.word	0x08007c33
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c1b 	.word	0x08007c1b
 8007bfc:	08007c33 	.word	0x08007c33
 8007c00:	08007c33 	.word	0x08007c33
 8007c04:	08007c33 	.word	0x08007c33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fd78 	bl	8008704 <RCCEx_PLL2_Config>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c18:	e00c      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3324      	adds	r3, #36	; 0x24
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fe21 	bl	8008868 <RCCEx_PLL3_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c2a:	e003      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	f023 0207 	bic.w	r2, r3, #7
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c46:	4910      	ldr	r1, [pc, #64]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8007c4c:	e001      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d040      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d827      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007cbf 	.word	0x08007cbf
 8007c74:	08007c95 	.word	0x08007c95
 8007c78:	08007ca7 	.word	0x08007ca7
 8007c7c:	08007cbf 	.word	0x08007cbf
 8007c80:	08007cbf 	.word	0x08007cbf
 8007c84:	08007cbf 	.word	0x08007cbf
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	58024800 	.word	0x58024800
 8007c90:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3304      	adds	r3, #4
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fd32 	bl	8008704 <RCCEx_PLL2_Config>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ca4:	e00c      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3324      	adds	r3, #36	; 0x24
 8007caa:	2101      	movs	r1, #1
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fddb 	bl	8008868 <RCCEx_PLL3_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cb6:	e003      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbc:	e000      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cc6:	4bb2      	ldr	r3, [pc, #712]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cca:	f023 0207 	bic.w	r2, r3, #7
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd4:	49ae      	ldr	r1, [pc, #696]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	658b      	str	r3, [r1, #88]	; 0x58
 8007cda:	e001      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d044      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf6:	d01b      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cfc:	d805      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d022      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007d08:	e01b      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0e:	d01d      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d14:	d01c      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d1a:	d01b      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007d1c:	e011      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3304      	adds	r3, #4
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fced 	bl	8008704 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d2e:	e012      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3324      	adds	r3, #36	; 0x24
 8007d34:	2102      	movs	r1, #2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fd96 	bl	8008868 <RCCEx_PLL3_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d40:	e009      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	75fb      	strb	r3, [r7, #23]
      break;
 8007d46:	e006      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d48:	bf00      	nop
 8007d4a:	e004      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d5c:	4b8c      	ldr	r3, [pc, #560]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d6a:	4989      	ldr	r1, [pc, #548]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8007d70:	e001      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d044      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d8c:	d01b      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d92:	d805      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d022      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9c:	d00a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007d9e:	e01b      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da4:	d01d      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007da6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007daa:	d01c      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db0:	d01b      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007db2:	e011      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	2100      	movs	r1, #0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fca2 	bl	8008704 <RCCEx_PLL2_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007dc4:	e012      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3324      	adds	r3, #36	; 0x24
 8007dca:	2102      	movs	r1, #2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fd4b 	bl	8008868 <RCCEx_PLL3_Config>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007dd6:	e009      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]
      break;
 8007ddc:	e006      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007dde:	bf00      	nop
 8007de0:	e004      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007de2:	bf00      	nop
 8007de4:	e002      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007df2:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e00:	4963      	ldr	r1, [pc, #396]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	658b      	str	r3, [r1, #88]	; 0x58
 8007e06:	e001      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d044      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e22:	d01b      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e28:	d805      	bhi.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d022      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e32:	d00a      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e34:	e01b      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e3a:	d01d      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007e3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e40:	d01c      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007e42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e46:	d01b      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007e48:	e011      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fc57 	bl	8008704 <RCCEx_PLL2_Config>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e5a:	e012      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3324      	adds	r3, #36	; 0x24
 8007e60:	2102      	movs	r1, #2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fd00 	bl	8008868 <RCCEx_PLL3_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e6c:	e009      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	75fb      	strb	r3, [r7, #23]
      break;
 8007e72:	e006      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e74:	bf00      	nop
 8007e76:	e004      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e78:	bf00      	nop
 8007e7a:	e002      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e7c:	bf00      	nop
 8007e7e:	e000      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e88:	4b41      	ldr	r3, [pc, #260]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e96:	493e      	ldr	r1, [pc, #248]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8007e9c:	e001      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01a      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb8:	d10a      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3324      	adds	r3, #36	; 0x24
 8007ebe:	2102      	movs	r1, #2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fcd1 	bl	8008868 <RCCEx_PLL3_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ed0:	4b2f      	ldr	r3, [pc, #188]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	492c      	ldr	r1, [pc, #176]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01a      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efa:	d10a      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3324      	adds	r3, #36	; 0x24
 8007f00:	2102      	movs	r1, #2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fcb0 	bl	8008868 <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f12:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f20:	491b      	ldr	r1, [pc, #108]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d032      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3c:	d00d      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f42:	d016      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d111      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fbd8 	bl	8008704 <RCCEx_PLL2_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f58:	e00c      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3324      	adds	r3, #36	; 0x24
 8007f5e:	2102      	movs	r1, #2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fc81 	bl	8008868 <RCCEx_PLL3_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f70:	e000      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f88:	4901      	ldr	r1, [pc, #4]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8007f8e:	e003      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02f      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fae:	d00c      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fb4:	d015      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fba:	d10f      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b79      	ldr	r3, [pc, #484]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a78      	ldr	r2, [pc, #480]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fc8:	e00c      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3324      	adds	r3, #36	; 0x24
 8007fce:	2101      	movs	r1, #1
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fc49 	bl	8008868 <RCCEx_PLL3_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fda:	e003      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe0:	e000      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fea:	4b6e      	ldr	r3, [pc, #440]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff8:	496a      	ldr	r1, [pc, #424]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	654b      	str	r3, [r1, #84]	; 0x54
 8007ffe:	e001      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d029      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801c:	d007      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800801e:	e00f      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008020:	4b60      	ldr	r3, [pc, #384]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	4a5f      	ldr	r2, [pc, #380]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800802c:	e00b      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	2102      	movs	r1, #2
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fb65 	bl	8008704 <RCCEx_PLL2_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800803e:	e002      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
      break;
 8008044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d109      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800804c:	4b55      	ldr	r3, [pc, #340]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800804e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008058:	4952      	ldr	r1, [pc, #328]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800805a:	4313      	orrs	r3, r2
 800805c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800805e:	e001      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3324      	adds	r3, #36	; 0x24
 8008074:	2102      	movs	r1, #2
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fbf6 	bl	8008868 <RCCEx_PLL3_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d02f      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	d00c      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800809c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a0:	d802      	bhi.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d011      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80080a6:	e00d      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ac:	d00f      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80080ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080b2:	d00e      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80080b4:	e006      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b6:	4b3b      	ldr	r3, [pc, #236]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	4a3a      	ldr	r2, [pc, #232]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80080c2:	e007      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
      break;
 80080c8:	e004      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80080d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080da:	4b32      	ldr	r3, [pc, #200]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e6:	492f      	ldr	r1, [pc, #188]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	654b      	str	r3, [r1, #84]	; 0x54
 80080ec:	e001      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080fe:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810a:	4926      	ldr	r1, [pc, #152]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800810c:	4313      	orrs	r3, r2
 800810e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800811c:	4b21      	ldr	r3, [pc, #132]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800812a:	491e      	ldr	r1, [pc, #120]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800812c:	4313      	orrs	r3, r2
 800812e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800813c:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008140:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008148:	4916      	ldr	r1, [pc, #88]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800814a:	4313      	orrs	r3, r2
 800814c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00d      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	4a11      	ldr	r2, [pc, #68]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008160:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008164:	6113      	str	r3, [r2, #16]
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008170:	490c      	ldr	r1, [pc, #48]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008172:	4313      	orrs	r3, r2
 8008174:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	da08      	bge.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818a:	4906      	ldr	r1, [pc, #24]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800818c:	4313      	orrs	r3, r2
 800818e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008190:	7dbb      	ldrb	r3, [r7, #22]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	58024400 	.word	0x58024400

080081a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081ac:	f7ff f8b2 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 80081b0:	4601      	mov	r1, r0
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081be:	5cd3      	ldrb	r3, [r2, r3]
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	58024400 	.word	0x58024400
 80081d0:	0800c54c 	.word	0x0800c54c

080081d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081dc:	4b9d      	ldr	r3, [pc, #628]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081e6:	4b9b      	ldr	r3, [pc, #620]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	0b1b      	lsrs	r3, r3, #12
 80081ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081f2:	4b98      	ldr	r3, [pc, #608]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081fe:	4b95      	ldr	r3, [pc, #596]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	08db      	lsrs	r3, r3, #3
 8008204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 810a 	beq.w	8008436 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d05a      	beq.n	80082de <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008228:	2b01      	cmp	r3, #1
 800822a:	d302      	bcc.n	8008232 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800822c:	2b02      	cmp	r3, #2
 800822e:	d078      	beq.n	8008322 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008230:	e099      	b.n	8008366 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008232:	4b88      	ldr	r3, [pc, #544]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d02d      	beq.n	800829a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800823e:	4b85      	ldr	r3, [pc, #532]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	4a83      	ldr	r2, [pc, #524]	; (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008268:	4b7a      	ldr	r3, [pc, #488]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008278:	ed97 6a03 	vldr	s12, [r7, #12]
 800827c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008294:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008298:	e087      	b.n	80083aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80082a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ac:	4b69      	ldr	r3, [pc, #420]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082dc:	e065      	b.n	80083aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80082ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f0:	4b58      	ldr	r3, [pc, #352]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f8:	ee07 3a90 	vmov	s15, r3
 80082fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008300:	ed97 6a03 	vldr	s12, [r7, #12]
 8008304:	eddf 5a55 	vldr	s11, [pc, #340]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008320:	e043      	b.n	80083aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008334:	4b47      	ldr	r3, [pc, #284]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008344:	ed97 6a03 	vldr	s12, [r7, #12]
 8008348:	eddf 5a44 	vldr	s11, [pc, #272]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800834c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008360:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008364:	e021      	b.n	80083aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008370:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008378:	4b36      	ldr	r3, [pc, #216]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008388:	ed97 6a03 	vldr	s12, [r7, #12]
 800838c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083a8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083aa:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	0a5b      	lsrs	r3, r3, #9
 80083b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d0:	ee17 2a90 	vmov	r2, s15
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083d8:	4b1e      	ldr	r3, [pc, #120]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fe:	ee17 2a90 	vmov	r2, s15
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	0e1b      	lsrs	r3, r3, #24
 800840c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800841c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008420:	edd7 6a07 	vldr	s13, [r7, #28]
 8008424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842c:	ee17 2a90 	vmov	r2, s15
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008434:	e008      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	609a      	str	r2, [r3, #8]
}
 8008448:	bf00      	nop
 800844a:	3724      	adds	r7, #36	; 0x24
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	58024400 	.word	0x58024400
 8008458:	03d09000 	.word	0x03d09000
 800845c:	46000000 	.word	0x46000000
 8008460:	4c742400 	.word	0x4c742400
 8008464:	4a742400 	.word	0x4a742400
 8008468:	4bf42400 	.word	0x4bf42400

0800846c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800846c:	b480      	push	{r7}
 800846e:	b089      	sub	sp, #36	; 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008474:	4b9d      	ldr	r3, [pc, #628]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800847e:	4b9b      	ldr	r3, [pc, #620]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	0d1b      	lsrs	r3, r3, #20
 8008484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008488:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800848a:	4b98      	ldr	r3, [pc, #608]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008496:	4b95      	ldr	r3, [pc, #596]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 810a 	beq.w	80086ce <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d05a      	beq.n	8008576 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d302      	bcc.n	80084ca <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d078      	beq.n	80085ba <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80084c8:	e099      	b.n	80085fe <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ca:	4b88      	ldr	r3, [pc, #544]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d02d      	beq.n	8008532 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084d6:	4b85      	ldr	r3, [pc, #532]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	08db      	lsrs	r3, r3, #3
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	4a83      	ldr	r2, [pc, #524]	; (80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80084e2:	fa22 f303 	lsr.w	r3, r2, r3
 80084e6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008500:	4b7a      	ldr	r3, [pc, #488]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008510:	ed97 6a03 	vldr	s12, [r7, #12]
 8008514:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008530:	e087      	b.n	8008642 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008544:	4b69      	ldr	r3, [pc, #420]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008554:	ed97 6a03 	vldr	s12, [r7, #12]
 8008558:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800855c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008570:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008574:	e065      	b.n	8008642 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008580:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008588:	4b58      	ldr	r3, [pc, #352]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008598:	ed97 6a03 	vldr	s12, [r7, #12]
 800859c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b8:	e043      	b.n	8008642 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	ee07 3a90 	vmov	s15, r3
 80085c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80085c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085cc:	4b47      	ldr	r3, [pc, #284]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d4:	ee07 3a90 	vmov	s15, r3
 80085d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085fc:	e021      	b.n	8008642 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	ee07 3a90 	vmov	s15, r3
 8008604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008608:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800860c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008610:	4b36      	ldr	r3, [pc, #216]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008620:	ed97 6a03 	vldr	s12, [r7, #12]
 8008624:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008640:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008642:	4b2a      	ldr	r3, [pc, #168]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	0a5b      	lsrs	r3, r3, #9
 8008648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800865c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008668:	ee17 2a90 	vmov	r2, s15
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008670:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	0c1b      	lsrs	r3, r3, #16
 8008676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800868a:	edd7 6a07 	vldr	s13, [r7, #28]
 800868e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008696:	ee17 2a90 	vmov	r2, s15
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	0e1b      	lsrs	r3, r3, #24
 80086a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a8:	ee07 3a90 	vmov	s15, r3
 80086ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80086bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c4:	ee17 2a90 	vmov	r2, s15
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086cc:	e008      	b.n	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	609a      	str	r2, [r3, #8]
}
 80086e0:	bf00      	nop
 80086e2:	3724      	adds	r7, #36	; 0x24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	58024400 	.word	0x58024400
 80086f0:	03d09000 	.word	0x03d09000
 80086f4:	46000000 	.word	0x46000000
 80086f8:	4c742400 	.word	0x4c742400
 80086fc:	4a742400 	.word	0x4a742400
 8008700:	4bf42400 	.word	0x4bf42400

08008704 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008712:	4b53      	ldr	r3, [pc, #332]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d101      	bne.n	8008722 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e099      	b.n	8008856 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008722:	4b4f      	ldr	r3, [pc, #316]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a4e      	ldr	r2, [pc, #312]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008728:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800872c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872e:	f7f9 f8eb 	bl	8001908 <HAL_GetTick>
 8008732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008734:	e008      	b.n	8008748 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008736:	f7f9 f8e7 	bl	8001908 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	2b02      	cmp	r3, #2
 8008742:	d901      	bls.n	8008748 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e086      	b.n	8008856 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008748:	4b45      	ldr	r3, [pc, #276]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1f0      	bne.n	8008736 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008754:	4b42      	ldr	r3, [pc, #264]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	031b      	lsls	r3, r3, #12
 8008762:	493f      	ldr	r1, [pc, #252]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008764:	4313      	orrs	r3, r2
 8008766:	628b      	str	r3, [r1, #40]	; 0x28
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	3b01      	subs	r3, #1
 800876e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	3b01      	subs	r3, #1
 8008778:	025b      	lsls	r3, r3, #9
 800877a:	b29b      	uxth	r3, r3
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	3b01      	subs	r3, #1
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	3b01      	subs	r3, #1
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008798:	4931      	ldr	r1, [pc, #196]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800879e:	4b30      	ldr	r3, [pc, #192]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	492d      	ldr	r1, [pc, #180]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087b0:	4b2b      	ldr	r3, [pc, #172]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	f023 0220 	bic.w	r2, r3, #32
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	4928      	ldr	r1, [pc, #160]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087c2:	4b27      	ldr	r3, [pc, #156]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	4a26      	ldr	r2, [pc, #152]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	f023 0310 	bic.w	r3, r3, #16
 80087cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <RCCEx_PLL2_Config+0x160>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	69d2      	ldr	r2, [r2, #28]
 80087da:	00d2      	lsls	r2, r2, #3
 80087dc:	4920      	ldr	r1, [pc, #128]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087e2:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4a1e      	ldr	r2, [pc, #120]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	f043 0310 	orr.w	r3, r3, #16
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087f4:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	4a19      	ldr	r2, [pc, #100]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 80087fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008800:	e00f      	b.n	8008822 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d106      	bne.n	8008816 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008808:	4b15      	ldr	r3, [pc, #84]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	4a14      	ldr	r2, [pc, #80]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 800880e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008814:	e005      	b.n	8008822 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008816:	4b12      	ldr	r3, [pc, #72]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881a:	4a11      	ldr	r2, [pc, #68]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 800881c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008820:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a0e      	ldr	r2, [pc, #56]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 8008828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800882c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882e:	f7f9 f86b 	bl	8001908 <HAL_GetTick>
 8008832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008834:	e008      	b.n	8008848 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008836:	f7f9 f867 	bl	8001908 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e006      	b.n	8008856 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <RCCEx_PLL2_Config+0x15c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f0      	beq.n	8008836 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	58024400 	.word	0x58024400
 8008864:	ffff0007 	.word	0xffff0007

08008868 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008876:	4b53      	ldr	r3, [pc, #332]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d101      	bne.n	8008886 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e099      	b.n	80089ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008886:	4b4f      	ldr	r3, [pc, #316]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a4e      	ldr	r2, [pc, #312]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800888c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008892:	f7f9 f839 	bl	8001908 <HAL_GetTick>
 8008896:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008898:	e008      	b.n	80088ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800889a:	f7f9 f835 	bl	8001908 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e086      	b.n	80089ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088ac:	4b45      	ldr	r3, [pc, #276]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f0      	bne.n	800889a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088b8:	4b42      	ldr	r3, [pc, #264]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	051b      	lsls	r3, r3, #20
 80088c6:	493f      	ldr	r1, [pc, #252]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	628b      	str	r3, [r1, #40]	; 0x28
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	025b      	lsls	r3, r3, #9
 80088de:	b29b      	uxth	r3, r3
 80088e0:	431a      	orrs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	041b      	lsls	r3, r3, #16
 80088ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	061b      	lsls	r3, r3, #24
 80088f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088fc:	4931      	ldr	r1, [pc, #196]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008902:	4b30      	ldr	r3, [pc, #192]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	492d      	ldr	r1, [pc, #180]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008910:	4313      	orrs	r3, r2
 8008912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008914:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	4928      	ldr	r1, [pc, #160]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008922:	4313      	orrs	r3, r2
 8008924:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008926:	4b27      	ldr	r3, [pc, #156]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	4a26      	ldr	r2, [pc, #152]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800892c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <RCCEx_PLL3_Config+0x160>)
 8008938:	4013      	ands	r3, r2
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	69d2      	ldr	r2, [r2, #28]
 800893e:	00d2      	lsls	r2, r2, #3
 8008940:	4920      	ldr	r1, [pc, #128]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008942:	4313      	orrs	r3, r2
 8008944:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008946:	4b1f      	ldr	r3, [pc, #124]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	4a19      	ldr	r2, [pc, #100]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800895e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008964:	e00f      	b.n	8008986 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d106      	bne.n	800897a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	4a14      	ldr	r2, [pc, #80]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008978:	e005      	b.n	8008986 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800897a:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	4a11      	ldr	r2, [pc, #68]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008984:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008986:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a0e      	ldr	r2, [pc, #56]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 800898c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008992:	f7f8 ffb9 	bl	8001908 <HAL_GetTick>
 8008996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008998:	e008      	b.n	80089ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800899a:	f7f8 ffb5 	bl	8001908 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e006      	b.n	80089ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <RCCEx_PLL3_Config+0x15c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	58024400 	.word	0x58024400
 80089c8:	ffff0007 	.word	0xffff0007

080089cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e0e2      	b.n	8008ba8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a70      	ldr	r2, [pc, #448]	; (8008bb0 <HAL_SPI_Init+0x1e4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00f      	beq.n	8008a12 <HAL_SPI_Init+0x46>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a6f      	ldr	r2, [pc, #444]	; (8008bb4 <HAL_SPI_Init+0x1e8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00a      	beq.n	8008a12 <HAL_SPI_Init+0x46>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a6d      	ldr	r2, [pc, #436]	; (8008bb8 <HAL_SPI_Init+0x1ec>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d005      	beq.n	8008a12 <HAL_SPI_Init+0x46>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d901      	bls.n	8008a12 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e0ca      	b.n	8008ba8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f8d2 	bl	8008bbc <SPI_GetPacketSize>
 8008a18:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a64      	ldr	r2, [pc, #400]	; (8008bb0 <HAL_SPI_Init+0x1e4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00c      	beq.n	8008a3e <HAL_SPI_Init+0x72>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a62      	ldr	r2, [pc, #392]	; (8008bb4 <HAL_SPI_Init+0x1e8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d007      	beq.n	8008a3e <HAL_SPI_Init+0x72>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a61      	ldr	r2, [pc, #388]	; (8008bb8 <HAL_SPI_Init+0x1ec>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d002      	beq.n	8008a3e <HAL_SPI_Init+0x72>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d811      	bhi.n	8008a62 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a42:	4a5b      	ldr	r2, [pc, #364]	; (8008bb0 <HAL_SPI_Init+0x1e4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d009      	beq.n	8008a5c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a59      	ldr	r2, [pc, #356]	; (8008bb4 <HAL_SPI_Init+0x1e8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d004      	beq.n	8008a5c <HAL_SPI_Init+0x90>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a58      	ldr	r2, [pc, #352]	; (8008bb8 <HAL_SPI_Init+0x1ec>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d104      	bne.n	8008a66 <HAL_SPI_Init+0x9a>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b10      	cmp	r3, #16
 8008a60:	d901      	bls.n	8008a66 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e0a0      	b.n	8008ba8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7f8 fa7e 	bl	8000f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa0:	d110      	bne.n	8008ac4 <HAL_SPI_Init+0xf8>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aaa:	d10b      	bne.n	8008ac4 <HAL_SPI_Init+0xf8>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d107      	bne.n	8008ac4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ac2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69da      	ldr	r2, [r3, #28]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	431a      	orrs	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad6:	ea42 0103 	orr.w	r1, r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b24:	ea42 0103 	orr.w	r1, r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d113      	bne.n	8008b64 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b4e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b62:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0201 	bic.w	r2, r2, #1
 8008b72:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40013000 	.word	0x40013000
 8008bb4:	40003800 	.word	0x40003800
 8008bb8:	40003c00 	.word	0x40003c00

08008bbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	3307      	adds	r3, #7
 8008bda:	08db      	lsrs	r3, r3, #3
 8008bdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e049      	b.n	8008c98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d106      	bne.n	8008c1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7f8 fc2d 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f000 fb4d 	bl	80092d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e049      	b.n	8008d46 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f841 	bl	8008d4e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f000 faf6 	bl	80092d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e049      	b.n	8008e08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f841 	bl	8008e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f000 fa95 	bl	80092d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d101      	bne.n	8008e3e <HAL_TIM_OC_ConfigChannel+0x1a>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	e064      	b.n	8008f08 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b14      	cmp	r3, #20
 8008e4a:	d857      	bhi.n	8008efc <HAL_TIM_OC_ConfigChannel+0xd8>
 8008e4c:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008efd 	.word	0x08008efd
 8008e5c:	08008efd 	.word	0x08008efd
 8008e60:	08008efd 	.word	0x08008efd
 8008e64:	08008eb7 	.word	0x08008eb7
 8008e68:	08008efd 	.word	0x08008efd
 8008e6c:	08008efd 	.word	0x08008efd
 8008e70:	08008efd 	.word	0x08008efd
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008efd 	.word	0x08008efd
 8008e7c:	08008efd 	.word	0x08008efd
 8008e80:	08008efd 	.word	0x08008efd
 8008e84:	08008ed3 	.word	0x08008ed3
 8008e88:	08008efd 	.word	0x08008efd
 8008e8c:	08008efd 	.word	0x08008efd
 8008e90:	08008efd 	.word	0x08008efd
 8008e94:	08008ee1 	.word	0x08008ee1
 8008e98:	08008efd 	.word	0x08008efd
 8008e9c:	08008efd 	.word	0x08008efd
 8008ea0:	08008efd 	.word	0x08008efd
 8008ea4:	08008eef 	.word	0x08008eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 faa8 	bl	8009404 <TIM_OC1_SetConfig>
      break;
 8008eb4:	e023      	b.n	8008efe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fb31 	bl	8009524 <TIM_OC2_SetConfig>
      break;
 8008ec2:	e01c      	b.n	8008efe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fbb4 	bl	8009638 <TIM_OC3_SetConfig>
      break;
 8008ed0:	e015      	b.n	8008efe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68b9      	ldr	r1, [r7, #8]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fc33 	bl	8009744 <TIM_OC4_SetConfig>
      break;
 8008ede:	e00e      	b.n	8008efe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fc94 	bl	8009814 <TIM_OC5_SetConfig>
      break;
 8008eec:	e007      	b.n	8008efe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fcef 	bl	80098d8 <TIM_OC6_SetConfig>
      break;
 8008efa:	e000      	b.n	8008efe <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d101      	bne.n	8008f2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e0fd      	b.n	8009126 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b14      	cmp	r3, #20
 8008f36:	f200 80f0 	bhi.w	800911a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008f3a:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f40:	08008f95 	.word	0x08008f95
 8008f44:	0800911b 	.word	0x0800911b
 8008f48:	0800911b 	.word	0x0800911b
 8008f4c:	0800911b 	.word	0x0800911b
 8008f50:	08008fd5 	.word	0x08008fd5
 8008f54:	0800911b 	.word	0x0800911b
 8008f58:	0800911b 	.word	0x0800911b
 8008f5c:	0800911b 	.word	0x0800911b
 8008f60:	08009017 	.word	0x08009017
 8008f64:	0800911b 	.word	0x0800911b
 8008f68:	0800911b 	.word	0x0800911b
 8008f6c:	0800911b 	.word	0x0800911b
 8008f70:	08009057 	.word	0x08009057
 8008f74:	0800911b 	.word	0x0800911b
 8008f78:	0800911b 	.word	0x0800911b
 8008f7c:	0800911b 	.word	0x0800911b
 8008f80:	08009099 	.word	0x08009099
 8008f84:	0800911b 	.word	0x0800911b
 8008f88:	0800911b 	.word	0x0800911b
 8008f8c:	0800911b 	.word	0x0800911b
 8008f90:	080090d9 	.word	0x080090d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fa32 	bl	8009404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699a      	ldr	r2, [r3, #24]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0208 	orr.w	r2, r2, #8
 8008fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0204 	bic.w	r2, r2, #4
 8008fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6999      	ldr	r1, [r3, #24]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	619a      	str	r2, [r3, #24]
      break;
 8008fd2:	e0a3      	b.n	800911c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68b9      	ldr	r1, [r7, #8]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 faa2 	bl	8009524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	699a      	ldr	r2, [r3, #24]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6999      	ldr	r1, [r3, #24]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	021a      	lsls	r2, r3, #8
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	619a      	str	r2, [r3, #24]
      break;
 8009014:	e082      	b.n	800911c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fb0b 	bl	8009638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0208 	orr.w	r2, r2, #8
 8009030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69da      	ldr	r2, [r3, #28]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0204 	bic.w	r2, r2, #4
 8009040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69d9      	ldr	r1, [r3, #28]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	61da      	str	r2, [r3, #28]
      break;
 8009054:	e062      	b.n	800911c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fb71 	bl	8009744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69da      	ldr	r2, [r3, #28]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69da      	ldr	r2, [r3, #28]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69d9      	ldr	r1, [r3, #28]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	021a      	lsls	r2, r3, #8
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	61da      	str	r2, [r3, #28]
      break;
 8009096:	e041      	b.n	800911c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fbb8 	bl	8009814 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0208 	orr.w	r2, r2, #8
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0204 	bic.w	r2, r2, #4
 80090c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090d6:	e021      	b.n	800911c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fbfa 	bl	80098d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009102:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	021a      	lsls	r2, r3, #8
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009118:	e000      	b.n	800911c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800911a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop

08009130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_TIM_ConfigClockSource+0x18>
 8009144:	2302      	movs	r3, #2
 8009146:	e0b7      	b.n	80092b8 <HAL_TIM_ConfigClockSource+0x188>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4b57      	ldr	r3, [pc, #348]	; (80092c0 <HAL_TIM_ConfigClockSource+0x190>)
 8009164:	4013      	ands	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800916e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b70      	cmp	r3, #112	; 0x70
 800917e:	d02e      	beq.n	80091de <HAL_TIM_ConfigClockSource+0xae>
 8009180:	2b70      	cmp	r3, #112	; 0x70
 8009182:	d812      	bhi.n	80091aa <HAL_TIM_ConfigClockSource+0x7a>
 8009184:	2b30      	cmp	r3, #48	; 0x30
 8009186:	f000 8084 	beq.w	8009292 <HAL_TIM_ConfigClockSource+0x162>
 800918a:	2b30      	cmp	r3, #48	; 0x30
 800918c:	d806      	bhi.n	800919c <HAL_TIM_ConfigClockSource+0x6c>
 800918e:	2b10      	cmp	r3, #16
 8009190:	d07f      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
 8009192:	2b20      	cmp	r3, #32
 8009194:	d07d      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d07b      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800919a:	e084      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800919c:	2b50      	cmp	r3, #80	; 0x50
 800919e:	d048      	beq.n	8009232 <HAL_TIM_ConfigClockSource+0x102>
 80091a0:	2b60      	cmp	r3, #96	; 0x60
 80091a2:	d056      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0x122>
 80091a4:	2b40      	cmp	r3, #64	; 0x40
 80091a6:	d064      	beq.n	8009272 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80091a8:	e07d      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80091aa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091ae:	d070      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
 80091b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091b4:	d809      	bhi.n	80091ca <HAL_TIM_ConfigClockSource+0x9a>
 80091b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ba:	d027      	beq.n	800920c <HAL_TIM_ConfigClockSource+0xdc>
 80091bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091c0:	d067      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c6:	d06d      	beq.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091c8:	e06d      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80091ca:	4a3e      	ldr	r2, [pc, #248]	; (80092c4 <HAL_TIM_ConfigClockSource+0x194>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d060      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
 80091d0:	4a3d      	ldr	r2, [pc, #244]	; (80092c8 <HAL_TIM_ConfigClockSource+0x198>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d05d      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
 80091d6:	4a3d      	ldr	r2, [pc, #244]	; (80092cc <HAL_TIM_ConfigClockSource+0x19c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d05a      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80091dc:	e063      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	6899      	ldr	r1, [r3, #8]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f000 fc55 	bl	8009a9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	609a      	str	r2, [r3, #8]
      break;
 800920a:	e04c      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	6899      	ldr	r1, [r3, #8]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f000 fc3e 	bl	8009a9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800922e:	609a      	str	r2, [r3, #8]
      break;
 8009230:	e039      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6818      	ldr	r0, [r3, #0]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6859      	ldr	r1, [r3, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	461a      	mov	r2, r3
 8009240:	f000 fbae 	bl	80099a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2150      	movs	r1, #80	; 0x50
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fc08 	bl	8009a60 <TIM_ITRx_SetConfig>
      break;
 8009250:	e029      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6859      	ldr	r1, [r3, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	461a      	mov	r2, r3
 8009260:	f000 fbcd 	bl	80099fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2160      	movs	r1, #96	; 0x60
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fbf8 	bl	8009a60 <TIM_ITRx_SetConfig>
      break;
 8009270:	e019      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6859      	ldr	r1, [r3, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	461a      	mov	r2, r3
 8009280:	f000 fb8e 	bl	80099a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2140      	movs	r1, #64	; 0x40
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fbe8 	bl	8009a60 <TIM_ITRx_SetConfig>
      break;
 8009290:	e009      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f000 fbdf 	bl	8009a60 <TIM_ITRx_SetConfig>
      break;
 80092a2:	e000      	b.n	80092a6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80092a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	ffceff88 	.word	0xffceff88
 80092c4:	00100030 	.word	0x00100030
 80092c8:	00100040 	.word	0x00100040
 80092cc:	00100020 	.word	0x00100020

080092d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a40      	ldr	r2, [pc, #256]	; (80093e4 <TIM_Base_SetConfig+0x114>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d013      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ee:	d00f      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a3d      	ldr	r2, [pc, #244]	; (80093e8 <TIM_Base_SetConfig+0x118>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d00b      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a3c      	ldr	r2, [pc, #240]	; (80093ec <TIM_Base_SetConfig+0x11c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d007      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a3b      	ldr	r2, [pc, #236]	; (80093f0 <TIM_Base_SetConfig+0x120>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d003      	beq.n	8009310 <TIM_Base_SetConfig+0x40>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a3a      	ldr	r2, [pc, #232]	; (80093f4 <TIM_Base_SetConfig+0x124>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d108      	bne.n	8009322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a2f      	ldr	r2, [pc, #188]	; (80093e4 <TIM_Base_SetConfig+0x114>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d01f      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009330:	d01b      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a2c      	ldr	r2, [pc, #176]	; (80093e8 <TIM_Base_SetConfig+0x118>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d017      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a2b      	ldr	r2, [pc, #172]	; (80093ec <TIM_Base_SetConfig+0x11c>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d013      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a2a      	ldr	r2, [pc, #168]	; (80093f0 <TIM_Base_SetConfig+0x120>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d00f      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a29      	ldr	r2, [pc, #164]	; (80093f4 <TIM_Base_SetConfig+0x124>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00b      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a28      	ldr	r2, [pc, #160]	; (80093f8 <TIM_Base_SetConfig+0x128>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d007      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a27      	ldr	r2, [pc, #156]	; (80093fc <TIM_Base_SetConfig+0x12c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d003      	beq.n	800936a <TIM_Base_SetConfig+0x9a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a26      	ldr	r2, [pc, #152]	; (8009400 <TIM_Base_SetConfig+0x130>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d108      	bne.n	800937c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a10      	ldr	r2, [pc, #64]	; (80093e4 <TIM_Base_SetConfig+0x114>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00f      	beq.n	80093c8 <TIM_Base_SetConfig+0xf8>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a12      	ldr	r2, [pc, #72]	; (80093f4 <TIM_Base_SetConfig+0x124>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d00b      	beq.n	80093c8 <TIM_Base_SetConfig+0xf8>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a11      	ldr	r2, [pc, #68]	; (80093f8 <TIM_Base_SetConfig+0x128>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d007      	beq.n	80093c8 <TIM_Base_SetConfig+0xf8>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a10      	ldr	r2, [pc, #64]	; (80093fc <TIM_Base_SetConfig+0x12c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d003      	beq.n	80093c8 <TIM_Base_SetConfig+0xf8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a0f      	ldr	r2, [pc, #60]	; (8009400 <TIM_Base_SetConfig+0x130>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d103      	bne.n	80093d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	615a      	str	r2, [r3, #20]
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	40010000 	.word	0x40010000
 80093e8:	40000400 	.word	0x40000400
 80093ec:	40000800 	.word	0x40000800
 80093f0:	40000c00 	.word	0x40000c00
 80093f4:	40010400 	.word	0x40010400
 80093f8:	40014000 	.word	0x40014000
 80093fc:	40014400 	.word	0x40014400
 8009400:	40014800 	.word	0x40014800

08009404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	f023 0201 	bic.w	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4b37      	ldr	r3, [pc, #220]	; (800950c <TIM_OC1_SetConfig+0x108>)
 8009430:	4013      	ands	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f023 0302 	bic.w	r3, r3, #2
 800944c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	4313      	orrs	r3, r2
 8009456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a2d      	ldr	r2, [pc, #180]	; (8009510 <TIM_OC1_SetConfig+0x10c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00f      	beq.n	8009480 <TIM_OC1_SetConfig+0x7c>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a2c      	ldr	r2, [pc, #176]	; (8009514 <TIM_OC1_SetConfig+0x110>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00b      	beq.n	8009480 <TIM_OC1_SetConfig+0x7c>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a2b      	ldr	r2, [pc, #172]	; (8009518 <TIM_OC1_SetConfig+0x114>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d007      	beq.n	8009480 <TIM_OC1_SetConfig+0x7c>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a2a      	ldr	r2, [pc, #168]	; (800951c <TIM_OC1_SetConfig+0x118>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d003      	beq.n	8009480 <TIM_OC1_SetConfig+0x7c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a29      	ldr	r2, [pc, #164]	; (8009520 <TIM_OC1_SetConfig+0x11c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d10c      	bne.n	800949a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 0308 	bic.w	r3, r3, #8
 8009486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f023 0304 	bic.w	r3, r3, #4
 8009498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a1c      	ldr	r2, [pc, #112]	; (8009510 <TIM_OC1_SetConfig+0x10c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d00f      	beq.n	80094c2 <TIM_OC1_SetConfig+0xbe>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a1b      	ldr	r2, [pc, #108]	; (8009514 <TIM_OC1_SetConfig+0x110>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00b      	beq.n	80094c2 <TIM_OC1_SetConfig+0xbe>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a1a      	ldr	r2, [pc, #104]	; (8009518 <TIM_OC1_SetConfig+0x114>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d007      	beq.n	80094c2 <TIM_OC1_SetConfig+0xbe>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a19      	ldr	r2, [pc, #100]	; (800951c <TIM_OC1_SetConfig+0x118>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d003      	beq.n	80094c2 <TIM_OC1_SetConfig+0xbe>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a18      	ldr	r2, [pc, #96]	; (8009520 <TIM_OC1_SetConfig+0x11c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d111      	bne.n	80094e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	621a      	str	r2, [r3, #32]
}
 8009500:	bf00      	nop
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	fffeff8f 	.word	0xfffeff8f
 8009510:	40010000 	.word	0x40010000
 8009514:	40010400 	.word	0x40010400
 8009518:	40014000 	.word	0x40014000
 800951c:	40014400 	.word	0x40014400
 8009520:	40014800 	.word	0x40014800

08009524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f023 0210 	bic.w	r2, r3, #16
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	4b34      	ldr	r3, [pc, #208]	; (8009620 <TIM_OC2_SetConfig+0xfc>)
 8009550:	4013      	ands	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800955a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	021b      	lsls	r3, r3, #8
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f023 0320 	bic.w	r3, r3, #32
 800956e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	011b      	lsls	r3, r3, #4
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4313      	orrs	r3, r2
 800957a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a29      	ldr	r2, [pc, #164]	; (8009624 <TIM_OC2_SetConfig+0x100>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_OC2_SetConfig+0x68>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a28      	ldr	r2, [pc, #160]	; (8009628 <TIM_OC2_SetConfig+0x104>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d10d      	bne.n	80095a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a1e      	ldr	r2, [pc, #120]	; (8009624 <TIM_OC2_SetConfig+0x100>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00f      	beq.n	80095d0 <TIM_OC2_SetConfig+0xac>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a1d      	ldr	r2, [pc, #116]	; (8009628 <TIM_OC2_SetConfig+0x104>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00b      	beq.n	80095d0 <TIM_OC2_SetConfig+0xac>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a1c      	ldr	r2, [pc, #112]	; (800962c <TIM_OC2_SetConfig+0x108>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d007      	beq.n	80095d0 <TIM_OC2_SetConfig+0xac>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a1b      	ldr	r2, [pc, #108]	; (8009630 <TIM_OC2_SetConfig+0x10c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d003      	beq.n	80095d0 <TIM_OC2_SetConfig+0xac>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a1a      	ldr	r2, [pc, #104]	; (8009634 <TIM_OC2_SetConfig+0x110>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d113      	bne.n	80095f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	621a      	str	r2, [r3, #32]
}
 8009612:	bf00      	nop
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	feff8fff 	.word	0xfeff8fff
 8009624:	40010000 	.word	0x40010000
 8009628:	40010400 	.word	0x40010400
 800962c:	40014000 	.word	0x40014000
 8009630:	40014400 	.word	0x40014400
 8009634:	40014800 	.word	0x40014800

08009638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 0303 	bic.w	r3, r3, #3
 800966e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	4313      	orrs	r3, r2
 800968c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a27      	ldr	r2, [pc, #156]	; (8009730 <TIM_OC3_SetConfig+0xf8>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d003      	beq.n	800969e <TIM_OC3_SetConfig+0x66>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a26      	ldr	r2, [pc, #152]	; (8009734 <TIM_OC3_SetConfig+0xfc>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d10d      	bne.n	80096ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	021b      	lsls	r3, r3, #8
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a1c      	ldr	r2, [pc, #112]	; (8009730 <TIM_OC3_SetConfig+0xf8>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00f      	beq.n	80096e2 <TIM_OC3_SetConfig+0xaa>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a1b      	ldr	r2, [pc, #108]	; (8009734 <TIM_OC3_SetConfig+0xfc>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d00b      	beq.n	80096e2 <TIM_OC3_SetConfig+0xaa>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a1a      	ldr	r2, [pc, #104]	; (8009738 <TIM_OC3_SetConfig+0x100>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d007      	beq.n	80096e2 <TIM_OC3_SetConfig+0xaa>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a19      	ldr	r2, [pc, #100]	; (800973c <TIM_OC3_SetConfig+0x104>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <TIM_OC3_SetConfig+0xaa>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a18      	ldr	r2, [pc, #96]	; (8009740 <TIM_OC3_SetConfig+0x108>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d113      	bne.n	800970a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	621a      	str	r2, [r3, #32]
}
 8009724:	bf00      	nop
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	40010000 	.word	0x40010000
 8009734:	40010400 	.word	0x40010400
 8009738:	40014000 	.word	0x40014000
 800973c:	40014400 	.word	0x40014400
 8009740:	40014800 	.word	0x40014800

08009744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800977a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800978e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	031b      	lsls	r3, r3, #12
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a18      	ldr	r2, [pc, #96]	; (8009800 <TIM_OC4_SetConfig+0xbc>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d00f      	beq.n	80097c4 <TIM_OC4_SetConfig+0x80>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a17      	ldr	r2, [pc, #92]	; (8009804 <TIM_OC4_SetConfig+0xc0>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d00b      	beq.n	80097c4 <TIM_OC4_SetConfig+0x80>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a16      	ldr	r2, [pc, #88]	; (8009808 <TIM_OC4_SetConfig+0xc4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d007      	beq.n	80097c4 <TIM_OC4_SetConfig+0x80>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a15      	ldr	r2, [pc, #84]	; (800980c <TIM_OC4_SetConfig+0xc8>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d003      	beq.n	80097c4 <TIM_OC4_SetConfig+0x80>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a14      	ldr	r2, [pc, #80]	; (8009810 <TIM_OC4_SetConfig+0xcc>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d109      	bne.n	80097d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	019b      	lsls	r3, r3, #6
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	621a      	str	r2, [r3, #32]
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40010000 	.word	0x40010000
 8009804:	40010400 	.word	0x40010400
 8009808:	40014000 	.word	0x40014000
 800980c:	40014400 	.word	0x40014400
 8009810:	40014800 	.word	0x40014800

08009814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	4313      	orrs	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009854:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	041b      	lsls	r3, r3, #16
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4313      	orrs	r3, r2
 8009860:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a17      	ldr	r2, [pc, #92]	; (80098c4 <TIM_OC5_SetConfig+0xb0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <TIM_OC5_SetConfig+0x76>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a16      	ldr	r2, [pc, #88]	; (80098c8 <TIM_OC5_SetConfig+0xb4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00b      	beq.n	800988a <TIM_OC5_SetConfig+0x76>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a15      	ldr	r2, [pc, #84]	; (80098cc <TIM_OC5_SetConfig+0xb8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <TIM_OC5_SetConfig+0x76>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a14      	ldr	r2, [pc, #80]	; (80098d0 <TIM_OC5_SetConfig+0xbc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d003      	beq.n	800988a <TIM_OC5_SetConfig+0x76>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a13      	ldr	r2, [pc, #76]	; (80098d4 <TIM_OC5_SetConfig+0xc0>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d109      	bne.n	800989e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	021b      	lsls	r3, r3, #8
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	621a      	str	r2, [r3, #32]
}
 80098b8:	bf00      	nop
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40010400 	.word	0x40010400
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	40014800 	.word	0x40014800

080098d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	021b      	lsls	r3, r3, #8
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800991a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	051b      	lsls	r3, r3, #20
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a18      	ldr	r2, [pc, #96]	; (800998c <TIM_OC6_SetConfig+0xb4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00f      	beq.n	8009950 <TIM_OC6_SetConfig+0x78>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a17      	ldr	r2, [pc, #92]	; (8009990 <TIM_OC6_SetConfig+0xb8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_OC6_SetConfig+0x78>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a16      	ldr	r2, [pc, #88]	; (8009994 <TIM_OC6_SetConfig+0xbc>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_OC6_SetConfig+0x78>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a15      	ldr	r2, [pc, #84]	; (8009998 <TIM_OC6_SetConfig+0xc0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_OC6_SetConfig+0x78>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a14      	ldr	r2, [pc, #80]	; (800999c <TIM_OC6_SetConfig+0xc4>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d109      	bne.n	8009964 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	029b      	lsls	r3, r3, #10
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	621a      	str	r2, [r3, #32]
}
 800997e:	bf00      	nop
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	40010000 	.word	0x40010000
 8009990:	40010400 	.word	0x40010400
 8009994:	40014000 	.word	0x40014000
 8009998:	40014400 	.word	0x40014400
 800999c:	40014800 	.word	0x40014800

080099a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	f023 0201 	bic.w	r2, r3, #1
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f023 030a 	bic.w	r3, r3, #10
 80099dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	621a      	str	r2, [r3, #32]
}
 80099f2:	bf00      	nop
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b087      	sub	sp, #28
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	f023 0210 	bic.w	r2, r3, #16
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	031b      	lsls	r3, r3, #12
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
	...

08009a60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <TIM_ITRx_SetConfig+0x38>)
 8009a74:	4013      	ands	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	f043 0307 	orr.w	r3, r3, #7
 8009a82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	609a      	str	r2, [r3, #8]
}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	ffcfff8f 	.word	0xffcfff8f

08009a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	021a      	lsls	r2, r3, #8
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	609a      	str	r2, [r3, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d101      	bne.n	8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009af0:	2302      	movs	r3, #2
 8009af2:	e068      	b.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a2e      	ldr	r2, [pc, #184]	; (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a2d      	ldr	r2, [pc, #180]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d108      	bne.n	8009b3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a1e      	ldr	r2, [pc, #120]	; (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d01d      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b66:	d018      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a1b      	ldr	r2, [pc, #108]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d013      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a1a      	ldr	r2, [pc, #104]	; (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00e      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a18      	ldr	r2, [pc, #96]	; (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d009      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a13      	ldr	r2, [pc, #76]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d004      	beq.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a14      	ldr	r2, [pc, #80]	; (8009be8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d10c      	bne.n	8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40010400 	.word	0x40010400
 8009bdc:	40000400 	.word	0x40000400
 8009be0:	40000800 	.word	0x40000800
 8009be4:	40000c00 	.word	0x40000c00
 8009be8:	40001800 	.word	0x40001800

08009bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e042      	b.n	8009c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7f7 fd3d 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2224      	movs	r2, #36	; 0x24
 8009c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fb2e 	bl	800a290 <UART_SetConfig>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e022      	b.n	8009c84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f8d2 	bl	800adf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0201 	orr.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 f959 	bl	800af34 <UART_CheckIdleState>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	; 0x28
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	f040 8083 	bne.w	8009dae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <HAL_UART_Transmit+0x28>
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e07b      	b.n	8009db0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <HAL_UART_Transmit+0x3a>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e074      	b.n	8009db0 <HAL_UART_Transmit+0x124>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2221      	movs	r2, #33	; 0x21
 8009cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009cde:	f7f7 fe13 	bl	8001908 <HAL_GetTick>
 8009ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	88fa      	ldrh	r2, [r7, #6]
 8009ce8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	88fa      	ldrh	r2, [r7, #6]
 8009cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfc:	d108      	bne.n	8009d10 <HAL_UART_Transmit+0x84>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d104      	bne.n	8009d10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	e003      	b.n	8009d18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009d20:	e02c      	b.n	8009d7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2180      	movs	r1, #128	; 0x80
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f001 f949 	bl	800afc4 <UART_WaitOnFlagUntilTimeout>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e039      	b.n	8009db0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	3302      	adds	r3, #2
 8009d56:	61bb      	str	r3, [r7, #24]
 8009d58:	e007      	b.n	8009d6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	781a      	ldrb	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	3301      	adds	r3, #1
 8009d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1cc      	bne.n	8009d22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2140      	movs	r1, #64	; 0x40
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f001 f916 	bl	800afc4 <UART_WaitOnFlagUntilTimeout>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e006      	b.n	8009db0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009dae:	2302      	movs	r3, #2
  }
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	f040 80bc 	bne.w	8009f4a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <HAL_UART_Receive_IT+0x26>
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e0b4      	b.n	8009f4c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_UART_Receive_IT+0x38>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e0ad      	b.n	8009f4c <HAL_UART_Receive_IT+0x194>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	88fa      	ldrh	r2, [r7, #6]
 8009e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	88fa      	ldrh	r2, [r7, #6]
 8009e0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1c:	d10e      	bne.n	8009e3c <HAL_UART_Receive_IT+0x84>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d105      	bne.n	8009e32 <HAL_UART_Receive_IT+0x7a>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e30:	e02d      	b.n	8009e8e <HAL_UART_Receive_IT+0xd6>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	22ff      	movs	r2, #255	; 0xff
 8009e36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e3a:	e028      	b.n	8009e8e <HAL_UART_Receive_IT+0xd6>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10d      	bne.n	8009e60 <HAL_UART_Receive_IT+0xa8>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d104      	bne.n	8009e56 <HAL_UART_Receive_IT+0x9e>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	22ff      	movs	r2, #255	; 0xff
 8009e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e54:	e01b      	b.n	8009e8e <HAL_UART_Receive_IT+0xd6>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	227f      	movs	r2, #127	; 0x7f
 8009e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e5e:	e016      	b.n	8009e8e <HAL_UART_Receive_IT+0xd6>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e68:	d10d      	bne.n	8009e86 <HAL_UART_Receive_IT+0xce>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d104      	bne.n	8009e7c <HAL_UART_Receive_IT+0xc4>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	227f      	movs	r2, #127	; 0x7f
 8009e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e7a:	e008      	b.n	8009e8e <HAL_UART_Receive_IT+0xd6>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	223f      	movs	r2, #63	; 0x3f
 8009e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e84:	e003      	b.n	8009e8e <HAL_UART_Receive_IT+0xd6>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2222      	movs	r2, #34	; 0x22
 8009e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0201 	orr.w	r2, r2, #1
 8009eac:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb6:	d12a      	bne.n	8009f0e <HAL_UART_Receive_IT+0x156>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ebe:	88fa      	ldrh	r2, [r7, #6]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d324      	bcc.n	8009f0e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ecc:	d107      	bne.n	8009ede <HAL_UART_Receive_IT+0x126>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d103      	bne.n	8009ede <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4a1f      	ldr	r2, [pc, #124]	; (8009f58 <HAL_UART_Receive_IT+0x1a0>)
 8009eda:	66da      	str	r2, [r3, #108]	; 0x6c
 8009edc:	e002      	b.n	8009ee4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a1e      	ldr	r2, [pc, #120]	; (8009f5c <HAL_UART_Receive_IT+0x1a4>)
 8009ee2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009efa:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f0a:	609a      	str	r2, [r3, #8]
 8009f0c:	e01b      	b.n	8009f46 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f16:	d107      	bne.n	8009f28 <HAL_UART_Receive_IT+0x170>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4a0f      	ldr	r2, [pc, #60]	; (8009f60 <HAL_UART_Receive_IT+0x1a8>)
 8009f24:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f26:	e002      	b.n	8009f2e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4a0e      	ldr	r2, [pc, #56]	; (8009f64 <HAL_UART_Receive_IT+0x1ac>)
 8009f2c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009f44:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e000      	b.n	8009f4c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009f4a:	2302      	movs	r3, #2
  }
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	0800b3c9 	.word	0x0800b3c9
 8009f5c:	0800b2c1 	.word	0x0800b2c1
 8009f60:	0800b217 	.word	0x0800b217
 8009f64:	0800b16d 	.word	0x0800b16d

08009f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f88:	69fa      	ldr	r2, [r7, #28]
 8009f8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f8e:	4013      	ands	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d118      	bne.n	8009fca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d013      	beq.n	8009fca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f003 0320 	and.w	r3, r3, #32
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 8145 	beq.w	800a24a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4798      	blx	r3
      }
      return;
 8009fc8:	e13f      	b.n	800a24a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80e8 	beq.w	800a1a2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	4ba1      	ldr	r3, [pc, #644]	; (800a25c <HAL_UART_IRQHandler+0x2f4>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d105      	bne.n	8009fe8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	4ba0      	ldr	r3, [pc, #640]	; (800a260 <HAL_UART_IRQHandler+0x2f8>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 80dd 	beq.w	800a1a2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d010      	beq.n	800a014 <HAL_UART_IRQHandler+0xac>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00b      	beq.n	800a014 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2201      	movs	r2, #1
 800a002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	f043 0201 	orr.w	r2, r3, #1
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d010      	beq.n	800a040 <HAL_UART_IRQHandler+0xd8>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00b      	beq.n	800a040 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2202      	movs	r2, #2
 800a02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a036:	f043 0204 	orr.w	r2, r3, #4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f003 0304 	and.w	r3, r3, #4
 800a046:	2b00      	cmp	r3, #0
 800a048:	d010      	beq.n	800a06c <HAL_UART_IRQHandler+0x104>
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2204      	movs	r2, #4
 800a05a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a062:	f043 0202 	orr.w	r2, r3, #2
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d015      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d104      	bne.n	800a08a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	4b76      	ldr	r3, [pc, #472]	; (800a25c <HAL_UART_IRQHandler+0x2f4>)
 800a084:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00b      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2208      	movs	r2, #8
 800a090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a098:	f043 0208 	orr.w	r2, r3, #8
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d011      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x168>
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00c      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c6:	f043 0220 	orr.w	r2, r3, #32
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 80b9 	beq.w	800a24e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d011      	beq.n	800a10a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d104      	bne.n	800a0fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a110:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d004      	beq.n	800a12a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a126:	2b00      	cmp	r3, #0
 800a128:	d031      	beq.n	800a18e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 ffca 	bl	800b0c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13a:	2b40      	cmp	r3, #64	; 0x40
 800a13c:	d123      	bne.n	800a186 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a14c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a152:	2b00      	cmp	r3, #0
 800a154:	d013      	beq.n	800a17e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a15a:	4a42      	ldr	r2, [pc, #264]	; (800a264 <HAL_UART_IRQHandler+0x2fc>)
 800a15c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a162:	4618      	mov	r0, r3
 800a164:	f7f9 f920 	bl	80033a8 <HAL_DMA_Abort_IT>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d017      	beq.n	800a19e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a17c:	e00f      	b.n	800a19e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f87c 	bl	800a27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a184:	e00b      	b.n	800a19e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f878 	bl	800a27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a18c:	e007      	b.n	800a19e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f874 	bl	800a27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a19c:	e057      	b.n	800a24e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a19e:	bf00      	nop
    return;
 800a1a0:	e055      	b.n	800a24e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00d      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x260>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d008      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f985 	bl	800b4d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1c6:	e045      	b.n	800a254 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d012      	beq.n	800a1f8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d031      	beq.n	800a252 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	4798      	blx	r3
    }
    return;
 800a1f6:	e02c      	b.n	800a252 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d008      	beq.n	800a214 <HAL_UART_IRQHandler+0x2ac>
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 ff93 	bl	800b138 <UART_EndTransmit_IT>
    return;
 800a212:	e01f      	b.n	800a254 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d008      	beq.n	800a230 <HAL_UART_IRQHandler+0x2c8>
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 f965 	bl	800b4f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a22e:	e011      	b.n	800a254 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <HAL_UART_IRQHandler+0x2ec>
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	da09      	bge.n	800a254 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 f94f 	bl	800b4e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a246:	bf00      	nop
 800a248:	e004      	b.n	800a254 <HAL_UART_IRQHandler+0x2ec>
      return;
 800a24a:	bf00      	nop
 800a24c:	e002      	b.n	800a254 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a24e:	bf00      	nop
 800a250:	e000      	b.n	800a254 <HAL_UART_IRQHandler+0x2ec>
    return;
 800a252:	bf00      	nop
  }
}
 800a254:	3720      	adds	r7, #32
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	10000001 	.word	0x10000001
 800a260:	04000120 	.word	0x04000120
 800a264:	0800b10d 	.word	0x0800b10d

0800a268 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a290:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a294:	b08e      	sub	sp, #56	; 0x38
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	4bc1      	ldr	r3, [pc, #772]	; (800a5d0 <UART_SetConfig+0x340>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4ab7      	ldr	r2, [pc, #732]	; (800a5d4 <UART_SetConfig+0x344>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d004      	beq.n	800a306 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a302:	4313      	orrs	r3, r2
 800a304:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	4bb2      	ldr	r3, [pc, #712]	; (800a5d8 <UART_SetConfig+0x348>)
 800a30e:	4013      	ands	r3, r2
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6812      	ldr	r2, [r2, #0]
 800a314:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a316:	430b      	orrs	r3, r1
 800a318:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	f023 010f 	bic.w	r1, r3, #15
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4aa9      	ldr	r2, [pc, #676]	; (800a5dc <UART_SetConfig+0x34c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d177      	bne.n	800a42a <UART_SetConfig+0x19a>
 800a33a:	4ba9      	ldr	r3, [pc, #676]	; (800a5e0 <UART_SetConfig+0x350>)
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a342:	2b28      	cmp	r3, #40	; 0x28
 800a344:	d86c      	bhi.n	800a420 <UART_SetConfig+0x190>
 800a346:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <UART_SetConfig+0xbc>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a3f1 	.word	0x0800a3f1
 800a350:	0800a421 	.word	0x0800a421
 800a354:	0800a421 	.word	0x0800a421
 800a358:	0800a421 	.word	0x0800a421
 800a35c:	0800a421 	.word	0x0800a421
 800a360:	0800a421 	.word	0x0800a421
 800a364:	0800a421 	.word	0x0800a421
 800a368:	0800a421 	.word	0x0800a421
 800a36c:	0800a3f9 	.word	0x0800a3f9
 800a370:	0800a421 	.word	0x0800a421
 800a374:	0800a421 	.word	0x0800a421
 800a378:	0800a421 	.word	0x0800a421
 800a37c:	0800a421 	.word	0x0800a421
 800a380:	0800a421 	.word	0x0800a421
 800a384:	0800a421 	.word	0x0800a421
 800a388:	0800a421 	.word	0x0800a421
 800a38c:	0800a401 	.word	0x0800a401
 800a390:	0800a421 	.word	0x0800a421
 800a394:	0800a421 	.word	0x0800a421
 800a398:	0800a421 	.word	0x0800a421
 800a39c:	0800a421 	.word	0x0800a421
 800a3a0:	0800a421 	.word	0x0800a421
 800a3a4:	0800a421 	.word	0x0800a421
 800a3a8:	0800a421 	.word	0x0800a421
 800a3ac:	0800a409 	.word	0x0800a409
 800a3b0:	0800a421 	.word	0x0800a421
 800a3b4:	0800a421 	.word	0x0800a421
 800a3b8:	0800a421 	.word	0x0800a421
 800a3bc:	0800a421 	.word	0x0800a421
 800a3c0:	0800a421 	.word	0x0800a421
 800a3c4:	0800a421 	.word	0x0800a421
 800a3c8:	0800a421 	.word	0x0800a421
 800a3cc:	0800a411 	.word	0x0800a411
 800a3d0:	0800a421 	.word	0x0800a421
 800a3d4:	0800a421 	.word	0x0800a421
 800a3d8:	0800a421 	.word	0x0800a421
 800a3dc:	0800a421 	.word	0x0800a421
 800a3e0:	0800a421 	.word	0x0800a421
 800a3e4:	0800a421 	.word	0x0800a421
 800a3e8:	0800a421 	.word	0x0800a421
 800a3ec:	0800a419 	.word	0x0800a419
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f6:	e233      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fe:	e22f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a400:	2308      	movs	r3, #8
 800a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a406:	e22b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40e:	e227      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a410:	2320      	movs	r3, #32
 800a412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a416:	e223      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a418:	2340      	movs	r3, #64	; 0x40
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e21f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a420:	2380      	movs	r3, #128	; 0x80
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	bf00      	nop
 800a428:	e21a      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a6d      	ldr	r2, [pc, #436]	; (800a5e4 <UART_SetConfig+0x354>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d132      	bne.n	800a49a <UART_SetConfig+0x20a>
 800a434:	4b6a      	ldr	r3, [pc, #424]	; (800a5e0 <UART_SetConfig+0x350>)
 800a436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	2b05      	cmp	r3, #5
 800a43e:	d827      	bhi.n	800a490 <UART_SetConfig+0x200>
 800a440:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <UART_SetConfig+0x1b8>)
 800a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a446:	bf00      	nop
 800a448:	0800a461 	.word	0x0800a461
 800a44c:	0800a469 	.word	0x0800a469
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a479 	.word	0x0800a479
 800a458:	0800a481 	.word	0x0800a481
 800a45c:	0800a489 	.word	0x0800a489
 800a460:	2300      	movs	r3, #0
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e1fb      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a468:	2304      	movs	r3, #4
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46e:	e1f7      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a470:	2308      	movs	r3, #8
 800a472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a476:	e1f3      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a478:	2310      	movs	r3, #16
 800a47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47e:	e1ef      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a480:	2320      	movs	r3, #32
 800a482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a486:	e1eb      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e1e7      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a490:	2380      	movs	r3, #128	; 0x80
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	bf00      	nop
 800a498:	e1e2      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a52      	ldr	r2, [pc, #328]	; (800a5e8 <UART_SetConfig+0x358>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d132      	bne.n	800a50a <UART_SetConfig+0x27a>
 800a4a4:	4b4e      	ldr	r3, [pc, #312]	; (800a5e0 <UART_SetConfig+0x350>)
 800a4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	2b05      	cmp	r3, #5
 800a4ae:	d827      	bhi.n	800a500 <UART_SetConfig+0x270>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x228>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d6:	e1c3      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e1bf      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e1bb      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e1b7      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e1b3      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a4f8:	2340      	movs	r3, #64	; 0x40
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e1af      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a500:	2380      	movs	r3, #128	; 0x80
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a506:	bf00      	nop
 800a508:	e1aa      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a37      	ldr	r2, [pc, #220]	; (800a5ec <UART_SetConfig+0x35c>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d132      	bne.n	800a57a <UART_SetConfig+0x2ea>
 800a514:	4b32      	ldr	r3, [pc, #200]	; (800a5e0 <UART_SetConfig+0x350>)
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	2b05      	cmp	r3, #5
 800a51e:	d827      	bhi.n	800a570 <UART_SetConfig+0x2e0>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <UART_SetConfig+0x298>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a561 	.word	0x0800a561
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	2300      	movs	r3, #0
 800a542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a546:	e18b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54e:	e187      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a556:	e183      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55e:	e17f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a560:	2320      	movs	r3, #32
 800a562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a566:	e17b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a568:	2340      	movs	r3, #64	; 0x40
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e177      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a570:	2380      	movs	r3, #128	; 0x80
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	bf00      	nop
 800a578:	e172      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a1c      	ldr	r2, [pc, #112]	; (800a5f0 <UART_SetConfig+0x360>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d144      	bne.n	800a60e <UART_SetConfig+0x37e>
 800a584:	4b16      	ldr	r3, [pc, #88]	; (800a5e0 <UART_SetConfig+0x350>)
 800a586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a588:	f003 0307 	and.w	r3, r3, #7
 800a58c:	2b05      	cmp	r3, #5
 800a58e:	d839      	bhi.n	800a604 <UART_SetConfig+0x374>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <UART_SetConfig+0x308>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5b1 	.word	0x0800a5b1
 800a59c:	0800a5b9 	.word	0x0800a5b9
 800a5a0:	0800a5c1 	.word	0x0800a5c1
 800a5a4:	0800a5c9 	.word	0x0800a5c9
 800a5a8:	0800a5f5 	.word	0x0800a5f5
 800a5ac:	0800a5fd 	.word	0x0800a5fd
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e153      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e14f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a5c0:	2308      	movs	r3, #8
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e14b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e147      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a5d0:	cfff69f3 	.word	0xcfff69f3
 800a5d4:	58000c00 	.word	0x58000c00
 800a5d8:	11fff4ff 	.word	0x11fff4ff
 800a5dc:	40011000 	.word	0x40011000
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	40004400 	.word	0x40004400
 800a5e8:	40004800 	.word	0x40004800
 800a5ec:	40004c00 	.word	0x40004c00
 800a5f0:	40005000 	.word	0x40005000
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e131      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a5fc:	2340      	movs	r3, #64	; 0x40
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e12d      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	bf00      	nop
 800a60c:	e128      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4ab6      	ldr	r2, [pc, #728]	; (800a8ec <UART_SetConfig+0x65c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d178      	bne.n	800a70a <UART_SetConfig+0x47a>
 800a618:	4bb5      	ldr	r3, [pc, #724]	; (800a8f0 <UART_SetConfig+0x660>)
 800a61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a620:	2b28      	cmp	r3, #40	; 0x28
 800a622:	d86d      	bhi.n	800a700 <UART_SetConfig+0x470>
 800a624:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <UART_SetConfig+0x39c>)
 800a626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62a:	bf00      	nop
 800a62c:	0800a6d1 	.word	0x0800a6d1
 800a630:	0800a701 	.word	0x0800a701
 800a634:	0800a701 	.word	0x0800a701
 800a638:	0800a701 	.word	0x0800a701
 800a63c:	0800a701 	.word	0x0800a701
 800a640:	0800a701 	.word	0x0800a701
 800a644:	0800a701 	.word	0x0800a701
 800a648:	0800a701 	.word	0x0800a701
 800a64c:	0800a6d9 	.word	0x0800a6d9
 800a650:	0800a701 	.word	0x0800a701
 800a654:	0800a701 	.word	0x0800a701
 800a658:	0800a701 	.word	0x0800a701
 800a65c:	0800a701 	.word	0x0800a701
 800a660:	0800a701 	.word	0x0800a701
 800a664:	0800a701 	.word	0x0800a701
 800a668:	0800a701 	.word	0x0800a701
 800a66c:	0800a6e1 	.word	0x0800a6e1
 800a670:	0800a701 	.word	0x0800a701
 800a674:	0800a701 	.word	0x0800a701
 800a678:	0800a701 	.word	0x0800a701
 800a67c:	0800a701 	.word	0x0800a701
 800a680:	0800a701 	.word	0x0800a701
 800a684:	0800a701 	.word	0x0800a701
 800a688:	0800a701 	.word	0x0800a701
 800a68c:	0800a6e9 	.word	0x0800a6e9
 800a690:	0800a701 	.word	0x0800a701
 800a694:	0800a701 	.word	0x0800a701
 800a698:	0800a701 	.word	0x0800a701
 800a69c:	0800a701 	.word	0x0800a701
 800a6a0:	0800a701 	.word	0x0800a701
 800a6a4:	0800a701 	.word	0x0800a701
 800a6a8:	0800a701 	.word	0x0800a701
 800a6ac:	0800a6f1 	.word	0x0800a6f1
 800a6b0:	0800a701 	.word	0x0800a701
 800a6b4:	0800a701 	.word	0x0800a701
 800a6b8:	0800a701 	.word	0x0800a701
 800a6bc:	0800a701 	.word	0x0800a701
 800a6c0:	0800a701 	.word	0x0800a701
 800a6c4:	0800a701 	.word	0x0800a701
 800a6c8:	0800a701 	.word	0x0800a701
 800a6cc:	0800a6f9 	.word	0x0800a6f9
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d6:	e0c3      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a6d8:	2304      	movs	r3, #4
 800a6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6de:	e0bf      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a6e0:	2308      	movs	r3, #8
 800a6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e6:	e0bb      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a6e8:	2310      	movs	r3, #16
 800a6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ee:	e0b7      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f6:	e0b3      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fe:	e0af      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a700:	2380      	movs	r3, #128	; 0x80
 800a702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a706:	bf00      	nop
 800a708:	e0aa      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a79      	ldr	r2, [pc, #484]	; (800a8f4 <UART_SetConfig+0x664>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d132      	bne.n	800a77a <UART_SetConfig+0x4ea>
 800a714:	4b76      	ldr	r3, [pc, #472]	; (800a8f0 <UART_SetConfig+0x660>)
 800a716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	2b05      	cmp	r3, #5
 800a71e:	d827      	bhi.n	800a770 <UART_SetConfig+0x4e0>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <UART_SetConfig+0x498>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a749 	.word	0x0800a749
 800a730:	0800a751 	.word	0x0800a751
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a746:	e08b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a748:	2304      	movs	r3, #4
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e087      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a750:	2308      	movs	r3, #8
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e083      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a758:	2310      	movs	r3, #16
 800a75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75e:	e07f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a760:	2320      	movs	r3, #32
 800a762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a766:	e07b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76e:	e077      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a776:	bf00      	nop
 800a778:	e072      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a5e      	ldr	r2, [pc, #376]	; (800a8f8 <UART_SetConfig+0x668>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d132      	bne.n	800a7ea <UART_SetConfig+0x55a>
 800a784:	4b5a      	ldr	r3, [pc, #360]	; (800a8f0 <UART_SetConfig+0x660>)
 800a786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	2b05      	cmp	r3, #5
 800a78e:	d827      	bhi.n	800a7e0 <UART_SetConfig+0x550>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <UART_SetConfig+0x508>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7b1 	.word	0x0800a7b1
 800a79c:	0800a7b9 	.word	0x0800a7b9
 800a7a0:	0800a7c1 	.word	0x0800a7c1
 800a7a4:	0800a7c9 	.word	0x0800a7c9
 800a7a8:	0800a7d1 	.word	0x0800a7d1
 800a7ac:	0800a7d9 	.word	0x0800a7d9
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b6:	e053      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7be:	e04f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c6:	e04b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7c8:	2310      	movs	r3, #16
 800a7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ce:	e047      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7d0:	2320      	movs	r3, #32
 800a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d6:	e043      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7de:	e03f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7e0:	2380      	movs	r3, #128	; 0x80
 800a7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e6:	bf00      	nop
 800a7e8:	e03a      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a43      	ldr	r2, [pc, #268]	; (800a8fc <UART_SetConfig+0x66c>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d132      	bne.n	800a85a <UART_SetConfig+0x5ca>
 800a7f4:	4b3e      	ldr	r3, [pc, #248]	; (800a8f0 <UART_SetConfig+0x660>)
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	2b05      	cmp	r3, #5
 800a7fe:	d827      	bhi.n	800a850 <UART_SetConfig+0x5c0>
 800a800:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <UART_SetConfig+0x578>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a821 	.word	0x0800a821
 800a80c:	0800a829 	.word	0x0800a829
 800a810:	0800a831 	.word	0x0800a831
 800a814:	0800a839 	.word	0x0800a839
 800a818:	0800a841 	.word	0x0800a841
 800a81c:	0800a849 	.word	0x0800a849
 800a820:	2302      	movs	r3, #2
 800a822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a826:	e01b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a828:	2304      	movs	r3, #4
 800a82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82e:	e017      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a830:	2308      	movs	r3, #8
 800a832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a836:	e013      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a838:	2310      	movs	r3, #16
 800a83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83e:	e00f      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a840:	2320      	movs	r3, #32
 800a842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a846:	e00b      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a848:	2340      	movs	r3, #64	; 0x40
 800a84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84e:	e007      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a850:	2380      	movs	r3, #128	; 0x80
 800a852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a856:	bf00      	nop
 800a858:	e002      	b.n	800a860 <UART_SetConfig+0x5d0>
 800a85a:	2380      	movs	r3, #128	; 0x80
 800a85c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a25      	ldr	r2, [pc, #148]	; (800a8fc <UART_SetConfig+0x66c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	f040 80b8 	bne.w	800a9dc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a86c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a870:	2b08      	cmp	r3, #8
 800a872:	d019      	beq.n	800a8a8 <UART_SetConfig+0x618>
 800a874:	2b08      	cmp	r3, #8
 800a876:	dc04      	bgt.n	800a882 <UART_SetConfig+0x5f2>
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d009      	beq.n	800a890 <UART_SetConfig+0x600>
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d00b      	beq.n	800a898 <UART_SetConfig+0x608>
 800a880:	e042      	b.n	800a908 <UART_SetConfig+0x678>
 800a882:	2b20      	cmp	r3, #32
 800a884:	d02b      	beq.n	800a8de <UART_SetConfig+0x64e>
 800a886:	2b40      	cmp	r3, #64	; 0x40
 800a888:	d02c      	beq.n	800a8e4 <UART_SetConfig+0x654>
 800a88a:	2b10      	cmp	r3, #16
 800a88c:	d014      	beq.n	800a8b8 <UART_SetConfig+0x628>
 800a88e:	e03b      	b.n	800a908 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a890:	f7fd fc8a 	bl	80081a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a894:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a896:	e03d      	b.n	800a914 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a898:	f107 0314 	add.w	r3, r7, #20
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fd fc99 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8a6:	e035      	b.n	800a914 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a8:	f107 0308 	add.w	r3, r7, #8
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fd fddd 	bl	800846c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8b6:	e02d      	b.n	800a914 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <UART_SetConfig+0x660>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <UART_SetConfig+0x660>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	08db      	lsrs	r3, r3, #3
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	4a0c      	ldr	r2, [pc, #48]	; (800a900 <UART_SetConfig+0x670>)
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8d6:	e01d      	b.n	800a914 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a8d8:	4b09      	ldr	r3, [pc, #36]	; (800a900 <UART_SetConfig+0x670>)
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8dc:	e01a      	b.n	800a914 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <UART_SetConfig+0x674>)
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e2:	e017      	b.n	800a914 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8ea:	e013      	b.n	800a914 <UART_SetConfig+0x684>
 800a8ec:	40011400 	.word	0x40011400
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	40007800 	.word	0x40007800
 800a8f8:	40007c00 	.word	0x40007c00
 800a8fc:	58000c00 	.word	0x58000c00
 800a900:	03d09000 	.word	0x03d09000
 800a904:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a912:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 824d 	beq.w	800adb6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	4aad      	ldr	r2, [pc, #692]	; (800abd8 <UART_SetConfig+0x948>)
 800a922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a926:	461a      	mov	r2, r3
 800a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a92e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	4613      	mov	r3, r2
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4413      	add	r3, r2
 800a93a:	6a3a      	ldr	r2, [r7, #32]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d305      	bcc.n	800a94c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a946:	6a3a      	ldr	r2, [r7, #32]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d903      	bls.n	800a954 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a952:	e230      	b.n	800adb6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	4618      	mov	r0, r3
 800a958:	f04f 0100 	mov.w	r1, #0
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	4a9d      	ldr	r2, [pc, #628]	; (800abd8 <UART_SetConfig+0x948>)
 800a962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f04f 0400 	mov.w	r4, #0
 800a96c:	461a      	mov	r2, r3
 800a96e:	4623      	mov	r3, r4
 800a970:	f7f5 fcba 	bl	80002e8 <__aeabi_uldivmod>
 800a974:	4603      	mov	r3, r0
 800a976:	460c      	mov	r4, r1
 800a978:	4619      	mov	r1, r3
 800a97a:	4622      	mov	r2, r4
 800a97c:	f04f 0300 	mov.w	r3, #0
 800a980:	f04f 0400 	mov.w	r4, #0
 800a984:	0214      	lsls	r4, r2, #8
 800a986:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a98a:	020b      	lsls	r3, r1, #8
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	6852      	ldr	r2, [r2, #4]
 800a990:	0852      	lsrs	r2, r2, #1
 800a992:	4611      	mov	r1, r2
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	eb13 0b01 	adds.w	fp, r3, r1
 800a99c:	eb44 0c02 	adc.w	ip, r4, r2
 800a9a0:	4658      	mov	r0, fp
 800a9a2:	4661      	mov	r1, ip
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f04f 0400 	mov.w	r4, #0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4623      	mov	r3, r4
 800a9b0:	f7f5 fc9a 	bl	80002e8 <__aeabi_uldivmod>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9c0:	d308      	bcc.n	800a9d4 <UART_SetConfig+0x744>
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c8:	d204      	bcs.n	800a9d4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d0:	60da      	str	r2, [r3, #12]
 800a9d2:	e1f0      	b.n	800adb6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a9da:	e1ec      	b.n	800adb6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e4:	f040 8100 	bne.w	800abe8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a9e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9ec:	2b40      	cmp	r3, #64	; 0x40
 800a9ee:	f200 80b7 	bhi.w	800ab60 <UART_SetConfig+0x8d0>
 800a9f2:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <UART_SetConfig+0x768>)
 800a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f8:	0800aafd 	.word	0x0800aafd
 800a9fc:	0800ab05 	.word	0x0800ab05
 800aa00:	0800ab61 	.word	0x0800ab61
 800aa04:	0800ab61 	.word	0x0800ab61
 800aa08:	0800ab0d 	.word	0x0800ab0d
 800aa0c:	0800ab61 	.word	0x0800ab61
 800aa10:	0800ab61 	.word	0x0800ab61
 800aa14:	0800ab61 	.word	0x0800ab61
 800aa18:	0800ab1d 	.word	0x0800ab1d
 800aa1c:	0800ab61 	.word	0x0800ab61
 800aa20:	0800ab61 	.word	0x0800ab61
 800aa24:	0800ab61 	.word	0x0800ab61
 800aa28:	0800ab61 	.word	0x0800ab61
 800aa2c:	0800ab61 	.word	0x0800ab61
 800aa30:	0800ab61 	.word	0x0800ab61
 800aa34:	0800ab61 	.word	0x0800ab61
 800aa38:	0800ab2d 	.word	0x0800ab2d
 800aa3c:	0800ab61 	.word	0x0800ab61
 800aa40:	0800ab61 	.word	0x0800ab61
 800aa44:	0800ab61 	.word	0x0800ab61
 800aa48:	0800ab61 	.word	0x0800ab61
 800aa4c:	0800ab61 	.word	0x0800ab61
 800aa50:	0800ab61 	.word	0x0800ab61
 800aa54:	0800ab61 	.word	0x0800ab61
 800aa58:	0800ab61 	.word	0x0800ab61
 800aa5c:	0800ab61 	.word	0x0800ab61
 800aa60:	0800ab61 	.word	0x0800ab61
 800aa64:	0800ab61 	.word	0x0800ab61
 800aa68:	0800ab61 	.word	0x0800ab61
 800aa6c:	0800ab61 	.word	0x0800ab61
 800aa70:	0800ab61 	.word	0x0800ab61
 800aa74:	0800ab61 	.word	0x0800ab61
 800aa78:	0800ab53 	.word	0x0800ab53
 800aa7c:	0800ab61 	.word	0x0800ab61
 800aa80:	0800ab61 	.word	0x0800ab61
 800aa84:	0800ab61 	.word	0x0800ab61
 800aa88:	0800ab61 	.word	0x0800ab61
 800aa8c:	0800ab61 	.word	0x0800ab61
 800aa90:	0800ab61 	.word	0x0800ab61
 800aa94:	0800ab61 	.word	0x0800ab61
 800aa98:	0800ab61 	.word	0x0800ab61
 800aa9c:	0800ab61 	.word	0x0800ab61
 800aaa0:	0800ab61 	.word	0x0800ab61
 800aaa4:	0800ab61 	.word	0x0800ab61
 800aaa8:	0800ab61 	.word	0x0800ab61
 800aaac:	0800ab61 	.word	0x0800ab61
 800aab0:	0800ab61 	.word	0x0800ab61
 800aab4:	0800ab61 	.word	0x0800ab61
 800aab8:	0800ab61 	.word	0x0800ab61
 800aabc:	0800ab61 	.word	0x0800ab61
 800aac0:	0800ab61 	.word	0x0800ab61
 800aac4:	0800ab61 	.word	0x0800ab61
 800aac8:	0800ab61 	.word	0x0800ab61
 800aacc:	0800ab61 	.word	0x0800ab61
 800aad0:	0800ab61 	.word	0x0800ab61
 800aad4:	0800ab61 	.word	0x0800ab61
 800aad8:	0800ab61 	.word	0x0800ab61
 800aadc:	0800ab61 	.word	0x0800ab61
 800aae0:	0800ab61 	.word	0x0800ab61
 800aae4:	0800ab61 	.word	0x0800ab61
 800aae8:	0800ab61 	.word	0x0800ab61
 800aaec:	0800ab61 	.word	0x0800ab61
 800aaf0:	0800ab61 	.word	0x0800ab61
 800aaf4:	0800ab61 	.word	0x0800ab61
 800aaf8:	0800ab59 	.word	0x0800ab59
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aafc:	f7fc fc3a 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 800ab00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab02:	e033      	b.n	800ab6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab04:	f7fc fc4c 	bl	80073a0 <HAL_RCC_GetPCLK2Freq>
 800ab08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab0a:	e02f      	b.n	800ab6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab0c:	f107 0314 	add.w	r3, r7, #20
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fd fb5f 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab1a:	e027      	b.n	800ab6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fd fca3 	bl	800846c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab2a:	e01f      	b.n	800ab6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab2c:	4b2b      	ldr	r3, [pc, #172]	; (800abdc <UART_SetConfig+0x94c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d009      	beq.n	800ab4c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab38:	4b28      	ldr	r3, [pc, #160]	; (800abdc <UART_SetConfig+0x94c>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	08db      	lsrs	r3, r3, #3
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	4a27      	ldr	r2, [pc, #156]	; (800abe0 <UART_SetConfig+0x950>)
 800ab44:	fa22 f303 	lsr.w	r3, r2, r3
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab4a:	e00f      	b.n	800ab6c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800ab4c:	4b24      	ldr	r3, [pc, #144]	; (800abe0 <UART_SetConfig+0x950>)
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab50:	e00c      	b.n	800ab6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab52:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <UART_SetConfig+0x954>)
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab56:	e009      	b.n	800ab6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab5e:	e005      	b.n	800ab6c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 8121 	beq.w	800adb6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <UART_SetConfig+0x948>)
 800ab7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab86:	005a      	lsls	r2, r3, #1
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	085b      	lsrs	r3, r3, #1
 800ab8e:	441a      	add	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	2b0f      	cmp	r3, #15
 800aba0:	d916      	bls.n	800abd0 <UART_SetConfig+0x940>
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba8:	d212      	bcs.n	800abd0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	b29b      	uxth	r3, r3
 800abae:	f023 030f 	bic.w	r3, r3, #15
 800abb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	085b      	lsrs	r3, r3, #1
 800abb8:	b29b      	uxth	r3, r3
 800abba:	f003 0307 	and.w	r3, r3, #7
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abc2:	4313      	orrs	r3, r2
 800abc4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800abcc:	60da      	str	r2, [r3, #12]
 800abce:	e0f2      	b.n	800adb6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800abd6:	e0ee      	b.n	800adb6 <UART_SetConfig+0xb26>
 800abd8:	0800c564 	.word	0x0800c564
 800abdc:	58024400 	.word	0x58024400
 800abe0:	03d09000 	.word	0x03d09000
 800abe4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800abe8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abec:	2b40      	cmp	r3, #64	; 0x40
 800abee:	f200 80b7 	bhi.w	800ad60 <UART_SetConfig+0xad0>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <UART_SetConfig+0x968>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800acfd 	.word	0x0800acfd
 800abfc:	0800ad05 	.word	0x0800ad05
 800ac00:	0800ad61 	.word	0x0800ad61
 800ac04:	0800ad61 	.word	0x0800ad61
 800ac08:	0800ad0d 	.word	0x0800ad0d
 800ac0c:	0800ad61 	.word	0x0800ad61
 800ac10:	0800ad61 	.word	0x0800ad61
 800ac14:	0800ad61 	.word	0x0800ad61
 800ac18:	0800ad1d 	.word	0x0800ad1d
 800ac1c:	0800ad61 	.word	0x0800ad61
 800ac20:	0800ad61 	.word	0x0800ad61
 800ac24:	0800ad61 	.word	0x0800ad61
 800ac28:	0800ad61 	.word	0x0800ad61
 800ac2c:	0800ad61 	.word	0x0800ad61
 800ac30:	0800ad61 	.word	0x0800ad61
 800ac34:	0800ad61 	.word	0x0800ad61
 800ac38:	0800ad2d 	.word	0x0800ad2d
 800ac3c:	0800ad61 	.word	0x0800ad61
 800ac40:	0800ad61 	.word	0x0800ad61
 800ac44:	0800ad61 	.word	0x0800ad61
 800ac48:	0800ad61 	.word	0x0800ad61
 800ac4c:	0800ad61 	.word	0x0800ad61
 800ac50:	0800ad61 	.word	0x0800ad61
 800ac54:	0800ad61 	.word	0x0800ad61
 800ac58:	0800ad61 	.word	0x0800ad61
 800ac5c:	0800ad61 	.word	0x0800ad61
 800ac60:	0800ad61 	.word	0x0800ad61
 800ac64:	0800ad61 	.word	0x0800ad61
 800ac68:	0800ad61 	.word	0x0800ad61
 800ac6c:	0800ad61 	.word	0x0800ad61
 800ac70:	0800ad61 	.word	0x0800ad61
 800ac74:	0800ad61 	.word	0x0800ad61
 800ac78:	0800ad53 	.word	0x0800ad53
 800ac7c:	0800ad61 	.word	0x0800ad61
 800ac80:	0800ad61 	.word	0x0800ad61
 800ac84:	0800ad61 	.word	0x0800ad61
 800ac88:	0800ad61 	.word	0x0800ad61
 800ac8c:	0800ad61 	.word	0x0800ad61
 800ac90:	0800ad61 	.word	0x0800ad61
 800ac94:	0800ad61 	.word	0x0800ad61
 800ac98:	0800ad61 	.word	0x0800ad61
 800ac9c:	0800ad61 	.word	0x0800ad61
 800aca0:	0800ad61 	.word	0x0800ad61
 800aca4:	0800ad61 	.word	0x0800ad61
 800aca8:	0800ad61 	.word	0x0800ad61
 800acac:	0800ad61 	.word	0x0800ad61
 800acb0:	0800ad61 	.word	0x0800ad61
 800acb4:	0800ad61 	.word	0x0800ad61
 800acb8:	0800ad61 	.word	0x0800ad61
 800acbc:	0800ad61 	.word	0x0800ad61
 800acc0:	0800ad61 	.word	0x0800ad61
 800acc4:	0800ad61 	.word	0x0800ad61
 800acc8:	0800ad61 	.word	0x0800ad61
 800accc:	0800ad61 	.word	0x0800ad61
 800acd0:	0800ad61 	.word	0x0800ad61
 800acd4:	0800ad61 	.word	0x0800ad61
 800acd8:	0800ad61 	.word	0x0800ad61
 800acdc:	0800ad61 	.word	0x0800ad61
 800ace0:	0800ad61 	.word	0x0800ad61
 800ace4:	0800ad61 	.word	0x0800ad61
 800ace8:	0800ad61 	.word	0x0800ad61
 800acec:	0800ad61 	.word	0x0800ad61
 800acf0:	0800ad61 	.word	0x0800ad61
 800acf4:	0800ad61 	.word	0x0800ad61
 800acf8:	0800ad59 	.word	0x0800ad59
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acfc:	f7fc fb3a 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 800ad00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad02:	e033      	b.n	800ad6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad04:	f7fc fb4c 	bl	80073a0 <HAL_RCC_GetPCLK2Freq>
 800ad08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad0a:	e02f      	b.n	800ad6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad0c:	f107 0314 	add.w	r3, r7, #20
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fd fa5f 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad1a:	e027      	b.n	800ad6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad1c:	f107 0308 	add.w	r3, r7, #8
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fd fba3 	bl	800846c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad2a:	e01f      	b.n	800ad6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad2c:	4b2c      	ldr	r3, [pc, #176]	; (800ade0 <UART_SetConfig+0xb50>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0320 	and.w	r3, r3, #32
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d009      	beq.n	800ad4c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad38:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <UART_SetConfig+0xb50>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	08db      	lsrs	r3, r3, #3
 800ad3e:	f003 0303 	and.w	r3, r3, #3
 800ad42:	4a28      	ldr	r2, [pc, #160]	; (800ade4 <UART_SetConfig+0xb54>)
 800ad44:	fa22 f303 	lsr.w	r3, r2, r3
 800ad48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad4a:	e00f      	b.n	800ad6c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800ad4c:	4b25      	ldr	r3, [pc, #148]	; (800ade4 <UART_SetConfig+0xb54>)
 800ad4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad50:	e00c      	b.n	800ad6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad52:	4b25      	ldr	r3, [pc, #148]	; (800ade8 <UART_SetConfig+0xb58>)
 800ad54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad56:	e009      	b.n	800ad6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad5e:	e005      	b.n	800ad6c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ad60:	2300      	movs	r3, #0
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad6a:	bf00      	nop
    }

    if (pclk != 0U)
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d021      	beq.n	800adb6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad76:	4a1d      	ldr	r2, [pc, #116]	; (800adec <UART_SetConfig+0xb5c>)
 800ad78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	085b      	lsrs	r3, r3, #1
 800ad8a:	441a      	add	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d908      	bls.n	800adb0 <UART_SetConfig+0xb20>
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ada4:	d204      	bcs.n	800adb0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adac:	60da      	str	r2, [r3, #12]
 800adae:	e002      	b.n	800adb6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800add2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800add6:	4618      	mov	r0, r3
 800add8:	3738      	adds	r7, #56	; 0x38
 800adda:	46bd      	mov	sp, r7
 800addc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ade0:	58024400 	.word	0x58024400
 800ade4:	03d09000 	.word	0x03d09000
 800ade8:	003d0900 	.word	0x003d0900
 800adec:	0800c564 	.word	0x0800c564

0800adf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00a      	beq.n	800ae5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae62:	f003 0308 	and.w	r3, r3, #8
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	430a      	orrs	r2, r1
 800aea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	430a      	orrs	r2, r1
 800aec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01a      	beq.n	800af06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeee:	d10a      	bne.n	800af06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	430a      	orrs	r2, r1
 800af26:	605a      	str	r2, [r3, #4]
  }
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af02      	add	r7, sp, #8
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800af44:	f7f6 fce0 	bl	8001908 <HAL_GetTick>
 800af48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0308 	and.w	r3, r3, #8
 800af54:	2b08      	cmp	r3, #8
 800af56:	d10e      	bne.n	800af76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f82c 	bl	800afc4 <UART_WaitOnFlagUntilTimeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e022      	b.n	800afbc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b04      	cmp	r3, #4
 800af82:	d10e      	bne.n	800afa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f816 	bl	800afc4 <UART_WaitOnFlagUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e00c      	b.n	800afbc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	4613      	mov	r3, r2
 800afd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afd4:	e062      	b.n	800b09c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afdc:	d05e      	beq.n	800b09c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afde:	f7f6 fc93 	bl	8001908 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	429a      	cmp	r2, r3
 800afec:	d302      	bcc.n	800aff4 <UART_WaitOnFlagUntilTimeout+0x30>
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d11d      	bne.n	800b030 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b002:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0201 	bic.w	r2, r2, #1
 800b012:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2220      	movs	r2, #32
 800b018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2220      	movs	r2, #32
 800b020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e045      	b.n	800b0bc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d02e      	beq.n	800b09c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04c:	d126      	bne.n	800b09c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b056:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b066:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 0201 	bic.w	r2, r2, #1
 800b076:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2220      	movs	r2, #32
 800b084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2220      	movs	r2, #32
 800b08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e00f      	b.n	800b0bc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	69da      	ldr	r2, [r3, #28]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	bf0c      	ite	eq
 800b0ac:	2301      	moveq	r3, #1
 800b0ae:	2300      	movne	r3, #0
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d08d      	beq.n	800afd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6899      	ldr	r1, [r3, #8]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	4b08      	ldr	r3, [pc, #32]	; (800b108 <UART_EndRxTransfer+0x44>)
 800b0e8:	400b      	ands	r3, r1
 800b0ea:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2220      	movs	r2, #32
 800b0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	effffffe 	.word	0xeffffffe

0800b10c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f7ff f8a6 	bl	800a27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b130:	bf00      	nop
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b14e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2220      	movs	r2, #32
 800b154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff f882 	bl	800a268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b17a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b182:	2b22      	cmp	r3, #34	; 0x22
 800b184:	d13b      	bne.n	800b1fe <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b18e:	89bb      	ldrh	r3, [r7, #12]
 800b190:	b2d9      	uxtb	r1, r3
 800b192:	89fb      	ldrh	r3, [r7, #14]
 800b194:	b2da      	uxtb	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19a:	400a      	ands	r2, r1
 800b19c:	b2d2      	uxtb	r2, r2
 800b19e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d122      	bne.n	800b20e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1d6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689a      	ldr	r2, [r3, #8]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f022 0201 	bic.w	r2, r2, #1
 800b1e6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2220      	movs	r2, #32
 800b1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fad0 	bl	800b79c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1fc:	e007      	b.n	800b20e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	699a      	ldr	r2, [r3, #24]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f042 0208 	orr.w	r2, r2, #8
 800b20c:	619a      	str	r2, [r3, #24]
}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b224:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b22c:	2b22      	cmp	r3, #34	; 0x22
 800b22e:	d13b      	bne.n	800b2a8 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b23e:	89ba      	ldrh	r2, [r7, #12]
 800b240:	89fb      	ldrh	r3, [r7, #14]
 800b242:	4013      	ands	r3, r2
 800b244:	b29a      	uxth	r2, r3
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24e:	1c9a      	adds	r2, r3, #2
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d122      	bne.n	800b2b8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b280:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f022 0201 	bic.w	r2, r2, #1
 800b290:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2220      	movs	r2, #32
 800b296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fa7b 	bl	800b79c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2a6:	e007      	b.n	800b2b8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0208 	orr.w	r2, r2, #8
 800b2b6:	619a      	str	r2, [r3, #24]
}
 800b2b8:	bf00      	nop
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2ce:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d6:	2b22      	cmp	r3, #34	; 0x22
 800b2d8:	d166      	bne.n	800b3a8 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2e0:	81fb      	strh	r3, [r7, #14]
 800b2e2:	e03d      	b.n	800b360 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2ec:	893b      	ldrh	r3, [r7, #8]
 800b2ee:	b2d9      	uxtb	r1, r3
 800b2f0:	89bb      	ldrh	r3, [r7, #12]
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f8:	400a      	ands	r2, r1
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b30e:	b29b      	uxth	r3, r3
 800b310:	3b01      	subs	r3, #1
 800b312:	b29a      	uxth	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b320:	b29b      	uxth	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d119      	bne.n	800b35a <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b334:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6899      	ldr	r1, [r3, #8]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	4b1f      	ldr	r3, [pc, #124]	; (800b3c0 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800b342:	400b      	ands	r3, r1
 800b344:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2220      	movs	r2, #32
 800b34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fa21 	bl	800b79c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b35a:	89fb      	ldrh	r3, [r7, #14]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	81fb      	strh	r3, [r7, #14]
 800b360:	89fb      	ldrh	r3, [r7, #14]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1be      	bne.n	800b2e4 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b36c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b36e:	897b      	ldrh	r3, [r7, #10]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d021      	beq.n	800b3b8 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b37a:	897a      	ldrh	r2, [r7, #10]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d21b      	bcs.n	800b3b8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689a      	ldr	r2, [r3, #8]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b38e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a0c      	ldr	r2, [pc, #48]	; (800b3c4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800b394:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0220 	orr.w	r2, r2, #32
 800b3a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3a6:	e007      	b.n	800b3b8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	699a      	ldr	r2, [r3, #24]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0208 	orr.w	r2, r2, #8
 800b3b6:	619a      	str	r2, [r3, #24]
}
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	effffffe 	.word	0xeffffffe
 800b3c4:	0800b16d 	.word	0x0800b16d

0800b3c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3d6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3de:	2b22      	cmp	r3, #34	; 0x22
 800b3e0:	d166      	bne.n	800b4b0 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b3e8:	82fb      	strh	r3, [r7, #22]
 800b3ea:	e03d      	b.n	800b468 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b3fa:	8a3a      	ldrh	r2, [r7, #16]
 800b3fc:	8abb      	ldrh	r3, [r7, #20]
 800b3fe:	4013      	ands	r3, r2
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40a:	1c9a      	adds	r2, r3, #2
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b416:	b29b      	uxth	r3, r3
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b428:	b29b      	uxth	r3, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d119      	bne.n	800b462 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b43c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6899      	ldr	r1, [r3, #8]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	4b1f      	ldr	r3, [pc, #124]	; (800b4c8 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800b44a:	400b      	ands	r3, r1
 800b44c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f99d 	bl	800b79c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b462:	8afb      	ldrh	r3, [r7, #22]
 800b464:	3b01      	subs	r3, #1
 800b466:	82fb      	strh	r3, [r7, #22]
 800b468:	8afb      	ldrh	r3, [r7, #22]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1be      	bne.n	800b3ec <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b474:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b476:	8a7b      	ldrh	r3, [r7, #18]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d021      	beq.n	800b4c0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b482:	8a7a      	ldrh	r2, [r7, #18]
 800b484:	429a      	cmp	r2, r3
 800b486:	d21b      	bcs.n	800b4c0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689a      	ldr	r2, [r3, #8]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b496:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a0c      	ldr	r2, [pc, #48]	; (800b4cc <UART_RxISR_16BIT_FIFOEN+0x104>)
 800b49c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f042 0220 	orr.w	r2, r2, #32
 800b4ac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4ae:	e007      	b.n	800b4c0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f042 0208 	orr.w	r2, r2, #8
 800b4be:	619a      	str	r2, [r3, #24]
}
 800b4c0:	bf00      	nop
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	effffffe 	.word	0xeffffffe
 800b4cc:	0800b217 	.word	0x0800b217

0800b4d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d101      	bne.n	800b522 <HAL_UARTEx_DisableFifoMode+0x16>
 800b51e:	2302      	movs	r3, #2
 800b520:	e027      	b.n	800b572 <HAL_UARTEx_DisableFifoMode+0x66>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2224      	movs	r2, #36	; 0x24
 800b52e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0201 	bic.w	r2, r2, #1
 800b548:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b550:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2220      	movs	r2, #32
 800b564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d101      	bne.n	800b596 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b592:	2302      	movs	r3, #2
 800b594:	e02d      	b.n	800b5f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2224      	movs	r2, #36	; 0x24
 800b5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f022 0201 	bic.w	r2, r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f850 	bl	800b678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d101      	bne.n	800b612 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b60e:	2302      	movs	r3, #2
 800b610:	e02d      	b.n	800b66e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2224      	movs	r2, #36	; 0x24
 800b61e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	430a      	orrs	r2, r1
 800b64c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f812 	bl	800b678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2220      	movs	r2, #32
 800b660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b678:	b480      	push	{r7}
 800b67a:	b089      	sub	sp, #36	; 0x24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b680:	4a2f      	ldr	r2, [pc, #188]	; (800b740 <UARTEx_SetNbDataToProcess+0xc8>)
 800b682:	f107 0314 	add.w	r3, r7, #20
 800b686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b68a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b68e:	4a2d      	ldr	r2, [pc, #180]	; (800b744 <UARTEx_SetNbDataToProcess+0xcc>)
 800b690:	f107 030c 	add.w	r3, r7, #12
 800b694:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b698:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d108      	bne.n	800b6b6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6b4:	e03d      	b.n	800b732 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6b6:	2310      	movs	r3, #16
 800b6b8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6ba:	2310      	movs	r3, #16
 800b6bc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	0e5b      	lsrs	r3, r3, #25
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	f003 0307 	and.w	r3, r3, #7
 800b6cc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	0f5b      	lsrs	r3, r3, #29
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	f003 0307 	and.w	r3, r3, #7
 800b6dc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b6de:	7fbb      	ldrb	r3, [r7, #30]
 800b6e0:	7f3a      	ldrb	r2, [r7, #28]
 800b6e2:	f107 0120 	add.w	r1, r7, #32
 800b6e6:	440a      	add	r2, r1
 800b6e8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b6ec:	fb02 f303 	mul.w	r3, r2, r3
 800b6f0:	7f3a      	ldrb	r2, [r7, #28]
 800b6f2:	f107 0120 	add.w	r1, r7, #32
 800b6f6:	440a      	add	r2, r1
 800b6f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b6fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b700:	b29a      	uxth	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b708:	7ffb      	ldrb	r3, [r7, #31]
 800b70a:	7f7a      	ldrb	r2, [r7, #29]
 800b70c:	f107 0120 	add.w	r1, r7, #32
 800b710:	440a      	add	r2, r1
 800b712:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b716:	fb02 f303 	mul.w	r3, r2, r3
 800b71a:	7f7a      	ldrb	r2, [r7, #29]
 800b71c:	f107 0120 	add.w	r1, r7, #32
 800b720:	440a      	add	r2, r1
 800b722:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b726:	fb93 f3f2 	sdiv	r3, r3, r2
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b732:	bf00      	nop
 800b734:	3724      	adds	r7, #36	; 0x24
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	0800c53c 	.word	0x0800c53c
 800b744:	0800c544 	.word	0x0800c544

0800b748 <GPS_Init>:
uint8_t isDebug = 0, recvChr, recvBuf[200], recvCount = 0, gpsFlag = 0, recvFlag = 0, LEDflag = 0;
uint8_t (*GPS_Parsers[])(GPS_INFO*, uint8_t*) = {GPS_RMC_Parse, GPS_GGA_Parse, GPS_GSV_Parse};
GPS_INFO mGPS;

void GPS_Init(UART_HandleTypeDef *GPShuart, UART_HandleTypeDef *DebugHuart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  if(DebugHuart != NULL)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <GPS_Init+0x16>
  {
    isDebug = 1;
 800b758:	4b08      	ldr	r3, [pc, #32]	; (800b77c <GPS_Init+0x34>)
 800b75a:	2201      	movs	r2, #1
 800b75c:	701a      	strb	r2, [r3, #0]
  }
  mGPSuart = GPShuart;
 800b75e:	4a08      	ldr	r2, [pc, #32]	; (800b780 <GPS_Init+0x38>)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6013      	str	r3, [r2, #0]
  DebugHuart = DebugHuart;
  HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <GPS_Init+0x38>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2201      	movs	r2, #1
 800b76a:	4906      	ldr	r1, [pc, #24]	; (800b784 <GPS_Init+0x3c>)
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fb23 	bl	8009db8 <HAL_UART_Receive_IT>
}
 800b772:	bf00      	nop
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	24000054 	.word	0x24000054
 800b780:	2400a4c8 	.word	0x2400a4c8
 800b784:	2400a3f8 	.word	0x2400a3f8

0800b788 <get_GPS_INFO>:

const GPS_INFO * get_GPS_INFO()
{
 800b788:	b480      	push	{r7}
 800b78a:	af00      	add	r7, sp, #0
	return (const GPS_INFO *)(&mGPS);
 800b78c:	4b02      	ldr	r3, [pc, #8]	; (800b798 <get_GPS_INFO+0x10>)
}
 800b78e:	4618      	mov	r0, r3
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	2400a4d0 	.word	0x2400a4d0

0800b79c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(recvChr == '$')  //如果收到字符'$'，便开始接收
 800b7a4:	4b33      	ldr	r3, [pc, #204]	; (800b874 <HAL_UART_RxCpltCallback+0xd8>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b24      	cmp	r3, #36	; 0x24
 800b7aa:	d109      	bne.n	800b7c0 <HAL_UART_RxCpltCallback+0x24>
	{
		recvFlag = 1;
 800b7ac:	4b32      	ldr	r3, [pc, #200]	; (800b878 <HAL_UART_RxCpltCallback+0xdc>)
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	701a      	strb	r2, [r3, #0]
		recvBuf[0] = '$';
 800b7b2:	4b32      	ldr	r3, [pc, #200]	; (800b87c <HAL_UART_RxCpltCallback+0xe0>)
 800b7b4:	2224      	movs	r2, #36	; 0x24
 800b7b6:	701a      	strb	r2, [r3, #0]
    	recvCount = 1;
 800b7b8:	4b31      	ldr	r3, [pc, #196]	; (800b880 <HAL_UART_RxCpltCallback+0xe4>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e021      	b.n	800b804 <HAL_UART_RxCpltCallback+0x68>
  } else if(recvFlag == 1)  //标志位为1，开始接收
 800b7c0:	4b2d      	ldr	r3, [pc, #180]	; (800b878 <HAL_UART_RxCpltCallback+0xdc>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d11d      	bne.n	800b804 <HAL_UART_RxCpltCallback+0x68>
	{
		recvBuf[recvCount++] = recvChr;  //字符存到数组中
 800b7c8:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <HAL_UART_RxCpltCallback+0xe4>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	1c5a      	adds	r2, r3, #1
 800b7ce:	b2d1      	uxtb	r1, r2
 800b7d0:	4a2b      	ldr	r2, [pc, #172]	; (800b880 <HAL_UART_RxCpltCallback+0xe4>)
 800b7d2:	7011      	strb	r1, [r2, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4b27      	ldr	r3, [pc, #156]	; (800b874 <HAL_UART_RxCpltCallback+0xd8>)
 800b7d8:	7819      	ldrb	r1, [r3, #0]
 800b7da:	4b28      	ldr	r3, [pc, #160]	; (800b87c <HAL_UART_RxCpltCallback+0xe0>)
 800b7dc:	5499      	strb	r1, [r3, r2]
		if(recvChr == '\n')     //如果接收到换行
 800b7de:	4b25      	ldr	r3, [pc, #148]	; (800b874 <HAL_UART_RxCpltCallback+0xd8>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b0a      	cmp	r3, #10
 800b7e4:	d10e      	bne.n	800b804 <HAL_UART_RxCpltCallback+0x68>
		{
			recvBuf[recvCount] = '\0';
 800b7e6:	4b26      	ldr	r3, [pc, #152]	; (800b880 <HAL_UART_RxCpltCallback+0xe4>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	4b23      	ldr	r3, [pc, #140]	; (800b87c <HAL_UART_RxCpltCallback+0xe0>)
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	5499      	strb	r1, [r3, r2]
		  recvFlag = 0;
 800b7f2:	4b21      	ldr	r3, [pc, #132]	; (800b878 <HAL_UART_RxCpltCallback+0xdc>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	701a      	strb	r2, [r3, #0]
			  gpsFlag = 1;
 800b7f8:	4b22      	ldr	r3, [pc, #136]	; (800b884 <HAL_UART_RxCpltCallback+0xe8>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	701a      	strb	r2, [r3, #0]
			recvCount = 1;
 800b7fe:	4b20      	ldr	r3, [pc, #128]	; (800b880 <HAL_UART_RxCpltCallback+0xe4>)
 800b800:	2201      	movs	r2, #1
 800b802:	701a      	strb	r2, [r3, #0]
		}
	}
  if(gpsFlag == 1)
 800b804:	4b1f      	ldr	r3, [pc, #124]	; (800b884 <HAL_UART_RxCpltCallback+0xe8>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d128      	bne.n	800b85e <HAL_UART_RxCpltCallback+0xc2>
  {
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b80c:	2300      	movs	r3, #0
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e01f      	b.n	800b852 <HAL_UART_RxCpltCallback+0xb6>
		{
			if(GPS_Parsers[i](&mGPS, recvBuf))
 800b812:	4a1d      	ldr	r2, [pc, #116]	; (800b888 <HAL_UART_RxCpltCallback+0xec>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b81a:	4918      	ldr	r1, [pc, #96]	; (800b87c <HAL_UART_RxCpltCallback+0xe0>)
 800b81c:	481b      	ldr	r0, [pc, #108]	; (800b88c <HAL_UART_RxCpltCallback+0xf0>)
 800b81e:	4798      	blx	r3
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d012      	beq.n	800b84c <HAL_UART_RxCpltCallback+0xb0>
			{
				HAL_GPIO_WritePin(LED_GPS_GPIO_Port, LED_GPS_Pin, LEDflag);
 800b826:	4b1a      	ldr	r3, [pc, #104]	; (800b890 <HAL_UART_RxCpltCallback+0xf4>)
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b830:	4818      	ldr	r0, [pc, #96]	; (800b894 <HAL_UART_RxCpltCallback+0xf8>)
 800b832:	f7fa f96f 	bl	8005b14 <HAL_GPIO_WritePin>
				LEDflag = !LEDflag;
 800b836:	4b16      	ldr	r3, [pc, #88]	; (800b890 <HAL_UART_RxCpltCallback+0xf4>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	bf0c      	ite	eq
 800b83e:	2301      	moveq	r3, #1
 800b840:	2300      	movne	r3, #0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	4b12      	ldr	r3, [pc, #72]	; (800b890 <HAL_UART_RxCpltCallback+0xf4>)
 800b848:	701a      	strb	r2, [r3, #0]
				break;
 800b84a:	e005      	b.n	800b858 <HAL_UART_RxCpltCallback+0xbc>
		for (uint32_t i = 0; i < NUMPARSERS; i++)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3301      	adds	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d9dc      	bls.n	800b812 <HAL_UART_RxCpltCallback+0x76>
			}
		}
		gpsFlag = 0;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <HAL_UART_RxCpltCallback+0xe8>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(mGPSuart, &recvChr, 1);
 800b85e:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <HAL_UART_RxCpltCallback+0xfc>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2201      	movs	r2, #1
 800b864:	4903      	ldr	r1, [pc, #12]	; (800b874 <HAL_UART_RxCpltCallback+0xd8>)
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe faa6 	bl	8009db8 <HAL_UART_Receive_IT>
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	2400a3f8 	.word	0x2400a3f8
 800b878:	24000057 	.word	0x24000057
 800b87c:	2400a400 	.word	0x2400a400
 800b880:	24000055 	.word	0x24000055
 800b884:	24000056 	.word	0x24000056
 800b888:	24000010 	.word	0x24000010
 800b88c:	2400a4d0 	.word	0x2400a4d0
 800b890:	24000058 	.word	0x24000058
 800b894:	58020400 	.word	0x58020400
 800b898:	2400a4c8 	.word	0x2400a4c8
 800b89c:	00000000 	.word	0x00000000

0800b8a0 <GPS_RMC_Parse>:
// 返 回 值：
//			 1: 解析GPRMC完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_RMC_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08a      	sub	sp, #40	; 0x28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	uint8_t ch, status, tmp;
	float lati_cent_tmp, lati_second_tmp;
	float long_cent_tmp, long_second_tmp;
	float speed_tmp;
	uint8_t *buf = line;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
	ch = buf[5];
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	795b      	ldrb	r3, [r3, #5]
 800b8b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status = buf[GetComma(2, buf)];
 800b8b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8b8:	2002      	movs	r0, #2
 800b8ba:	f000 fdc3 	bl	800c444 <GetComma>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	4413      	add	r3, r2
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	if (ch == 'C')  //如果第五个字符是C，($GPRMC)
 800b8cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8d0:	2b43      	cmp	r3, #67	; 0x43
 800b8d2:	f040 8169 	bne.w	800bba8 <GPS_RMC_Parse+0x308>
	{
		if (status == 'A')  //如果数据有效，则分析
 800b8d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8da:	2b41      	cmp	r3, #65	; 0x41
 800b8dc:	f040 8164 	bne.w	800bba8 <GPS_RMC_Parse+0x308>
		{
			GPS -> NS       = buf[GetComma(4, buf)];
 800b8e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8e2:	2004      	movs	r0, #4
 800b8e4:	f000 fdae 	bl	800c444 <GetComma>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	4413      	add	r3, r2
 800b8f0:	781a      	ldrb	r2, [r3, #0]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			GPS -> EW       = buf[GetComma(6, buf)];
 800b8f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8fa:	2006      	movs	r0, #6
 800b8fc:	f000 fda2 	bl	800c444 <GetComma>
 800b900:	4603      	mov	r3, r0
 800b902:	461a      	mov	r2, r3
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	4413      	add	r3, r2
 800b908:	781a      	ldrb	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

			GPS->latitude   = Get_Double_Number(&buf[GetComma(3, buf)]);
 800b910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b912:	2003      	movs	r0, #3
 800b914:	f000 fd96 	bl	800c444 <GetComma>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	4413      	add	r3, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fd5f 	bl	800c3e4 <Get_Double_Number>
 800b926:	eeb0 7b40 	vmov.f64	d7, d0
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	ed83 7b00 	vstr	d7, [r3]
			GPS->longitude  = Get_Double_Number(&buf[GetComma( 5, buf)]);
 800b930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b932:	2005      	movs	r0, #5
 800b934:	f000 fd86 	bl	800c444 <GetComma>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	4413      	add	r3, r2
 800b940:	4618      	mov	r0, r3
 800b942:	f000 fd4f 	bl	800c3e4 <Get_Double_Number>
 800b946:	eeb0 7b40 	vmov.f64	d7, d0
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	ed83 7b02 	vstr	d7, [r3, #8]

      GPS->latitude_Degree  = (int32_t)GPS->latitude / 100;       //分离纬度
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	ed93 7b00 	vldr	d7, [r3]
 800b956:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b95a:	ee17 1a90 	vmov	r1, s15
 800b95e:	4b98      	ldr	r3, [pc, #608]	; (800bbc0 <GPS_RMC_Parse+0x320>)
 800b960:	fb83 2301 	smull	r2, r3, r3, r1
 800b964:	115a      	asrs	r2, r3, #5
 800b966:	17cb      	asrs	r3, r1, #31
 800b968:	1ad2      	subs	r2, r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	621a      	str	r2, [r3, #32]
			lati_cent_tmp         = (GPS->latitude - GPS->latitude_Degree * 100);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	ed93 6b00 	vldr	d6, [r3]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	2264      	movs	r2, #100	; 0x64
 800b97a:	fb02 f303 	mul.w	r3, r2, r3
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b986:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b98a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b98e:	edc7 7a07 	vstr	s15, [r7, #28]
			GPS->latitude_Cent    = (int32_t)lati_cent_tmp;
 800b992:	edd7 7a07 	vldr	s15, [r7, #28]
 800b996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b99a:	ee17 2a90 	vmov	r2, s15
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	625a      	str	r2, [r3, #36]	; 0x24
			lati_second_tmp       = (lati_cent_tmp - GPS->latitude_Cent) * 60;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ae:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9b6:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bbc4 <GPS_RMC_Parse+0x324>
 800b9ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9be:	edc7 7a06 	vstr	s15, [r7, #24]
			GPS->latitude_Second  = (int32_t)lati_second_tmp;
 800b9c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ca:	ee17 2a90 	vmov	r2, s15
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	629a      	str	r2, [r3, #40]	; 0x28

			GPS->longitude_Degree = (int32_t)GPS->longitude / 100;	//分离经度
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b9dc:	ee17 1a90 	vmov	r1, s15
 800b9e0:	4b77      	ldr	r3, [pc, #476]	; (800bbc0 <GPS_RMC_Parse+0x320>)
 800b9e2:	fb83 2301 	smull	r2, r3, r3, r1
 800b9e6:	115a      	asrs	r2, r3, #5
 800b9e8:	17cb      	asrs	r3, r1, #31
 800b9ea:	1ad2      	subs	r2, r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	62da      	str	r2, [r3, #44]	; 0x2c
			long_cent_tmp         = (GPS->longitude - GPS->longitude_Degree * 100);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	2264      	movs	r2, #100	; 0x64
 800b9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ba00:	ee07 3a90 	vmov	s15, r3
 800ba04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba08:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ba0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba10:	edc7 7a05 	vstr	s15, [r7, #20]
			GPS->longitude_Cent   = (int32_t)long_cent_tmp;    
 800ba14:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba1c:	ee17 2a90 	vmov	r2, s15
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	631a      	str	r2, [r3, #48]	; 0x30
			long_second_tmp       = (long_cent_tmp - GPS->longitude_Cent) * 60;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba28:	ee07 3a90 	vmov	s15, r3
 800ba2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba30:	ed97 7a05 	vldr	s14, [r7, #20]
 800ba34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba38:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800bbc4 <GPS_RMC_Parse+0x324>
 800ba3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba40:	edc7 7a04 	vstr	s15, [r7, #16]
			GPS->longitude_Second = (int32_t)long_second_tmp;
 800ba44:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba4c:	ee17 2a90 	vmov	r2, s15
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	635a      	str	r2, [r3, #52]	; 0x34

			speed_tmp      = Get_Float_Number(&buf[GetComma(7, buf)]);    //速度(单位：海里/时)
 800ba54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba56:	2007      	movs	r0, #7
 800ba58:	f000 fcf4 	bl	800c444 <GetComma>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	4413      	add	r3, r2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fbbb 	bl	800c1e0 <Get_Float_Number>
 800ba6a:	ed87 0a03 	vstr	s0, [r7, #12]
			GPS->speed     = speed_tmp * 1.85;                           //1海里=1.85公里
 800ba6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba76:	ed9f 6b50 	vldr	d6, [pc, #320]	; 800bbb8 <GPS_RMC_Parse+0x318>
 800ba7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	edc3 7a05 	vstr	s15, [r3, #20]
			GPS->direction = Get_Float_Number(&buf[GetComma(8, buf)]); //角度			
 800ba88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba8a:	2008      	movs	r0, #8
 800ba8c:	f000 fcda 	bl	800c444 <GetComma>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	4413      	add	r3, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fba1 	bl	800c1e0 <Get_Float_Number>
 800ba9e:	eef0 7a40 	vmov.f32	s15, s0
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	edc3 7a06 	vstr	s15, [r3, #24]

			GPS->D.hour    = (buf[7] - '0') * 10 + (buf[8] - '0');		//时间
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	3307      	adds	r3, #7
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	461a      	mov	r2, r3
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	3308      	adds	r3, #8
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	3b30      	subs	r3, #48	; 0x30
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	64da      	str	r2, [r3, #76]	; 0x4c
			GPS->D.minute  = (buf[9] - '0') * 10 + (buf[10] - '0');
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	3309      	adds	r3, #9
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	461a      	mov	r2, r3
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	330a      	adds	r3, #10
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	3b30      	subs	r3, #48	; 0x30
 800bae6:	441a      	add	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	651a      	str	r2, [r3, #80]	; 0x50
			GPS->D.second  = (buf[11] - '0') * 10 + (buf[12] - '0');
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	330b      	adds	r3, #11
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	461a      	mov	r2, r3
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	330c      	adds	r3, #12
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	3b30      	subs	r3, #48	; 0x30
 800bb08:	441a      	add	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	655a      	str	r2, [r3, #84]	; 0x54
			tmp = GetComma(9, buf);
 800bb0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb10:	2009      	movs	r0, #9
 800bb12:	f000 fc97 	bl	800c444 <GetComma>
 800bb16:	4603      	mov	r3, r0
 800bb18:	72fb      	strb	r3, [r7, #11]
			GPS->D.day     = (buf[tmp + 0] - '0') * 10 + (buf[tmp + 1] - '0'); //日期
 800bb1a:	7afb      	ldrb	r3, [r7, #11]
 800bb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb1e:	4413      	add	r3, r2
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	4619      	mov	r1, r3
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	3301      	adds	r3, #1
 800bb34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb36:	4413      	add	r3, r2
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	3b30      	subs	r3, #48	; 0x30
 800bb3c:	18ca      	adds	r2, r1, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	649a      	str	r2, [r3, #72]	; 0x48
			GPS->D.month   = (buf[tmp + 2] - '0') * 10 + (buf[tmp + 3] - '0');
 800bb42:	7afb      	ldrb	r3, [r7, #11]
 800bb44:	3302      	adds	r3, #2
 800bb46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb48:	4413      	add	r3, r2
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	4619      	mov	r1, r3
 800bb5a:	7afb      	ldrb	r3, [r7, #11]
 800bb5c:	3303      	adds	r3, #3
 800bb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb60:	4413      	add	r3, r2
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	3b30      	subs	r3, #48	; 0x30
 800bb66:	18ca      	adds	r2, r1, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	645a      	str	r2, [r3, #68]	; 0x44
			GPS->D.year    = (buf[tmp + 4] - '0') * 10 + (buf[tmp + 5] - '0')+2000;
 800bb6c:	7afb      	ldrb	r3, [r7, #11]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb72:	4413      	add	r3, r2
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	4619      	mov	r1, r3
 800bb84:	7afb      	ldrb	r3, [r7, #11]
 800bb86:	3305      	adds	r3, #5
 800bb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb8a:	4413      	add	r3, r2
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	3b30      	subs	r3, #48	; 0x30
 800bb90:	440b      	add	r3, r1
 800bb92:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	641a      	str	r2, [r3, #64]	; 0x40

			UTC2BTC(&GPS->D);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3340      	adds	r3, #64	; 0x40
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f875 	bl	800bc8e <UTC2BTC>
			
			return 1;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e000      	b.n	800bbaa <GPS_RMC_Parse+0x30a>
		}		
	}
	
	return 0;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3728      	adds	r7, #40	; 0x28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	9999999a 	.word	0x9999999a
 800bbbc:	3ffd9999 	.word	0x3ffd9999
 800bbc0:	51eb851f 	.word	0x51eb851f
 800bbc4:	42700000 	.word	0x42700000

0800bbc8 <GPS_GGA_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GGA_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	uint8_t ch, status;
	uint8_t *buf = line;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	60fb      	str	r3, [r7, #12]
	ch = buf[4];
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	791b      	ldrb	r3, [r3, #4]
 800bbda:	72fb      	strb	r3, [r7, #11]
	status = buf[GetComma(2, buf)];
 800bbdc:	68f9      	ldr	r1, [r7, #12]
 800bbde:	2002      	movs	r0, #2
 800bbe0:	f000 fc30 	bl	800c444 <GetComma>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4413      	add	r3, r2
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	72bb      	strb	r3, [r7, #10]

	if (ch == 'G')  //$GPGGA
 800bbf0:	7afb      	ldrb	r3, [r7, #11]
 800bbf2:	2b47      	cmp	r3, #71	; 0x47
 800bbf4:	d124      	bne.n	800bc40 <GPS_GGA_Parse+0x78>
	{
		if (status != ',')
 800bbf6:	7abb      	ldrb	r3, [r7, #10]
 800bbf8:	2b2c      	cmp	r3, #44	; 0x2c
 800bbfa:	d021      	beq.n	800bc40 <GPS_GGA_Parse+0x78>
		{
			GPS->height_sea = Get_Float_Number(&buf[GetComma(9, buf)]);
 800bbfc:	68f9      	ldr	r1, [r7, #12]
 800bbfe:	2009      	movs	r0, #9
 800bc00:	f000 fc20 	bl	800c444 <GetComma>
 800bc04:	4603      	mov	r3, r0
 800bc06:	461a      	mov	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fae7 	bl	800c1e0 <Get_Float_Number>
 800bc12:	eef0 7a40 	vmov.f32	s15, s0
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	edc3 7a04 	vstr	s15, [r3, #16]
			GPS->height_ground = Get_Float_Number(&buf[GetComma(11, buf)]);
 800bc1c:	68f9      	ldr	r1, [r7, #12]
 800bc1e:	200b      	movs	r0, #11
 800bc20:	f000 fc10 	bl	800c444 <GetComma>
 800bc24:	4603      	mov	r3, r0
 800bc26:	461a      	mov	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 fad7 	bl	800c1e0 <Get_Float_Number>
 800bc32:	eef0 7a40 	vmov.f32	s15, s0
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	edc3 7a07 	vstr	s15, [r3, #28]

			return 1;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e000      	b.n	800bc42 <GPS_GGA_Parse+0x7a>
		}
	}
	
	return 0;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <GPS_GSV_Parse>:
// 返 回 值：
//			 1: 解析GPGGA完毕
//           0: 没有进行解析，或数据无效
//====================================================================//
uint8_t GPS_GSV_Parse(GPS_INFO *GPS, uint8_t *line)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b084      	sub	sp, #16
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
	uint8_t ch;
	uint8_t *buf = line;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	60fb      	str	r3, [r7, #12]
	ch = buf[5];
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	795b      	ldrb	r3, [r3, #5]
 800bc5c:	72fb      	strb	r3, [r7, #11]

	if (ch == 'V')  //$GPGSV
 800bc5e:	7afb      	ldrb	r3, [r7, #11]
 800bc60:	2b56      	cmp	r3, #86	; 0x56
 800bc62:	d10f      	bne.n	800bc84 <GPS_GSV_Parse+0x3a>
	{
		GPS->satellite = Get_Int_Number(&buf[GetComma(3, buf)]);
 800bc64:	68f9      	ldr	r1, [r7, #12]
 800bc66:	2003      	movs	r0, #3
 800bc68:	f000 fbec 	bl	800c444 <GetComma>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	461a      	mov	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 f9e1 	bl	800c03c <Get_Int_Number>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38
		return 1;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e000      	b.n	800bc86 <GPS_GSV_Parse+0x3c>
	}
	
	return 0;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <UTC2BTC>:
// 实现功能：转化时间为北京时区的时间
// 参    数：存放时间的结构体
// 返 回 值：无
//====================================================================//
void UTC2BTC(DATE_TIME *date_time)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
	date_time->second ++;  
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	615a      	str	r2, [r3, #20]
	if(date_time->second > 59)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	2b3b      	cmp	r3, #59	; 0x3b
 800bca6:	dd13      	ble.n	800bcd0 <UTC2BTC+0x42>
	{
		date_time->second = 0;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	615a      	str	r2, [r3, #20]
		date_time->minute ++;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	611a      	str	r2, [r3, #16]
		if(date_time->minute > 59)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	2b3b      	cmp	r3, #59	; 0x3b
 800bcbe:	dd07      	ble.n	800bcd0 <UTC2BTC+0x42>
		{
			date_time->minute = 0;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	611a      	str	r2, [r3, #16]
			date_time->hour ++;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	60da      	str	r2, [r3, #12]
		}
	}	

    date_time->hour = date_time->hour + 8;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f103 0208 	add.w	r2, r3, #8
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60da      	str	r2, [r3, #12]
	if(date_time->hour > 23)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	2b17      	cmp	r3, #23
 800bce2:	dd6d      	ble.n	800bdc0 <UTC2BTC+0x132>
	{
		date_time->hour -= 24;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f1a3 0218 	sub.w	r2, r3, #24
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	60da      	str	r2, [r3, #12]
		date_time->day += 1;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	609a      	str	r2, [r3, #8]
		if(date_time->month == 2 ||
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d00f      	beq.n	800bd22 <UTC2BTC+0x94>
		   		date_time->month == 4 ||
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
		if(date_time->month == 2 ||
 800bd06:	2b04      	cmp	r3, #4
 800bd08:	d00b      	beq.n	800bd22 <UTC2BTC+0x94>
		   		date_time->month == 6 ||
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 4 ||
 800bd0e:	2b06      	cmp	r3, #6
 800bd10:	d007      	beq.n	800bd22 <UTC2BTC+0x94>
		   		date_time->month == 9 ||
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 6 ||
 800bd16:	2b09      	cmp	r3, #9
 800bd18:	d003      	beq.n	800bd22 <UTC2BTC+0x94>
		   		date_time->month == 11 )
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
		   		date_time->month == 9 ||
 800bd1e:	2b0b      	cmp	r3, #11
 800bd20:	d10c      	bne.n	800bd3c <UTC2BTC+0xae>
		{
			if(date_time->day > 30)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	2b1e      	cmp	r3, #30
 800bd28:	dd14      	ble.n	800bd54 <UTC2BTC+0xc6>
			{
		   		date_time->day = 1;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	609a      	str	r2, [r3, #8]
				date_time->month++;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	605a      	str	r2, [r3, #4]
			if(date_time->day > 30)
 800bd3a:	e00b      	b.n	800bd54 <UTC2BTC+0xc6>
			}
		}
		else
		{
			if(date_time->day > 31)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	2b1f      	cmp	r3, #31
 800bd42:	dd07      	ble.n	800bd54 <UTC2BTC+0xc6>
			{	
		   		date_time->day = 1;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->year % 4 == 0 )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0303 	and.w	r3, r3, #3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d110      	bne.n	800bd82 <UTC2BTC+0xf4>
		{
	   		if(date_time->day > 29 && date_time->month == 2)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	2b1d      	cmp	r3, #29
 800bd66:	dd1c      	ble.n	800bda2 <UTC2BTC+0x114>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d118      	bne.n	800bda2 <UTC2BTC+0x114>
			{		
	   			date_time->day = 1;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	605a      	str	r2, [r3, #4]
 800bd80:	e00f      	b.n	800bda2 <UTC2BTC+0x114>
			}
		}
		else
		{
	   		if(date_time->day > 28 &&date_time->month == 2)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	2b1c      	cmp	r3, #28
 800bd88:	dd0b      	ble.n	800bda2 <UTC2BTC+0x114>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d107      	bne.n	800bda2 <UTC2BTC+0x114>
			{
	   			date_time->day = 1;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	609a      	str	r2, [r3, #8]
				date_time->month ++;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	605a      	str	r2, [r3, #4]
			}
		}
		if(date_time->month > 12)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	2b0c      	cmp	r3, #12
 800bda8:	dd0a      	ble.n	800bdc0 <UTC2BTC+0x132>
		{
			date_time->month -= 12;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f1a3 020c 	sub.w	r2, r3, #12
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	605a      	str	r2, [r3, #4]
			date_time->year ++;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	601a      	str	r2, [r3, #0]
		}		
	}
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <Init>:
  getAtti,
  {0.0f, 0.0f, 0.0f}
};

void Init(I2C_HandleTypeDef *hi2c)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  mHi2c = hi2c;
 800bdd4:	4a04      	ldr	r2, [pc, #16]	; (800bde8 <Init+0x1c>)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6013      	str	r3, [r2, #0]
}
 800bdda:	bf00      	nop
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	2400a528 	.word	0x2400a528

0800bdec <ReadAngle>:

float ReadAngle(uint8_t axis)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af04      	add	r7, sp, #16
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2] = {0, 0};
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	733b      	strb	r3, [r7, #12]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(mHi2c, JY_ADDR << 1, axis, 1, data, 2, 10000);
 800bdfe:	4b12      	ldr	r3, [pc, #72]	; (800be48 <ReadAngle+0x5c>)
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	b29a      	uxth	r2, r3
 800be06:	f242 7310 	movw	r3, #10000	; 0x2710
 800be0a:	9302      	str	r3, [sp, #8]
 800be0c:	2302      	movs	r3, #2
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	f107 030c 	add.w	r3, r7, #12
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	2301      	movs	r3, #1
 800be18:	21a0      	movs	r1, #160	; 0xa0
 800be1a:	f7f9 ff25 	bl	8005c68 <HAL_I2C_Mem_Read>
  return ((data[1] << 8) | data[0]) / 32768.0f * 180;
 800be1e:	7b7b      	ldrb	r3, [r7, #13]
 800be20:	021b      	lsls	r3, r3, #8
 800be22:	7b3a      	ldrb	r2, [r7, #12]
 800be24:	4313      	orrs	r3, r2
 800be26:	ee07 3a90 	vmov	s15, r3
 800be2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be2e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800be4c <ReadAngle+0x60>
 800be32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be36:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800be50 <ReadAngle+0x64>
 800be3a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800be3e:	eeb0 0a67 	vmov.f32	s0, s15
 800be42:	3710      	adds	r7, #16
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	2400a528 	.word	0x2400a528
 800be4c:	47000000 	.word	0x47000000
 800be50:	43340000 	.word	0x43340000

0800be54 <getAtti>:

Atti getAtti()
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af00      	add	r7, sp, #0
	jy61p.atti.pitch = jy61p.ReadAngle(PITCH);
 800be5a:	4b1a      	ldr	r3, [pc, #104]	; (800bec4 <getAtti+0x70>)
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	203e      	movs	r0, #62	; 0x3e
 800be60:	4798      	blx	r3
 800be62:	eef0 7a40 	vmov.f32	s15, s0
 800be66:	4b17      	ldr	r3, [pc, #92]	; (800bec4 <getAtti+0x70>)
 800be68:	edc3 7a05 	vstr	s15, [r3, #20]
	jy61p.atti.roll = jy61p.ReadAngle(ROLL);
 800be6c:	4b15      	ldr	r3, [pc, #84]	; (800bec4 <getAtti+0x70>)
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	203d      	movs	r0, #61	; 0x3d
 800be72:	4798      	blx	r3
 800be74:	eef0 7a40 	vmov.f32	s15, s0
 800be78:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <getAtti+0x70>)
 800be7a:	edc3 7a04 	vstr	s15, [r3, #16]
	jy61p.atti.yaw = jy61p.ReadAngle(YAW);
 800be7e:	4b11      	ldr	r3, [pc, #68]	; (800bec4 <getAtti+0x70>)
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	203f      	movs	r0, #63	; 0x3f
 800be84:	4798      	blx	r3
 800be86:	eef0 7a40 	vmov.f32	s15, s0
 800be8a:	4b0e      	ldr	r3, [pc, #56]	; (800bec4 <getAtti+0x70>)
 800be8c:	edc3 7a03 	vstr	s15, [r3, #12]
	return jy61p.atti;
 800be90:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <getAtti+0x70>)
 800be92:	f107 0314 	add.w	r3, r7, #20
 800be96:	320c      	adds	r2, #12
 800be98:	ca07      	ldmia	r2, {r0, r1, r2}
 800be9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be9e:	6979      	ldr	r1, [r7, #20]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	ee06 1a90 	vmov	s13, r1
 800bea8:	ee07 2a10 	vmov	s14, r2
 800beac:	ee07 3a90 	vmov	s15, r3
}
 800beb0:	eeb0 0a66 	vmov.f32	s0, s13
 800beb4:	eef0 0a47 	vmov.f32	s1, s14
 800beb8:	eeb0 1a67 	vmov.f32	s2, s15
 800bebc:	3720      	adds	r7, #32
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	2400001c 	.word	0x2400001c

0800bec8 <StartOV2640>:
		}
	}
}

void StartOV2640()//拍照的线程
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800becc:	4b0c      	ldr	r3, [pc, #48]	; (800bf00 <StartOV2640+0x38>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68da      	ldr	r2, [r3, #12]
 800bed4:	4b0a      	ldr	r3, [pc, #40]	; (800bf00 <StartOV2640+0x38>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f042 0201 	orr.w	r2, r2, #1
 800bede:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800bee0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800bee4:	2100      	movs	r1, #0
 800bee6:	4807      	ldr	r0, [pc, #28]	; (800bf04 <StartOV2640+0x3c>)
 800bee8:	f000 fafe 	bl	800c4e8 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800beec:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <StartOV2640+0x38>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	4a04      	ldr	r2, [pc, #16]	; (800bf04 <StartOV2640+0x3c>)
 800bef2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bef6:	2102      	movs	r1, #2
 800bef8:	f7f5 fea8 	bl	8001c4c <HAL_DCMI_Start_DMA>

}
 800befc:	bf00      	nop
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	2400a52c 	.word	0x2400a52c
 800bf04:	2400005c 	.word	0x2400005c

0800bf08 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800bf10:	4b18      	ldr	r3, [pc, #96]	; (800bf74 <HAL_DCMI_FrameEventCallback+0x6c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7f5 ffbb 	bl	8001e90 <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <HAL_DCMI_FrameEventCallback+0x6c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f5 ff56 	bl	8001dd0 <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800bf24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bf28:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800bf2a:	e009      	b.n	800bf40 <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	4a11      	ldr	r2, [pc, #68]	; (800bf78 <HAL_DCMI_FrameEventCallback+0x70>)
 800bf32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d106      	bne.n	800bf48 <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dcf2      	bgt.n	800bf2c <HAL_DCMI_FrameEventCallback+0x24>
 800bf46:	e000      	b.n	800bf4a <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800bf48:	bf00      	nop
	}
	pictureLength*=4;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <HAL_DCMI_FrameEventCallback+0x74>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d007      	beq.n	800bf68 <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800bf58:	4b08      	ldr	r3, [pc, #32]	; (800bf7c <HAL_DCMI_FrameEventCallback+0x74>)
 800bf5a:	6818      	ldr	r0, [r3, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	4b07      	ldr	r3, [pc, #28]	; (800bf80 <HAL_DCMI_FrameEventCallback+0x78>)
 800bf62:	4905      	ldr	r1, [pc, #20]	; (800bf78 <HAL_DCMI_FrameEventCallback+0x70>)
 800bf64:	f7fd fe92 	bl	8009c8c <HAL_UART_Transmit>

	StartOV2640();
 800bf68:	f7ff ffae 	bl	800bec8 <StartOV2640>
}
 800bf6c:	bf00      	nop
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	2400a52c 	.word	0x2400a52c
 800bf78:	2400005c 	.word	0x2400005c
 800bf7c:	2400a530 	.word	0x2400a530
 800bf80:	000186a0 	.word	0x000186a0

0800bf84 <Str_To_Int>:
// 实现功能： 把一个字符串转化成整数
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Str_To_Int(uint8_t *buf)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	int32_t rev = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	617b      	str	r3, [r7, #20]
	int32_t dat;
	uint8_t *str = buf;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800bf94:	e046      	b.n	800c024 <Str_To_Int+0xa0>
	{
		switch(*str)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	3b30      	subs	r3, #48	; 0x30
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	d835      	bhi.n	800c00c <Str_To_Int+0x88>
 800bfa0:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <Str_To_Int+0x24>)
 800bfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa6:	bf00      	nop
 800bfa8:	0800bfd1 	.word	0x0800bfd1
 800bfac:	0800bfd7 	.word	0x0800bfd7
 800bfb0:	0800bfdd 	.word	0x0800bfdd
 800bfb4:	0800bfe3 	.word	0x0800bfe3
 800bfb8:	0800bfe9 	.word	0x0800bfe9
 800bfbc:	0800bfef 	.word	0x0800bfef
 800bfc0:	0800bff5 	.word	0x0800bff5
 800bfc4:	0800bffb 	.word	0x0800bffb
 800bfc8:	0800c001 	.word	0x0800c001
 800bfcc:	0800c007 	.word	0x0800c007
		{
			case '0':
				dat = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	613b      	str	r3, [r7, #16]
				break;
 800bfd4:	e01a      	b.n	800c00c <Str_To_Int+0x88>
			case '1':
				dat = 1;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	613b      	str	r3, [r7, #16]
				break;
 800bfda:	e017      	b.n	800c00c <Str_To_Int+0x88>
			case '2':
				dat = 2;
 800bfdc:	2302      	movs	r3, #2
 800bfde:	613b      	str	r3, [r7, #16]
				break;		
 800bfe0:	e014      	b.n	800c00c <Str_To_Int+0x88>
			case '3':
				dat = 3;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	613b      	str	r3, [r7, #16]
				break;
 800bfe6:	e011      	b.n	800c00c <Str_To_Int+0x88>
			case '4':
				dat = 4;
 800bfe8:	2304      	movs	r3, #4
 800bfea:	613b      	str	r3, [r7, #16]
				break;
 800bfec:	e00e      	b.n	800c00c <Str_To_Int+0x88>
			case '5':
				dat = 5;
 800bfee:	2305      	movs	r3, #5
 800bff0:	613b      	str	r3, [r7, #16]
				break;
 800bff2:	e00b      	b.n	800c00c <Str_To_Int+0x88>
			case '6':
				dat = 6;
 800bff4:	2306      	movs	r3, #6
 800bff6:	613b      	str	r3, [r7, #16]
				break;
 800bff8:	e008      	b.n	800c00c <Str_To_Int+0x88>
			case '7':
				dat = 7;
 800bffa:	2307      	movs	r3, #7
 800bffc:	613b      	str	r3, [r7, #16]
				break;
 800bffe:	e005      	b.n	800c00c <Str_To_Int+0x88>
			case '8':
				dat = 8;
 800c000:	2308      	movs	r3, #8
 800c002:	613b      	str	r3, [r7, #16]
				break;
 800c004:	e002      	b.n	800c00c <Str_To_Int+0x88>
			case '9':
				dat = 9;
 800c006:	2309      	movs	r3, #9
 800c008:	613b      	str	r3, [r7, #16]
				break;
 800c00a:	bf00      	nop
		}

		rev = rev * 10 + dat;
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	4613      	mov	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	461a      	mov	r2, r3
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	4413      	add	r3, r2
 800c01c:	617b      	str	r3, [r7, #20]
		str ++;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3301      	adds	r3, #1
 800c022:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1b4      	bne.n	800bf96 <Str_To_Int+0x12>
	}

	return rev;
 800c02c:	697b      	ldr	r3, [r7, #20]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop

0800c03c <Get_Int_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成整型
// 参    数：字符串
// 返 回 值：转化后整数值
//====================================================================//
int32_t Get_Int_Number(uint8_t *s)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	int32_t rev;
	i=GetComma(1, s);
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	2001      	movs	r0, #1
 800c048:	f000 f9fc 	bl	800c444 <GetComma>
 800c04c:	4603      	mov	r3, r0
 800c04e:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800c050:	7ffb      	ldrb	r3, [r7, #31]
 800c052:	3b01      	subs	r3, #1
 800c054:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800c056:	7ffa      	ldrb	r2, [r7, #31]
 800c058:	f107 030c 	add.w	r3, r7, #12
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 fa4a 	bl	800c4f8 <strncpy>
	buf[i] = 0;
 800c064:	7ffb      	ldrb	r3, [r7, #31]
 800c066:	f107 0220 	add.w	r2, r7, #32
 800c06a:	4413      	add	r3, r2
 800c06c:	2200      	movs	r2, #0
 800c06e:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Int(buf);
 800c072:	f107 030c 	add.w	r3, r7, #12
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff ff84 	bl	800bf84 <Str_To_Int>
 800c07c:	61b8      	str	r0, [r7, #24]
	return rev;	
 800c07e:	69bb      	ldr	r3, [r7, #24]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3720      	adds	r7, #32
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <Str_To_Float>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Str_To_Float(uint8_t *buf)
{
 800c088:	b480      	push	{r7}
 800c08a:	b089      	sub	sp, #36	; 0x24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	float rev = 0;
 800c090:	f04f 0300 	mov.w	r3, #0
 800c094:	61fb      	str	r3, [r7, #28]
	float dat;
	int32_t integer = 1;
 800c096:	2301      	movs	r3, #1
 800c098:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800c09e:	e082      	b.n	800c1a6 <Str_To_Float+0x11e>
	{
		switch(*str)
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	3b2e      	subs	r3, #46	; 0x2e
 800c0a6:	2b0b      	cmp	r3, #11
 800c0a8:	d840      	bhi.n	800c12c <Str_To_Float+0xa4>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <Str_To_Float+0x28>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c127 	.word	0x0800c127
 800c0b4:	0800c12d 	.word	0x0800c12d
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e9 	.word	0x0800c0e9
 800c0c0:	0800c0f1 	.word	0x0800c0f1
 800c0c4:	0800c0f9 	.word	0x0800c0f9
 800c0c8:	0800c0ff 	.word	0x0800c0ff
 800c0cc:	0800c107 	.word	0x0800c107
 800c0d0:	0800c10d 	.word	0x0800c10d
 800c0d4:	0800c113 	.word	0x0800c113
 800c0d8:	0800c119 	.word	0x0800c119
 800c0dc:	0800c121 	.word	0x0800c121
		{
			case '0':
				dat = 0;
 800c0e0:	f04f 0300 	mov.w	r3, #0
 800c0e4:	61bb      	str	r3, [r7, #24]
				break;
 800c0e6:	e021      	b.n	800c12c <Str_To_Float+0xa4>
			case '1':
				dat = 1;
 800c0e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0ec:	61bb      	str	r3, [r7, #24]
				break;
 800c0ee:	e01d      	b.n	800c12c <Str_To_Float+0xa4>
			case '2':
				dat = 2;
 800c0f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0f4:	61bb      	str	r3, [r7, #24]
				break;		
 800c0f6:	e019      	b.n	800c12c <Str_To_Float+0xa4>
			case '3':
				dat = 3;
 800c0f8:	4b32      	ldr	r3, [pc, #200]	; (800c1c4 <Str_To_Float+0x13c>)
 800c0fa:	61bb      	str	r3, [r7, #24]
				break;
 800c0fc:	e016      	b.n	800c12c <Str_To_Float+0xa4>
			case '4':
				dat = 4;
 800c0fe:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800c102:	61bb      	str	r3, [r7, #24]
				break;
 800c104:	e012      	b.n	800c12c <Str_To_Float+0xa4>
			case '5':
				dat = 5;
 800c106:	4b30      	ldr	r3, [pc, #192]	; (800c1c8 <Str_To_Float+0x140>)
 800c108:	61bb      	str	r3, [r7, #24]
				break;
 800c10a:	e00f      	b.n	800c12c <Str_To_Float+0xa4>
			case '6':
				dat = 6;
 800c10c:	4b2f      	ldr	r3, [pc, #188]	; (800c1cc <Str_To_Float+0x144>)
 800c10e:	61bb      	str	r3, [r7, #24]
				break;
 800c110:	e00c      	b.n	800c12c <Str_To_Float+0xa4>
			case '7':
				dat = 7;
 800c112:	4b2f      	ldr	r3, [pc, #188]	; (800c1d0 <Str_To_Float+0x148>)
 800c114:	61bb      	str	r3, [r7, #24]
				break;
 800c116:	e009      	b.n	800c12c <Str_To_Float+0xa4>
			case '8':
				dat = 8;
 800c118:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800c11c:	61bb      	str	r3, [r7, #24]
				break;
 800c11e:	e005      	b.n	800c12c <Str_To_Float+0xa4>
			case '9':
				dat = 9;
 800c120:	4b2c      	ldr	r3, [pc, #176]	; (800c1d4 <Str_To_Float+0x14c>)
 800c122:	61bb      	str	r3, [r7, #24]
				break;
 800c124:	e002      	b.n	800c12c <Str_To_Float+0xa4>
			case '.':
				dat = '.';
 800c126:	4b2c      	ldr	r3, [pc, #176]	; (800c1d8 <Str_To_Float+0x150>)
 800c128:	61bb      	str	r3, [r7, #24]
				break;
 800c12a:	bf00      	nop
		}
		if(dat == '.')
 800c12c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c130:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c1dc <Str_To_Float+0x154>
 800c134:	eef4 7a47 	vcmp.f32	s15, s14
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	d107      	bne.n	800c14e <Str_To_Float+0xc6>
		{
			integer = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]
			i = 1;
 800c142:	2301      	movs	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
			str ++;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	3301      	adds	r3, #1
 800c14a:	613b      	str	r3, [r7, #16]
			continue;
 800c14c:	e02b      	b.n	800c1a6 <Str_To_Float+0x11e>
		}
		if( integer == 1 )
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d10c      	bne.n	800c16e <Str_To_Float+0xe6>
		{
			rev = rev * 10 + dat;
 800c154:	edd7 7a07 	vldr	s15, [r7, #28]
 800c158:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c15c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c160:	ed97 7a06 	vldr	s14, [r7, #24]
 800c164:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c168:	edc7 7a07 	vstr	s15, [r7, #28]
 800c16c:	e018      	b.n	800c1a0 <Str_To_Float+0x118>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	4613      	mov	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	005b      	lsls	r3, r3, #1
 800c178:	ee07 3a90 	vmov	s15, r3
 800c17c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c180:	edd7 6a06 	vldr	s13, [r7, #24]
 800c184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c188:	ed97 7a07 	vldr	s14, [r7, #28]
 800c18c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c190:	edc7 7a07 	vstr	s15, [r7, #28]
			i = i * 10 ;
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f47f af78 	bne.w	800c0a0 <Str_To_Float+0x18>
	}
	return rev;
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	ee07 3a90 	vmov	s15, r3

}
 800c1b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c1ba:	3724      	adds	r7, #36	; 0x24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	40400000 	.word	0x40400000
 800c1c8:	40a00000 	.word	0x40a00000
 800c1cc:	40c00000 	.word	0x40c00000
 800c1d0:	40e00000 	.word	0x40e00000
 800c1d4:	41100000 	.word	0x41100000
 800c1d8:	42380000 	.word	0x42380000
 800c1dc:	42380000 	.word	0x42380000

0800c1e0 <Get_Float_Number>:
// 实现功能： 把给定字符串第一个逗号之前的字符转化成单精度型
// 参    数：字符串
// 返 回 值：转化后单精度值
//====================================================================//
float Get_Float_Number(uint8_t *s)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	float rev;
	i=GetComma(1, s);
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	f000 f92a 	bl	800c444 <GetComma>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	77fb      	strb	r3, [r7, #31]
	i = i - 1;
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	77fb      	strb	r3, [r7, #31]
	strncpy(buf, s, i);
 800c1fa:	7ffa      	ldrb	r2, [r7, #31]
 800c1fc:	f107 030c 	add.w	r3, r7, #12
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 f978 	bl	800c4f8 <strncpy>
	buf[i] = 0;
 800c208:	7ffb      	ldrb	r3, [r7, #31]
 800c20a:	f107 0220 	add.w	r2, r7, #32
 800c20e:	4413      	add	r3, r2
 800c210:	2200      	movs	r2, #0
 800c212:	f803 2c14 	strb.w	r2, [r3, #-20]
	rev=Str_To_Float(buf);
 800c216:	f107 030c 	add.w	r3, r7, #12
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff ff34 	bl	800c088 <Str_To_Float>
 800c220:	ed87 0a06 	vstr	s0, [r7, #24]
	return rev;	
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	ee07 3a90 	vmov	s15, r3
}
 800c22a:	eeb0 0a67 	vmov.f32	s0, s15
 800c22e:	3720      	adds	r7, #32
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	0000      	movs	r0, r0
	...

0800c238 <Str_To_Double>:
// 实现功能： 把一个字符串转化成浮点数
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Str_To_Double(uint8_t *buf)
{
 800c238:	b490      	push	{r4, r7}
 800c23a:	b08a      	sub	sp, #40	; 0x28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	double rev = 0;
 800c240:	f04f 0300 	mov.w	r3, #0
 800c244:	f04f 0400 	mov.w	r4, #0
 800c248:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dat;
	int32_t integer = 1;
 800c24c:	2301      	movs	r3, #1
 800c24e:	617b      	str	r3, [r7, #20]
	uint8_t *str = buf;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	613b      	str	r3, [r7, #16]
	int32_t i;
	while(*str != '\0')
 800c254:	e0a1      	b.n	800c39a <Str_To_Double+0x162>
	{
		switch(*str)
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	3b2e      	subs	r3, #46	; 0x2e
 800c25c:	2b0b      	cmp	r3, #11
 800c25e:	d85f      	bhi.n	800c320 <Str_To_Double+0xe8>
 800c260:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <Str_To_Double+0x30>)
 800c262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c266:	bf00      	nop
 800c268:	0800c315 	.word	0x0800c315
 800c26c:	0800c321 	.word	0x0800c321
 800c270:	0800c299 	.word	0x0800c299
 800c274:	0800c2a7 	.word	0x0800c2a7
 800c278:	0800c2b3 	.word	0x0800c2b3
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	0800c2cd 	.word	0x0800c2cd
 800c284:	0800c2d9 	.word	0x0800c2d9
 800c288:	0800c2e5 	.word	0x0800c2e5
 800c28c:	0800c2f1 	.word	0x0800c2f1
 800c290:	0800c2fd 	.word	0x0800c2fd
 800c294:	0800c309 	.word	0x0800c309
		{
			case '0':
				dat = 0;
 800c298:	f04f 0300 	mov.w	r3, #0
 800c29c:	f04f 0400 	mov.w	r4, #0
 800c2a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2a4:	e03c      	b.n	800c320 <Str_To_Double+0xe8>
			case '1':
				dat = 1;
 800c2a6:	f04f 0300 	mov.w	r3, #0
 800c2aa:	4c45      	ldr	r4, [pc, #276]	; (800c3c0 <Str_To_Double+0x188>)
 800c2ac:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2b0:	e036      	b.n	800c320 <Str_To_Double+0xe8>
			case '2':
				dat = 2;
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800c2ba:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;		
 800c2be:	e02f      	b.n	800c320 <Str_To_Double+0xe8>
			case '3':
				dat = 3;
 800c2c0:	f04f 0300 	mov.w	r3, #0
 800c2c4:	4c3f      	ldr	r4, [pc, #252]	; (800c3c4 <Str_To_Double+0x18c>)
 800c2c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2ca:	e029      	b.n	800c320 <Str_To_Double+0xe8>
			case '4':
				dat = 4;
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	4c3d      	ldr	r4, [pc, #244]	; (800c3c8 <Str_To_Double+0x190>)
 800c2d2:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2d6:	e023      	b.n	800c320 <Str_To_Double+0xe8>
			case '5':
				dat = 5;
 800c2d8:	f04f 0300 	mov.w	r3, #0
 800c2dc:	4c3b      	ldr	r4, [pc, #236]	; (800c3cc <Str_To_Double+0x194>)
 800c2de:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2e2:	e01d      	b.n	800c320 <Str_To_Double+0xe8>
			case '6':
				dat = 6;
 800c2e4:	f04f 0300 	mov.w	r3, #0
 800c2e8:	4c39      	ldr	r4, [pc, #228]	; (800c3d0 <Str_To_Double+0x198>)
 800c2ea:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2ee:	e017      	b.n	800c320 <Str_To_Double+0xe8>
			case '7':
				dat = 7;
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	4c37      	ldr	r4, [pc, #220]	; (800c3d4 <Str_To_Double+0x19c>)
 800c2f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c2fa:	e011      	b.n	800c320 <Str_To_Double+0xe8>
			case '8':
				dat = 8;
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	4c35      	ldr	r4, [pc, #212]	; (800c3d8 <Str_To_Double+0x1a0>)
 800c302:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c306:	e00b      	b.n	800c320 <Str_To_Double+0xe8>
			case '9':
				dat = 9;
 800c308:	f04f 0300 	mov.w	r3, #0
 800c30c:	4c33      	ldr	r4, [pc, #204]	; (800c3dc <Str_To_Double+0x1a4>)
 800c30e:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c312:	e005      	b.n	800c320 <Str_To_Double+0xe8>
			case '.':
				dat = '.';
 800c314:	f04f 0300 	mov.w	r3, #0
 800c318:	4c31      	ldr	r4, [pc, #196]	; (800c3e0 <Str_To_Double+0x1a8>)
 800c31a:	e9c7 3406 	strd	r3, r4, [r7, #24]
				break;
 800c31e:	bf00      	nop
		}
		if(dat == '.')
 800c320:	ed97 7b06 	vldr	d7, [r7, #24]
 800c324:	ed9f 6b24 	vldr	d6, [pc, #144]	; 800c3b8 <Str_To_Double+0x180>
 800c328:	eeb4 7b46 	vcmp.f64	d7, d6
 800c32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c330:	d107      	bne.n	800c342 <Str_To_Double+0x10a>
		{
			integer = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	617b      	str	r3, [r7, #20]
			i = 1;
 800c336:	2301      	movs	r3, #1
 800c338:	60fb      	str	r3, [r7, #12]
			str ++;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	3301      	adds	r3, #1
 800c33e:	613b      	str	r3, [r7, #16]
			continue;
 800c340:	e02b      	b.n	800c39a <Str_To_Double+0x162>
		}
		if( integer == 1 )
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d10c      	bne.n	800c362 <Str_To_Double+0x12a>
		{
			rev = rev * 10 + dat;
 800c348:	ed97 7b08 	vldr	d7, [r7, #32]
 800c34c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c350:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c354:	ed97 6b06 	vldr	d6, [r7, #24]
 800c358:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c35c:	ed87 7b08 	vstr	d7, [r7, #32]
 800c360:	e018      	b.n	800c394 <Str_To_Double+0x15c>
		}
		else
		{
			rev = rev + dat / (10 * i);
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	ee07 3a90 	vmov	s15, r3
 800c370:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c374:	ed97 5b06 	vldr	d5, [r7, #24]
 800c378:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c37c:	ed97 6b08 	vldr	d6, [r7, #32]
 800c380:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c384:	ed87 7b08 	vstr	d7, [r7, #32]
			i = i * 10 ;
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	4613      	mov	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	60fb      	str	r3, [r7, #12]
		}
		str ++;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	3301      	adds	r3, #1
 800c398:	613b      	str	r3, [r7, #16]
	while(*str != '\0')
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f47f af59 	bne.w	800c256 <Str_To_Double+0x1e>
	}
	return rev;
 800c3a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c3a8:	ec44 3b17 	vmov	d7, r3, r4
}
 800c3ac:	eeb0 0b47 	vmov.f64	d0, d7
 800c3b0:	3728      	adds	r7, #40	; 0x28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bc90      	pop	{r4, r7}
 800c3b6:	4770      	bx	lr
 800c3b8:	00000000 	.word	0x00000000
 800c3bc:	40470000 	.word	0x40470000
 800c3c0:	3ff00000 	.word	0x3ff00000
 800c3c4:	40080000 	.word	0x40080000
 800c3c8:	40100000 	.word	0x40100000
 800c3cc:	40140000 	.word	0x40140000
 800c3d0:	40180000 	.word	0x40180000
 800c3d4:	401c0000 	.word	0x401c0000
 800c3d8:	40200000 	.word	0x40200000
 800c3dc:	40220000 	.word	0x40220000
 800c3e0:	40470000 	.word	0x40470000

0800c3e4 <Get_Double_Number>:
// 实现功能：把给定字符串第一个逗号之前的字符转化成双精度型
// 参    数：字符串
// 返 回 值：转化后双精度值
//====================================================================//
double Get_Double_Number(uint8_t *s)
{
 800c3e4:	b590      	push	{r4, r7, lr}
 800c3e6:	b08b      	sub	sp, #44	; 0x2c
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];
	uint8_t i;
	double rev;
	i=GetComma(1, s);
 800c3ec:	6879      	ldr	r1, [r7, #4]
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	f000 f828 	bl	800c444 <GetComma>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	i = i - 1;
 800c3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3fe:	3b01      	subs	r3, #1
 800c400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	strncpy(buf, s, i);
 800c404:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c408:	f107 030c 	add.w	r3, r7, #12
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f872 	bl	800c4f8 <strncpy>
	buf[i] = 0;
 800c414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c418:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c41c:	4413      	add	r3, r2
 800c41e:	2200      	movs	r2, #0
 800c420:	f803 2c1c 	strb.w	r2, [r3, #-28]
	rev=Str_To_Double(buf);
 800c424:	f107 030c 	add.w	r3, r7, #12
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff ff05 	bl	800c238 <Str_To_Double>
 800c42e:	ed87 0b06 	vstr	d0, [r7, #24]
	return rev;	
 800c432:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c436:	ec44 3b17 	vmov	d7, r3, r4
}
 800c43a:	eeb0 0b47 	vmov.f64	d0, d7
 800c43e:	372c      	adds	r7, #44	; 0x2c
 800c440:	46bd      	mov	sp, r7
 800c442:	bd90      	pop	{r4, r7, pc}

0800c444 <GetComma>:
// 实现功能：计算字符串中各个逗号的位置
// 参    数：查找的逗号是第几个的个数，需要查找的字符串
// 返 回 值：0
//====================================================================//
uint8_t GetComma(uint8_t num,uint8_t *str)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	6039      	str	r1, [r7, #0]
 800c44e:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	73bb      	strb	r3, [r7, #14]
	int32_t len=strlen(str);
 800c454:	6838      	ldr	r0, [r7, #0]
 800c456:	f7f3 ff3f 	bl	80002d8 <strlen>
 800c45a:	4603      	mov	r3, r0
 800c45c:	60bb      	str	r3, [r7, #8]

	for(i = 0;i < len;i ++)
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
 800c462:	e013      	b.n	800c48c <GetComma+0x48>
	{
		if(str[i] == ',')
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	4413      	add	r3, r2
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b2c      	cmp	r3, #44	; 0x2c
 800c46e:	d102      	bne.n	800c476 <GetComma+0x32>
			j++;
 800c470:	7bbb      	ldrb	r3, [r7, #14]
 800c472:	3301      	adds	r3, #1
 800c474:	73bb      	strb	r3, [r7, #14]
		if(j == num)
 800c476:	7bba      	ldrb	r2, [r7, #14]
 800c478:	79fb      	ldrb	r3, [r7, #7]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d103      	bne.n	800c486 <GetComma+0x42>
			return i + 1;	
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	3301      	adds	r3, #1
 800c482:	b2db      	uxtb	r3, r3
 800c484:	e007      	b.n	800c496 <GetComma+0x52>
	for(i = 0;i < len;i ++)
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	3301      	adds	r3, #1
 800c48a:	73fb      	strb	r3, [r7, #15]
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	429a      	cmp	r2, r3
 800c492:	dce7      	bgt.n	800c464 <GetComma+0x20>
	}

	return 0;	
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <__libc_init_array>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	4e0d      	ldr	r6, [pc, #52]	; (800c4d8 <__libc_init_array+0x38>)
 800c4a4:	4c0d      	ldr	r4, [pc, #52]	; (800c4dc <__libc_init_array+0x3c>)
 800c4a6:	1ba4      	subs	r4, r4, r6
 800c4a8:	10a4      	asrs	r4, r4, #2
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	42a5      	cmp	r5, r4
 800c4ae:	d109      	bne.n	800c4c4 <__libc_init_array+0x24>
 800c4b0:	4e0b      	ldr	r6, [pc, #44]	; (800c4e0 <__libc_init_array+0x40>)
 800c4b2:	4c0c      	ldr	r4, [pc, #48]	; (800c4e4 <__libc_init_array+0x44>)
 800c4b4:	f000 f836 	bl	800c524 <_init>
 800c4b8:	1ba4      	subs	r4, r4, r6
 800c4ba:	10a4      	asrs	r4, r4, #2
 800c4bc:	2500      	movs	r5, #0
 800c4be:	42a5      	cmp	r5, r4
 800c4c0:	d105      	bne.n	800c4ce <__libc_init_array+0x2e>
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4c8:	4798      	blx	r3
 800c4ca:	3501      	adds	r5, #1
 800c4cc:	e7ee      	b.n	800c4ac <__libc_init_array+0xc>
 800c4ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4d2:	4798      	blx	r3
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	e7f2      	b.n	800c4be <__libc_init_array+0x1e>
 800c4d8:	0800c584 	.word	0x0800c584
 800c4dc:	0800c584 	.word	0x0800c584
 800c4e0:	0800c584 	.word	0x0800c584
 800c4e4:	0800c588 	.word	0x0800c588

0800c4e8 <memset>:
 800c4e8:	4402      	add	r2, r0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d100      	bne.n	800c4f2 <memset+0xa>
 800c4f0:	4770      	bx	lr
 800c4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4f6:	e7f9      	b.n	800c4ec <memset+0x4>

0800c4f8 <strncpy>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	3901      	subs	r1, #1
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	b902      	cbnz	r2, 800c502 <strncpy+0xa>
 800c500:	bd70      	pop	{r4, r5, r6, pc}
 800c502:	4623      	mov	r3, r4
 800c504:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c508:	f803 5b01 	strb.w	r5, [r3], #1
 800c50c:	1e56      	subs	r6, r2, #1
 800c50e:	b92d      	cbnz	r5, 800c51c <strncpy+0x24>
 800c510:	4414      	add	r4, r2
 800c512:	42a3      	cmp	r3, r4
 800c514:	d0f4      	beq.n	800c500 <strncpy+0x8>
 800c516:	f803 5b01 	strb.w	r5, [r3], #1
 800c51a:	e7fa      	b.n	800c512 <strncpy+0x1a>
 800c51c:	461c      	mov	r4, r3
 800c51e:	4632      	mov	r2, r6
 800c520:	e7ed      	b.n	800c4fe <strncpy+0x6>
	...

0800c524 <_init>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	bf00      	nop
 800c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52a:	bc08      	pop	{r3}
 800c52c:	469e      	mov	lr, r3
 800c52e:	4770      	bx	lr

0800c530 <_fini>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr
