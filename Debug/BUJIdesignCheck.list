
BUJIdesignCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab70  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae48  0800ae48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae50  0800ae50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800ae58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a400  24000010  0800ae68  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400a410  0800ae68  0002a410  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dbb1  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004667  00000000  00000000  0004dbef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00052258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  00053998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039be8  00000000  00000000  00054f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018998  00000000  00000000  0008eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001690ae  00000000  00000000  000a7490  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021053e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006170  00000000  00000000  002105bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800adf0 	.word	0x0800adf0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800adf0 	.word	0x0800adf0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DCMI_Init+0x60>)
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <MX_DCMI_Init+0x64>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_DCMI_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_DCMI_Init+0x60>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DCMI_Init+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DCMI_Init+0x60>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_DCMI_Init+0x60>)
 8000608:	2208      	movs	r2, #8
 800060a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_DCMI_Init+0x60>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_DCMI_Init+0x60>)
 8000626:	f001 fb25 	bl	8001c74 <HAL_DCMI_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fc3a 	bl	8000ea8 <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2400a0a4 	.word	0x2400a0a4
 800063c:	48020000 	.word	0x48020000

08000640 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a7a      	ldr	r2, [pc, #488]	; (8000848 <HAL_DCMI_MspInit+0x208>)
 800065e:	4293      	cmp	r3, r2
 8000660:	f040 80ed 	bne.w	800083e <HAL_DCMI_MspInit+0x1fe>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000664:	4b79      	ldr	r3, [pc, #484]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000666:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800066a:	4a78      	ldr	r2, [pc, #480]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000674:	4b75      	ldr	r3, [pc, #468]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	623b      	str	r3, [r7, #32]
 8000680:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	4b72      	ldr	r3, [pc, #456]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a70      	ldr	r2, [pc, #448]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b6e      	ldr	r3, [pc, #440]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b6a      	ldr	r3, [pc, #424]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a69      	ldr	r2, [pc, #420]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b66      	ldr	r3, [pc, #408]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b63      	ldr	r3, [pc, #396]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	4a61      	ldr	r2, [pc, #388]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a5a      	ldr	r2, [pc, #360]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b57      	ldr	r3, [pc, #348]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a52      	ldr	r2, [pc, #328]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <HAL_DCMI_MspInit+0x20c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000718:	2370      	movs	r3, #112	; 0x70
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000728:	230d      	movs	r3, #13
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	4619      	mov	r1, r3
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <HAL_DCMI_MspInit+0x210>)
 8000734:	f005 f8cc 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000748:	230d      	movs	r3, #13
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4840      	ldr	r0, [pc, #256]	; (8000854 <HAL_DCMI_MspInit+0x214>)
 8000754:	f005 f8bc 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800076a:	230d      	movs	r3, #13
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <HAL_DCMI_MspInit+0x218>)
 8000776:	f005 f8ab 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077a:	2308      	movs	r3, #8
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800078a:	230d      	movs	r3, #13
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <HAL_DCMI_MspInit+0x21c>)
 8000796:	f005 f89b 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007aa:	230d      	movs	r3, #13
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4619      	mov	r1, r3
 80007b4:	482a      	ldr	r0, [pc, #168]	; (8000860 <HAL_DCMI_MspInit+0x220>)
 80007b6:	f005 f88b 	bl	80058d0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007bc:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_DCMI_MspInit+0x228>)
 80007be:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c2:	224b      	movs	r2, #75	; 0x4b
 80007c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000802:	2203      	movs	r2, #3
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000814:	f001 fd72 	bl	80022fc <HAL_DMA_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800081e:	f000 fb43 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 8000826:	649a      	str	r2, [r3, #72]	; 0x48
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_DCMI_MspInit+0x224>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	204e      	movs	r0, #78	; 0x4e
 8000834:	f001 f9e9 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000838:	204e      	movs	r0, #78	; 0x4e
 800083a:	f001 fa00 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3738      	adds	r7, #56	; 0x38
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48020000 	.word	0x48020000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021000 	.word	0x58021000
 8000854:	58020000 	.word	0x58020000
 8000858:	58020800 	.word	0x58020800
 800085c:	58020c00 	.word	0x58020c00
 8000860:	58020400 	.word	0x58020400
 8000864:	2400a02c 	.word	0x2400a02c
 8000868:	40020010 	.word	0x40020010

0800086c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_DMA_Init+0x4c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <MX_DMA_Init+0x4c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_DMA_Init+0x4c>)
 8000884:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	200b      	movs	r0, #11
 8000896:	f001 f9b8 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800089a:	200b      	movs	r0, #11
 800089c:	f001 f9cf 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	200c      	movs	r0, #12
 80008a6:	f001 f9b0 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008aa:	200c      	movs	r0, #12
 80008ac:	f001 f9c7 	bl	8001c3e <HAL_NVIC_EnableIRQ>

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58024400 	.word	0x58024400

080008bc <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	4b6e      	ldr	r3, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a6c      	ldr	r2, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f0:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a65      	ldr	r2, [pc, #404]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a5d      	ldr	r2, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	4a56      	ldr	r2, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093c:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a4e      	ldr	r2, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_IT_GPIO_Port, GPS_IT_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2104      	movs	r1, #4
 800098a:	4841      	ldr	r0, [pc, #260]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 800098c:	f005 f950 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_TXEN_GPIO_Port, SX_TXEN_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2120      	movs	r1, #32
 8000994:	483f      	ldr	r0, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x1d8>)
 8000996:	f005 f94b 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_RXEN_Pin|SX_RST_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2103      	movs	r1, #3
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 80009a0:	f005 f946 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DCMI_Pin|LED_SX_Pin|LED_GPS_Pin|LED_LOOP_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009aa:	483b      	ldr	r0, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 80009ac:	f005 f940 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RESET_GPIO_Port, DCMI_RESET_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	4839      	ldr	r0, [pc, #228]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80009b6:	f005 f93b 	bl	8005c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_IT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_IT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	482f      	ldr	r0, [pc, #188]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 80009d2:	f004 ff7d 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_TXEN_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX_TXEN_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4829      	ldr	r0, [pc, #164]	; (8000a94 <MX_GPIO_Init+0x1d8>)
 80009ee:	f004 ff6f 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SX_RXEN_Pin|SX_RST_Pin|LED_DCMI_Pin|LED_SX_Pin
 80009f2:	f247 0303 	movw	r3, #28675	; 0x7003
 80009f6:	61fb      	str	r3, [r7, #28]
                          |LED_GPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f004 ff60 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BUSY_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a24:	f004 ff54 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LOOP_Pin;
 8000a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_LOOP_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_GPIO_Init+0x1dc>)
 8000a42:	f004 ff45 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 8000a64:	f004 ff34 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RESET_Pin;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000a80:	f004 ff26 	bl	80058d0 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	58020000 	.word	0x58020000
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58020c00 	.word	0x58020c00

08000aa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009034B6;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	f005 f8c2 	bl	8005c64 <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f9df 	bl	8000ea8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aee:	f005 f949 	bl	8005d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f9d6 	bl	8000ea8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000b00:	f005 f98b 	bl	8005e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f9cd 	bl	8000ea8 <Error_Handler>
  }

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2400a0f4 	.word	0x2400a0f4
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	009034b6 	.word	0x009034b6

08000b20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_I2C2_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x009034B6;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_I2C2_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b5c:	f005 f882 	bl	8005c64 <HAL_I2C_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f000 f99f 	bl	8000ea8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b6e:	f005 f909 	bl	8005d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 f996 	bl	8000ea8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_I2C2_Init+0x74>)
 8000b80:	f005 f94b 	bl	8005e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f98d 	bl	8000ea8 <Error_Handler>
  }

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400a140 	.word	0x2400a140
 8000b98:	40005800 	.word	0x40005800
 8000b9c:	009034b6 	.word	0x009034b6

08000ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_I2C_MspInit+0xf4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12f      	bne.n	8000c22 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000be0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4827      	ldr	r0, [pc, #156]	; (8000c9c <HAL_I2C_MspInit+0xfc>)
 8000bfe:	f004 fe67 	bl	80058d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c20:	e033      	b.n	8000c8a <HAL_I2C_MspInit+0xea>
  else if(i2cHandle->Instance==I2C2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_I2C_MspInit+0x100>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d12e      	bne.n	8000c8a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_I2C_MspInit+0xfc>)
 8000c68:	f004 fe32 	bl	80058d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_I2C_MspInit+0xf8>)
 8000c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40005400 	.word	0x40005400
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	40005800 	.word	0x40005800

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000caa:	f000 fe13 	bl	80018d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cae:	f000 f835 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb2:	f7ff fe03 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb6:	f7ff fdd9 	bl	800086c <MX_DMA_Init>
  MX_DCMI_Init();
 8000cba:	f7ff fc8d 	bl	80005d8 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000cbe:	f7ff feef 	bl	8000aa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000cc2:	f7ff ff2d 	bl	8000b20 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cc6:	f000 f8f7 	bl	8000eb8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000cca:	f000 fd01 	bl	80016d0 <MX_UART4_Init>
  MX_TIM4_Init();
 8000cce:	f000 faad 	bl	800122c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000cd2:	f000 fb2d 	bl	8001330 <MX_TIM5_Init>
  MX_TIM16_Init();
 8000cd6:	f000 fba3 	bl	8001420 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
   //TIM5->CCR4 = 2000;
 //HAL_Delay(2000);
      //TIM5->CCR4 = 1000;
   int dir = +1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_Delay(100);
 8000cde:	2064      	movs	r0, #100	; 0x64
 8000ce0:	f000 fe8a 	bl	80019f8 <HAL_Delay>
      TIM5->CCR4 += 10 * dir;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <main+0x74>)
 8000ce6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <main+0x74>)
 8000cf4:	440b      	add	r3, r1
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
      if(TIM5->CCR4 <= 2000 || TIM5->CCR4 >= 3500)dir = -dir;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <main+0x74>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d00:	d905      	bls.n	8000d0e <main+0x6a>
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <main+0x74>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d9e7      	bls.n	8000cde <main+0x3a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	425b      	negs	r3, r3
 8000d12:	607b      	str	r3, [r7, #4]
      HAL_Delay(100);
 8000d14:	e7e3      	b.n	8000cde <main+0x3a>
 8000d16:	bf00      	nop
 8000d18:	40000c00 	.word	0x40000c00

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0cc      	sub	sp, #304	; 0x130
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d26:	224c      	movs	r2, #76	; 0x4c
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00a f858 	bl	800ade0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d34:	2220      	movs	r2, #32
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f00a f851 	bl	800ade0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	23bc      	movs	r3, #188	; 0xbc
 8000d46:	461a      	mov	r2, r3
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f00a f849 	bl	800ade0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f005 f8b0 	bl	8005eb4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	4b51      	ldr	r3, [pc, #324]	; (8000ea0 <SystemClock_Config+0x184>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	4a50      	ldr	r2, [pc, #320]	; (8000ea0 <SystemClock_Config+0x184>)
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <SystemClock_Config+0x184>)
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	f003 0201 	and.w	r2, r3, #1
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <SystemClock_Config+0x188>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <SystemClock_Config+0x188>)
 8000d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <SystemClock_Config+0x188>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d8e:	bf00      	nop
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <SystemClock_Config+0x188>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9c:	d1f8      	bne.n	8000d90 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000dca:	23c8      	movs	r3, #200	; 0xc8
 8000dcc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000de2:	2308      	movs	r3, #8
 8000de4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 f895 	bl	8005f28 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000e04:	f000 f850 	bl	8000ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	233f      	movs	r3, #63	; 0x3f
 8000e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e26:	2340      	movs	r3, #64	; 0x40
 8000e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e34:	2340      	movs	r3, #64	; 0x40
 8000e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 fc81 	bl	8006748 <HAL_RCC_ClockConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000e4c:	f000 f82c 	bl	8000ea8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SPI1
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	f241 020a 	movw	r2, #4106	; 0x100a
 8000e58:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 f853 	bl	8006f24 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e84:	f000 f810 	bl	8000ea8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 8000e88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f005 fe10 	bl	8006ab4 <HAL_RCC_MCOConfig>
}
 8000e94:	bf00      	nop
 8000e96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	58000400 	.word	0x58000400
 8000ea4:	58024800 	.word	0x58024800

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ebe:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <MX_SPI1_Init+0xa8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ec4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ee4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000eec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_SPI1_Init+0xa4>)
 8000f4a:	f007 faeb 	bl	8008524 <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f54:	f7ff ffa8 	bl	8000ea8 <Error_Handler>
  }

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2400a18c 	.word	0x2400a18c
 8000f60:	40013000 	.word	0x40013000

08000f64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_SPI_MspInit+0xc8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d14d      	bne.n	8001022 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000f8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a21      	ldr	r2, [pc, #132]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0xcc>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8000fe0:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <HAL_SPI_MspInit+0xd0>)
 8000ffe:	f004 fc67 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001002:	2310      	movs	r3, #16
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001012:	2305      	movs	r3, #5
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <HAL_SPI_MspInit+0xd4>)
 800101e:	f004 fc57 	bl	80058d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013000 	.word	0x40013000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020000 	.word	0x58020000
 8001038:	58020400 	.word	0x58020400

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x30>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	58024400 	.word	0x58024400

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 fc7c 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Stream0_IRQHandler+0x10>)
 80010ca:	f002 fc3f 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2400a02c 	.word	0x2400a02c

080010d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA1_Stream1_IRQHandler+0x10>)
 80010de:	f002 fc35 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2400a2f8 	.word	0x2400a2f8

080010ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <UART4_IRQHandler+0x10>)
 80010f2:	f008 fbb5 	bl	8009860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2400a370 	.word	0x2400a370

08001100 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <DCMI_IRQHandler+0x10>)
 8001106:	f000 ffa9 	bl	800205c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2400a0a4 	.word	0x2400a0a4

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001118:	4b39      	ldr	r3, [pc, #228]	; (8001200 <SystemInit+0xec>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a38      	ldr	r2, [pc, #224]	; (8001200 <SystemInit+0xec>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001128:	4b36      	ldr	r3, [pc, #216]	; (8001204 <SystemInit+0xf0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	2b06      	cmp	r3, #6
 8001132:	d807      	bhi.n	8001144 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <SystemInit+0xf0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 030f 	bic.w	r3, r3, #15
 800113c:	4a31      	ldr	r2, [pc, #196]	; (8001204 <SystemInit+0xf0>)
 800113e:	f043 0307 	orr.w	r3, r3, #7
 8001142:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <SystemInit+0xf4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <SystemInit+0xf4>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <SystemInit+0xf4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <SystemInit+0xf4>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	492b      	ldr	r1, [pc, #172]	; (8001208 <SystemInit+0xf4>)
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <SystemInit+0xf8>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemInit+0xf0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	2b07      	cmp	r3, #7
 800116c:	d907      	bls.n	800117e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <SystemInit+0xf0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 030f 	bic.w	r3, r3, #15
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <SystemInit+0xf0>)
 8001178:	f043 0307 	orr.w	r3, r3, #7
 800117c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemInit+0xf4>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <SystemInit+0xf4>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemInit+0xf4>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <SystemInit+0xf4>)
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <SystemInit+0xfc>)
 8001194:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <SystemInit+0xf4>)
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <SystemInit+0x100>)
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <SystemInit+0xf4>)
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <SystemInit+0x104>)
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <SystemInit+0xf4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <SystemInit+0xf4>)
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <SystemInit+0x104>)
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <SystemInit+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <SystemInit+0xf4>)
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <SystemInit+0x104>)
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <SystemInit+0xf4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <SystemInit+0xf4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a10      	ldr	r2, [pc, #64]	; (8001208 <SystemInit+0xf4>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <SystemInit+0xf4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <SystemInit+0x108>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <SystemInit+0x10c>)
 80011d8:	4013      	ands	r3, r2
 80011da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011de:	d202      	bcs.n	80011e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <SystemInit+0x110>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <SystemInit+0x114>)
 80011e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011ec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SystemInit+0xec>)
 80011f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	52002000 	.word	0x52002000
 8001208:	58024400 	.word	0x58024400
 800120c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001210:	02020200 	.word	0x02020200
 8001214:	01ff0000 	.word	0x01ff0000
 8001218:	01010280 	.word	0x01010280
 800121c:	5c001000 	.word	0x5c001000
 8001220:	ffff0000 	.word	0xffff0000
 8001224:	51008108 	.word	0x51008108
 8001228:	52004000 	.word	0x52004000

0800122c <MX_TIM4_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim16;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <MX_TIM4_Init+0xfc>)
 8001260:	4a32      	ldr	r2, [pc, #200]	; (800132c <MX_TIM4_Init+0x100>)
 8001262:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MX_TIM4_Init+0xfc>)
 8001266:	2263      	movs	r2, #99	; 0x63
 8001268:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <MX_TIM4_Init+0xfc>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_TIM4_Init+0xfc>)
 8001272:	f241 3287 	movw	r2, #4999	; 0x1387
 8001276:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_TIM4_Init+0xfc>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_TIM4_Init+0xfc>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001284:	4828      	ldr	r0, [pc, #160]	; (8001328 <MX_TIM4_Init+0xfc>)
 8001286:	f007 fa60 	bl	800874a <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001290:	f7ff fe0a 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	4619      	mov	r1, r3
 80012a0:	4821      	ldr	r0, [pc, #132]	; (8001328 <MX_TIM4_Init+0xfc>)
 80012a2:	f007 fc1b 	bl	8008adc <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80012ac:	f7ff fdfc 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012b0:	481d      	ldr	r0, [pc, #116]	; (8001328 <MX_TIM4_Init+0xfc>)
 80012b2:	f007 faa1 	bl	80087f8 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80012bc:	f7ff fdf4 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4816      	ldr	r0, [pc, #88]	; (8001328 <MX_TIM4_Init+0xfc>)
 80012d0:	f008 f8da 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012da:	f7ff fde5 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2204      	movs	r2, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_TIM4_Init+0xfc>)
 80012f6:	f007 fae1 	bl	80088bc <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001300:	f7ff fdd2 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2208      	movs	r2, #8
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_TIM4_Init+0xfc>)
 800130c:	f007 fad6 	bl	80088bc <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001316:	f7ff fdc7 	bl	8000ea8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <MX_TIM4_Init+0xfc>)
 800131c:	f000 f94a 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2400a214 	.word	0x2400a214
 800132c:	40000800 	.word	0x40000800

08001330 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <MX_TIM5_Init+0xe8>)
 8001364:	4a2d      	ldr	r2, [pc, #180]	; (800141c <MX_TIM5_Init+0xec>)
 8001366:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_TIM5_Init+0xe8>)
 800136a:	2263      	movs	r2, #99	; 0x63
 800136c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <MX_TIM5_Init+0xe8>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_TIM5_Init+0xe8>)
 8001376:	f241 3287 	movw	r2, #4999	; 0x1387
 800137a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_TIM5_Init+0xe8>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_TIM5_Init+0xe8>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001388:	4823      	ldr	r0, [pc, #140]	; (8001418 <MX_TIM5_Init+0xe8>)
 800138a:	f007 f9de 	bl	800874a <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001394:	f7ff fd88 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800139e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481c      	ldr	r0, [pc, #112]	; (8001418 <MX_TIM5_Init+0xe8>)
 80013a6:	f007 fb99 	bl	8008adc <HAL_TIM_ConfigClockSource>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013b0:	f7ff fd7a 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <MX_TIM5_Init+0xe8>)
 80013b6:	f007 fa1f 	bl	80087f8 <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013c0:	f7ff fd72 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <MX_TIM5_Init+0xe8>)
 80013d4:	f008 f858 	bl	8009488 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013de:	f7ff fd63 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e2:	2360      	movs	r3, #96	; 0x60
 80013e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 750;
 80013e6:	f240 23ee 	movw	r3, #750	; 0x2ee
 80013ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	220c      	movs	r2, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <MX_TIM5_Init+0xe8>)
 80013fc:	f007 fa5e 	bl	80088bc <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8001406:	f7ff fd4f 	bl	8000ea8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <MX_TIM5_Init+0xe8>)
 800140c:	f000 f8d2 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	; 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2400a260 	.word	0x2400a260
 800141c:	40000c00 	.word	0x40000c00

08001420 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b092      	sub	sp, #72	; 0x48
 8001424:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	222c      	movs	r2, #44	; 0x2c
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f009 fccd 	bl	800ade0 <memset>

  htim16.Instance = TIM16;
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <MX_TIM16_Init+0xec>)
 8001448:	4a31      	ldr	r2, [pc, #196]	; (8001510 <MX_TIM16_Init+0xf0>)
 800144a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100-1;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <MX_TIM16_Init+0xec>)
 800144e:	2263      	movs	r2, #99	; 0x63
 8001450:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_TIM16_Init+0xec>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <MX_TIM16_Init+0xec>)
 800145a:	f241 3287 	movw	r2, #4999	; 0x1387
 800145e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <MX_TIM16_Init+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_TIM16_Init+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <MX_TIM16_Init+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001472:	4826      	ldr	r0, [pc, #152]	; (800150c <MX_TIM16_Init+0xec>)
 8001474:	f007 f969 	bl	800874a <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800147e:	f7ff fd13 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001482:	4822      	ldr	r0, [pc, #136]	; (800150c <MX_TIM16_Init+0xec>)
 8001484:	f007 f9b8 	bl	80087f8 <HAL_TIM_PWM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800148e:	f7ff fd0b 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001492:	2360      	movs	r3, #96	; 0x60
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4815      	ldr	r0, [pc, #84]	; (800150c <MX_TIM16_Init+0xec>)
 80014b8:	f007 fa00 	bl	80088bc <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80014c2:	f7ff fcf1 	bl	8000ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM16_Init+0xec>)
 80014ee:	f008 f853 	bl	8009598 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80014f8:	f7ff fcd6 	bl	8000ea8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim16);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM16_Init+0xec>)
 80014fe:	f000 f859 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3748      	adds	r7, #72	; 0x48
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2400a2ac 	.word	0x2400a2ac
 8001510:	40014400 	.word	0x40014400

08001514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <HAL_TIM_Base_MspInit+0x90>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10f      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 8001528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 8001538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001544:	e028      	b.n	8001598 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM5)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_TIM_Base_MspInit+0x98>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10f      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 8001552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 8001562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
}
 800156e:	e013      	b.n	8001598 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM16)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10e      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 800157c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 8001582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001586:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_TIM_Base_MspInit+0x94>)
 800158c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	bf00      	nop
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40000800 	.word	0x40000800
 80015a8:	58024400 	.word	0x58024400
 80015ac:	40000c00 	.word	0x40000c00
 80015b0:	40014400 	.word	0x40014400

080015b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_TIM_MspPostInit+0x100>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d120      	bne.n	8001618 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	4a36      	ldr	r2, [pc, #216]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80015f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001606:	2302      	movs	r3, #2
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	482a      	ldr	r0, [pc, #168]	; (80016bc <HAL_TIM_MspPostInit+0x108>)
 8001612:	f004 f95d 	bl	80058d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001616:	e049      	b.n	80016ac <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM5)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_TIM_MspPostInit+0x10c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11f      	bne.n	8001662 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001640:	2308      	movs	r3, #8
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001650:	2302      	movs	r3, #2
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	481a      	ldr	r0, [pc, #104]	; (80016c4 <HAL_TIM_MspPostInit+0x110>)
 800165c:	f004 f938 	bl	80058d0 <HAL_GPIO_Init>
}
 8001660:	e024      	b.n	80016ac <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM16)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_TIM_MspPostInit+0x114>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d11f      	bne.n	80016ac <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_TIM_MspPostInit+0x104>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_TIM_MspPostInit+0x118>)
 80016a8:	f004 f912 	bl	80058d0 <HAL_GPIO_Init>
}
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40000800 	.word	0x40000800
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020c00 	.word	0x58020c00
 80016c0:	40000c00 	.word	0x40000c00
 80016c4:	58020000 	.word	0x58020000
 80016c8:	40014400 	.word	0x40014400
 80016cc:	58020400 	.word	0x58020400

080016d0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_UART4_Init+0x90>)
 80016d6:	4a23      	ldr	r2, [pc, #140]	; (8001764 <MX_UART4_Init+0x94>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MX_UART4_Init+0x90>)
 80016dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_UART4_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_UART4_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <MX_UART4_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_UART4_Init+0x90>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_UART4_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_UART4_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_UART4_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_UART4_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_UART4_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <MX_UART4_Init+0x90>)
 800171a:	f007 ffbb 	bl	8009694 <HAL_UART_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001724:	f7ff fbc0 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <MX_UART4_Init+0x90>)
 800172c:	f009 f9f1 	bl	800ab12 <HAL_UARTEx_SetTxFifoThreshold>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001736:	f7ff fbb7 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <MX_UART4_Init+0x90>)
 800173e:	f009 fa26 	bl	800ab8e <HAL_UARTEx_SetRxFifoThreshold>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001748:	f7ff fbae 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_UART4_Init+0x90>)
 800174e:	f009 f9a7 	bl	800aaa0 <HAL_UARTEx_DisableFifoMode>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001758:	f7ff fba6 	bl	8000ea8 <Error_Handler>
  }

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2400a370 	.word	0x2400a370
 8001764:	40004c00 	.word	0x40004c00

08001768 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a39      	ldr	r2, [pc, #228]	; (800186c <HAL_UART_MspInit+0x104>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d16c      	bne.n	8001864 <HAL_UART_MspInit+0xfc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_UART_MspInit+0x108>)
 800178c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001790:	4a37      	ldr	r2, [pc, #220]	; (8001870 <HAL_UART_MspInit+0x108>)
 8001792:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001796:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_UART_MspInit+0x108>)
 800179c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_UART_MspInit+0x108>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ae:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_UART_MspInit+0x108>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_UART_MspInit+0x108>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c6:	2303      	movs	r3, #3
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017d6:	2308      	movs	r3, #8
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4824      	ldr	r0, [pc, #144]	; (8001874 <HAL_UART_MspInit+0x10c>)
 80017e2:	f004 f875 	bl	80058d0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream1;
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_UART_MspInit+0x110>)
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_UART_MspInit+0x114>)
 80017ea:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_UART_MspInit+0x110>)
 80017ee:	223f      	movs	r2, #63	; 0x3f
 80017f0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_UART_MspInit+0x110>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_UART_MspInit+0x110>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001804:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_UART_MspInit+0x110>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001818:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_UART_MspInit+0x110>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001822:	2204      	movs	r2, #4
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001828:	2203      	movs	r2, #3
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_UART_MspInit+0x110>)
 800182e:	2200      	movs	r2, #0
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001838:	480f      	ldr	r0, [pc, #60]	; (8001878 <HAL_UART_MspInit+0x110>)
 800183a:	f000 fd5f 	bl	80022fc <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001844:	f7ff fb30 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_UART_MspInit+0x110>)
 800184c:	679a      	str	r2, [r3, #120]	; 0x78
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_UART_MspInit+0x110>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2034      	movs	r0, #52	; 0x34
 800185a:	f000 f9d6 	bl	8001c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800185e:	2034      	movs	r0, #52	; 0x34
 8001860:	f000 f9ed 	bl	8001c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40004c00 	.word	0x40004c00
 8001870:	58024400 	.word	0x58024400
 8001874:	58020000 	.word	0x58020000
 8001878:	2400a2f8 	.word	0x2400a2f8
 800187c:	40020028 	.word	0x40020028

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001886:	e003      	b.n	8001890 <LoopCopyDataInit>

08001888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800188a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800188c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800188e:	3104      	adds	r1, #4

08001890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001898:	d3f6      	bcc.n	8001888 <CopyDataInit>
  ldr  r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800189c:	e002      	b.n	80018a4 <LoopFillZerobss>

0800189e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800189e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018a0:	f842 3b04 	str.w	r3, [r2], #4

080018a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018a8:	d3f9      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018aa:	f7ff fc33 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f009 fa73 	bl	800ad98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff f9f7 	bl	8000ca4 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80018bc:	0800ae58 	.word	0x0800ae58
  ldr  r0, =_sdata
 80018c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80018c4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80018c8:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80018cc:	2400a410 	.word	0x2400a410

080018d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC3_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018da:	2003      	movs	r0, #3
 80018dc:	f000 f98a 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e0:	f005 f952 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 80018e4:	4601      	mov	r1, r0
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_Init+0x68>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <HAL_Init+0x6c>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	fa21 f303 	lsr.w	r3, r1, r3
 80018fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_Init+0x68>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_Init+0x6c>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_Init+0x70>)
 8001916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_Init+0x74>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f814 	bl	800194c <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e002      	b.n	8001934 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800192e:	f7ff fb85 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	0800ae18 	.word	0x0800ae18
 8001944:	24000004 	.word	0x24000004
 8001948:	24000000 	.word	0x24000000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_InitTick+0x60>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e021      	b.n	80019a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_InitTick+0x64>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_InitTick+0x60>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f96f 	bl	8001c5a <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 f939 	bl	8001c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_InitTick+0x68>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2400000c 	.word	0x2400000c
 80019b0:	24000000 	.word	0x24000000
 80019b4:	24000008 	.word	0x24000008

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2400000c 	.word	0x2400000c
 80019dc:	2400a3fc 	.word	0x2400a3fc

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2400a3fc 	.word	0x2400a3fc

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_Delay+0x40>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2400000c 	.word	0x2400000c

08001a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetREVID+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0c1b      	lsrs	r3, r3, #16
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	5c001000 	.word	0x5c001000

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <__NVIC_SetPriorityGrouping+0x40>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x40>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	05fa0000 	.word	0x05fa0000

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff40 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff90 	bl	8001b48 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5f 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff33 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa4 	bl	8001bb0 <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e069      	b.n	8001d5a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fcd4 	bl	8000640 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_DCMI_Init+0xf0>)
 8001cba:	400b      	ands	r3, r1
 8001cbc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001cd2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001cde:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001cea:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001cf6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001d02:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d112      	bne.n	8001d3a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7f1b      	ldrb	r3, [r3, #28]
 8001d18:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7f5b      	ldrb	r3, [r3, #29]
 8001d1e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001d20:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7f9b      	ldrb	r3, [r3, #30]
 8001d26:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001d28:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7fdb      	ldrb	r3, [r3, #31]
 8001d30:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001d36:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001d38:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 021e 	orr.w	r2, r2, #30
 8001d48:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	ffe0f007 	.word	0xffe0f007

08001d68 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_DCMI_Start_DMA+0x1c>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e0ab      	b.n	8001edc <HAL_DCMI_Start_DMA+0x174>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0202 	bic.w	r2, r2, #2
 8001db2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc8:	4a46      	ldr	r2, [pc, #280]	; (8001ee4 <HAL_DCMI_Start_DMA+0x17c>)
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	4a45      	ldr	r2, [pc, #276]	; (8001ee8 <HAL_DCMI_Start_DMA+0x180>)
 8001dd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	2200      	movs	r2, #0
 8001dda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfa:	d219      	bcs.n	8001e30 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3328      	adds	r3, #40	; 0x28
 8001e06:	4619      	mov	r1, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	f000 fdd2 	bl	80029b4 <HAL_DMA_Start_IT>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d055      	beq.n	8001ec2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e055      	b.n	8001edc <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_DCMI_Start_DMA+0x17c>)
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001e4a:	e009      	b.n	8001e60 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	085a      	lsrs	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	005a      	lsls	r2, r3, #1
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d2f0      	bcs.n	8001e4c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	1e9a      	subs	r2, r3, #2
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3328      	adds	r3, #40	; 0x28
 8001e92:	4619      	mov	r1, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	f003 f867 	bl	8004f70 <HAL_DMAEx_MultiBufferStart_IT>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00c      	b.n	8001edc <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	0800219d 	.word	0x0800219d
 8001ee8:	080022c3 	.word	0x080022c3

08001eec <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_DCMI_Stop+0xb8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_DCMI_Stop+0xbc>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a5b      	lsrs	r3, r3, #9
 8001f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_DCMI_Stop+0x30>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e03f      	b.n	8001f9c <HAL_DCMI_Stop+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	72fb      	strb	r3, [r7, #11]
      break;
 8001f58:	e006      	b.n	8001f68 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e9      	bne.n	8001f3c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f76:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 ff83 	bl	8002e88 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	24000000 	.word	0x24000000
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_DCMI_Suspend+0xa8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a27      	ldr	r2, [pc, #156]	; (8002058 <HAL_DCMI_Suspend+0xac>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0a5b      	lsrs	r3, r3, #9
 8001fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_DCMI_Suspend+0x30>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e034      	b.n	8002046 <HAL_DCMI_Suspend+0x9a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d125      	bne.n	800203c <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3b01      	subs	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10c      	bne.n	800202e <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	72fb      	strb	r3, [r7, #11]
        break;
 800202c:	e006      	b.n	800203c <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e5      	bne.n	8002008 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002044:	7afb      	ldrb	r3, [r7, #11]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	24000000 	.word	0x24000000
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2204      	movs	r2, #4
 800207c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f043 0202 	orr.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_DCMI_IRQHandler+0x100>)
 8002098:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fa10 	bl	80034c4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2202      	movs	r2, #2
 80020b4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_DCMI_IRQHandler+0x100>)
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 f9f4 	bl	80034c4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f840 	bl	8002174 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2208      	movs	r2, #8
 8002104:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f83e 	bl	8002188 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01d      	beq.n	8002152 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d107      	bne.n	8002134 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 021e 	bic.w	r2, r2, #30
 8002132:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f008 fde5 	bl	800ad1c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	080022c3 	.word	0x080022c3

08002160 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d043      	beq.n	800223a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021be:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d118      	bne.n	80021fe <DCMI_DMAXferCplt+0x62>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d015      	beq.n	80021fe <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	00da      	lsls	r2, r3, #3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4413      	add	r3, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	4619      	mov	r1, r3
 80021ee:	f003 fa1d 	bl	800562c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	1e5a      	subs	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
 80021fc:	e044      	b.n	8002288 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d13c      	bne.n	8002288 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	00da      	lsls	r2, r3, #3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	2201      	movs	r2, #1
 8002228:	4619      	mov	r1, r3
 800222a:	f003 f9ff 	bl	800562c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	1e5a      	subs	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
 8002238:	e026      	b.n	8002288 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	e017      	b.n	8002288 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10f      	bne.n	8002288 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	440a      	add	r2, r1
 800227e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	429a      	cmp	r2, r3
 8002292:	d112      	bne.n	80022ba <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d009      	beq.n	80022ee <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ff36 	bl	8002160 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fb6c 	bl	80019e0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e316      	b.n	8002942 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_DMA_Init+0x1b8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_DMA_Init+0x1bc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d045      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_DMA_Init+0x1c0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d040      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a62      	ldr	r2, [pc, #392]	; (80024c0 <HAL_DMA_Init+0x1c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d03b      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_DMA_Init+0x1c8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d036      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5f      	ldr	r2, [pc, #380]	; (80024c8 <HAL_DMA_Init+0x1cc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d031      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_DMA_Init+0x1d0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02c      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5c      	ldr	r2, [pc, #368]	; (80024d0 <HAL_DMA_Init+0x1d4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d027      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_DMA_Init+0x1d8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a59      	ldr	r2, [pc, #356]	; (80024d8 <HAL_DMA_Init+0x1dc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01d      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_DMA_Init+0x1e0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d018      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a56      	ldr	r2, [pc, #344]	; (80024e0 <HAL_DMA_Init+0x1e4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_DMA_Init+0x1e8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00e      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a53      	ldr	r2, [pc, #332]	; (80024e8 <HAL_DMA_Init+0x1ec>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_DMA_Init+0x1f0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a50      	ldr	r2, [pc, #320]	; (80024f0 <HAL_DMA_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Init+0xbc>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_DMA_Init+0xbe>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 813b 	beq.w	8002636 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a37      	ldr	r2, [pc, #220]	; (80024b4 <HAL_DMA_Init+0x1b8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04a      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_DMA_Init+0x1bc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d045      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_DMA_Init+0x1c0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_DMA_Init+0x1c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d03b      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_DMA_Init+0x1c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d036      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_DMA_Init+0x1cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <HAL_DMA_Init+0x1d0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02c      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <HAL_DMA_Init+0x1d4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d027      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_DMA_Init+0x1d8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d022      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_DMA_Init+0x1dc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01d      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_DMA_Init+0x1e0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d018      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_DMA_Init+0x1e4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_DMA_Init+0x1e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_DMA_Init+0x1ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_DMA_Init+0x1f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_DMA_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <HAL_DMA_Init+0x186>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_DMA_Init+0x196>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002492:	e02f      	b.n	80024f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002494:	f7ff faa4 	bl	80019e0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d928      	bls.n	80024f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e246      	b.n	8002942 <HAL_DMA_Init+0x646>
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1c8      	bne.n	8002494 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <HAL_DMA_Init+0x420>)
 800250e:	4013      	ands	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800251a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002558:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_DMA_Init+0x424>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <HAL_DMA_Init+0x428>)
 800255e:	4013      	ands	r3, r2
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d328      	bcc.n	80025b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b28      	cmp	r3, #40	; 0x28
 800256c:	d903      	bls.n	8002576 <HAL_DMA_Init+0x27a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b2e      	cmp	r3, #46	; 0x2e
 8002574:	d917      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b3e      	cmp	r3, #62	; 0x3e
 800257c:	d903      	bls.n	8002586 <HAL_DMA_Init+0x28a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b42      	cmp	r3, #66	; 0x42
 8002584:	d90f      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b46      	cmp	r3, #70	; 0x46
 800258c:	d903      	bls.n	8002596 <HAL_DMA_Init+0x29a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b48      	cmp	r3, #72	; 0x48
 8002594:	d907      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b4e      	cmp	r3, #78	; 0x4e
 800259c:	d905      	bls.n	80025aa <HAL_DMA_Init+0x2ae>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b52      	cmp	r3, #82	; 0x52
 80025a4:	d801      	bhi.n	80025aa <HAL_DMA_Init+0x2ae>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_DMA_Init+0x2b0>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f002 fb31 	bl	8004c5c <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e197      	b.n	8002942 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f002 fa6c 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e0cd      	b.n	80027d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3b      	ldr	r2, [pc, #236]	; (8002728 <HAL_DMA_Init+0x42c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <HAL_DMA_Init+0x430>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_DMA_Init+0x434>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a36      	ldr	r2, [pc, #216]	; (8002734 <HAL_DMA_Init+0x438>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a35      	ldr	r2, [pc, #212]	; (8002738 <HAL_DMA_Init+0x43c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a33      	ldr	r2, [pc, #204]	; (800273c <HAL_DMA_Init+0x440>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a32      	ldr	r2, [pc, #200]	; (8002740 <HAL_DMA_Init+0x444>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_DMA_Init+0x448>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_DMA_Init+0x38e>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_DMA_Init+0x390>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8097 	beq.w	80027c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_DMA_Init+0x42c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d021      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Init+0x430>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01c      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_DMA_Init+0x434>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d017      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Init+0x438>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_DMA_Init+0x43c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Init+0x440>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d008      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_DMA_Init+0x444>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_DMA_Init+0x448>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_DMA_Init+0x44c>)
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d020      	beq.n	800274c <HAL_DMA_Init+0x450>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d102      	bne.n	8002718 <HAL_DMA_Init+0x41c>
 8002712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002716:	e01a      	b.n	800274e <HAL_DMA_Init+0x452>
 8002718:	2300      	movs	r3, #0
 800271a:	e018      	b.n	800274e <HAL_DMA_Init+0x452>
 800271c:	fe10803f 	.word	0xfe10803f
 8002720:	5c001000 	.word	0x5c001000
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494
 8002748:	fffe000f 	.word	0xfffe000f
 800274c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800275c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800276c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800277c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b6e      	ldr	r3, [pc, #440]	; (800294c <HAL_DMA_Init+0x650>)
 8002794:	4413      	add	r3, r2
 8002796:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_DMA_Init+0x654>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f002 f9a7 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 80027aa:	4603      	mov	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e008      	b.n	80027d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0b7      	b.n	8002942 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_DMA_Init+0x658>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d072      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_DMA_Init+0x65c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d06d      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	; (800295c <HAL_DMA_Init+0x660>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d068      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_DMA_Init+0x664>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d063      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_DMA_Init+0x668>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_DMA_Init+0x66c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d059      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_DMA_Init+0x670>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d054      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_DMA_Init+0x674>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04f      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_DMA_Init+0x678>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_DMA_Init+0x67c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_DMA_Init+0x680>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_DMA_Init+0x684>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_DMA_Init+0x688>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_DMA_Init+0x68c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_DMA_Init+0x690>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a48      	ldr	r2, [pc, #288]	; (8002990 <HAL_DMA_Init+0x694>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a47      	ldr	r2, [pc, #284]	; (8002994 <HAL_DMA_Init+0x698>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_DMA_Init+0x69c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a44      	ldr	r2, [pc, #272]	; (800299c <HAL_DMA_Init+0x6a0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a42      	ldr	r2, [pc, #264]	; (80029a0 <HAL_DMA_Init+0x6a4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_DMA_Init+0x6a8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_DMA_Init+0x6ac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_DMA_Init+0x6b0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_DMA_Init+0x6b4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Init+0x5ca>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_Init+0x5cc>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f002 fa41 	bl	8004d54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d102      	bne.n	80028e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_DMA_Init+0x624>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d80c      	bhi.n	8002920 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f002 fabe 	bl	8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	a7fdabf8 	.word	0xa7fdabf8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	58025408 	.word	0x58025408
 8002998:	5802541c 	.word	0x5802541c
 800299c:	58025430 	.word	0x58025430
 80029a0:	58025444 	.word	0x58025444
 80029a4:	58025458 	.word	0x58025458
 80029a8:	5802546c 	.word	0x5802546c
 80029ac:	58025480 	.word	0x58025480
 80029b0:	58025494 	.word	0x58025494

080029b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e226      	b.n	8002e1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_DMA_Start_IT+0x2a>
 80029da:	2302      	movs	r3, #2
 80029dc:	e21f      	b.n	8002e1e <HAL_DMA_Start_IT+0x46a>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	f040 820a 	bne.w	8002e08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a68      	ldr	r2, [pc, #416]	; (8002ba8 <HAL_DMA_Start_IT+0x1f4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04a      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a66      	ldr	r2, [pc, #408]	; (8002bac <HAL_DMA_Start_IT+0x1f8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d045      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a65      	ldr	r2, [pc, #404]	; (8002bb0 <HAL_DMA_Start_IT+0x1fc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a63      	ldr	r2, [pc, #396]	; (8002bb4 <HAL_DMA_Start_IT+0x200>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03b      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <HAL_DMA_Start_IT+0x204>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a60      	ldr	r2, [pc, #384]	; (8002bbc <HAL_DMA_Start_IT+0x208>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5f      	ldr	r2, [pc, #380]	; (8002bc0 <HAL_DMA_Start_IT+0x20c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02c      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_DMA_Start_IT+0x210>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5c      	ldr	r2, [pc, #368]	; (8002bc8 <HAL_DMA_Start_IT+0x214>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <HAL_DMA_Start_IT+0x218>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a59      	ldr	r2, [pc, #356]	; (8002bd0 <HAL_DMA_Start_IT+0x21c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_DMA_Start_IT+0x220>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_DMA_Start_IT+0x224>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_DMA_Start_IT+0x228>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a53      	ldr	r2, [pc, #332]	; (8002be0 <HAL_DMA_Start_IT+0x22c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xee>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <HAL_DMA_Start_IT+0x230>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d108      	bne.n	8002ab4 <HAL_DMA_Start_IT+0x100>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e007      	b.n	8002ac4 <HAL_DMA_Start_IT+0x110>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f001 fe68 	bl	80047a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a34      	ldr	r2, [pc, #208]	; (8002ba8 <HAL_DMA_Start_IT+0x1f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <HAL_DMA_Start_IT+0x1f8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_DMA_Start_IT+0x1fc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <HAL_DMA_Start_IT+0x200>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03b      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Start_IT+0x204>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d036      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_DMA_Start_IT+0x208>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_DMA_Start_IT+0x20c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02c      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_DMA_Start_IT+0x210>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <HAL_DMA_Start_IT+0x214>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_DMA_Start_IT+0x218>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01d      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <HAL_DMA_Start_IT+0x21c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <HAL_DMA_Start_IT+0x220>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_DMA_Start_IT+0x224>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_DMA_Start_IT+0x228>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_DMA_Start_IT+0x22c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Start_IT+0x1bc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <HAL_DMA_Start_IT+0x230>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Start_IT+0x1c0>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_Start_IT+0x1c2>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 021e 	bic.w	r2, r3, #30
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0216 	orr.w	r2, r2, #22
 8002b8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03e      	beq.n	8002c14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0208 	orr.w	r2, r2, #8
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e035      	b.n	8002c14 <HAL_DMA_Start_IT+0x260>
 8002ba8:	40020010 	.word	0x40020010
 8002bac:	40020028 	.word	0x40020028
 8002bb0:	40020040 	.word	0x40020040
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	40020070 	.word	0x40020070
 8002bbc:	40020088 	.word	0x40020088
 8002bc0:	400200a0 	.word	0x400200a0
 8002bc4:	400200b8 	.word	0x400200b8
 8002bc8:	40020410 	.word	0x40020410
 8002bcc:	40020428 	.word	0x40020428
 8002bd0:	40020440 	.word	0x40020440
 8002bd4:	40020458 	.word	0x40020458
 8002bd8:	40020470 	.word	0x40020470
 8002bdc:	40020488 	.word	0x40020488
 8002be0:	400204a0 	.word	0x400204a0
 8002be4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 020e 	bic.w	r2, r3, #14
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 020a 	orr.w	r2, r2, #10
 8002bfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0204 	orr.w	r2, r2, #4
 8002c12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_DMA_Start_IT+0x474>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d072      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a82      	ldr	r2, [pc, #520]	; (8002e2c <HAL_DMA_Start_IT+0x478>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d06d      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_DMA_Start_IT+0x47c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d068      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7f      	ldr	r2, [pc, #508]	; (8002e34 <HAL_DMA_Start_IT+0x480>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d063      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7d      	ldr	r2, [pc, #500]	; (8002e38 <HAL_DMA_Start_IT+0x484>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d05e      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7c      	ldr	r2, [pc, #496]	; (8002e3c <HAL_DMA_Start_IT+0x488>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d059      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7a      	ldr	r2, [pc, #488]	; (8002e40 <HAL_DMA_Start_IT+0x48c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d054      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <HAL_DMA_Start_IT+0x490>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d04f      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a77      	ldr	r2, [pc, #476]	; (8002e48 <HAL_DMA_Start_IT+0x494>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04a      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <HAL_DMA_Start_IT+0x498>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d045      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a74      	ldr	r2, [pc, #464]	; (8002e50 <HAL_DMA_Start_IT+0x49c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d040      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a73      	ldr	r2, [pc, #460]	; (8002e54 <HAL_DMA_Start_IT+0x4a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d03b      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a71      	ldr	r2, [pc, #452]	; (8002e58 <HAL_DMA_Start_IT+0x4a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d036      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a70      	ldr	r2, [pc, #448]	; (8002e5c <HAL_DMA_Start_IT+0x4a8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d031      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	; (8002e60 <HAL_DMA_Start_IT+0x4ac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02c      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6d      	ldr	r2, [pc, #436]	; (8002e64 <HAL_DMA_Start_IT+0x4b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d027      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	; (8002e68 <HAL_DMA_Start_IT+0x4b4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d022      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_DMA_Start_IT+0x4b8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d01d      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_DMA_Start_IT+0x4bc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d018      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a67      	ldr	r2, [pc, #412]	; (8002e74 <HAL_DMA_Start_IT+0x4c0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_DMA_Start_IT+0x4c4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00e      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a64      	ldr	r2, [pc, #400]	; (8002e7c <HAL_DMA_Start_IT+0x4c8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <HAL_DMA_Start_IT+0x4cc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_DMA_Start_IT+0x350>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_DMA_Start_IT+0x4d0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_DMA_Start_IT+0x354>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_Start_IT+0x356>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01a      	beq.n	8002d44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_DMA_Start_IT+0x474>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04a      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <HAL_DMA_Start_IT+0x478>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d045      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_DMA_Start_IT+0x47c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d040      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_DMA_Start_IT+0x480>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d03b      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <HAL_DMA_Start_IT+0x484>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d036      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a30      	ldr	r2, [pc, #192]	; (8002e3c <HAL_DMA_Start_IT+0x488>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d031      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_DMA_Start_IT+0x48c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02c      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_DMA_Start_IT+0x490>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d027      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <HAL_DMA_Start_IT+0x494>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <HAL_DMA_Start_IT+0x498>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_DMA_Start_IT+0x49c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_DMA_Start_IT+0x4a0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_DMA_Start_IT+0x4a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_DMA_Start_IT+0x4a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_DMA_Start_IT+0x4ac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_DMA_Start_IT+0x430>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <HAL_DMA_Start_IT+0x4b0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d108      	bne.n	8002df6 <HAL_DMA_Start_IT+0x442>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e012      	b.n	8002e1c <HAL_DMA_Start_IT+0x468>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e009      	b.n	8002e1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494

08002e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7fe fda6 	bl	80019e0 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e2dc      	b.n	800345a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e2cd      	b.n	800345a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_DMA_Abort+0x214>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04a      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a74      	ldr	r2, [pc, #464]	; (80030a0 <HAL_DMA_Abort+0x218>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d045      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a73      	ldr	r2, [pc, #460]	; (80030a4 <HAL_DMA_Abort+0x21c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a71      	ldr	r2, [pc, #452]	; (80030a8 <HAL_DMA_Abort+0x220>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d03b      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a70      	ldr	r2, [pc, #448]	; (80030ac <HAL_DMA_Abort+0x224>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_DMA_Abort+0x228>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <HAL_DMA_Abort+0x22c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d02c      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6b      	ldr	r2, [pc, #428]	; (80030b8 <HAL_DMA_Abort+0x230>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d027      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_DMA_Abort+0x234>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <HAL_DMA_Abort+0x238>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_DMA_Abort+0x23c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_DMA_Abort+0x240>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a64      	ldr	r2, [pc, #400]	; (80030cc <HAL_DMA_Abort+0x244>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a62      	ldr	r2, [pc, #392]	; (80030d0 <HAL_DMA_Abort+0x248>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a61      	ldr	r2, [pc, #388]	; (80030d4 <HAL_DMA_Abort+0x24c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_DMA_Abort+0xd6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5f      	ldr	r2, [pc, #380]	; (80030d8 <HAL_DMA_Abort+0x250>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_DMA_Abort+0xda>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_Abort+0xdc>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 021e 	bic.w	r2, r2, #30
 8002f76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e00a      	b.n	8002fa6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 020e 	bic.w	r2, r2, #14
 8002f9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_DMA_Abort+0x214>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d072      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <HAL_DMA_Abort+0x218>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d06d      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <HAL_DMA_Abort+0x21c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d068      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_DMA_Abort+0x220>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d063      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_DMA_Abort+0x224>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <HAL_DMA_Abort+0x228>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d059      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <HAL_DMA_Abort+0x22c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d054      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <HAL_DMA_Abort+0x230>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04f      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_DMA_Abort+0x234>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <HAL_DMA_Abort+0x238>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_DMA_Abort+0x23c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_DMA_Abort+0x240>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_DMA_Abort+0x244>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_DMA_Abort+0x248>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_DMA_Abort+0x24c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <HAL_DMA_Abort+0x250>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_DMA_Abort+0x254>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_DMA_Abort+0x258>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_DMA_Abort+0x25c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_DMA_Abort+0x260>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_DMA_Abort+0x264>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_DMA_Abort+0x268>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_DMA_Abort+0x26c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_DMA_Abort+0x270>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d132      	bne.n	80030fc <HAL_DMA_Abort+0x274>
 8003096:	2301      	movs	r3, #1
 8003098:	e031      	b.n	80030fe <HAL_DMA_Abort+0x276>
 800309a:	bf00      	nop
 800309c:	40020010 	.word	0x40020010
 80030a0:	40020028 	.word	0x40020028
 80030a4:	40020040 	.word	0x40020040
 80030a8:	40020058 	.word	0x40020058
 80030ac:	40020070 	.word	0x40020070
 80030b0:	40020088 	.word	0x40020088
 80030b4:	400200a0 	.word	0x400200a0
 80030b8:	400200b8 	.word	0x400200b8
 80030bc:	40020410 	.word	0x40020410
 80030c0:	40020428 	.word	0x40020428
 80030c4:	40020440 	.word	0x40020440
 80030c8:	40020458 	.word	0x40020458
 80030cc:	40020470 	.word	0x40020470
 80030d0:	40020488 	.word	0x40020488
 80030d4:	400204a0 	.word	0x400204a0
 80030d8:	400204b8 	.word	0x400204b8
 80030dc:	58025408 	.word	0x58025408
 80030e0:	5802541c 	.word	0x5802541c
 80030e4:	58025430 	.word	0x58025430
 80030e8:	58025444 	.word	0x58025444
 80030ec:	58025458 	.word	0x58025458
 80030f0:	5802546c 	.word	0x5802546c
 80030f4:	58025480 	.word	0x58025480
 80030f8:	58025494 	.word	0x58025494
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	; (80032cc <HAL_DMA_Abort+0x444>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_DMA_Abort+0x448>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6a      	ldr	r2, [pc, #424]	; (80032d4 <HAL_DMA_Abort+0x44c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_DMA_Abort+0x450>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a67      	ldr	r2, [pc, #412]	; (80032dc <HAL_DMA_Abort+0x454>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_DMA_Abort+0x458>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	; (80032e4 <HAL_DMA_Abort+0x45c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a62      	ldr	r2, [pc, #392]	; (80032e8 <HAL_DMA_Abort+0x460>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_DMA_Abort+0x464>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_DMA_Abort+0x468>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_DMA_Abort+0x46c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_DMA_Abort+0x470>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_DMA_Abort+0x474>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_DMA_Abort+0x478>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_DMA_Abort+0x47c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort+0x32a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_DMA_Abort+0x480>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <HAL_DMA_Abort+0x33c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_DMA_Abort+0x34c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031d4:	e013      	b.n	80031fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d6:	f7fe fc03 	bl	80019e0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d90c      	bls.n	80031fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2203      	movs	r2, #3
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e12d      	b.n	800345a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e5      	bne.n	80031d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_DMA_Abort+0x444>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04a      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_DMA_Abort+0x448>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <HAL_DMA_Abort+0x44c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d040      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <HAL_DMA_Abort+0x450>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d03b      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_DMA_Abort+0x454>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d036      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a27      	ldr	r2, [pc, #156]	; (80032e0 <HAL_DMA_Abort+0x458>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_DMA_Abort+0x45c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_DMA_Abort+0x460>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_DMA_Abort+0x464>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <HAL_DMA_Abort+0x468>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_DMA_Abort+0x46c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_DMA_Abort+0x470>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <HAL_DMA_Abort+0x474>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_DMA_Abort+0x478>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_DMA_Abort+0x47c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_Abort+0x422>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_DMA_Abort+0x480>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_DMA_Abort+0x426>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_DMA_Abort+0x428>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02b      	beq.n	800330c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	e02a      	b.n	8003322 <HAL_DMA_Abort+0x49a>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2201      	movs	r2, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_DMA_Abort+0x5dc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d072      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_DMA_Abort+0x5e0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d06d      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4c      	ldr	r2, [pc, #304]	; (800346c <HAL_DMA_Abort+0x5e4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d068      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <HAL_DMA_Abort+0x5e8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d063      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a49      	ldr	r2, [pc, #292]	; (8003474 <HAL_DMA_Abort+0x5ec>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d05e      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a47      	ldr	r2, [pc, #284]	; (8003478 <HAL_DMA_Abort+0x5f0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d059      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_DMA_Abort+0x5f4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d054      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a44      	ldr	r2, [pc, #272]	; (8003480 <HAL_DMA_Abort+0x5f8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04f      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_DMA_Abort+0x5fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a41      	ldr	r2, [pc, #260]	; (8003488 <HAL_DMA_Abort+0x600>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <HAL_DMA_Abort+0x604>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3e      	ldr	r2, [pc, #248]	; (8003490 <HAL_DMA_Abort+0x608>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <HAL_DMA_Abort+0x60c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <HAL_DMA_Abort+0x610>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	; (800349c <HAL_DMA_Abort+0x614>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a38      	ldr	r2, [pc, #224]	; (80034a0 <HAL_DMA_Abort+0x618>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <HAL_DMA_Abort+0x61c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_DMA_Abort+0x620>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_DMA_Abort+0x624>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a32      	ldr	r2, [pc, #200]	; (80034b0 <HAL_DMA_Abort+0x628>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_DMA_Abort+0x62c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <HAL_DMA_Abort+0x630>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <HAL_DMA_Abort+0x634>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <HAL_DMA_Abort+0x638>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Abort+0x58e>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_Abort+0x590>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003424:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003446:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	58025408 	.word	0x58025408
 80034a8:	5802541c 	.word	0x5802541c
 80034ac:	58025430 	.word	0x58025430
 80034b0:	58025444 	.word	0x58025444
 80034b4:	58025458 	.word	0x58025458
 80034b8:	5802546c 	.word	0x5802546c
 80034bc:	58025480 	.word	0x58025480
 80034c0:	58025494 	.word	0x58025494

080034c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e205      	b.n	80038e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e1fa      	b.n	80038e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a8c      	ldr	r2, [pc, #560]	; (8003724 <HAL_DMA_Abort_IT+0x260>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d04a      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a8b      	ldr	r2, [pc, #556]	; (8003728 <HAL_DMA_Abort_IT+0x264>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d045      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a89      	ldr	r2, [pc, #548]	; (800372c <HAL_DMA_Abort_IT+0x268>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d040      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a88      	ldr	r2, [pc, #544]	; (8003730 <HAL_DMA_Abort_IT+0x26c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d03b      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a86      	ldr	r2, [pc, #536]	; (8003734 <HAL_DMA_Abort_IT+0x270>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d036      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a85      	ldr	r2, [pc, #532]	; (8003738 <HAL_DMA_Abort_IT+0x274>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d031      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_DMA_Abort_IT+0x278>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d02c      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a82      	ldr	r2, [pc, #520]	; (8003740 <HAL_DMA_Abort_IT+0x27c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d027      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a80      	ldr	r2, [pc, #512]	; (8003744 <HAL_DMA_Abort_IT+0x280>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7f      	ldr	r2, [pc, #508]	; (8003748 <HAL_DMA_Abort_IT+0x284>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01d      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7d      	ldr	r2, [pc, #500]	; (800374c <HAL_DMA_Abort_IT+0x288>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_DMA_Abort_IT+0x28c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_DMA_Abort_IT+0x290>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a79      	ldr	r2, [pc, #484]	; (8003758 <HAL_DMA_Abort_IT+0x294>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a77      	ldr	r2, [pc, #476]	; (800375c <HAL_DMA_Abort_IT+0x298>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_DMA_Abort_IT+0xc8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a76      	ldr	r2, [pc, #472]	; (8003760 <HAL_DMA_Abort_IT+0x29c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Abort_IT+0xcc>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_DMA_Abort_IT+0xce>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d065      	beq.n	8003662 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a60      	ldr	r2, [pc, #384]	; (8003724 <HAL_DMA_Abort_IT+0x260>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5e      	ldr	r2, [pc, #376]	; (8003728 <HAL_DMA_Abort_IT+0x264>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5d      	ldr	r2, [pc, #372]	; (800372c <HAL_DMA_Abort_IT+0x268>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_DMA_Abort_IT+0x26c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <HAL_DMA_Abort_IT+0x270>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_DMA_Abort_IT+0x274>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a57      	ldr	r2, [pc, #348]	; (800373c <HAL_DMA_Abort_IT+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_DMA_Abort_IT+0x27c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a54      	ldr	r2, [pc, #336]	; (8003744 <HAL_DMA_Abort_IT+0x280>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_DMA_Abort_IT+0x284>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a51      	ldr	r2, [pc, #324]	; (800374c <HAL_DMA_Abort_IT+0x288>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_DMA_Abort_IT+0x28c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_DMA_Abort_IT+0x290>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <HAL_DMA_Abort_IT+0x294>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a4b      	ldr	r2, [pc, #300]	; (800375c <HAL_DMA_Abort_IT+0x298>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_Abort_IT+0x17a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a49      	ldr	r2, [pc, #292]	; (8003760 <HAL_DMA_Abort_IT+0x29c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <HAL_DMA_Abort_IT+0x18c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e147      	b.n	80038e0 <HAL_DMA_Abort_IT+0x41c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e13e      	b.n	80038e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 020e 	bic.w	r2, r2, #14
 8003670:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <HAL_DMA_Abort_IT+0x260>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04a      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a29      	ldr	r2, [pc, #164]	; (8003728 <HAL_DMA_Abort_IT+0x264>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	; (800372c <HAL_DMA_Abort_IT+0x268>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d040      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	; (8003730 <HAL_DMA_Abort_IT+0x26c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03b      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a25      	ldr	r2, [pc, #148]	; (8003734 <HAL_DMA_Abort_IT+0x270>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a23      	ldr	r2, [pc, #140]	; (8003738 <HAL_DMA_Abort_IT+0x274>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a22      	ldr	r2, [pc, #136]	; (800373c <HAL_DMA_Abort_IT+0x278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02c      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <HAL_DMA_Abort_IT+0x27c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_DMA_Abort_IT+0x280>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_DMA_Abort_IT+0x284>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_DMA_Abort_IT+0x288>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_DMA_Abort_IT+0x28c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_DMA_Abort_IT+0x290>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_DMA_Abort_IT+0x294>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_DMA_Abort_IT+0x298>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_Abort_IT+0x24e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_DMA_Abort_IT+0x29c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d128      	bne.n	8003764 <HAL_DMA_Abort_IT+0x2a0>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e027      	b.n	8003774 <HAL_DMA_Abort_IT+0x2b0>
 8003724:	40020010 	.word	0x40020010
 8003728:	40020028 	.word	0x40020028
 800372c:	40020040 	.word	0x40020040
 8003730:	40020058 	.word	0x40020058
 8003734:	40020070 	.word	0x40020070
 8003738:	40020088 	.word	0x40020088
 800373c:	400200a0 	.word	0x400200a0
 8003740:	400200b8 	.word	0x400200b8
 8003744:	40020410 	.word	0x40020410
 8003748:	40020428 	.word	0x40020428
 800374c:	40020440 	.word	0x40020440
 8003750:	40020458 	.word	0x40020458
 8003754:	40020470 	.word	0x40020470
 8003758:	40020488 	.word	0x40020488
 800375c:	400204a0 	.word	0x400204a0
 8003760:	400204b8 	.word	0x400204b8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5c      	ldr	r2, [pc, #368]	; (80038ec <HAL_DMA_Abort_IT+0x428>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d072      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_DMA_Abort_IT+0x42c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d06d      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a59      	ldr	r2, [pc, #356]	; (80038f4 <HAL_DMA_Abort_IT+0x430>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d068      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_DMA_Abort_IT+0x434>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d063      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a56      	ldr	r2, [pc, #344]	; (80038fc <HAL_DMA_Abort_IT+0x438>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d05e      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a55      	ldr	r2, [pc, #340]	; (8003900 <HAL_DMA_Abort_IT+0x43c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d059      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a53      	ldr	r2, [pc, #332]	; (8003904 <HAL_DMA_Abort_IT+0x440>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d054      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_DMA_Abort_IT+0x444>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04f      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a50      	ldr	r2, [pc, #320]	; (800390c <HAL_DMA_Abort_IT+0x448>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a4f      	ldr	r2, [pc, #316]	; (8003910 <HAL_DMA_Abort_IT+0x44c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a4d      	ldr	r2, [pc, #308]	; (8003914 <HAL_DMA_Abort_IT+0x450>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4c      	ldr	r2, [pc, #304]	; (8003918 <HAL_DMA_Abort_IT+0x454>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	; (800391c <HAL_DMA_Abort_IT+0x458>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_DMA_Abort_IT+0x45c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a47      	ldr	r2, [pc, #284]	; (8003924 <HAL_DMA_Abort_IT+0x460>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a46      	ldr	r2, [pc, #280]	; (8003928 <HAL_DMA_Abort_IT+0x464>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a44      	ldr	r2, [pc, #272]	; (800392c <HAL_DMA_Abort_IT+0x468>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a43      	ldr	r2, [pc, #268]	; (8003930 <HAL_DMA_Abort_IT+0x46c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_DMA_Abort_IT+0x470>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a40      	ldr	r2, [pc, #256]	; (8003938 <HAL_DMA_Abort_IT+0x474>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3e      	ldr	r2, [pc, #248]	; (800393c <HAL_DMA_Abort_IT+0x478>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <HAL_DMA_Abort_IT+0x47c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <HAL_DMA_Abort_IT+0x480>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_Abort_IT+0x3a0>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_DMA_Abort_IT+0x484>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_DMA_Abort_IT+0x3a4>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_DMA_Abort_IT+0x3a6>
 8003868:	2300      	movs	r3, #0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d028      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800389c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020028 	.word	0x40020028
 80038f4:	40020040 	.word	0x40020040
 80038f8:	40020058 	.word	0x40020058
 80038fc:	40020070 	.word	0x40020070
 8003900:	40020088 	.word	0x40020088
 8003904:	400200a0 	.word	0x400200a0
 8003908:	400200b8 	.word	0x400200b8
 800390c:	40020410 	.word	0x40020410
 8003910:	40020428 	.word	0x40020428
 8003914:	40020440 	.word	0x40020440
 8003918:	40020458 	.word	0x40020458
 800391c:	40020470 	.word	0x40020470
 8003920:	40020488 	.word	0x40020488
 8003924:	400204a0 	.word	0x400204a0
 8003928:	400204b8 	.word	0x400204b8
 800392c:	58025408 	.word	0x58025408
 8003930:	5802541c 	.word	0x5802541c
 8003934:	58025430 	.word	0x58025430
 8003938:	58025444 	.word	0x58025444
 800393c:	58025458 	.word	0x58025458
 8003940:	5802546c 	.word	0x5802546c
 8003944:	58025480 	.word	0x58025480
 8003948:	58025494 	.word	0x58025494

0800394c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_DMA_IRQHandler+0x1ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a67      	ldr	r2, [pc, #412]	; (8003afc <HAL_DMA_IRQHandler+0x1b0>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5f      	ldr	r2, [pc, #380]	; (8003b00 <HAL_DMA_IRQHandler+0x1b4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_DMA_IRQHandler+0x1b8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5c      	ldr	r2, [pc, #368]	; (8003b08 <HAL_DMA_IRQHandler+0x1bc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <HAL_DMA_IRQHandler+0x1c0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a59      	ldr	r2, [pc, #356]	; (8003b10 <HAL_DMA_IRQHandler+0x1c4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <HAL_DMA_IRQHandler+0x1c8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a56      	ldr	r2, [pc, #344]	; (8003b18 <HAL_DMA_IRQHandler+0x1cc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a54      	ldr	r2, [pc, #336]	; (8003b1c <HAL_DMA_IRQHandler+0x1d0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a53      	ldr	r2, [pc, #332]	; (8003b20 <HAL_DMA_IRQHandler+0x1d4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a51      	ldr	r2, [pc, #324]	; (8003b24 <HAL_DMA_IRQHandler+0x1d8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a50      	ldr	r2, [pc, #320]	; (8003b28 <HAL_DMA_IRQHandler+0x1dc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_DMA_IRQHandler+0x1e0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_DMA_IRQHandler+0x1e4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4b      	ldr	r2, [pc, #300]	; (8003b34 <HAL_DMA_IRQHandler+0x1e8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <HAL_DMA_IRQHandler+0x1ec>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xd2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a48      	ldr	r2, [pc, #288]	; (8003b3c <HAL_DMA_IRQHandler+0x1f0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA_IRQHandler+0xd6>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_DMA_IRQHandler+0xd8>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 842b 	beq.w	8004280 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2208      	movs	r2, #8
 8003a34:	409a      	lsls	r2, r3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80a2 	beq.w	8003b84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2e      	ldr	r2, [pc, #184]	; (8003b00 <HAL_DMA_IRQHandler+0x1b4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <HAL_DMA_IRQHandler+0x1b8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <HAL_DMA_IRQHandler+0x1bc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2a      	ldr	r2, [pc, #168]	; (8003b0c <HAL_DMA_IRQHandler+0x1c0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <HAL_DMA_IRQHandler+0x1c4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_DMA_IRQHandler+0x1c8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <HAL_DMA_IRQHandler+0x1cc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_DMA_IRQHandler+0x1d0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <HAL_DMA_IRQHandler+0x1d4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <HAL_DMA_IRQHandler+0x1d8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <HAL_DMA_IRQHandler+0x1dc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_DMA_IRQHandler+0x1e0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_DMA_IRQHandler+0x1e4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <HAL_DMA_IRQHandler+0x1e8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_DMA_IRQHandler+0x1ec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x194>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_DMA_IRQHandler+0x1f0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d12f      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x1f4>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	e02e      	b.n	8003b54 <HAL_DMA_IRQHandler+0x208>
 8003af6:	bf00      	nop
 8003af8:	24000000 	.word	0x24000000
 8003afc:	1b4e81b5 	.word	0x1b4e81b5
 8003b00:	40020010 	.word	0x40020010
 8003b04:	40020028 	.word	0x40020028
 8003b08:	40020040 	.word	0x40020040
 8003b0c:	40020058 	.word	0x40020058
 8003b10:	40020070 	.word	0x40020070
 8003b14:	40020088 	.word	0x40020088
 8003b18:	400200a0 	.word	0x400200a0
 8003b1c:	400200b8 	.word	0x400200b8
 8003b20:	40020410 	.word	0x40020410
 8003b24:	40020428 	.word	0x40020428
 8003b28:	40020440 	.word	0x40020440
 8003b2c:	40020458 	.word	0x40020458
 8003b30:	40020470 	.word	0x40020470
 8003b34:	40020488 	.word	0x40020488
 8003b38:	400204a0 	.word	0x400204a0
 8003b3c:	400204b8 	.word	0x400204b8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bf14      	ite	ne
 8003b4e:	2301      	movne	r3, #1
 8003b50:	2300      	moveq	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2208      	movs	r2, #8
 8003b72:	409a      	lsls	r2, r3
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d06e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a69      	ldr	r2, [pc, #420]	; (8003d44 <HAL_DMA_IRQHandler+0x3f8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a67      	ldr	r2, [pc, #412]	; (8003d48 <HAL_DMA_IRQHandler+0x3fc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a66      	ldr	r2, [pc, #408]	; (8003d4c <HAL_DMA_IRQHandler+0x400>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a64      	ldr	r2, [pc, #400]	; (8003d50 <HAL_DMA_IRQHandler+0x404>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a63      	ldr	r2, [pc, #396]	; (8003d54 <HAL_DMA_IRQHandler+0x408>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a61      	ldr	r2, [pc, #388]	; (8003d58 <HAL_DMA_IRQHandler+0x40c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a60      	ldr	r2, [pc, #384]	; (8003d5c <HAL_DMA_IRQHandler+0x410>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5e      	ldr	r2, [pc, #376]	; (8003d60 <HAL_DMA_IRQHandler+0x414>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_DMA_IRQHandler+0x418>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5b      	ldr	r2, [pc, #364]	; (8003d68 <HAL_DMA_IRQHandler+0x41c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_DMA_IRQHandler+0x420>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_DMA_IRQHandler+0x424>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a57      	ldr	r2, [pc, #348]	; (8003d74 <HAL_DMA_IRQHandler+0x428>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a55      	ldr	r2, [pc, #340]	; (8003d78 <HAL_DMA_IRQHandler+0x42c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a54      	ldr	r2, [pc, #336]	; (8003d7c <HAL_DMA_IRQHandler+0x430>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2ee>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_DMA_IRQHandler+0x434>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10a      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x304>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e003      	b.n	8003c58 <HAL_DMA_IRQHandler+0x30c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f043 0202 	orr.w	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2204      	movs	r2, #4
 8003c82:	409a      	lsls	r2, r3
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 808f 	beq.w	8003dac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <HAL_DMA_IRQHandler+0x3f8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04a      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <HAL_DMA_IRQHandler+0x3fc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d045      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_DMA_IRQHandler+0x400>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d040      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <HAL_DMA_IRQHandler+0x404>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d03b      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_DMA_IRQHandler+0x408>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d036      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <HAL_DMA_IRQHandler+0x40c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d031      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <HAL_DMA_IRQHandler+0x410>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d02c      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_DMA_IRQHandler+0x414>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d027      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_DMA_IRQHandler+0x418>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_DMA_IRQHandler+0x41c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_DMA_IRQHandler+0x420>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_DMA_IRQHandler+0x424>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <HAL_DMA_IRQHandler+0x428>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_DMA_IRQHandler+0x42c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_DMA_IRQHandler+0x430>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3e2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_DMA_IRQHandler+0x434>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x438>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e023      	b.n	8003d8c <HAL_DMA_IRQHandler+0x440>
 8003d44:	40020010 	.word	0x40020010
 8003d48:	40020028 	.word	0x40020028
 8003d4c:	40020040 	.word	0x40020040
 8003d50:	40020058 	.word	0x40020058
 8003d54:	40020070 	.word	0x40020070
 8003d58:	40020088 	.word	0x40020088
 8003d5c:	400200a0 	.word	0x400200a0
 8003d60:	400200b8 	.word	0x400200b8
 8003d64:	40020410 	.word	0x40020410
 8003d68:	40020428 	.word	0x40020428
 8003d6c:	40020440 	.word	0x40020440
 8003d70:	40020458 	.word	0x40020458
 8003d74:	40020470 	.word	0x40020470
 8003d78:	40020488 	.word	0x40020488
 8003d7c:	400204a0 	.word	0x400204a0
 8003d80:	400204b8 	.word	0x400204b8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2204      	movs	r2, #4
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0204 	orr.w	r2, r3, #4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2210      	movs	r2, #16
 8003db6:	409a      	lsls	r2, r3
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a6 	beq.w	8003f0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a85      	ldr	r2, [pc, #532]	; (8003fdc <HAL_DMA_IRQHandler+0x690>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a83      	ldr	r2, [pc, #524]	; (8003fe0 <HAL_DMA_IRQHandler+0x694>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a82      	ldr	r2, [pc, #520]	; (8003fe4 <HAL_DMA_IRQHandler+0x698>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a80      	ldr	r2, [pc, #512]	; (8003fe8 <HAL_DMA_IRQHandler+0x69c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7f      	ldr	r2, [pc, #508]	; (8003fec <HAL_DMA_IRQHandler+0x6a0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7d      	ldr	r2, [pc, #500]	; (8003ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a79      	ldr	r2, [pc, #484]	; (8003ffc <HAL_DMA_IRQHandler+0x6b0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a77      	ldr	r2, [pc, #476]	; (8004000 <HAL_DMA_IRQHandler+0x6b4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a76      	ldr	r2, [pc, #472]	; (8004004 <HAL_DMA_IRQHandler+0x6b8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a74      	ldr	r2, [pc, #464]	; (8004008 <HAL_DMA_IRQHandler+0x6bc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_DMA_IRQHandler+0x6c0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a71      	ldr	r2, [pc, #452]	; (8004010 <HAL_DMA_IRQHandler+0x6c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a70      	ldr	r2, [pc, #448]	; (8004014 <HAL_DMA_IRQHandler+0x6c8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x516>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6e      	ldr	r2, [pc, #440]	; (8004018 <HAL_DMA_IRQHandler+0x6cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10a      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x52c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e009      	b.n	8003e8c <HAL_DMA_IRQHandler+0x540>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03e      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2210      	movs	r2, #16
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d018      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d108      	bne.n	8003ece <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d024      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
 8003ecc:	e01f      	b.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01b      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e016      	b.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0208 	bic.w	r2, r2, #8
 8003efc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2220      	movs	r2, #32
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8110 	beq.w	8004144 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <HAL_DMA_IRQHandler+0x690>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d04a      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <HAL_DMA_IRQHandler+0x694>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d045      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <HAL_DMA_IRQHandler+0x698>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d040      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <HAL_DMA_IRQHandler+0x69c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d03b      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_DMA_IRQHandler+0x6a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d036      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <HAL_DMA_IRQHandler+0x6a4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d031      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_DMA_IRQHandler+0x6a8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02c      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <HAL_DMA_IRQHandler+0x6ac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d027      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a20      	ldr	r2, [pc, #128]	; (8003ffc <HAL_DMA_IRQHandler+0x6b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d022      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_DMA_IRQHandler+0x6b4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d01d      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <HAL_DMA_IRQHandler+0x6b8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <HAL_DMA_IRQHandler+0x6bc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1a      	ldr	r2, [pc, #104]	; (800400c <HAL_DMA_IRQHandler+0x6c0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a19      	ldr	r2, [pc, #100]	; (8004010 <HAL_DMA_IRQHandler+0x6c4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_DMA_IRQHandler+0x6c8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x678>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a16      	ldr	r2, [pc, #88]	; (8004018 <HAL_DMA_IRQHandler+0x6cc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d12b      	bne.n	800401c <HAL_DMA_IRQHandler+0x6d0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e02a      	b.n	8004030 <HAL_DMA_IRQHandler+0x6e4>
 8003fda:	bf00      	nop
 8003fdc:	40020010 	.word	0x40020010
 8003fe0:	40020028 	.word	0x40020028
 8003fe4:	40020040 	.word	0x40020040
 8003fe8:	40020058 	.word	0x40020058
 8003fec:	40020070 	.word	0x40020070
 8003ff0:	40020088 	.word	0x40020088
 8003ff4:	400200a0 	.word	0x400200a0
 8003ff8:	400200b8 	.word	0x400200b8
 8003ffc:	40020410 	.word	0x40020410
 8004000:	40020428 	.word	0x40020428
 8004004:	40020440 	.word	0x40020440
 8004008:	40020458 	.word	0x40020458
 800400c:	40020470 	.word	0x40020470
 8004010:	40020488 	.word	0x40020488
 8004014:	400204a0 	.word	0x400204a0
 8004018:	400204b8 	.word	0x400204b8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8087 	beq.w	8004144 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2220      	movs	r2, #32
 8004040:	409a      	lsls	r2, r3
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b04      	cmp	r3, #4
 8004050:	d139      	bne.n	80040c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0216 	bic.w	r2, r2, #22
 8004060:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004070:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_DMA_IRQHandler+0x736>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0208 	bic.w	r2, r2, #8
 8004090:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	223f      	movs	r2, #63	; 0x3f
 800409c:	409a      	lsls	r2, r3
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 834a 	beq.w	8004750 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
          }
          return;
 80040c4:	e344      	b.n	8004750 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02c      	beq.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
 80040f2:	e027      	b.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d023      	beq.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	e01e      	b.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0210 	bic.w	r2, r2, #16
 8004122:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8306 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8088 	beq.w	800426c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2204      	movs	r2, #4
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a7a      	ldr	r2, [pc, #488]	; (8004354 <HAL_DMA_IRQHandler+0xa08>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04a      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a79      	ldr	r2, [pc, #484]	; (8004358 <HAL_DMA_IRQHandler+0xa0c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d045      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a77      	ldr	r2, [pc, #476]	; (800435c <HAL_DMA_IRQHandler+0xa10>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d040      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a76      	ldr	r2, [pc, #472]	; (8004360 <HAL_DMA_IRQHandler+0xa14>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d03b      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a74      	ldr	r2, [pc, #464]	; (8004364 <HAL_DMA_IRQHandler+0xa18>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d036      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a73      	ldr	r2, [pc, #460]	; (8004368 <HAL_DMA_IRQHandler+0xa1c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d031      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a71      	ldr	r2, [pc, #452]	; (800436c <HAL_DMA_IRQHandler+0xa20>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a70      	ldr	r2, [pc, #448]	; (8004370 <HAL_DMA_IRQHandler+0xa24>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d027      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6e      	ldr	r2, [pc, #440]	; (8004374 <HAL_DMA_IRQHandler+0xa28>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6d      	ldr	r2, [pc, #436]	; (8004378 <HAL_DMA_IRQHandler+0xa2c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d01d      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6b      	ldr	r2, [pc, #428]	; (800437c <HAL_DMA_IRQHandler+0xa30>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6a      	ldr	r2, [pc, #424]	; (8004380 <HAL_DMA_IRQHandler+0xa34>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a68      	ldr	r2, [pc, #416]	; (8004384 <HAL_DMA_IRQHandler+0xa38>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a67      	ldr	r2, [pc, #412]	; (8004388 <HAL_DMA_IRQHandler+0xa3c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a65      	ldr	r2, [pc, #404]	; (800438c <HAL_DMA_IRQHandler+0xa40>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_DMA_IRQHandler+0x8b8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a64      	ldr	r2, [pc, #400]	; (8004390 <HAL_DMA_IRQHandler+0xa44>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <HAL_DMA_IRQHandler+0x8ca>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <HAL_DMA_IRQHandler+0x8da>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	429a      	cmp	r2, r3
 8004230:	d307      	bcc.n	8004242 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f2      	bne.n	8004226 <HAL_DMA_IRQHandler+0x8da>
 8004240:	e000      	b.n	8004244 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004242:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004262:	e003      	b.n	800426c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8272 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
 800427e:	e26c      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a43      	ldr	r2, [pc, #268]	; (8004394 <HAL_DMA_IRQHandler+0xa48>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d022      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a42      	ldr	r2, [pc, #264]	; (8004398 <HAL_DMA_IRQHandler+0xa4c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d01d      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a40      	ldr	r2, [pc, #256]	; (800439c <HAL_DMA_IRQHandler+0xa50>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <HAL_DMA_IRQHandler+0xa54>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3d      	ldr	r2, [pc, #244]	; (80043a4 <HAL_DMA_IRQHandler+0xa58>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <HAL_DMA_IRQHandler+0xa5c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <HAL_DMA_IRQHandler+0xa60>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x984>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <HAL_DMA_IRQHandler+0xa64>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x988>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_DMA_IRQHandler+0x98a>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 823f 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2204      	movs	r2, #4
 80042ee:	409a      	lsls	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80cd 	beq.w	8004494 <HAL_DMA_IRQHandler+0xb48>
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80c7 	beq.w	8004494 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2204      	movs	r2, #4
 8004310:	409a      	lsls	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d049      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8210 	beq.w	8004754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433c:	e20a      	b.n	8004754 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8206 	beq.w	8004754 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004350:	e200      	b.n	8004754 <HAL_DMA_IRQHandler+0xe08>
 8004352:	bf00      	nop
 8004354:	40020010 	.word	0x40020010
 8004358:	40020028 	.word	0x40020028
 800435c:	40020040 	.word	0x40020040
 8004360:	40020058 	.word	0x40020058
 8004364:	40020070 	.word	0x40020070
 8004368:	40020088 	.word	0x40020088
 800436c:	400200a0 	.word	0x400200a0
 8004370:	400200b8 	.word	0x400200b8
 8004374:	40020410 	.word	0x40020410
 8004378:	40020428 	.word	0x40020428
 800437c:	40020440 	.word	0x40020440
 8004380:	40020458 	.word	0x40020458
 8004384:	40020470 	.word	0x40020470
 8004388:	40020488 	.word	0x40020488
 800438c:	400204a0 	.word	0x400204a0
 8004390:	400204b8 	.word	0x400204b8
 8004394:	58025408 	.word	0x58025408
 8004398:	5802541c 	.word	0x5802541c
 800439c:	58025430 	.word	0x58025430
 80043a0:	58025444 	.word	0x58025444
 80043a4:	58025458 	.word	0x58025458
 80043a8:	5802546c 	.word	0x5802546c
 80043ac:	58025480 	.word	0x58025480
 80043b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d160      	bne.n	8004480 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a8c      	ldr	r2, [pc, #560]	; (80045f4 <HAL_DMA_IRQHandler+0xca8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d04a      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a8a      	ldr	r2, [pc, #552]	; (80045f8 <HAL_DMA_IRQHandler+0xcac>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d045      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a89      	ldr	r2, [pc, #548]	; (80045fc <HAL_DMA_IRQHandler+0xcb0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d040      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a87      	ldr	r2, [pc, #540]	; (8004600 <HAL_DMA_IRQHandler+0xcb4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d03b      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a86      	ldr	r2, [pc, #536]	; (8004604 <HAL_DMA_IRQHandler+0xcb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d036      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a84      	ldr	r2, [pc, #528]	; (8004608 <HAL_DMA_IRQHandler+0xcbc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d031      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a83      	ldr	r2, [pc, #524]	; (800460c <HAL_DMA_IRQHandler+0xcc0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d02c      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_DMA_IRQHandler+0xcc4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d027      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_DMA_IRQHandler+0xcc8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d022      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a7e      	ldr	r2, [pc, #504]	; (8004618 <HAL_DMA_IRQHandler+0xccc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01d      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a7d      	ldr	r2, [pc, #500]	; (800461c <HAL_DMA_IRQHandler+0xcd0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d018      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <HAL_DMA_IRQHandler+0xcd4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d013      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7a      	ldr	r2, [pc, #488]	; (8004624 <HAL_DMA_IRQHandler+0xcd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a78      	ldr	r2, [pc, #480]	; (8004628 <HAL_DMA_IRQHandler+0xcdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a77      	ldr	r2, [pc, #476]	; (800462c <HAL_DMA_IRQHandler+0xce0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_DMA_IRQHandler+0xb12>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a75      	ldr	r2, [pc, #468]	; (8004630 <HAL_DMA_IRQHandler+0xce4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <HAL_DMA_IRQHandler+0xb24>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0208 	bic.w	r2, r2, #8
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e007      	b.n	8004480 <HAL_DMA_IRQHandler+0xb34>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8165 	beq.w	8004754 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004492:	e15f      	b.n	8004754 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2202      	movs	r2, #2
 800449e:	409a      	lsls	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80c5 	beq.w	8004634 <HAL_DMA_IRQHandler+0xce8>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80bf 	beq.w	8004634 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2202      	movs	r2, #2
 80044c0:	409a      	lsls	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d018      	beq.n	8004502 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 813a 	beq.w	8004758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ec:	e134      	b.n	8004758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8130 	beq.w	8004758 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004500:	e12a      	b.n	8004758 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d168      	bne.n	80045de <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a38      	ldr	r2, [pc, #224]	; (80045f4 <HAL_DMA_IRQHandler+0xca8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d04a      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a37      	ldr	r2, [pc, #220]	; (80045f8 <HAL_DMA_IRQHandler+0xcac>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d045      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a35      	ldr	r2, [pc, #212]	; (80045fc <HAL_DMA_IRQHandler+0xcb0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d040      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a34      	ldr	r2, [pc, #208]	; (8004600 <HAL_DMA_IRQHandler+0xcb4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d03b      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a32      	ldr	r2, [pc, #200]	; (8004604 <HAL_DMA_IRQHandler+0xcb8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d036      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a31      	ldr	r2, [pc, #196]	; (8004608 <HAL_DMA_IRQHandler+0xcbc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d031      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <HAL_DMA_IRQHandler+0xcc0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02c      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_DMA_IRQHandler+0xcc4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d027      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <HAL_DMA_IRQHandler+0xcc8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d022      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_DMA_IRQHandler+0xccc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d01d      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <HAL_DMA_IRQHandler+0xcd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a28      	ldr	r2, [pc, #160]	; (8004620 <HAL_DMA_IRQHandler+0xcd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <HAL_DMA_IRQHandler+0xcd8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_DMA_IRQHandler+0xcdc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_DMA_IRQHandler+0xce0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_DMA_IRQHandler+0xc60>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_IRQHandler+0xce4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <HAL_DMA_IRQHandler+0xc72>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0214 	bic.w	r2, r2, #20
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e007      	b.n	80045ce <HAL_DMA_IRQHandler+0xc82>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 020a 	bic.w	r2, r2, #10
 80045cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80b8 	beq.w	8004758 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f0:	e0b2      	b.n	8004758 <HAL_DMA_IRQHandler+0xe0c>
 80045f2:	bf00      	nop
 80045f4:	40020010 	.word	0x40020010
 80045f8:	40020028 	.word	0x40020028
 80045fc:	40020040 	.word	0x40020040
 8004600:	40020058 	.word	0x40020058
 8004604:	40020070 	.word	0x40020070
 8004608:	40020088 	.word	0x40020088
 800460c:	400200a0 	.word	0x400200a0
 8004610:	400200b8 	.word	0x400200b8
 8004614:	40020410 	.word	0x40020410
 8004618:	40020428 	.word	0x40020428
 800461c:	40020440 	.word	0x40020440
 8004620:	40020458 	.word	0x40020458
 8004624:	40020470 	.word	0x40020470
 8004628:	40020488 	.word	0x40020488
 800462c:	400204a0 	.word	0x400204a0
 8004630:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2208      	movs	r2, #8
 800463e:	409a      	lsls	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8088 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8082 	beq.w	800475a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a41      	ldr	r2, [pc, #260]	; (8004760 <HAL_DMA_IRQHandler+0xe14>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d04a      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3f      	ldr	r2, [pc, #252]	; (8004764 <HAL_DMA_IRQHandler+0xe18>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d045      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3e      	ldr	r2, [pc, #248]	; (8004768 <HAL_DMA_IRQHandler+0xe1c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d040      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3c      	ldr	r2, [pc, #240]	; (800476c <HAL_DMA_IRQHandler+0xe20>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d03b      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3b      	ldr	r2, [pc, #236]	; (8004770 <HAL_DMA_IRQHandler+0xe24>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d036      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a39      	ldr	r2, [pc, #228]	; (8004774 <HAL_DMA_IRQHandler+0xe28>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d031      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a38      	ldr	r2, [pc, #224]	; (8004778 <HAL_DMA_IRQHandler+0xe2c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d02c      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a36      	ldr	r2, [pc, #216]	; (800477c <HAL_DMA_IRQHandler+0xe30>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d027      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a35      	ldr	r2, [pc, #212]	; (8004780 <HAL_DMA_IRQHandler+0xe34>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d022      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a33      	ldr	r2, [pc, #204]	; (8004784 <HAL_DMA_IRQHandler+0xe38>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a32      	ldr	r2, [pc, #200]	; (8004788 <HAL_DMA_IRQHandler+0xe3c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <HAL_DMA_IRQHandler+0xe40>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <HAL_DMA_IRQHandler+0xe44>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <HAL_DMA_IRQHandler+0xe48>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <HAL_DMA_IRQHandler+0xe4c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_DMA_IRQHandler+0xdaa>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <HAL_DMA_IRQHandler+0xe50>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d108      	bne.n	8004708 <HAL_DMA_IRQHandler+0xdbc>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 021c 	bic.w	r2, r2, #28
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e007      	b.n	8004718 <HAL_DMA_IRQHandler+0xdcc>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 020e 	bic.w	r2, r2, #14
 8004716:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
 800474e:	e004      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004758:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800475a:	3728      	adds	r7, #40	; 0x28
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40020010 	.word	0x40020010
 8004764:	40020028 	.word	0x40020028
 8004768:	40020040 	.word	0x40020040
 800476c:	40020058 	.word	0x40020058
 8004770:	40020070 	.word	0x40020070
 8004774:	40020088 	.word	0x40020088
 8004778:	400200a0 	.word	0x400200a0
 800477c:	400200b8 	.word	0x400200b8
 8004780:	40020410 	.word	0x40020410
 8004784:	40020428 	.word	0x40020428
 8004788:	40020440 	.word	0x40020440
 800478c:	40020458 	.word	0x40020458
 8004790:	40020470 	.word	0x40020470
 8004794:	40020488 	.word	0x40020488
 8004798:	400204a0 	.word	0x400204a0
 800479c:	400204b8 	.word	0x400204b8

080047a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a84      	ldr	r2, [pc, #528]	; (80049d0 <DMA_SetConfig+0x230>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d072      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a82      	ldr	r2, [pc, #520]	; (80049d4 <DMA_SetConfig+0x234>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d06d      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a81      	ldr	r2, [pc, #516]	; (80049d8 <DMA_SetConfig+0x238>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d068      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7f      	ldr	r2, [pc, #508]	; (80049dc <DMA_SetConfig+0x23c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d063      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7e      	ldr	r2, [pc, #504]	; (80049e0 <DMA_SetConfig+0x240>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d05e      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7c      	ldr	r2, [pc, #496]	; (80049e4 <DMA_SetConfig+0x244>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d059      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7b      	ldr	r2, [pc, #492]	; (80049e8 <DMA_SetConfig+0x248>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d054      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a79      	ldr	r2, [pc, #484]	; (80049ec <DMA_SetConfig+0x24c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d04f      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a78      	ldr	r2, [pc, #480]	; (80049f0 <DMA_SetConfig+0x250>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d04a      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a76      	ldr	r2, [pc, #472]	; (80049f4 <DMA_SetConfig+0x254>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d045      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <DMA_SetConfig+0x258>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d040      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a73      	ldr	r2, [pc, #460]	; (80049fc <DMA_SetConfig+0x25c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d03b      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	; (8004a00 <DMA_SetConfig+0x260>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d036      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <DMA_SetConfig+0x264>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d031      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <DMA_SetConfig+0x268>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d02c      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6d      	ldr	r2, [pc, #436]	; (8004a0c <DMA_SetConfig+0x26c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d027      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6c      	ldr	r2, [pc, #432]	; (8004a10 <DMA_SetConfig+0x270>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6a      	ldr	r2, [pc, #424]	; (8004a14 <DMA_SetConfig+0x274>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01d      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <DMA_SetConfig+0x278>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <DMA_SetConfig+0x27c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a66      	ldr	r2, [pc, #408]	; (8004a20 <DMA_SetConfig+0x280>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a64      	ldr	r2, [pc, #400]	; (8004a24 <DMA_SetConfig+0x284>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a63      	ldr	r2, [pc, #396]	; (8004a28 <DMA_SetConfig+0x288>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a61      	ldr	r2, [pc, #388]	; (8004a2c <DMA_SetConfig+0x28c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <DMA_SetConfig+0x10e>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <DMA_SetConfig+0x110>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <DMA_SetConfig+0x230>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d04a      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3d      	ldr	r2, [pc, #244]	; (80049d4 <DMA_SetConfig+0x234>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d045      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <DMA_SetConfig+0x238>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d040      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <DMA_SetConfig+0x23c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d03b      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <DMA_SetConfig+0x240>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d036      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <DMA_SetConfig+0x244>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d031      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <DMA_SetConfig+0x248>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02c      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <DMA_SetConfig+0x24c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d027      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a32      	ldr	r2, [pc, #200]	; (80049f0 <DMA_SetConfig+0x250>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d022      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <DMA_SetConfig+0x254>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d01d      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <DMA_SetConfig+0x258>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d018      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <DMA_SetConfig+0x25c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <DMA_SetConfig+0x260>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00e      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <DMA_SetConfig+0x264>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d009      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <DMA_SetConfig+0x268>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <DMA_SetConfig+0x26c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <DMA_SetConfig+0x1d4>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <DMA_SetConfig+0x1d6>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d05a      	beq.n	8004a30 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	409a      	lsls	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004998:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d108      	bne.n	80049bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049ba:	e087      	b.n	8004acc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	e07e      	b.n	8004acc <DMA_SetConfig+0x32c>
 80049ce:	bf00      	nop
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <DMA_SetConfig+0x338>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a27      	ldr	r2, [pc, #156]	; (8004adc <DMA_SetConfig+0x33c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <DMA_SetConfig+0x340>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <DMA_SetConfig+0x344>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <DMA_SetConfig+0x348>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a21      	ldr	r2, [pc, #132]	; (8004aec <DMA_SetConfig+0x34c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <DMA_SetConfig+0x350>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <DMA_SetConfig+0x354>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <DMA_SetConfig+0x2e4>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <DMA_SetConfig+0x2e6>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2201      	movs	r2, #1
 8004a94:	409a      	lsls	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d108      	bne.n	8004abc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
}
 8004aba:	e007      	b.n	8004acc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	58025408 	.word	0x58025408
 8004adc:	5802541c 	.word	0x5802541c
 8004ae0:	58025430 	.word	0x58025430
 8004ae4:	58025444 	.word	0x58025444
 8004ae8:	58025458 	.word	0x58025458
 8004aec:	5802546c 	.word	0x5802546c
 8004af0:	58025480 	.word	0x58025480
 8004af4:	58025494 	.word	0x58025494

08004af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <DMA_CalcBaseAndBitshift+0x118>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a41      	ldr	r2, [pc, #260]	; (8004c14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d045      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <DMA_CalcBaseAndBitshift+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d040      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <DMA_CalcBaseAndBitshift+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d03b      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <DMA_CalcBaseAndBitshift+0x128>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d036      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d031      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <DMA_CalcBaseAndBitshift+0x130>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02c      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	; (8004c2c <DMA_CalcBaseAndBitshift+0x134>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d027      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <DMA_CalcBaseAndBitshift+0x138>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01d      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <DMA_CalcBaseAndBitshift+0x140>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a32      	ldr	r2, [pc, #200]	; (8004c3c <DMA_CalcBaseAndBitshift+0x144>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <DMA_CalcBaseAndBitshift+0x148>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <DMA_CalcBaseAndBitshift+0x150>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <DMA_CalcBaseAndBitshift+0x154>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <DMA_CalcBaseAndBitshift+0xac>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <DMA_CalcBaseAndBitshift+0xae>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d024      	beq.n	8004bf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3b10      	subs	r3, #16
 8004bb2:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <DMA_CalcBaseAndBitshift+0x158>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d908      	bls.n	8004be4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <DMA_CalcBaseAndBitshift+0x160>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	1d1a      	adds	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58
 8004be2:	e00d      	b.n	8004c00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <DMA_CalcBaseAndBitshift+0x160>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf2:	e005      	b.n	8004c00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40020010 	.word	0x40020010
 8004c14:	40020028 	.word	0x40020028
 8004c18:	40020040 	.word	0x40020040
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40020070 	.word	0x40020070
 8004c24:	40020088 	.word	0x40020088
 8004c28:	400200a0 	.word	0x400200a0
 8004c2c:	400200b8 	.word	0x400200b8
 8004c30:	40020410 	.word	0x40020410
 8004c34:	40020428 	.word	0x40020428
 8004c38:	40020440 	.word	0x40020440
 8004c3c:	40020458 	.word	0x40020458
 8004c40:	40020470 	.word	0x40020470
 8004c44:	40020488 	.word	0x40020488
 8004c48:	400204a0 	.word	0x400204a0
 8004c4c:	400204b8 	.word	0x400204b8
 8004c50:	aaaaaaab 	.word	0xaaaaaaab
 8004c54:	0800ae28 	.word	0x0800ae28
 8004c58:	fffffc00 	.word	0xfffffc00

08004c5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d120      	bne.n	8004cb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d858      	bhi.n	8004d2a <DMA_CheckFifoParam+0xce>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <DMA_CheckFifoParam+0x24>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c91 	.word	0x08004c91
 8004c84:	08004ca3 	.word	0x08004ca3
 8004c88:	08004c91 	.word	0x08004c91
 8004c8c:	08004d2b 	.word	0x08004d2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d048      	beq.n	8004d2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ca0:	e045      	b.n	8004d2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004caa:	d142      	bne.n	8004d32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cb0:	e03f      	b.n	8004d32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cba:	d123      	bne.n	8004d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d838      	bhi.n	8004d36 <DMA_CheckFifoParam+0xda>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <DMA_CheckFifoParam+0x70>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ce3 	.word	0x08004ce3
 8004cd4:	08004cdd 	.word	0x08004cdd
 8004cd8:	08004cf5 	.word	0x08004cf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce0:	e030      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d025      	beq.n	8004d3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf2:	e022      	b.n	8004d3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cfc:	d11f      	bne.n	8004d3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d02:	e01c      	b.n	8004d3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d902      	bls.n	8004d12 <DMA_CheckFifoParam+0xb6>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d003      	beq.n	8004d18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d10:	e018      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
        break;
 8004d16:	e015      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
    break;
 8004d28:	e00b      	b.n	8004d42 <DMA_CheckFifoParam+0xe6>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e00a      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e008      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d32:	bf00      	nop
 8004d34:	e006      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d36:	bf00      	nop
 8004d38:	e004      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
    break;
 8004d42:	bf00      	nop
    }
  }

  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop

08004d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a32      	ldr	r2, [pc, #200]	; (8004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a30      	ldr	r2, [pc, #192]	; (8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01a      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	3b08      	subs	r3, #8
 8004dc4:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004df0:	e024      	b.n	8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3b10      	subs	r3, #16
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d806      	bhi.n	8004e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d902      	bls.n	8004e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3308      	adds	r3, #8
 8004e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2201      	movs	r2, #1
 8004e36:	409a      	lsls	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494
 8004e68:	cccccccd 	.word	0xcccccccd
 8004e6c:	16009600 	.word	0x16009600
 8004e70:	58025880 	.word	0x58025880
 8004e74:	aaaaaaab 	.word	0xaaaaaaab
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	4002040f 	.word	0x4002040f
 8004e80:	10008200 	.word	0x10008200
 8004e84:	40020880 	.word	0x40020880

08004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04a      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d847      	bhi.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f10:	671a      	str	r2, [r3, #112]	; 0x70
 8004f12:	e009      	b.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	58025408 	.word	0x58025408
 8004f44:	5802541c 	.word	0x5802541c
 8004f48:	58025430 	.word	0x58025430
 8004f4c:	58025444 	.word	0x58025444
 8004f50:	58025458 	.word	0x58025458
 8004f54:	5802546c 	.word	0x5802546c
 8004f58:	58025480 	.word	0x58025480
 8004f5c:	58025494 	.word	0x58025494
 8004f60:	1600963f 	.word	0x1600963f
 8004f64:	58025940 	.word	0x58025940
 8004f68:	1000823f 	.word	0x1000823f
 8004f6c:	40020940 	.word	0x40020940

08004f70 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b80      	cmp	r3, #128	; 0x80
 8004f88:	d105      	bne.n	8004f96 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e325      	b.n	80055e2 <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e31e      	b.n	80055e2 <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	f040 830d 	bne.w	80055d4 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a82      	ldr	r2, [pc, #520]	; (80051d8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04a      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a81      	ldr	r2, [pc, #516]	; (80051dc <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d045      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a7f      	ldr	r2, [pc, #508]	; (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d040      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7e      	ldr	r2, [pc, #504]	; (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d03b      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7c      	ldr	r2, [pc, #496]	; (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d036      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7b      	ldr	r2, [pc, #492]	; (80051ec <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d031      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a79      	ldr	r2, [pc, #484]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02c      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a78      	ldr	r2, [pc, #480]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d027      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a76      	ldr	r2, [pc, #472]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d01d      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a73      	ldr	r2, [pc, #460]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a72      	ldr	r2, [pc, #456]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a70      	ldr	r2, [pc, #448]	; (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6f      	ldr	r2, [pc, #444]	; (800520c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6d      	ldr	r2, [pc, #436]	; (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6c      	ldr	r2, [pc, #432]	; (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005080:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	3308      	adds	r3, #8
 8005090:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	223f      	movs	r2, #63	; 0x3f
 800509c:	409a      	lsls	r2, r3
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e018      	b.n	80050d6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	f248 0320 	movw	r3, #32800	; 0x8020
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	3304      	adds	r3, #4
 80050c4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	2201      	movs	r2, #1
 80050d0:	409a      	lsls	r2, r3
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fb41 	bl	8005764 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d072      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d06d      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d068      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a37      	ldr	r2, [pc, #220]	; (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d063      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a36      	ldr	r2, [pc, #216]	; (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d05e      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a34      	ldr	r2, [pc, #208]	; (80051ec <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d059      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a33      	ldr	r2, [pc, #204]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d054      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a31      	ldr	r2, [pc, #196]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d04f      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a30      	ldr	r2, [pc, #192]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d04a      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2e      	ldr	r2, [pc, #184]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d045      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2d      	ldr	r2, [pc, #180]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d040      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d03b      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d036      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a28      	ldr	r2, [pc, #160]	; (800520c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d031      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a27      	ldr	r2, [pc, #156]	; (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d02c      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a25      	ldr	r2, [pc, #148]	; (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d027      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a24      	ldr	r2, [pc, #144]	; (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a22      	ldr	r2, [pc, #136]	; (800521c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01d      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a21      	ldr	r2, [pc, #132]	; (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d132      	bne.n	8005238 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e031      	b.n	800523a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80051d6:	bf00      	nop
 80051d8:	40020010 	.word	0x40020010
 80051dc:	40020028 	.word	0x40020028
 80051e0:	40020040 	.word	0x40020040
 80051e4:	40020058 	.word	0x40020058
 80051e8:	40020070 	.word	0x40020070
 80051ec:	40020088 	.word	0x40020088
 80051f0:	400200a0 	.word	0x400200a0
 80051f4:	400200b8 	.word	0x400200b8
 80051f8:	40020410 	.word	0x40020410
 80051fc:	40020428 	.word	0x40020428
 8005200:	40020440 	.word	0x40020440
 8005204:	40020458 	.word	0x40020458
 8005208:	40020470 	.word	0x40020470
 800520c:	40020488 	.word	0x40020488
 8005210:	400204a0 	.word	0x400204a0
 8005214:	400204b8 	.word	0x400204b8
 8005218:	58025408 	.word	0x58025408
 800521c:	5802541c 	.word	0x5802541c
 8005220:	58025430 	.word	0x58025430
 8005224:	58025444 	.word	0x58025444
 8005228:	58025458 	.word	0x58025458
 800522c:	5802546c 	.word	0x5802546c
 8005230:	58025480 	.word	0x58025480
 8005234:	58025494 	.word	0x58025494
 8005238:	2300      	movs	r3, #0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005246:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005258:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a85      	ldr	r2, [pc, #532]	; (8005474 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a83      	ldr	r2, [pc, #524]	; (8005478 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a82      	ldr	r2, [pc, #520]	; (800547c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a80      	ldr	r2, [pc, #512]	; (8005480 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a7f      	ldr	r2, [pc, #508]	; (8005484 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a7d      	ldr	r2, [pc, #500]	; (8005488 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7c      	ldr	r2, [pc, #496]	; (800548c <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a7a      	ldr	r2, [pc, #488]	; (8005490 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a79      	ldr	r2, [pc, #484]	; (8005494 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a77      	ldr	r2, [pc, #476]	; (8005498 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a76      	ldr	r2, [pc, #472]	; (800549c <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a74      	ldr	r2, [pc, #464]	; (80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a73      	ldr	r2, [pc, #460]	; (80054a4 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a71      	ldr	r2, [pc, #452]	; (80054a8 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a70      	ldr	r2, [pc, #448]	; (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a6e      	ldr	r2, [pc, #440]	; (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d022      	beq.n	800534a <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 021e 	bic.w	r2, r3, #30
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0216 	orr.w	r2, r2, #22
 8005316:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005326:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005334:	2b00      	cmp	r3, #0
 8005336:	d022      	beq.n	800537e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0208 	orr.w	r2, r2, #8
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e019      	b.n	800537e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 020e 	bic.w	r2, r3, #14
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 020a 	orr.w	r2, r2, #10
 800535c:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0204 	orr.w	r2, r2, #4
 800537c:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d072      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3a      	ldr	r2, [pc, #232]	; (8005478 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d06d      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a39      	ldr	r2, [pc, #228]	; (800547c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d068      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a37      	ldr	r2, [pc, #220]	; (8005480 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d063      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a36      	ldr	r2, [pc, #216]	; (8005484 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d05e      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a34      	ldr	r2, [pc, #208]	; (8005488 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d059      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a33      	ldr	r2, [pc, #204]	; (800548c <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d054      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a31      	ldr	r2, [pc, #196]	; (8005490 <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d04f      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a30      	ldr	r2, [pc, #192]	; (8005494 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d04a      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2e      	ldr	r2, [pc, #184]	; (8005498 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d045      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2d      	ldr	r2, [pc, #180]	; (800549c <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d040      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2b      	ldr	r2, [pc, #172]	; (80054a0 <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d03b      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d036      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d031      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a27      	ldr	r2, [pc, #156]	; (80054ac <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d02c      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d027      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a24      	ldr	r2, [pc, #144]	; (80054b4 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d022      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01d      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d018      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d132      	bne.n	80054d4 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 800546e:	2301      	movs	r3, #1
 8005470:	e031      	b.n	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0x566>
 8005472:	bf00      	nop
 8005474:	40020010 	.word	0x40020010
 8005478:	40020028 	.word	0x40020028
 800547c:	40020040 	.word	0x40020040
 8005480:	40020058 	.word	0x40020058
 8005484:	40020070 	.word	0x40020070
 8005488:	40020088 	.word	0x40020088
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400200b8 	.word	0x400200b8
 8005494:	40020410 	.word	0x40020410
 8005498:	40020428 	.word	0x40020428
 800549c:	40020440 	.word	0x40020440
 80054a0:	40020458 	.word	0x40020458
 80054a4:	40020470 	.word	0x40020470
 80054a8:	40020488 	.word	0x40020488
 80054ac:	400204a0 	.word	0x400204a0
 80054b0:	400204b8 	.word	0x400204b8
 80054b4:	58025408 	.word	0x58025408
 80054b8:	5802541c 	.word	0x5802541c
 80054bc:	58025430 	.word	0x58025430
 80054c0:	58025444 	.word	0x58025444
 80054c4:	58025458 	.word	0x58025458
 80054c8:	5802546c 	.word	0x5802546c
 80054cc:	58025480 	.word	0x58025480
 80054d0:	58025494 	.word	0x58025494
 80054d4:	2300      	movs	r3, #0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01a      	beq.n	8005510 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800550a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800550e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a35      	ldr	r2, [pc, #212]	; (80055ec <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d04a      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a34      	ldr	r2, [pc, #208]	; (80055f0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d045      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a32      	ldr	r2, [pc, #200]	; (80055f4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d040      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a31      	ldr	r2, [pc, #196]	; (80055f8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d03b      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d036      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a2e      	ldr	r2, [pc, #184]	; (8005600 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d031      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d02c      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d027      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a29      	ldr	r2, [pc, #164]	; (800560c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d022      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a28      	ldr	r2, [pc, #160]	; (8005610 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d01d      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d018      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a25      	ldr	r2, [pc, #148]	; (8005618 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00e      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a22      	ldr	r2, [pc, #136]	; (8005620 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d009      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a20      	ldr	r2, [pc, #128]	; (8005624 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e00e      	b.n	80055e0 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e005      	b.n	80055e0 <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40020010 	.word	0x40020010
 80055f0:	40020028 	.word	0x40020028
 80055f4:	40020040 	.word	0x40020040
 80055f8:	40020058 	.word	0x40020058
 80055fc:	40020070 	.word	0x40020070
 8005600:	40020088 	.word	0x40020088
 8005604:	400200a0 	.word	0x400200a0
 8005608:	400200b8 	.word	0x400200b8
 800560c:	40020410 	.word	0x40020410
 8005610:	40020428 	.word	0x40020428
 8005614:	40020440 	.word	0x40020440
 8005618:	40020458 	.word	0x40020458
 800561c:	40020470 	.word	0x40020470
 8005620:	40020488 	.word	0x40020488
 8005624:	400204a0 	.word	0x400204a0
 8005628:	400204b8 	.word	0x400204b8

0800562c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a39      	ldr	r2, [pc, #228]	; (8005724 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04a      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a37      	ldr	r2, [pc, #220]	; (8005728 <HAL_DMAEx_ChangeMemory+0xfc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d045      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a36      	ldr	r2, [pc, #216]	; (800572c <HAL_DMAEx_ChangeMemory+0x100>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d040      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a34      	ldr	r2, [pc, #208]	; (8005730 <HAL_DMAEx_ChangeMemory+0x104>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03b      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a33      	ldr	r2, [pc, #204]	; (8005734 <HAL_DMAEx_ChangeMemory+0x108>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d036      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a31      	ldr	r2, [pc, #196]	; (8005738 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d031      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a30      	ldr	r2, [pc, #192]	; (800573c <HAL_DMAEx_ChangeMemory+0x110>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02c      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2e      	ldr	r2, [pc, #184]	; (8005740 <HAL_DMAEx_ChangeMemory+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d027      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <HAL_DMAEx_ChangeMemory+0x118>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <HAL_DMAEx_ChangeMemory+0x11c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <HAL_DMAEx_ChangeMemory+0x120>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a28      	ldr	r2, [pc, #160]	; (8005750 <HAL_DMAEx_ChangeMemory+0x124>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a27      	ldr	r2, [pc, #156]	; (8005754 <HAL_DMAEx_ChangeMemory+0x128>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <HAL_DMAEx_ChangeMemory+0x12c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a24      	ldr	r2, [pc, #144]	; (800575c <HAL_DMAEx_ChangeMemory+0x130>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMAEx_ChangeMemory+0xae>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a22      	ldr	r2, [pc, #136]	; (8005760 <HAL_DMAEx_ChangeMemory+0x134>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMAEx_ChangeMemory+0xb2>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMAEx_ChangeMemory+0xb4>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00c      	beq.n	80056fe <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	e010      	b.n	8005716 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	611a      	str	r2, [r3, #16]
 80056fc:	e00b      	b.n	8005716 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e003      	b.n	8005716 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40020010 	.word	0x40020010
 8005728:	40020028 	.word	0x40020028
 800572c:	40020040 	.word	0x40020040
 8005730:	40020058 	.word	0x40020058
 8005734:	40020070 	.word	0x40020070
 8005738:	40020088 	.word	0x40020088
 800573c:	400200a0 	.word	0x400200a0
 8005740:	400200b8 	.word	0x400200b8
 8005744:	40020410 	.word	0x40020410
 8005748:	40020428 	.word	0x40020428
 800574c:	40020440 	.word	0x40020440
 8005750:	40020458 	.word	0x40020458
 8005754:	40020470 	.word	0x40020470
 8005758:	40020488 	.word	0x40020488
 800575c:	400204a0 	.word	0x400204a0
 8005760:	400204b8 	.word	0x400204b8

08005764 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a46      	ldr	r2, [pc, #280]	; (8005890 <DMA_MultiBufferSetConfig+0x12c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d04a      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a44      	ldr	r2, [pc, #272]	; (8005894 <DMA_MultiBufferSetConfig+0x130>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d045      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a43      	ldr	r2, [pc, #268]	; (8005898 <DMA_MultiBufferSetConfig+0x134>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d040      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a41      	ldr	r2, [pc, #260]	; (800589c <DMA_MultiBufferSetConfig+0x138>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d03b      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a40      	ldr	r2, [pc, #256]	; (80058a0 <DMA_MultiBufferSetConfig+0x13c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d036      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a3e      	ldr	r2, [pc, #248]	; (80058a4 <DMA_MultiBufferSetConfig+0x140>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d031      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <DMA_MultiBufferSetConfig+0x144>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d02c      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a3b      	ldr	r2, [pc, #236]	; (80058ac <DMA_MultiBufferSetConfig+0x148>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d027      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a3a      	ldr	r2, [pc, #232]	; (80058b0 <DMA_MultiBufferSetConfig+0x14c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d022      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a38      	ldr	r2, [pc, #224]	; (80058b4 <DMA_MultiBufferSetConfig+0x150>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01d      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a37      	ldr	r2, [pc, #220]	; (80058b8 <DMA_MultiBufferSetConfig+0x154>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a35      	ldr	r2, [pc, #212]	; (80058bc <DMA_MultiBufferSetConfig+0x158>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a34      	ldr	r2, [pc, #208]	; (80058c0 <DMA_MultiBufferSetConfig+0x15c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a32      	ldr	r2, [pc, #200]	; (80058c4 <DMA_MultiBufferSetConfig+0x160>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a31      	ldr	r2, [pc, #196]	; (80058c8 <DMA_MultiBufferSetConfig+0x164>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <DMA_MultiBufferSetConfig+0xae>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2f      	ldr	r2, [pc, #188]	; (80058cc <DMA_MultiBufferSetConfig+0x168>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d101      	bne.n	8005816 <DMA_MultiBufferSetConfig+0xb2>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <DMA_MultiBufferSetConfig+0xb4>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d019      	beq.n	8005850 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d108      	bne.n	800583e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800583c:	e021      	b.n	8005882 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
}
 800584e:	e018      	b.n	8005882 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d108      	bne.n	8005872 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	60da      	str	r2, [r3, #12]
}
 8005870:	e007      	b.n	8005882 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40020010 	.word	0x40020010
 8005894:	40020028 	.word	0x40020028
 8005898:	40020040 	.word	0x40020040
 800589c:	40020058 	.word	0x40020058
 80058a0:	40020070 	.word	0x40020070
 80058a4:	40020088 	.word	0x40020088
 80058a8:	400200a0 	.word	0x400200a0
 80058ac:	400200b8 	.word	0x400200b8
 80058b0:	40020410 	.word	0x40020410
 80058b4:	40020428 	.word	0x40020428
 80058b8:	40020440 	.word	0x40020440
 80058bc:	40020458 	.word	0x40020458
 80058c0:	40020470 	.word	0x40020470
 80058c4:	40020488 	.word	0x40020488
 80058c8:	400204a0 	.word	0x400204a0
 80058cc:	400204b8 	.word	0x400204b8

080058d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b089      	sub	sp, #36	; 0x24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058de:	4b89      	ldr	r3, [pc, #548]	; (8005b04 <HAL_GPIO_Init+0x234>)
 80058e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058e2:	e194      	b.n	8005c0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	2101      	movs	r1, #1
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	4013      	ands	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8186 	beq.w	8005c08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d00b      	beq.n	800591c <HAL_GPIO_Init+0x4c>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d007      	beq.n	800591c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005910:	2b11      	cmp	r3, #17
 8005912:	d003      	beq.n	800591c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b12      	cmp	r3, #18
 800591a:	d130      	bne.n	800597e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2203      	movs	r2, #3
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4313      	orrs	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005952:	2201      	movs	r2, #1
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f003 0201 	and.w	r2, r3, #1
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	2203      	movs	r2, #3
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0xee>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b12      	cmp	r3, #18
 80059bc:	d123      	bne.n	8005a06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	08da      	lsrs	r2, r3, #3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3208      	adds	r2, #8
 80059c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	220f      	movs	r2, #15
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	08da      	lsrs	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3208      	adds	r2, #8
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	2203      	movs	r2, #3
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 0203 	and.w	r2, r3, #3
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80e0 	beq.w	8005c08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a48:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <HAL_GPIO_Init+0x238>)
 8005a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a4e:	4a2e      	ldr	r2, [pc, #184]	; (8005b08 <HAL_GPIO_Init+0x238>)
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <HAL_GPIO_Init+0x238>)
 8005a5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a66:	4a29      	ldr	r2, [pc, #164]	; (8005b0c <HAL_GPIO_Init+0x23c>)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	220f      	movs	r2, #15
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a20      	ldr	r2, [pc, #128]	; (8005b10 <HAL_GPIO_Init+0x240>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d052      	beq.n	8005b38 <HAL_GPIO_Init+0x268>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <HAL_GPIO_Init+0x244>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d031      	beq.n	8005afe <HAL_GPIO_Init+0x22e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <HAL_GPIO_Init+0x248>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d02b      	beq.n	8005afa <HAL_GPIO_Init+0x22a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <HAL_GPIO_Init+0x24c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d025      	beq.n	8005af6 <HAL_GPIO_Init+0x226>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <HAL_GPIO_Init+0x250>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01f      	beq.n	8005af2 <HAL_GPIO_Init+0x222>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_GPIO_Init+0x254>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d019      	beq.n	8005aee <HAL_GPIO_Init+0x21e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1a      	ldr	r2, [pc, #104]	; (8005b28 <HAL_GPIO_Init+0x258>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <HAL_GPIO_Init+0x21a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <HAL_GPIO_Init+0x25c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00d      	beq.n	8005ae6 <HAL_GPIO_Init+0x216>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_GPIO_Init+0x260>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <HAL_GPIO_Init+0x212>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <HAL_GPIO_Init+0x264>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d101      	bne.n	8005ade <HAL_GPIO_Init+0x20e>
 8005ada:	2309      	movs	r3, #9
 8005adc:	e02d      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005ade:	230a      	movs	r3, #10
 8005ae0:	e02b      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	e029      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005ae6:	2307      	movs	r3, #7
 8005ae8:	e027      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005aea:	2306      	movs	r3, #6
 8005aec:	e025      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005aee:	2305      	movs	r3, #5
 8005af0:	e023      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005af2:	2304      	movs	r3, #4
 8005af4:	e021      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005af6:	2303      	movs	r3, #3
 8005af8:	e01f      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e01d      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e01b      	b.n	8005b3a <HAL_GPIO_Init+0x26a>
 8005b02:	bf00      	nop
 8005b04:	58000080 	.word	0x58000080
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	58000400 	.word	0x58000400
 8005b10:	58020000 	.word	0x58020000
 8005b14:	58020400 	.word	0x58020400
 8005b18:	58020800 	.word	0x58020800
 8005b1c:	58020c00 	.word	0x58020c00
 8005b20:	58021000 	.word	0x58021000
 8005b24:	58021400 	.word	0x58021400
 8005b28:	58021800 	.word	0x58021800
 8005b2c:	58021c00 	.word	0x58021c00
 8005b30:	58022000 	.word	0x58022000
 8005b34:	58022400 	.word	0x58022400
 8005b38:	2300      	movs	r3, #0
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	f002 0203 	and.w	r2, r2, #3
 8005b40:	0092      	lsls	r2, r2, #2
 8005b42:	4093      	lsls	r3, r2
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b4a:	4938      	ldr	r1, [pc, #224]	; (8005c2c <HAL_GPIO_Init+0x35c>)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	089b      	lsrs	r3, r3, #2
 8005b50:	3302      	adds	r3, #2
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f ae63 	bne.w	80058e4 <HAL_GPIO_Init+0x14>
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3724      	adds	r7, #36	; 0x24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	58000400 	.word	0x58000400

08005c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c40:	787b      	ldrb	r3, [r7, #1]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c4c:	e003      	b.n	8005c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c4e:	887b      	ldrh	r3, [r7, #2]
 8005c50:	041a      	lsls	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	619a      	str	r2, [r3, #24]
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e07f      	b.n	8005d76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fa ff88 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	; 0x24
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	e006      	b.n	8005cec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d104      	bne.n	8005cfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_I2C_Init+0x11c>)
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	ea42 0103 	orr.w	r1, r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	021a      	lsls	r2, r3, #8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	02008000 	.word	0x02008000

08005d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d138      	bne.n	8005e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e032      	b.n	8005e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d139      	bne.n	8005ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e033      	b.n	8005ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2224      	movs	r2, #36	; 0x24
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <HAL_PWREx_ConfigSupply+0x70>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d00a      	beq.n	8005ede <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ec8:	4b16      	ldr	r3, [pc, #88]	; (8005f24 <HAL_PWREx_ConfigSupply+0x70>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d001      	beq.n	8005eda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e01f      	b.n	8005f1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e01d      	b.n	8005f1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ede:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <HAL_PWREx_ConfigSupply+0x70>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f023 0207 	bic.w	r2, r3, #7
 8005ee6:	490f      	ldr	r1, [pc, #60]	; (8005f24 <HAL_PWREx_ConfigSupply+0x70>)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005eee:	f7fb fd77 	bl	80019e0 <HAL_GetTick>
 8005ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ef4:	e009      	b.n	8005f0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ef6:	f7fb fd73 	bl	80019e0 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f04:	d901      	bls.n	8005f0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e007      	b.n	8005f1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_PWREx_ConfigSupply+0x70>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f16:	d1ee      	bne.n	8005ef6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	58024800 	.word	0x58024800

08005f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e3ff      	b.n	800673a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8087 	beq.w	8006056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f48:	4b99      	ldr	r3, [pc, #612]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f52:	4b97      	ldr	r3, [pc, #604]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	2b10      	cmp	r3, #16
 8005f5c:	d007      	beq.n	8005f6e <HAL_RCC_OscConfig+0x46>
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	2b18      	cmp	r3, #24
 8005f62:	d110      	bne.n	8005f86 <HAL_RCC_OscConfig+0x5e>
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6e:	4b90      	ldr	r3, [pc, #576]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06c      	beq.n	8006054 <HAL_RCC_OscConfig+0x12c>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d168      	bne.n	8006054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e3d9      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d106      	bne.n	8005f9e <HAL_RCC_OscConfig+0x76>
 8005f90:	4b87      	ldr	r3, [pc, #540]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a86      	ldr	r2, [pc, #536]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e02e      	b.n	8005ffc <HAL_RCC_OscConfig+0xd4>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x98>
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a81      	ldr	r2, [pc, #516]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4b7f      	ldr	r3, [pc, #508]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a7e      	ldr	r2, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e01d      	b.n	8005ffc <HAL_RCC_OscConfig+0xd4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_RCC_OscConfig+0xbc>
 8005fca:	4b79      	ldr	r3, [pc, #484]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a78      	ldr	r2, [pc, #480]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e00b      	b.n	8005ffc <HAL_RCC_OscConfig+0xd4>
 8005fe4:	4b72      	ldr	r3, [pc, #456]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a71      	ldr	r2, [pc, #452]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4b6f      	ldr	r3, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a6e      	ldr	r2, [pc, #440]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d013      	beq.n	800602c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fb fcec 	bl	80019e0 <HAL_GetTick>
 8006008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800600c:	f7fb fce8 	bl	80019e0 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e38d      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800601e:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0xe4>
 800602a:	e014      	b.n	8006056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fb fcd8 	bl	80019e0 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006034:	f7fb fcd4 	bl	80019e0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e379      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006046:	4b5a      	ldr	r3, [pc, #360]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x10c>
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80ae 	beq.w	80061c0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006064:	4b52      	ldr	r3, [pc, #328]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800606e:	4b50      	ldr	r3, [pc, #320]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_RCC_OscConfig+0x162>
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	2b18      	cmp	r3, #24
 800607e:	d13a      	bne.n	80060f6 <HAL_RCC_OscConfig+0x1ce>
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d135      	bne.n	80060f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800608a:	4b49      	ldr	r3, [pc, #292]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_RCC_OscConfig+0x17a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e34b      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a2:	f7fb fccb 	bl	8001a3c <HAL_GetREVID>
 80060a6:	4602      	mov	r2, r0
 80060a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d817      	bhi.n	80060e0 <HAL_RCC_OscConfig+0x1b8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d108      	bne.n	80060ca <HAL_RCC_OscConfig+0x1a2>
 80060b8:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060c0:	4a3b      	ldr	r2, [pc, #236]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060c8:	e07a      	b.n	80061c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ca:	4b39      	ldr	r3, [pc, #228]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	031b      	lsls	r3, r3, #12
 80060d8:	4935      	ldr	r1, [pc, #212]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060de:	e06f      	b.n	80061c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	4b33      	ldr	r3, [pc, #204]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	4930      	ldr	r1, [pc, #192]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060f4:	e064      	b.n	80061c0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d045      	beq.n	800618a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060fe:	4b2c      	ldr	r3, [pc, #176]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 0219 	bic.w	r2, r3, #25
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4929      	ldr	r1, [pc, #164]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fb fc66 	bl	80019e0 <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006118:	f7fb fc62 	bl	80019e0 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e307      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800612a:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006136:	f7fb fc81 	bl	8001a3c <HAL_GetREVID>
 800613a:	4602      	mov	r2, r0
 800613c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006140:	429a      	cmp	r2, r3
 8006142:	d817      	bhi.n	8006174 <HAL_RCC_OscConfig+0x24c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d108      	bne.n	800615e <HAL_RCC_OscConfig+0x236>
 800614c:	4b18      	ldr	r3, [pc, #96]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006154:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800615a:	6053      	str	r3, [r2, #4]
 800615c:	e030      	b.n	80061c0 <HAL_RCC_OscConfig+0x298>
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	4910      	ldr	r1, [pc, #64]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
 8006172:	e025      	b.n	80061c0 <HAL_RCC_OscConfig+0x298>
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	490b      	ldr	r1, [pc, #44]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
 8006188:	e01a      	b.n	80061c0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <HAL_RCC_OscConfig+0x288>)
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fb fc23 	bl	80019e0 <HAL_GetTick>
 800619a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619e:	f7fb fc1f 	bl	80019e0 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d903      	bls.n	80061b4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e2c4      	b.n	800673a <HAL_RCC_OscConfig+0x812>
 80061b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061b4:	4ba4      	ldr	r3, [pc, #656]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ee      	bne.n	800619e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a9 	beq.w	8006320 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ce:	4b9e      	ldr	r3, [pc, #632]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061d8:	4b9b      	ldr	r3, [pc, #620]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d007      	beq.n	80061f4 <HAL_RCC_OscConfig+0x2cc>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b18      	cmp	r3, #24
 80061e8:	d13a      	bne.n	8006260 <HAL_RCC_OscConfig+0x338>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d135      	bne.n	8006260 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061f4:	4b94      	ldr	r3, [pc, #592]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_OscConfig+0x2e4>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	2b80      	cmp	r3, #128	; 0x80
 8006206:	d001      	beq.n	800620c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e296      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800620c:	f7fb fc16 	bl	8001a3c <HAL_GetREVID>
 8006210:	4602      	mov	r2, r0
 8006212:	f241 0303 	movw	r3, #4099	; 0x1003
 8006216:	429a      	cmp	r2, r3
 8006218:	d817      	bhi.n	800624a <HAL_RCC_OscConfig+0x322>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	2b20      	cmp	r3, #32
 8006220:	d108      	bne.n	8006234 <HAL_RCC_OscConfig+0x30c>
 8006222:	4b89      	ldr	r3, [pc, #548]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800622a:	4a87      	ldr	r2, [pc, #540]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800622c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006230:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006232:	e075      	b.n	8006320 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006234:	4b84      	ldr	r3, [pc, #528]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	069b      	lsls	r3, r3, #26
 8006242:	4981      	ldr	r1, [pc, #516]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006244:	4313      	orrs	r3, r2
 8006246:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006248:	e06a      	b.n	8006320 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624a:	4b7f      	ldr	r3, [pc, #508]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	497b      	ldr	r1, [pc, #492]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800625a:	4313      	orrs	r3, r2
 800625c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800625e:	e05f      	b.n	8006320 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d042      	beq.n	80062ee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006268:	4b77      	ldr	r3, [pc, #476]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a76      	ldr	r2, [pc, #472]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fb fbb4 	bl	80019e0 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800627c:	f7fb fbb0 	bl	80019e0 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e255      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800628e:	4b6e      	ldr	r3, [pc, #440]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800629a:	f7fb fbcf 	bl	8001a3c <HAL_GetREVID>
 800629e:	4602      	mov	r2, r0
 80062a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d817      	bhi.n	80062d8 <HAL_RCC_OscConfig+0x3b0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d108      	bne.n	80062c2 <HAL_RCC_OscConfig+0x39a>
 80062b0:	4b65      	ldr	r3, [pc, #404]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062b8:	4a63      	ldr	r2, [pc, #396]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062be:	6053      	str	r3, [r2, #4]
 80062c0:	e02e      	b.n	8006320 <HAL_RCC_OscConfig+0x3f8>
 80062c2:	4b61      	ldr	r3, [pc, #388]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	069b      	lsls	r3, r3, #26
 80062d0:	495d      	ldr	r1, [pc, #372]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	604b      	str	r3, [r1, #4]
 80062d6:	e023      	b.n	8006320 <HAL_RCC_OscConfig+0x3f8>
 80062d8:	4b5b      	ldr	r3, [pc, #364]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	061b      	lsls	r3, r3, #24
 80062e6:	4958      	ldr	r1, [pc, #352]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60cb      	str	r3, [r1, #12]
 80062ec:	e018      	b.n	8006320 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062ee:	4b56      	ldr	r3, [pc, #344]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a55      	ldr	r2, [pc, #340]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80062f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fa:	f7fb fb71 	bl	80019e0 <HAL_GetTick>
 80062fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006302:	f7fb fb6d 	bl	80019e0 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e212      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006314:	4b4c      	ldr	r3, [pc, #304]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f0      	bne.n	8006302 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d036      	beq.n	800639a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d019      	beq.n	8006368 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006334:	4b44      	ldr	r3, [pc, #272]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006338:	4a43      	ldr	r2, [pc, #268]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fb fb4e 	bl	80019e0 <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006348:	f7fb fb4a 	bl	80019e0 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e1ef      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800635a:	4b3b      	ldr	r3, [pc, #236]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800635c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f0      	beq.n	8006348 <HAL_RCC_OscConfig+0x420>
 8006366:	e018      	b.n	800639a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006368:	4b37      	ldr	r3, [pc, #220]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800636a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636c:	4a36      	ldr	r2, [pc, #216]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006374:	f7fb fb34 	bl	80019e0 <HAL_GetTick>
 8006378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800637c:	f7fb fb30 	bl	80019e0 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e1d5      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800638e:	4b2e      	ldr	r3, [pc, #184]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 8006390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d036      	beq.n	8006414 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d019      	beq.n	80063e2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063ae:	4b26      	ldr	r3, [pc, #152]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a25      	ldr	r2, [pc, #148]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80063b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063ba:	f7fb fb11 	bl	80019e0 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063c2:	f7fb fb0d 	bl	80019e0 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e1b2      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d4:	4b1c      	ldr	r3, [pc, #112]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x49a>
 80063e0:	e018      	b.n	8006414 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063e2:	4b19      	ldr	r3, [pc, #100]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a18      	ldr	r2, [pc, #96]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 80063e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063ee:	f7fb faf7 	bl	80019e0 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063f6:	f7fb faf3 	bl	80019e0 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e198      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <HAL_RCC_OscConfig+0x520>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f0      	bne.n	80063f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8085 	beq.w	800652c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <HAL_RCC_OscConfig+0x524>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <HAL_RCC_OscConfig+0x524>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800642e:	f7fb fad7 	bl	80019e0 <HAL_GetTick>
 8006432:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006434:	e00c      	b.n	8006450 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006436:	f7fb fad3 	bl	80019e0 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b64      	cmp	r3, #100	; 0x64
 8006442:	d905      	bls.n	8006450 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e178      	b.n	800673a <HAL_RCC_OscConfig+0x812>
 8006448:	58024400 	.word	0x58024400
 800644c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006450:	4b96      	ldr	r3, [pc, #600]	; (80066ac <HAL_RCC_OscConfig+0x784>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0ec      	beq.n	8006436 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x54a>
 8006464:	4b92      	ldr	r3, [pc, #584]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	4a91      	ldr	r2, [pc, #580]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6713      	str	r3, [r2, #112]	; 0x70
 8006470:	e02d      	b.n	80064ce <HAL_RCC_OscConfig+0x5a6>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_RCC_OscConfig+0x56c>
 800647a:	4b8d      	ldr	r3, [pc, #564]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a8c      	ldr	r2, [pc, #560]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	4b8a      	ldr	r3, [pc, #552]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	4a89      	ldr	r2, [pc, #548]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6713      	str	r3, [r2, #112]	; 0x70
 8006492:	e01c      	b.n	80064ce <HAL_RCC_OscConfig+0x5a6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d10c      	bne.n	80064b6 <HAL_RCC_OscConfig+0x58e>
 800649c:	4b84      	ldr	r3, [pc, #528]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	4a83      	ldr	r2, [pc, #524]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	6713      	str	r3, [r2, #112]	; 0x70
 80064a8:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	4a80      	ldr	r2, [pc, #512]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
 80064b4:	e00b      	b.n	80064ce <HAL_RCC_OscConfig+0x5a6>
 80064b6:	4b7e      	ldr	r3, [pc, #504]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	4a7d      	ldr	r2, [pc, #500]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	6713      	str	r3, [r2, #112]	; 0x70
 80064c2:	4b7b      	ldr	r3, [pc, #492]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	4a7a      	ldr	r2, [pc, #488]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064c8:	f023 0304 	bic.w	r3, r3, #4
 80064cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d015      	beq.n	8006502 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d6:	f7fb fa83 	bl	80019e0 <HAL_GetTick>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064dc:	e00a      	b.n	80064f4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fb fa7f 	bl	80019e0 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e122      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064f4:	4b6e      	ldr	r3, [pc, #440]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ee      	beq.n	80064de <HAL_RCC_OscConfig+0x5b6>
 8006500:	e014      	b.n	800652c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fb fa6d 	bl	80019e0 <HAL_GetTick>
 8006506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fb fa69 	bl	80019e0 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e10c      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006520:	4b63      	ldr	r3, [pc, #396]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ee      	bne.n	800650a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8101 	beq.w	8006738 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006536:	4b5e      	ldr	r3, [pc, #376]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800653e:	2b18      	cmp	r3, #24
 8006540:	f000 80bc 	beq.w	80066bc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b02      	cmp	r3, #2
 800654a:	f040 8095 	bne.w	8006678 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654e:	4b58      	ldr	r3, [pc, #352]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a57      	ldr	r2, [pc, #348]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655a:	f7fb fa41 	bl	80019e0 <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006562:	f7fb fa3d 	bl	80019e0 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e0e2      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006574:	4b4e      	ldr	r3, [pc, #312]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f0      	bne.n	8006562 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006580:	4b4b      	ldr	r3, [pc, #300]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006584:	4b4b      	ldr	r3, [pc, #300]	; (80066b4 <HAL_RCC_OscConfig+0x78c>)
 8006586:	4013      	ands	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006590:	0112      	lsls	r2, r2, #4
 8006592:	430a      	orrs	r2, r1
 8006594:	4946      	ldr	r1, [pc, #280]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006596:	4313      	orrs	r3, r2
 8006598:	628b      	str	r3, [r1, #40]	; 0x28
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	3b01      	subs	r3, #1
 80065a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	3b01      	subs	r3, #1
 80065aa:	025b      	lsls	r3, r3, #9
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	3b01      	subs	r3, #1
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c2:	3b01      	subs	r3, #1
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065ca:	4939      	ldr	r1, [pc, #228]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4a36      	ldr	r2, [pc, #216]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065dc:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <HAL_RCC_OscConfig+0x790>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065e8:	00d2      	lsls	r2, r2, #3
 80065ea:	4931      	ldr	r1, [pc, #196]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065f0:	4b2f      	ldr	r3, [pc, #188]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	f023 020c 	bic.w	r2, r3, #12
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	492c      	ldr	r1, [pc, #176]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006602:	4b2b      	ldr	r3, [pc, #172]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	f023 0202 	bic.w	r2, r3, #2
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	4928      	ldr	r1, [pc, #160]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006610:	4313      	orrs	r3, r2
 8006612:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006614:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800661a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800662c:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006638:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006644:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a19      	ldr	r2, [pc, #100]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800664a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800664e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fb f9c6 	bl	80019e0 <HAL_GetTick>
 8006654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fb f9c2 	bl	80019e0 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e067      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0x730>
 8006676:	e05f      	b.n	8006738 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fb f9ac 	bl	80019e0 <HAL_GetTick>
 8006688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668c:	f7fb f9a8 	bl	80019e0 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e04d      	b.n	800673a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800669e:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <HAL_RCC_OscConfig+0x788>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x764>
 80066aa:	e045      	b.n	8006738 <HAL_RCC_OscConfig+0x810>
 80066ac:	58024800 	.word	0x58024800
 80066b0:	58024400 	.word	0x58024400
 80066b4:	fffffc0c 	.word	0xfffffc0c
 80066b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066bc:	4b21      	ldr	r3, [pc, #132]	; (8006744 <HAL_RCC_OscConfig+0x81c>)
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <HAL_RCC_OscConfig+0x81c>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d031      	beq.n	8006734 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f003 0203 	and.w	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d12a      	bne.n	8006734 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d122      	bne.n	8006734 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d11a      	bne.n	8006734 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	0a5b      	lsrs	r3, r3, #9
 8006702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d111      	bne.n	8006734 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800671e:	429a      	cmp	r2, r3
 8006720:	d108      	bne.n	8006734 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	0e1b      	lsrs	r3, r3, #24
 8006726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3730      	adds	r7, #48	; 0x30
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400

08006748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e19c      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800675c:	4b8a      	ldr	r3, [pc, #552]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d910      	bls.n	800678c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676a:	4b87      	ldr	r3, [pc, #540]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 020f 	bic.w	r2, r3, #15
 8006772:	4985      	ldr	r1, [pc, #532]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677a:	4b83      	ldr	r3, [pc, #524]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e184      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d010      	beq.n	80067ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d908      	bls.n	80067ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a8:	4b78      	ldr	r3, [pc, #480]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	4975      	ldr	r1, [pc, #468]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	4b70      	ldr	r3, [pc, #448]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d908      	bls.n	80067e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067d6:	4b6d      	ldr	r3, [pc, #436]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	496a      	ldr	r1, [pc, #424]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	4b64      	ldr	r3, [pc, #400]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006800:	429a      	cmp	r2, r3
 8006802:	d908      	bls.n	8006816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006804:	4b61      	ldr	r3, [pc, #388]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	495e      	ldr	r1, [pc, #376]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006812:	4313      	orrs	r3, r2
 8006814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	4b59      	ldr	r3, [pc, #356]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800682e:	429a      	cmp	r2, r3
 8006830:	d908      	bls.n	8006844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006832:	4b56      	ldr	r3, [pc, #344]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4953      	ldr	r1, [pc, #332]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006840:	4313      	orrs	r3, r2
 8006842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	4b4d      	ldr	r3, [pc, #308]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	429a      	cmp	r2, r3
 800685e:	d908      	bls.n	8006872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006860:	4b4a      	ldr	r3, [pc, #296]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f023 020f 	bic.w	r2, r3, #15
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4947      	ldr	r1, [pc, #284]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800686e:	4313      	orrs	r3, r2
 8006870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d055      	beq.n	800692a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800687e:	4b43      	ldr	r3, [pc, #268]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4940      	ldr	r1, [pc, #256]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d107      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006898:	4b3c      	ldr	r3, [pc, #240]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d121      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0f6      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068b0:	4b36      	ldr	r3, [pc, #216]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0ea      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068c8:	4b30      	ldr	r3, [pc, #192]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0de      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d8:	4b2c      	ldr	r3, [pc, #176]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0d6      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068e8:	4b28      	ldr	r3, [pc, #160]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f023 0207 	bic.w	r2, r3, #7
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4925      	ldr	r1, [pc, #148]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fb f871 	bl	80019e0 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006900:	e00a      	b.n	8006918 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006902:	f7fb f86d 	bl	80019e0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e0be      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	429a      	cmp	r2, r3
 8006928:	d1eb      	bne.n	8006902 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	429a      	cmp	r2, r3
 8006944:	d208      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f023 020f 	bic.w	r2, r3, #15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	490e      	ldr	r1, [pc, #56]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006954:	4313      	orrs	r3, r2
 8006956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d214      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 020f 	bic.w	r2, r3, #15
 800696e:	4906      	ldr	r1, [pc, #24]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b04      	ldr	r3, [pc, #16]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e086      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
 8006988:	52002000 	.word	0x52002000
 800698c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d208      	bcs.n	80069be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069ac:	4b3c      	ldr	r3, [pc, #240]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4939      	ldr	r1, [pc, #228]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d208      	bcs.n	80069ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069da:	4b31      	ldr	r3, [pc, #196]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	492e      	ldr	r1, [pc, #184]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d208      	bcs.n	8006a1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4922      	ldr	r1, [pc, #136]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d208      	bcs.n	8006a48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4917      	ldr	r1, [pc, #92]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a48:	f000 f89e 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 8006a4c:	4601      	mov	r1, r0
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	4a12      	ldr	r2, [pc, #72]	; (8006aa4 <HAL_RCC_ClockConfig+0x35c>)
 8006a5a:	5cd3      	ldrb	r3, [r2, r3]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	fa21 f303 	lsr.w	r3, r1, r3
 8006a64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <HAL_RCC_ClockConfig+0x35c>)
 8006a70:	5cd3      	ldrb	r3, [r2, r3]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <HAL_RCC_ClockConfig+0x360>)
 8006a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <HAL_RCC_ClockConfig+0x364>)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <HAL_RCC_ClockConfig+0x368>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fa ff5e 	bl	800194c <HAL_InitTick>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	0800ae18 	.word	0x0800ae18
 8006aa8:	24000004 	.word	0x24000004
 8006aac:	24000000 	.word	0x24000000
 8006ab0:	24000008 	.word	0x24000008

08006ab4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08c      	sub	sp, #48	; 0x30
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d12a      	bne.n	8006b1c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006ac6:	4b2d      	ldr	r3, [pc, #180]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006acc:	4a2b      	ldr	r2, [pc, #172]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ad6:	4b29      	ldr	r3, [pc, #164]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aea:	2302      	movs	r3, #2
 8006aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aee:	2303      	movs	r3, #3
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006af6:	2300      	movs	r3, #0
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006afa:	f107 031c 	add.w	r3, r7, #28
 8006afe:	4619      	mov	r1, r3
 8006b00:	481f      	ldr	r0, [pc, #124]	; (8006b80 <HAL_RCC_MCOConfig+0xcc>)
 8006b02:	f7fe fee5 	bl	80058d0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	430b      	orrs	r3, r1
 8006b14:	4919      	ldr	r1, [pc, #100]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006b1a:	e02a      	b.n	8006b72 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006b1c:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b24:	f043 0304 	orr.w	r3, r3, #4
 8006b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b2c:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b40:	2302      	movs	r3, #2
 8006b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b44:	2303      	movs	r3, #3
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006b50:	f107 031c 	add.w	r3, r7, #28
 8006b54:	4619      	mov	r1, r3
 8006b56:	480b      	ldr	r0, [pc, #44]	; (8006b84 <HAL_RCC_MCOConfig+0xd0>)
 8006b58:	f7fe feba 	bl	80058d0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006b5c:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	01d9      	lsls	r1, r3, #7
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	4903      	ldr	r1, [pc, #12]	; (8006b7c <HAL_RCC_MCOConfig+0xc8>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]
}
 8006b72:	bf00      	nop
 8006b74:	3730      	adds	r7, #48	; 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	58020000 	.word	0x58020000
 8006b84:	58020800 	.word	0x58020800

08006b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b8e:	4baf      	ldr	r3, [pc, #700]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b96:	2b18      	cmp	r3, #24
 8006b98:	f200 814e 	bhi.w	8006e38 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006c09 	.word	0x08006c09
 8006ba8:	08006e39 	.word	0x08006e39
 8006bac:	08006e39 	.word	0x08006e39
 8006bb0:	08006e39 	.word	0x08006e39
 8006bb4:	08006e39 	.word	0x08006e39
 8006bb8:	08006e39 	.word	0x08006e39
 8006bbc:	08006e39 	.word	0x08006e39
 8006bc0:	08006e39 	.word	0x08006e39
 8006bc4:	08006c2f 	.word	0x08006c2f
 8006bc8:	08006e39 	.word	0x08006e39
 8006bcc:	08006e39 	.word	0x08006e39
 8006bd0:	08006e39 	.word	0x08006e39
 8006bd4:	08006e39 	.word	0x08006e39
 8006bd8:	08006e39 	.word	0x08006e39
 8006bdc:	08006e39 	.word	0x08006e39
 8006be0:	08006e39 	.word	0x08006e39
 8006be4:	08006c35 	.word	0x08006c35
 8006be8:	08006e39 	.word	0x08006e39
 8006bec:	08006e39 	.word	0x08006e39
 8006bf0:	08006e39 	.word	0x08006e39
 8006bf4:	08006e39 	.word	0x08006e39
 8006bf8:	08006e39 	.word	0x08006e39
 8006bfc:	08006e39 	.word	0x08006e39
 8006c00:	08006e39 	.word	0x08006e39
 8006c04:	08006c3b 	.word	0x08006c3b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b90      	ldr	r3, [pc, #576]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c14:	4b8d      	ldr	r3, [pc, #564]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a8c      	ldr	r2, [pc, #560]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c26:	e10a      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c28:	4b89      	ldr	r3, [pc, #548]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c2a:	61bb      	str	r3, [r7, #24]
    break;
 8006c2c:	e107      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c2e:	4b89      	ldr	r3, [pc, #548]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c30:	61bb      	str	r3, [r7, #24]
    break;
 8006c32:	e104      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c34:	4b88      	ldr	r3, [pc, #544]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006c36:	61bb      	str	r3, [r7, #24]
    break;
 8006c38:	e101      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c3a:	4b84      	ldr	r3, [pc, #528]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006c44:	4b81      	ldr	r3, [pc, #516]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	091b      	lsrs	r3, r3, #4
 8006c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c50:	4b7e      	ldr	r3, [pc, #504]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006c5a:	4b7c      	ldr	r3, [pc, #496]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5e:	08db      	lsrs	r3, r3, #3
 8006c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80da 	beq.w	8006e32 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d05a      	beq.n	8006d3a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d302      	bcc.n	8006c8e <HAL_RCC_GetSysClockFreq+0x106>
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d078      	beq.n	8006d7e <HAL_RCC_GetSysClockFreq+0x1f6>
 8006c8c:	e099      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c8e:	4b6f      	ldr	r3, [pc, #444]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d02d      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c9a:	4b6c      	ldr	r3, [pc, #432]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	ee07 3a90 	vmov	s15, r3
 8006cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc4:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cd8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006e5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006cf4:	e087      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d00:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006e60 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d08:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d18:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d1c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006e5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d38:	e065      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d44:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006e64 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4c:	4b3f      	ldr	r3, [pc, #252]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d60:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006e5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7c:	e043      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d88:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006e68 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d90:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006da4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006e5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dc0:	e021      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dcc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006e64 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006de8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006e5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e04:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e06:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	0a5b      	lsrs	r3, r3, #9
 8006e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e10:	3301      	adds	r3, #1
 8006e12:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e2a:	ee17 3a90 	vmov	r3, s15
 8006e2e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e30:	e005      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
    break;
 8006e36:	e002      	b.n	8006e3e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e3a:	61bb      	str	r3, [r7, #24]
    break;
 8006e3c:	bf00      	nop
  }

  return sysclockfreq;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3724      	adds	r7, #36	; 0x24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	03d09000 	.word	0x03d09000
 8006e54:	003d0900 	.word	0x003d0900
 8006e58:	01e84800 	.word	0x01e84800
 8006e5c:	46000000 	.word	0x46000000
 8006e60:	4c742400 	.word	0x4c742400
 8006e64:	4a742400 	.word	0x4a742400
 8006e68:	4bf42400 	.word	0x4bf42400

08006e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e72:	f7ff fe89 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 8006e76:	4601      	mov	r1, r0
 8006e78:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <HAL_RCC_GetHCLKFreq+0x50>)
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	4a0f      	ldr	r2, [pc, #60]	; (8006ec0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e84:	5cd3      	ldrb	r3, [r2, r3]
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	fa21 f303 	lsr.w	r3, r1, r3
 8006e8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <HAL_RCC_GetHCLKFreq+0x50>)
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e9a:	5cd3      	ldrb	r3, [r2, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	4a07      	ldr	r2, [pc, #28]	; (8006ec4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ea8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006eaa:	4a07      	ldr	r2, [pc, #28]	; (8006ec8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	0800ae18 	.word	0x0800ae18
 8006ec4:	24000004 	.word	0x24000004
 8006ec8:	24000000 	.word	0x24000000

08006ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ed0:	f7ff ffcc 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	091b      	lsrs	r3, r3, #4
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4a04      	ldr	r2, [pc, #16]	; (8006ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ee2:	5cd3      	ldrb	r3, [r2, r3]
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	0800ae18 	.word	0x0800ae18

08006ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006efc:	f7ff ffb6 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8006f00:	4601      	mov	r1, r0
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f0e:	5cd3      	ldrb	r3, [r2, r3]
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	58024400 	.word	0x58024400
 8006f20:	0800ae18 	.word	0x0800ae18

08006f24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f30:	2300      	movs	r3, #0
 8006f32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d03d      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f48:	d013      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4e:	d802      	bhi.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006f54:	e01f      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f5a:	d013      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006f5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f60:	d01c      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006f62:	e018      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f64:	4baf      	ldr	r3, [pc, #700]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4aae      	ldr	r2, [pc, #696]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f70:	e015      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	2102      	movs	r1, #2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 f96f 	bl	800825c <RCCEx_PLL2_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f82:	e00c      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3324      	adds	r3, #36	; 0x24
 8006f88:	2102      	movs	r1, #2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fa18 	bl	80083c0 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f94:	e003      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	e000      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fa4:	4b9f      	ldr	r3, [pc, #636]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	499c      	ldr	r1, [pc, #624]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	650b      	str	r3, [r1, #80]	; 0x50
 8006fb6:	e001      	b.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d03d      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d826      	bhi.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006fd0:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08006fed 	.word	0x08006fed
 8006fdc:	08006ffb 	.word	0x08006ffb
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	08007025 	.word	0x08007025
 8006fe8:	08007025 	.word	0x08007025
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fec:	4b8d      	ldr	r3, [pc, #564]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	4a8c      	ldr	r2, [pc, #560]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ff8:	e015      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f92b 	bl	800825c <RCCEx_PLL2_Config>
 8007006:	4603      	mov	r3, r0
 8007008:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800700a:	e00c      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3324      	adds	r3, #36	; 0x24
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f9d4 	bl	80083c0 <RCCEx_PLL3_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800701c:	e003      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
      break;
 8007022:	e000      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800702c:	4b7d      	ldr	r3, [pc, #500]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800702e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007030:	f023 0207 	bic.w	r2, r3, #7
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007038:	497a      	ldr	r1, [pc, #488]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800703a:	4313      	orrs	r3, r2
 800703c:	650b      	str	r3, [r1, #80]	; 0x50
 800703e:	e001      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800704c:	2b00      	cmp	r3, #0
 800704e:	d03e      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007054:	2b80      	cmp	r3, #128	; 0x80
 8007056:	d01c      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d804      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d00d      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007064:	e01e      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007066:	2bc0      	cmp	r3, #192	; 0xc0
 8007068:	d01f      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x186>
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d01e      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007070:	e018      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007072:	4b6c      	ldr	r3, [pc, #432]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	4a6b      	ldr	r2, [pc, #428]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800707e:	e017      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f8e8 	bl	800825c <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007090:	e00e      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3324      	adds	r3, #36	; 0x24
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f001 f991 	bl	80083c0 <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070a2:	e005      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	e002      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80070ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80070b6:	4b5b      	ldr	r3, [pc, #364]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c2:	4958      	ldr	r1, [pc, #352]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	650b      	str	r3, [r1, #80]	; 0x50
 80070c8:	e001      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d044      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070e4:	d01f      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80070e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ea:	d805      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070f4:	d00e      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80070f6:	e01f      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80070f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070fc:	d01f      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80070fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007102:	d01e      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007104:	e018      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007106:	4b47      	ldr	r3, [pc, #284]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	4a46      	ldr	r2, [pc, #280]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800710c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007110:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007112:	e017      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3304      	adds	r3, #4
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f001 f89e 	bl	800825c <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007124:	e00e      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	; 0x24
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f001 f947 	bl	80083c0 <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007136:	e005      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
      break;
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800714a:	4b36      	ldr	r3, [pc, #216]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007158:	4932      	ldr	r1, [pc, #200]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800715a:	4313      	orrs	r3, r2
 800715c:	658b      	str	r3, [r1, #88]	; 0x58
 800715e:	e001      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800716c:	2b00      	cmp	r3, #0
 800716e:	d044      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800717a:	d01f      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800717c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007180:	d805      	bhi.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007186:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800718a:	d00e      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 800718c:	e01f      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800718e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007192:	d01f      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007198:	d01e      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800719a:	e018      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719c:	4b21      	ldr	r3, [pc, #132]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	4a20      	ldr	r2, [pc, #128]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071a8:	e017      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	2100      	movs	r1, #0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 f853 	bl	800825c <RCCEx_PLL2_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80071ba:	e00e      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3324      	adds	r3, #36	; 0x24
 80071c0:	2100      	movs	r1, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f8fc 	bl	80083c0 <RCCEx_PLL3_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071cc:	e005      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	75fb      	strb	r3, [r7, #23]
      break;
 80071d2:	e002      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80071d4:	bf00      	nop
 80071d6:	e000      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80071d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071e0:	4b10      	ldr	r3, [pc, #64]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071ee:	490d      	ldr	r1, [pc, #52]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	658b      	str	r3, [r1, #88]	; 0x58
 80071f4:	e001      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d035      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	2b10      	cmp	r3, #16
 800720c:	d00c      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800720e:	2b10      	cmp	r3, #16
 8007210:	d802      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01b      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007216:	e017      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007218:	2b20      	cmp	r3, #32
 800721a:	d00c      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800721c:	2b30      	cmp	r3, #48	; 0x30
 800721e:	d018      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007220:	e012      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007222:	bf00      	nop
 8007224:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007228:	4baf      	ldr	r3, [pc, #700]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4aae      	ldr	r2, [pc, #696]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007234:	e00e      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	2102      	movs	r1, #2
 800723c:	4618      	mov	r0, r3
 800723e:	f001 f80d 	bl	800825c <RCCEx_PLL2_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007246:	e005      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
      break;
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800725a:	4ba3      	ldr	r3, [pc, #652]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800725c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	49a0      	ldr	r1, [pc, #640]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007268:	4313      	orrs	r3, r2
 800726a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800726c:	e001      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d042      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007286:	d01f      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728c:	d805      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007296:	d00e      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007298:	e01f      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800729a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800729e:	d01f      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80072a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a4:	d01e      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80072a6:	e018      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a8:	4b8f      	ldr	r3, [pc, #572]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a8e      	ldr	r2, [pc, #568]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072b4:	e017      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3304      	adds	r3, #4
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 ffcd 	bl	800825c <RCCEx_PLL2_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072c6:	e00e      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3324      	adds	r3, #36	; 0x24
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 f876 	bl	80083c0 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072d8:	e005      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	75fb      	strb	r3, [r7, #23]
      break;
 80072de:	e002      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80072e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072ec:	4b7e      	ldr	r3, [pc, #504]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	497b      	ldr	r1, [pc, #492]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	650b      	str	r3, [r1, #80]	; 0x50
 80072fe:	e001      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d042      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007318:	d01b      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800731a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731e:	d805      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d022      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007328:	d00a      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800732a:	e01b      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800732c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007330:	d01d      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007336:	d01c      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800733c:	d01b      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800733e:	e011      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3304      	adds	r3, #4
 8007344:	2101      	movs	r1, #1
 8007346:	4618      	mov	r0, r3
 8007348:	f000 ff88 	bl	800825c <RCCEx_PLL2_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007350:	e012      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3324      	adds	r3, #36	; 0x24
 8007356:	2101      	movs	r1, #1
 8007358:	4618      	mov	r0, r3
 800735a:	f001 f831 	bl	80083c0 <RCCEx_PLL3_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007362:	e009      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
      break;
 8007368:	e006      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800736a:	bf00      	nop
 800736c:	e004      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800736e:	bf00      	nop
 8007370:	e002      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007372:	bf00      	nop
 8007374:	e000      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800737e:	4b5a      	ldr	r3, [pc, #360]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738a:	4957      	ldr	r1, [pc, #348]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800738c:	4313      	orrs	r3, r2
 800738e:	650b      	str	r3, [r1, #80]	; 0x50
 8007390:	e001      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d044      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ac:	d01b      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80073ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b2:	d805      	bhi.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d022      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80073b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073bc:	d00a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80073be:	e01b      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80073c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c4:	d01d      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80073c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ca:	d01c      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80073cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073d0:	d01b      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80073d2:	e011      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	2101      	movs	r1, #1
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 ff3e 	bl	800825c <RCCEx_PLL2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073e4:	e012      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3324      	adds	r3, #36	; 0x24
 80073ea:	2101      	movs	r1, #1
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 ffe7 	bl	80083c0 <RCCEx_PLL3_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073f6:	e009      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
      break;
 80073fc:	e006      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80073fe:	bf00      	nop
 8007400:	e004      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800740a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007412:	4b35      	ldr	r3, [pc, #212]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007416:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007420:	4931      	ldr	r1, [pc, #196]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007422:	4313      	orrs	r3, r2
 8007424:	658b      	str	r3, [r1, #88]	; 0x58
 8007426:	e001      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d02d      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007440:	d005      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007446:	d009      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d013      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800744c:	e00f      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744e:	4b26      	ldr	r3, [pc, #152]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	4a25      	ldr	r2, [pc, #148]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800745a:	e00c      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	2101      	movs	r1, #1
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fefa 	bl	800825c <RCCEx_PLL2_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800746c:	e003      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
      break;
 8007472:	e000      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d109      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800747c:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007488:	4917      	ldr	r1, [pc, #92]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800748a:	4313      	orrs	r3, r2
 800748c:	650b      	str	r3, [r1, #80]	; 0x50
 800748e:	e001      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d035      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d81b      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074ed 	.word	0x080074ed
 80074b4:	080074c1 	.word	0x080074c1
 80074b8:	080074cf 	.word	0x080074cf
 80074bc:	080074ed 	.word	0x080074ed
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074cc:	e00f      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	2102      	movs	r1, #2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fec1 	bl	800825c <RCCEx_PLL2_Config>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074de:	e006      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
      break;
 80074e4:	e003      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80074e6:	bf00      	nop
 80074e8:	58024400 	.word	0x58024400
      break;
 80074ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074f4:	4bba      	ldr	r3, [pc, #744]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f8:	f023 0203 	bic.w	r2, r3, #3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	49b7      	ldr	r1, [pc, #732]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007502:	4313      	orrs	r3, r2
 8007504:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007506:	e001      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8086 	beq.w	8007626 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800751a:	4bb2      	ldr	r3, [pc, #712]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4ab1      	ldr	r2, [pc, #708]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007526:	f7fa fa5b 	bl	80019e0 <HAL_GetTick>
 800752a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800752c:	e009      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800752e:	f7fa fa57 	bl	80019e0 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b64      	cmp	r3, #100	; 0x64
 800753a:	d902      	bls.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	75fb      	strb	r3, [r7, #23]
        break;
 8007540:	e005      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007542:	4ba8      	ldr	r3, [pc, #672]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0ef      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d166      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007554:	4ba2      	ldr	r3, [pc, #648]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007556:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800755e:	4053      	eors	r3, r2
 8007560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007564:	2b00      	cmp	r3, #0
 8007566:	d013      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007568:	4b9d      	ldr	r3, [pc, #628]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007570:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007572:	4b9b      	ldr	r3, [pc, #620]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007576:	4a9a      	ldr	r2, [pc, #616]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800757e:	4b98      	ldr	r3, [pc, #608]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	4a97      	ldr	r2, [pc, #604]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800758a:	4a95      	ldr	r2, [pc, #596]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759a:	d115      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fa fa20 	bl	80019e0 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a2:	e00b      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a4:	f7fa fa1c 	bl	80019e0 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d902      	bls.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	75fb      	strb	r3, [r7, #23]
            break;
 80075ba:	e005      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075bc:	4b88      	ldr	r3, [pc, #544]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0ed      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d126      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075dc:	d10d      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80075de:	4b80      	ldr	r3, [pc, #512]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ec:	0919      	lsrs	r1, r3, #4
 80075ee:	4b7e      	ldr	r3, [pc, #504]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80075f0:	400b      	ands	r3, r1
 80075f2:	497b      	ldr	r1, [pc, #492]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	610b      	str	r3, [r1, #16]
 80075f8:	e005      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80075fa:	4b79      	ldr	r3, [pc, #484]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	4a78      	ldr	r2, [pc, #480]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007604:	6113      	str	r3, [r2, #16]
 8007606:	4b76      	ldr	r3, [pc, #472]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007614:	4972      	ldr	r1, [pc, #456]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007616:	4313      	orrs	r3, r2
 8007618:	670b      	str	r3, [r1, #112]	; 0x70
 800761a:	e004      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	75bb      	strb	r3, [r7, #22]
 8007620:	e001      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d07d      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007636:	2b28      	cmp	r3, #40	; 0x28
 8007638:	d866      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	0800770f 	.word	0x0800770f
 8007644:	08007709 	.word	0x08007709
 8007648:	08007709 	.word	0x08007709
 800764c:	08007709 	.word	0x08007709
 8007650:	08007709 	.word	0x08007709
 8007654:	08007709 	.word	0x08007709
 8007658:	08007709 	.word	0x08007709
 800765c:	08007709 	.word	0x08007709
 8007660:	080076e5 	.word	0x080076e5
 8007664:	08007709 	.word	0x08007709
 8007668:	08007709 	.word	0x08007709
 800766c:	08007709 	.word	0x08007709
 8007670:	08007709 	.word	0x08007709
 8007674:	08007709 	.word	0x08007709
 8007678:	08007709 	.word	0x08007709
 800767c:	08007709 	.word	0x08007709
 8007680:	080076f7 	.word	0x080076f7
 8007684:	08007709 	.word	0x08007709
 8007688:	08007709 	.word	0x08007709
 800768c:	08007709 	.word	0x08007709
 8007690:	08007709 	.word	0x08007709
 8007694:	08007709 	.word	0x08007709
 8007698:	08007709 	.word	0x08007709
 800769c:	08007709 	.word	0x08007709
 80076a0:	0800770f 	.word	0x0800770f
 80076a4:	08007709 	.word	0x08007709
 80076a8:	08007709 	.word	0x08007709
 80076ac:	08007709 	.word	0x08007709
 80076b0:	08007709 	.word	0x08007709
 80076b4:	08007709 	.word	0x08007709
 80076b8:	08007709 	.word	0x08007709
 80076bc:	08007709 	.word	0x08007709
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	08007709 	.word	0x08007709
 80076c8:	08007709 	.word	0x08007709
 80076cc:	08007709 	.word	0x08007709
 80076d0:	08007709 	.word	0x08007709
 80076d4:	08007709 	.word	0x08007709
 80076d8:	08007709 	.word	0x08007709
 80076dc:	08007709 	.word	0x08007709
 80076e0:	0800770f 	.word	0x0800770f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2101      	movs	r1, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fdb6 	bl	800825c <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076f4:	e00c      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fe5f 	bl	80083c0 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007716:	4b32      	ldr	r3, [pc, #200]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007722:	492f      	ldr	r1, [pc, #188]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54
 8007728:	e001      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d037      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773e:	2b05      	cmp	r3, #5
 8007740:	d820      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	0800778b 	.word	0x0800778b
 800774c:	08007761 	.word	0x08007761
 8007750:	08007773 	.word	0x08007773
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	2101      	movs	r1, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fd78 	bl	800825c <RCCEx_PLL2_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007770:	e00c      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3324      	adds	r3, #36	; 0x24
 8007776:	2101      	movs	r1, #1
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fe21 	bl	80083c0 <RCCEx_PLL3_Config>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007782:	e003      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
      break;
 8007788:	e000      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800778a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f023 0207 	bic.w	r2, r3, #7
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779e:	4910      	ldr	r1, [pc, #64]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	654b      	str	r3, [r1, #84]	; 0x54
 80077a4:	e001      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d040      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077bc:	2b05      	cmp	r3, #5
 80077be:	d827      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	08007817 	.word	0x08007817
 80077cc:	080077ed 	.word	0x080077ed
 80077d0:	080077ff 	.word	0x080077ff
 80077d4:	08007817 	.word	0x08007817
 80077d8:	08007817 	.word	0x08007817
 80077dc:	08007817 	.word	0x08007817
 80077e0:	58024400 	.word	0x58024400
 80077e4:	58024800 	.word	0x58024800
 80077e8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	2101      	movs	r1, #1
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fd32 	bl	800825c <RCCEx_PLL2_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077fc:	e00c      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3324      	adds	r3, #36	; 0x24
 8007802:	2101      	movs	r1, #1
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fddb 	bl	80083c0 <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800780e:	e003      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800781e:	4bb2      	ldr	r3, [pc, #712]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007822:	f023 0207 	bic.w	r2, r3, #7
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782c:	49ae      	ldr	r1, [pc, #696]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800782e:	4313      	orrs	r3, r2
 8007830:	658b      	str	r3, [r1, #88]	; 0x58
 8007832:	e001      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d044      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800784e:	d01b      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007854:	d805      	bhi.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d022      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800785a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800785e:	d00a      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007860:	e01b      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007866:	d01d      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786c:	d01c      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800786e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007872:	d01b      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007874:	e011      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3304      	adds	r3, #4
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fced 	bl	800825c <RCCEx_PLL2_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007886:	e012      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	2102      	movs	r1, #2
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fd96 	bl	80083c0 <RCCEx_PLL3_Config>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007898:	e009      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
      break;
 800789e:	e006      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078a0:	bf00      	nop
 80078a2:	e004      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078a4:	bf00      	nop
 80078a6:	e002      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078a8:	bf00      	nop
 80078aa:	e000      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078b4:	4b8c      	ldr	r3, [pc, #560]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c2:	4989      	ldr	r1, [pc, #548]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	654b      	str	r3, [r1, #84]	; 0x54
 80078c8:	e001      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d044      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e4:	d01b      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80078e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ea:	d805      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d022      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80078f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f4:	d00a      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80078f6:	e01b      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80078f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fc:	d01d      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80078fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007902:	d01c      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007908:	d01b      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800790a:	e011      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fca2 	bl	800825c <RCCEx_PLL2_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800791c:	e012      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3324      	adds	r3, #36	; 0x24
 8007922:	2102      	movs	r1, #2
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fd4b 	bl	80083c0 <RCCEx_PLL3_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800792e:	e009      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
      break;
 8007934:	e006      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007936:	bf00      	nop
 8007938:	e004      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800793a:	bf00      	nop
 800793c:	e002      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800793e:	bf00      	nop
 8007940:	e000      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800794a:	4b67      	ldr	r3, [pc, #412]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007958:	4963      	ldr	r1, [pc, #396]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800795a:	4313      	orrs	r3, r2
 800795c:	658b      	str	r3, [r1, #88]	; 0x58
 800795e:	e001      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796c:	2b00      	cmp	r3, #0
 800796e:	d044      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800797a:	d01b      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800797c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007980:	d805      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d022      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798a:	d00a      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800798c:	e01b      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800798e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007992:	d01d      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007994:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007998:	d01c      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800799a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800799e:	d01b      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80079a0:	e011      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	2100      	movs	r1, #0
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fc57 	bl	800825c <RCCEx_PLL2_Config>
 80079ae:	4603      	mov	r3, r0
 80079b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079b2:	e012      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3324      	adds	r3, #36	; 0x24
 80079b8:	2102      	movs	r1, #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fd00 	bl	80083c0 <RCCEx_PLL3_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079c4:	e009      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ca:	e006      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079cc:	bf00      	nop
 80079ce:	e004      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079d0:	bf00      	nop
 80079d2:	e002      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079d4:	bf00      	nop
 80079d6:	e000      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80079d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80079e0:	4b41      	ldr	r3, [pc, #260]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ee:	493e      	ldr	r1, [pc, #248]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	658b      	str	r3, [r1, #88]	; 0x58
 80079f4:	e001      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0308 	and.w	r3, r3, #8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01a      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a10:	d10a      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3324      	adds	r3, #36	; 0x24
 8007a16:	2102      	movs	r1, #2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fcd1 	bl	80083c0 <RCCEx_PLL3_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a28:	4b2f      	ldr	r3, [pc, #188]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a36:	492c      	ldr	r1, [pc, #176]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01a      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a52:	d10a      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3324      	adds	r3, #36	; 0x24
 8007a58:	2102      	movs	r1, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fcb0 	bl	80083c0 <RCCEx_PLL3_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a78:	491b      	ldr	r1, [pc, #108]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d032      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a94:	d00d      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a9a:	d016      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d111      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fbd8 	bl	800825c <RCCEx_PLL2_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ab0:	e00c      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3324      	adds	r3, #36	; 0x24
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fc81 	bl	80083c0 <RCCEx_PLL3_Config>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ac2:	e003      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10c      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ae0:	4901      	ldr	r1, [pc, #4]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d02f      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b06:	d00c      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b0c:	d015      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	d10f      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b14:	4b79      	ldr	r3, [pc, #484]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	4a78      	ldr	r2, [pc, #480]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b20:	e00c      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3324      	adds	r3, #36	; 0x24
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fc49 	bl	80083c0 <RCCEx_PLL3_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b32:	e003      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e000      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b42:	4b6e      	ldr	r3, [pc, #440]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b50:	496a      	ldr	r1, [pc, #424]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	654b      	str	r3, [r1, #84]	; 0x54
 8007b56:	e001      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d029      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b74:	d007      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007b76:	e00f      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b78:	4b60      	ldr	r3, [pc, #384]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	4a5f      	ldr	r2, [pc, #380]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b84:	e00b      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fb65 	bl	800825c <RCCEx_PLL2_Config>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b96:	e002      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ba4:	4b55      	ldr	r3, [pc, #340]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb0:	4952      	ldr	r1, [pc, #328]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bb6:	e001      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3324      	adds	r3, #36	; 0x24
 8007bcc:	2102      	movs	r1, #2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fbf6 	bl	80083c0 <RCCEx_PLL3_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d02f      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf2:	d00c      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf8:	d802      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d011      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007bfe:	e00d      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c04:	d00f      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c0a:	d00e      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007c0c:	e006      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	4a3a      	ldr	r2, [pc, #232]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c1a:	e007      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	e004      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c22:	bf00      	nop
 8007c24:	e002      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c26:	bf00      	nop
 8007c28:	e000      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c32:	4b32      	ldr	r3, [pc, #200]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3e:	492f      	ldr	r1, [pc, #188]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	654b      	str	r3, [r1, #84]	; 0x54
 8007c44:	e001      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c56:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c62:	4926      	ldr	r1, [pc, #152]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d009      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c74:	4b21      	ldr	r3, [pc, #132]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c82:	491e      	ldr	r1, [pc, #120]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c94:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ca0:	4916      	ldr	r1, [pc, #88]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00d      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	4a11      	ldr	r2, [pc, #68]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cbc:	6113      	str	r3, [r2, #16]
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cc8:	490c      	ldr	r1, [pc, #48]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da08      	bge.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce2:	4906      	ldr	r1, [pc, #24]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007ce8:	7dbb      	ldrb	r3, [r7, #22]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	58024400 	.word	0x58024400

08007d00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d04:	f7ff f8b2 	bl	8006e6c <HAL_RCC_GetHCLKFreq>
 8007d08:	4601      	mov	r1, r0
 8007d0a:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	4a04      	ldr	r2, [pc, #16]	; (8007d28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d16:	5cd3      	ldrb	r3, [r2, r3]
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	58024400 	.word	0x58024400
 8007d28:	0800ae18 	.word	0x0800ae18

08007d2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b089      	sub	sp, #36	; 0x24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d34:	4b9d      	ldr	r3, [pc, #628]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d3e:	4b9b      	ldr	r3, [pc, #620]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	0b1b      	lsrs	r3, r3, #12
 8007d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d4a:	4b98      	ldr	r3, [pc, #608]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	091b      	lsrs	r3, r3, #4
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d56:	4b95      	ldr	r3, [pc, #596]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5a:	08db      	lsrs	r3, r3, #3
 8007d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 810a 	beq.w	8007f8e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d05a      	beq.n	8007e36 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d302      	bcc.n	8007d8a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d078      	beq.n	8007e7a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007d88:	e099      	b.n	8007ebe <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d8a:	4b88      	ldr	r3, [pc, #544]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02d      	beq.n	8007df2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d96:	4b85      	ldr	r3, [pc, #532]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	08db      	lsrs	r3, r3, #3
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	4a83      	ldr	r2, [pc, #524]	; (8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007da2:	fa22 f303 	lsr.w	r3, r2, r3
 8007da6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	ee07 3a90 	vmov	s15, r3
 8007db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc0:	4b7a      	ldr	r3, [pc, #488]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	ee07 3a90 	vmov	s15, r3
 8007dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007df0:	e087      	b.n	8007f02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e04:	4b69      	ldr	r3, [pc, #420]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e18:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e34:	e065      	b.n	8007f02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007fbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e48:	4b58      	ldr	r3, [pc, #352]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e78:	e043      	b.n	8007f02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8c:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebc:	e021      	b.n	8007f02 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007fbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed0:	4b36      	ldr	r3, [pc, #216]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f00:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f02:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	0a5b      	lsrs	r3, r3, #9
 8007f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f28:	ee17 2a90 	vmov	r2, s15
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f56:	ee17 2a90 	vmov	r2, s15
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f5e:	4b13      	ldr	r3, [pc, #76]	; (8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f62:	0e1b      	lsrs	r3, r3, #24
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f84:	ee17 2a90 	vmov	r2, s15
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	3724      	adds	r7, #36	; 0x24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	03d09000 	.word	0x03d09000
 8007fb4:	46000000 	.word	0x46000000
 8007fb8:	4c742400 	.word	0x4c742400
 8007fbc:	4a742400 	.word	0x4a742400
 8007fc0:	4bf42400 	.word	0x4bf42400

08007fc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b089      	sub	sp, #36	; 0x24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fcc:	4b9d      	ldr	r3, [pc, #628]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007fd6:	4b9b      	ldr	r3, [pc, #620]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fda:	0d1b      	lsrs	r3, r3, #20
 8007fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fe0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007fe2:	4b98      	ldr	r3, [pc, #608]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	0a1b      	lsrs	r3, r3, #8
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007fee:	4b95      	ldr	r3, [pc, #596]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	08db      	lsrs	r3, r3, #3
 8007ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 810a 	beq.w	8008226 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d05a      	beq.n	80080ce <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d302      	bcc.n	8008022 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800801c:	2b02      	cmp	r3, #2
 800801e:	d078      	beq.n	8008112 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008020:	e099      	b.n	8008156 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008022:	4b88      	ldr	r3, [pc, #544]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d02d      	beq.n	800808a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800802e:	4b85      	ldr	r3, [pc, #532]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	08db      	lsrs	r3, r3, #3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	4a83      	ldr	r2, [pc, #524]	; (8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800803a:	fa22 f303 	lsr.w	r3, r2, r3
 800803e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	ee07 3a90 	vmov	s15, r3
 8008050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008058:	4b7a      	ldr	r3, [pc, #488]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008060:	ee07 3a90 	vmov	s15, r3
 8008064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008068:	ed97 6a03 	vldr	s12, [r7, #12]
 800806c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008084:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008088:	e087      	b.n	800819a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	ee07 3a90 	vmov	s15, r3
 8008090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008094:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008250 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809c:	4b69      	ldr	r3, [pc, #420]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080cc:	e065      	b.n	800819a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80080dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e0:	4b58      	ldr	r3, [pc, #352]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008110:	e043      	b.n	800819a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008124:	4b47      	ldr	r3, [pc, #284]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008134:	ed97 6a03 	vldr	s12, [r7, #12]
 8008138:	eddf 5a44 	vldr	s11, [pc, #272]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800813c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008150:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008154:	e021      	b.n	800819a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008160:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008168:	4b36      	ldr	r3, [pc, #216]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008178:	ed97 6a03 	vldr	s12, [r7, #12]
 800817c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800818c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008194:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008198:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800819a:	4b2a      	ldr	r3, [pc, #168]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	0a5b      	lsrs	r3, r3, #9
 80081a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081c0:	ee17 2a90 	vmov	r2, s15
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ee:	ee17 2a90 	vmov	r2, s15
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	0e1b      	lsrs	r3, r3, #24
 80081fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008200:	ee07 3a90 	vmov	s15, r3
 8008204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800820c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008210:	edd7 6a07 	vldr	s13, [r7, #28]
 8008214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800821c:	ee17 2a90 	vmov	r2, s15
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008224:	e008      	b.n	8008238 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	3724      	adds	r7, #36	; 0x24
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	46000000 	.word	0x46000000
 8008250:	4c742400 	.word	0x4c742400
 8008254:	4a742400 	.word	0x4a742400
 8008258:	4bf42400 	.word	0x4bf42400

0800825c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800826a:	4b53      	ldr	r3, [pc, #332]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d101      	bne.n	800827a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e099      	b.n	80083ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800827a:	4b4f      	ldr	r3, [pc, #316]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4e      	ldr	r2, [pc, #312]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008286:	f7f9 fbab 	bl	80019e0 <HAL_GetTick>
 800828a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800828c:	e008      	b.n	80082a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800828e:	f7f9 fba7 	bl	80019e0 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e086      	b.n	80083ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082a0:	4b45      	ldr	r3, [pc, #276]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082ac:	4b42      	ldr	r3, [pc, #264]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	031b      	lsls	r3, r3, #12
 80082ba:	493f      	ldr	r1, [pc, #252]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	628b      	str	r3, [r1, #40]	; 0x28
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	025b      	lsls	r3, r3, #9
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	3b01      	subs	r3, #1
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	061b      	lsls	r3, r3, #24
 80082ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082f0:	4931      	ldr	r1, [pc, #196]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80082f6:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	492d      	ldr	r1, [pc, #180]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008308:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	f023 0220 	bic.w	r2, r3, #32
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	4928      	ldr	r1, [pc, #160]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008316:	4313      	orrs	r3, r2
 8008318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800831a:	4b27      	ldr	r3, [pc, #156]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008320:	f023 0310 	bic.w	r3, r3, #16
 8008324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008326:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <RCCEx_PLL2_Config+0x160>)
 800832c:	4013      	ands	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	69d2      	ldr	r2, [r2, #28]
 8008332:	00d2      	lsls	r2, r2, #3
 8008334:	4920      	ldr	r1, [pc, #128]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008336:	4313      	orrs	r3, r2
 8008338:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800833a:	4b1f      	ldr	r3, [pc, #124]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008340:	f043 0310 	orr.w	r3, r3, #16
 8008344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800834c:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a19      	ldr	r2, [pc, #100]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008358:	e00f      	b.n	800837a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d106      	bne.n	800836e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008360:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800836a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800836c:	e005      	b.n	800837a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4a11      	ldr	r2, [pc, #68]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008380:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008386:	f7f9 fb2b 	bl	80019e0 <HAL_GetTick>
 800838a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800838c:	e008      	b.n	80083a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800838e:	f7f9 fb27 	bl	80019e0 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e006      	b.n	80083ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f0      	beq.n	800838e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	58024400 	.word	0x58024400
 80083bc:	ffff0007 	.word	0xffff0007

080083c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083ce:	4b53      	ldr	r3, [pc, #332]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d101      	bne.n	80083de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e099      	b.n	8008512 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083de:	4b4f      	ldr	r3, [pc, #316]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a4e      	ldr	r2, [pc, #312]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80083e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7f9 faf9 	bl	80019e0 <HAL_GetTick>
 80083ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083f0:	e008      	b.n	8008404 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083f2:	f7f9 faf5 	bl	80019e0 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e086      	b.n	8008512 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008404:	4b45      	ldr	r3, [pc, #276]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f0      	bne.n	80083f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008410:	4b42      	ldr	r3, [pc, #264]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	051b      	lsls	r3, r3, #20
 800841e:	493f      	ldr	r1, [pc, #252]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008420:	4313      	orrs	r3, r2
 8008422:	628b      	str	r3, [r1, #40]	; 0x28
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	3b01      	subs	r3, #1
 800842a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	025b      	lsls	r3, r3, #9
 8008436:	b29b      	uxth	r3, r3
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	3b01      	subs	r3, #1
 800844e:	061b      	lsls	r3, r3, #24
 8008450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008454:	4931      	ldr	r1, [pc, #196]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800845a:	4b30      	ldr	r3, [pc, #192]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	492d      	ldr	r1, [pc, #180]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008468:	4313      	orrs	r3, r2
 800846a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800846c:	4b2b      	ldr	r3, [pc, #172]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	4928      	ldr	r1, [pc, #160]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800847a:	4313      	orrs	r3, r2
 800847c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800847e:	4b27      	ldr	r3, [pc, #156]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	4a26      	ldr	r2, [pc, #152]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008488:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800848a:	4b24      	ldr	r3, [pc, #144]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800848c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800848e:	4b24      	ldr	r3, [pc, #144]	; (8008520 <RCCEx_PLL3_Config+0x160>)
 8008490:	4013      	ands	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	69d2      	ldr	r2, [r2, #28]
 8008496:	00d2      	lsls	r2, r2, #3
 8008498:	4920      	ldr	r1, [pc, #128]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800849e:	4b1f      	ldr	r3, [pc, #124]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	4a1e      	ldr	r2, [pc, #120]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084b0:	4b1a      	ldr	r3, [pc, #104]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a19      	ldr	r2, [pc, #100]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084bc:	e00f      	b.n	80084de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d106      	bne.n	80084d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084c4:	4b15      	ldr	r3, [pc, #84]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a14      	ldr	r2, [pc, #80]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084d0:	e005      	b.n	80084de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084d2:	4b12      	ldr	r3, [pc, #72]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	4a11      	ldr	r2, [pc, #68]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a0e      	ldr	r2, [pc, #56]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ea:	f7f9 fa79 	bl	80019e0 <HAL_GetTick>
 80084ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084f0:	e008      	b.n	8008504 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084f2:	f7f9 fa75 	bl	80019e0 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d901      	bls.n	8008504 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e006      	b.n	8008512 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0f0      	beq.n	80084f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	58024400 	.word	0x58024400
 8008520:	ffff0007 	.word	0xffff0007

08008524 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e0e2      	b.n	8008700 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a70      	ldr	r2, [pc, #448]	; (8008708 <HAL_SPI_Init+0x1e4>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00f      	beq.n	800856a <HAL_SPI_Init+0x46>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a6f      	ldr	r2, [pc, #444]	; (800870c <HAL_SPI_Init+0x1e8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00a      	beq.n	800856a <HAL_SPI_Init+0x46>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a6d      	ldr	r2, [pc, #436]	; (8008710 <HAL_SPI_Init+0x1ec>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d005      	beq.n	800856a <HAL_SPI_Init+0x46>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2b0f      	cmp	r3, #15
 8008564:	d901      	bls.n	800856a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0ca      	b.n	8008700 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f8d2 	bl	8008714 <SPI_GetPacketSize>
 8008570:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a64      	ldr	r2, [pc, #400]	; (8008708 <HAL_SPI_Init+0x1e4>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00c      	beq.n	8008596 <HAL_SPI_Init+0x72>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a62      	ldr	r2, [pc, #392]	; (800870c <HAL_SPI_Init+0x1e8>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <HAL_SPI_Init+0x72>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a61      	ldr	r2, [pc, #388]	; (8008710 <HAL_SPI_Init+0x1ec>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d002      	beq.n	8008596 <HAL_SPI_Init+0x72>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b08      	cmp	r3, #8
 8008594:	d811      	bhi.n	80085ba <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800859a:	4a5b      	ldr	r2, [pc, #364]	; (8008708 <HAL_SPI_Init+0x1e4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d009      	beq.n	80085b4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a59      	ldr	r2, [pc, #356]	; (800870c <HAL_SPI_Init+0x1e8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <HAL_SPI_Init+0x90>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a58      	ldr	r2, [pc, #352]	; (8008710 <HAL_SPI_Init+0x1ec>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d104      	bne.n	80085be <HAL_SPI_Init+0x9a>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d901      	bls.n	80085be <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e0a0      	b.n	8008700 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7f8 fcc6 	bl	8000f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0201 	bic.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085f8:	d110      	bne.n	800861c <HAL_SPI_Init+0xf8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008602:	d10b      	bne.n	800861c <HAL_SPI_Init+0xf8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	2b00      	cmp	r3, #0
 800860a:	d107      	bne.n	800861c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800861a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69da      	ldr	r2, [r3, #28]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862e:	ea42 0103 	orr.w	r1, r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	431a      	orrs	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	431a      	orrs	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867c:	ea42 0103 	orr.w	r1, r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d113      	bne.n	80086bc <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086ba:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0201 	bic.w	r2, r2, #1
 80086ca:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40013000 	.word	0x40013000
 800870c:	40003800 	.word	0x40003800
 8008710:	40003c00 	.word	0x40003c00

08008714 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	3301      	adds	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	3307      	adds	r3, #7
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	fb02 f303 	mul.w	r3, r2, r3
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e049      	b.n	80087f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7f8 fecf 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f000 fa77 	bl	8008c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e049      	b.n	800889e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f841 	bl	80088a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f000 fa20 	bl	8008c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
	...

080088bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d101      	bne.n	80088d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e0fd      	b.n	8008ad2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b14      	cmp	r3, #20
 80088e2:	f200 80f0 	bhi.w	8008ac6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008941 	.word	0x08008941
 80088f0:	08008ac7 	.word	0x08008ac7
 80088f4:	08008ac7 	.word	0x08008ac7
 80088f8:	08008ac7 	.word	0x08008ac7
 80088fc:	08008981 	.word	0x08008981
 8008900:	08008ac7 	.word	0x08008ac7
 8008904:	08008ac7 	.word	0x08008ac7
 8008908:	08008ac7 	.word	0x08008ac7
 800890c:	080089c3 	.word	0x080089c3
 8008910:	08008ac7 	.word	0x08008ac7
 8008914:	08008ac7 	.word	0x08008ac7
 8008918:	08008ac7 	.word	0x08008ac7
 800891c:	08008a03 	.word	0x08008a03
 8008920:	08008ac7 	.word	0x08008ac7
 8008924:	08008ac7 	.word	0x08008ac7
 8008928:	08008ac7 	.word	0x08008ac7
 800892c:	08008a45 	.word	0x08008a45
 8008930:	08008ac7 	.word	0x08008ac7
 8008934:	08008ac7 	.word	0x08008ac7
 8008938:	08008ac7 	.word	0x08008ac7
 800893c:	08008a85 	.word	0x08008a85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fa32 	bl	8008db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0208 	orr.w	r2, r2, #8
 800895a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0204 	bic.w	r2, r2, #4
 800896a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691a      	ldr	r2, [r3, #16]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	619a      	str	r2, [r3, #24]
      break;
 800897e:	e0a3      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 faa2 	bl	8008ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800899a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6999      	ldr	r1, [r3, #24]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	021a      	lsls	r2, r3, #8
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	619a      	str	r2, [r3, #24]
      break;
 80089c0:	e082      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fb0b 	bl	8008fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0208 	orr.w	r2, r2, #8
 80089dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0204 	bic.w	r2, r2, #4
 80089ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69d9      	ldr	r1, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	61da      	str	r2, [r3, #28]
      break;
 8008a00:	e062      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fb71 	bl	80090f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69da      	ldr	r2, [r3, #28]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69d9      	ldr	r1, [r3, #28]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	021a      	lsls	r2, r3, #8
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	61da      	str	r2, [r3, #28]
      break;
 8008a42:	e041      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fbb8 	bl	80091c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0208 	orr.w	r2, r2, #8
 8008a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0204 	bic.w	r2, r2, #4
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a82:	e021      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fbfa 	bl	8009284 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	021a      	lsls	r2, r3, #8
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ac4:	e000      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008ac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop

08008adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_TIM_ConfigClockSource+0x18>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e0b7      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x188>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4b57      	ldr	r3, [pc, #348]	; (8008c6c <HAL_TIM_ConfigClockSource+0x190>)
 8008b10:	4013      	ands	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b70      	cmp	r3, #112	; 0x70
 8008b2a:	d02e      	beq.n	8008b8a <HAL_TIM_ConfigClockSource+0xae>
 8008b2c:	2b70      	cmp	r3, #112	; 0x70
 8008b2e:	d812      	bhi.n	8008b56 <HAL_TIM_ConfigClockSource+0x7a>
 8008b30:	2b30      	cmp	r3, #48	; 0x30
 8008b32:	f000 8084 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b36:	2b30      	cmp	r3, #48	; 0x30
 8008b38:	d806      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x6c>
 8008b3a:	2b10      	cmp	r3, #16
 8008b3c:	d07f      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d07d      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d07b      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008b46:	e084      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b48:	2b50      	cmp	r3, #80	; 0x50
 8008b4a:	d048      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x102>
 8008b4c:	2b60      	cmp	r3, #96	; 0x60
 8008b4e:	d056      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0x122>
 8008b50:	2b40      	cmp	r3, #64	; 0x40
 8008b52:	d064      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008b54:	e07d      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b56:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b5a:	d070      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b60:	d809      	bhi.n	8008b76 <HAL_TIM_ConfigClockSource+0x9a>
 8008b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b66:	d027      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0xdc>
 8008b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b6c:	d067      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b72:	d06d      	beq.n	8008c50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b74:	e06d      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b76:	4a3e      	ldr	r2, [pc, #248]	; (8008c70 <HAL_TIM_ConfigClockSource+0x194>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d060      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b7c:	4a3d      	ldr	r2, [pc, #244]	; (8008c74 <HAL_TIM_ConfigClockSource+0x198>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d05d      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
 8008b82:	4a3d      	ldr	r2, [pc, #244]	; (8008c78 <HAL_TIM_ConfigClockSource+0x19c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d05a      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008b88:	e063      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6899      	ldr	r1, [r3, #8]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f000 fc55 	bl	8009448 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	609a      	str	r2, [r3, #8]
      break;
 8008bb6:	e04c      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	6899      	ldr	r1, [r3, #8]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f000 fc3e 	bl	8009448 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bda:	609a      	str	r2, [r3, #8]
      break;
 8008bdc:	e039      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	6859      	ldr	r1, [r3, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f000 fbae 	bl	800934c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2150      	movs	r1, #80	; 0x50
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fc08 	bl	800940c <TIM_ITRx_SetConfig>
      break;
 8008bfc:	e029      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 fbcd 	bl	80093aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2160      	movs	r1, #96	; 0x60
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fbf8 	bl	800940c <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e019      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	6859      	ldr	r1, [r3, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f000 fb8e 	bl	800934c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2140      	movs	r1, #64	; 0x40
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fbe8 	bl	800940c <TIM_ITRx_SetConfig>
      break;
 8008c3c:	e009      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f000 fbdf 	bl	800940c <TIM_ITRx_SetConfig>
      break;
 8008c4e:	e000      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008c50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	ffceff88 	.word	0xffceff88
 8008c70:	00100030 	.word	0x00100030
 8008c74:	00100040 	.word	0x00100040
 8008c78:	00100020 	.word	0x00100020

08008c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a40      	ldr	r2, [pc, #256]	; (8008d90 <TIM_Base_SetConfig+0x114>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d013      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9a:	d00f      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a3d      	ldr	r2, [pc, #244]	; (8008d94 <TIM_Base_SetConfig+0x118>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00b      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a3c      	ldr	r2, [pc, #240]	; (8008d98 <TIM_Base_SetConfig+0x11c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a3b      	ldr	r2, [pc, #236]	; (8008d9c <TIM_Base_SetConfig+0x120>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a3a      	ldr	r2, [pc, #232]	; (8008da0 <TIM_Base_SetConfig+0x124>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d108      	bne.n	8008cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2f      	ldr	r2, [pc, #188]	; (8008d90 <TIM_Base_SetConfig+0x114>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d01f      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d01b      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2c      	ldr	r2, [pc, #176]	; (8008d94 <TIM_Base_SetConfig+0x118>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d017      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2b      	ldr	r2, [pc, #172]	; (8008d98 <TIM_Base_SetConfig+0x11c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d013      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2a      	ldr	r2, [pc, #168]	; (8008d9c <TIM_Base_SetConfig+0x120>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00f      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a29      	ldr	r2, [pc, #164]	; (8008da0 <TIM_Base_SetConfig+0x124>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00b      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a28      	ldr	r2, [pc, #160]	; (8008da4 <TIM_Base_SetConfig+0x128>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d007      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a27      	ldr	r2, [pc, #156]	; (8008da8 <TIM_Base_SetConfig+0x12c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d003      	beq.n	8008d16 <TIM_Base_SetConfig+0x9a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a26      	ldr	r2, [pc, #152]	; (8008dac <TIM_Base_SetConfig+0x130>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d108      	bne.n	8008d28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a10      	ldr	r2, [pc, #64]	; (8008d90 <TIM_Base_SetConfig+0x114>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00f      	beq.n	8008d74 <TIM_Base_SetConfig+0xf8>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <TIM_Base_SetConfig+0x124>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00b      	beq.n	8008d74 <TIM_Base_SetConfig+0xf8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a11      	ldr	r2, [pc, #68]	; (8008da4 <TIM_Base_SetConfig+0x128>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d007      	beq.n	8008d74 <TIM_Base_SetConfig+0xf8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a10      	ldr	r2, [pc, #64]	; (8008da8 <TIM_Base_SetConfig+0x12c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d003      	beq.n	8008d74 <TIM_Base_SetConfig+0xf8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a0f      	ldr	r2, [pc, #60]	; (8008dac <TIM_Base_SetConfig+0x130>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d103      	bne.n	8008d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	691a      	ldr	r2, [r3, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	615a      	str	r2, [r3, #20]
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800

08008db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	f023 0201 	bic.w	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4b37      	ldr	r3, [pc, #220]	; (8008eb8 <TIM_OC1_SetConfig+0x108>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f023 0302 	bic.w	r3, r3, #2
 8008df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a2d      	ldr	r2, [pc, #180]	; (8008ebc <TIM_OC1_SetConfig+0x10c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00f      	beq.n	8008e2c <TIM_OC1_SetConfig+0x7c>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a2c      	ldr	r2, [pc, #176]	; (8008ec0 <TIM_OC1_SetConfig+0x110>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00b      	beq.n	8008e2c <TIM_OC1_SetConfig+0x7c>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a2b      	ldr	r2, [pc, #172]	; (8008ec4 <TIM_OC1_SetConfig+0x114>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_OC1_SetConfig+0x7c>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a2a      	ldr	r2, [pc, #168]	; (8008ec8 <TIM_OC1_SetConfig+0x118>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_OC1_SetConfig+0x7c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a29      	ldr	r2, [pc, #164]	; (8008ecc <TIM_OC1_SetConfig+0x11c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d10c      	bne.n	8008e46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f023 0308 	bic.w	r3, r3, #8
 8008e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f023 0304 	bic.w	r3, r3, #4
 8008e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1c      	ldr	r2, [pc, #112]	; (8008ebc <TIM_OC1_SetConfig+0x10c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00f      	beq.n	8008e6e <TIM_OC1_SetConfig+0xbe>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a1b      	ldr	r2, [pc, #108]	; (8008ec0 <TIM_OC1_SetConfig+0x110>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d00b      	beq.n	8008e6e <TIM_OC1_SetConfig+0xbe>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a1a      	ldr	r2, [pc, #104]	; (8008ec4 <TIM_OC1_SetConfig+0x114>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d007      	beq.n	8008e6e <TIM_OC1_SetConfig+0xbe>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a19      	ldr	r2, [pc, #100]	; (8008ec8 <TIM_OC1_SetConfig+0x118>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d003      	beq.n	8008e6e <TIM_OC1_SetConfig+0xbe>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a18      	ldr	r2, [pc, #96]	; (8008ecc <TIM_OC1_SetConfig+0x11c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d111      	bne.n	8008e92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	621a      	str	r2, [r3, #32]
}
 8008eac:	bf00      	nop
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	fffeff8f 	.word	0xfffeff8f
 8008ebc:	40010000 	.word	0x40010000
 8008ec0:	40010400 	.word	0x40010400
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40014400 	.word	0x40014400
 8008ecc:	40014800 	.word	0x40014800

08008ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	f023 0210 	bic.w	r2, r3, #16
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	4b34      	ldr	r3, [pc, #208]	; (8008fcc <TIM_OC2_SetConfig+0xfc>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f023 0320 	bic.w	r3, r3, #32
 8008f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a29      	ldr	r2, [pc, #164]	; (8008fd0 <TIM_OC2_SetConfig+0x100>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d003      	beq.n	8008f38 <TIM_OC2_SetConfig+0x68>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a28      	ldr	r2, [pc, #160]	; (8008fd4 <TIM_OC2_SetConfig+0x104>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d10d      	bne.n	8008f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a1e      	ldr	r2, [pc, #120]	; (8008fd0 <TIM_OC2_SetConfig+0x100>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00f      	beq.n	8008f7c <TIM_OC2_SetConfig+0xac>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <TIM_OC2_SetConfig+0x104>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00b      	beq.n	8008f7c <TIM_OC2_SetConfig+0xac>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a1c      	ldr	r2, [pc, #112]	; (8008fd8 <TIM_OC2_SetConfig+0x108>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d007      	beq.n	8008f7c <TIM_OC2_SetConfig+0xac>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a1b      	ldr	r2, [pc, #108]	; (8008fdc <TIM_OC2_SetConfig+0x10c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_OC2_SetConfig+0xac>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a1a      	ldr	r2, [pc, #104]	; (8008fe0 <TIM_OC2_SetConfig+0x110>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d113      	bne.n	8008fa4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	feff8fff 	.word	0xfeff8fff
 8008fd0:	40010000 	.word	0x40010000
 8008fd4:	40010400 	.word	0x40010400
 8008fd8:	40014000 	.word	0x40014000
 8008fdc:	40014400 	.word	0x40014400
 8008fe0:	40014800 	.word	0x40014800

08008fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800902c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a27      	ldr	r2, [pc, #156]	; (80090dc <TIM_OC3_SetConfig+0xf8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_OC3_SetConfig+0x66>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a26      	ldr	r2, [pc, #152]	; (80090e0 <TIM_OC3_SetConfig+0xfc>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d10d      	bne.n	8009066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	021b      	lsls	r3, r3, #8
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a1c      	ldr	r2, [pc, #112]	; (80090dc <TIM_OC3_SetConfig+0xf8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d00f      	beq.n	800908e <TIM_OC3_SetConfig+0xaa>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a1b      	ldr	r2, [pc, #108]	; (80090e0 <TIM_OC3_SetConfig+0xfc>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00b      	beq.n	800908e <TIM_OC3_SetConfig+0xaa>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <TIM_OC3_SetConfig+0x100>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <TIM_OC3_SetConfig+0xaa>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a19      	ldr	r2, [pc, #100]	; (80090e8 <TIM_OC3_SetConfig+0x104>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC3_SetConfig+0xaa>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a18      	ldr	r2, [pc, #96]	; (80090ec <TIM_OC3_SetConfig+0x108>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d113      	bne.n	80090b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800909c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	621a      	str	r2, [r3, #32]
}
 80090d0:	bf00      	nop
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40010400 	.word	0x40010400
 80090e4:	40014000 	.word	0x40014000
 80090e8:	40014400 	.word	0x40014400
 80090ec:	40014800 	.word	0x40014800

080090f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800913a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	031b      	lsls	r3, r3, #12
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a18      	ldr	r2, [pc, #96]	; (80091ac <TIM_OC4_SetConfig+0xbc>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d00f      	beq.n	8009170 <TIM_OC4_SetConfig+0x80>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a17      	ldr	r2, [pc, #92]	; (80091b0 <TIM_OC4_SetConfig+0xc0>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00b      	beq.n	8009170 <TIM_OC4_SetConfig+0x80>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <TIM_OC4_SetConfig+0xc4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d007      	beq.n	8009170 <TIM_OC4_SetConfig+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <TIM_OC4_SetConfig+0xc8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_OC4_SetConfig+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a14      	ldr	r2, [pc, #80]	; (80091bc <TIM_OC4_SetConfig+0xcc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d109      	bne.n	8009184 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	019b      	lsls	r3, r3, #6
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	4313      	orrs	r3, r2
 8009182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	621a      	str	r2, [r3, #32]
}
 800919e:	bf00      	nop
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40010000 	.word	0x40010000
 80091b0:	40010400 	.word	0x40010400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40014400 	.word	0x40014400
 80091bc:	40014800 	.word	0x40014800

080091c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	4313      	orrs	r3, r2
 800920c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a17      	ldr	r2, [pc, #92]	; (8009270 <TIM_OC5_SetConfig+0xb0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00f      	beq.n	8009236 <TIM_OC5_SetConfig+0x76>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a16      	ldr	r2, [pc, #88]	; (8009274 <TIM_OC5_SetConfig+0xb4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00b      	beq.n	8009236 <TIM_OC5_SetConfig+0x76>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a15      	ldr	r2, [pc, #84]	; (8009278 <TIM_OC5_SetConfig+0xb8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d007      	beq.n	8009236 <TIM_OC5_SetConfig+0x76>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a14      	ldr	r2, [pc, #80]	; (800927c <TIM_OC5_SetConfig+0xbc>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_OC5_SetConfig+0x76>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a13      	ldr	r2, [pc, #76]	; (8009280 <TIM_OC5_SetConfig+0xc0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d109      	bne.n	800924a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800923c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	621a      	str	r2, [r3, #32]
}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	40010000 	.word	0x40010000
 8009274:	40010400 	.word	0x40010400
 8009278:	40014000 	.word	0x40014000
 800927c:	40014400 	.word	0x40014400
 8009280:	40014800 	.word	0x40014800

08009284 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	051b      	lsls	r3, r3, #20
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a18      	ldr	r2, [pc, #96]	; (8009338 <TIM_OC6_SetConfig+0xb4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00f      	beq.n	80092fc <TIM_OC6_SetConfig+0x78>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a17      	ldr	r2, [pc, #92]	; (800933c <TIM_OC6_SetConfig+0xb8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00b      	beq.n	80092fc <TIM_OC6_SetConfig+0x78>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a16      	ldr	r2, [pc, #88]	; (8009340 <TIM_OC6_SetConfig+0xbc>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d007      	beq.n	80092fc <TIM_OC6_SetConfig+0x78>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a15      	ldr	r2, [pc, #84]	; (8009344 <TIM_OC6_SetConfig+0xc0>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d003      	beq.n	80092fc <TIM_OC6_SetConfig+0x78>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a14      	ldr	r2, [pc, #80]	; (8009348 <TIM_OC6_SetConfig+0xc4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d109      	bne.n	8009310 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009302:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	029b      	lsls	r3, r3, #10
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	4313      	orrs	r3, r2
 800930e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	621a      	str	r2, [r3, #32]
}
 800932a:	bf00      	nop
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	40010000 	.word	0x40010000
 800933c:	40010400 	.word	0x40010400
 8009340:	40014000 	.word	0x40014000
 8009344:	40014400 	.word	0x40014400
 8009348:	40014800 	.word	0x40014800

0800934c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	f023 0201 	bic.w	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 030a 	bic.w	r3, r3, #10
 8009388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b087      	sub	sp, #28
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	f023 0210 	bic.w	r2, r3, #16
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	031b      	lsls	r3, r3, #12
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	4313      	orrs	r3, r2
 80093de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <TIM_ITRx_SetConfig+0x38>)
 8009420:	4013      	ands	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	f043 0307 	orr.w	r3, r3, #7
 800942e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	609a      	str	r2, [r3, #8]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	ffcfff8f 	.word	0xffcfff8f

08009448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	021a      	lsls	r2, r3, #8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	431a      	orrs	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4313      	orrs	r3, r2
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	4313      	orrs	r3, r2
 8009474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	697a      	ldr	r2, [r7, #20]
 800947a:	609a      	str	r2, [r3, #8]
}
 800947c:	bf00      	nop
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800949c:	2302      	movs	r3, #2
 800949e:	e068      	b.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a2e      	ldr	r2, [pc, #184]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a2d      	ldr	r2, [pc, #180]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d108      	bne.n	80094e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1e      	ldr	r2, [pc, #120]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d01d      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009512:	d018      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1b      	ldr	r2, [pc, #108]	; (8009588 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1a      	ldr	r2, [pc, #104]	; (800958c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00e      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a18      	ldr	r2, [pc, #96]	; (8009590 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d009      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a13      	ldr	r2, [pc, #76]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d004      	beq.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a14      	ldr	r2, [pc, #80]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d10c      	bne.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800954c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	4313      	orrs	r3, r2
 8009556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40010000 	.word	0x40010000
 8009584:	40010400 	.word	0x40010400
 8009588:	40000400 	.word	0x40000400
 800958c:	40000800 	.word	0x40000800
 8009590:	40000c00 	.word	0x40000c00
 8009594:	40001800 	.word	0x40001800

08009598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d101      	bne.n	80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e065      	b.n	8009680 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a16      	ldr	r2, [pc, #88]	; (800968c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d004      	beq.n	8009642 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a14      	ldr	r2, [pc, #80]	; (8009690 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d115      	bne.n	800966e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	051b      	lsls	r3, r3, #20
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	4313      	orrs	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	40010000 	.word	0x40010000
 8009690:	40010400 	.word	0x40010400

08009694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e042      	b.n	800972c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7f8 f855 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2224      	movs	r2, #36	; 0x24
 80096c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa56 	bl	8009b88 <UART_SetConfig>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e022      	b.n	800972c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fffa 	bl	800a6e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 0201 	orr.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 f881 	bl	800a82c <UART_CheckIdleState>
 800972a:	4603      	mov	r3, r0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	; 0x28
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	4613      	mov	r3, r2
 8009742:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974a:	2b20      	cmp	r3, #32
 800974c:	f040 8083 	bne.w	8009856 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <HAL_UART_Transmit+0x28>
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e07b      	b.n	8009858 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009766:	2b01      	cmp	r3, #1
 8009768:	d101      	bne.n	800976e <HAL_UART_Transmit+0x3a>
 800976a:	2302      	movs	r3, #2
 800976c:	e074      	b.n	8009858 <HAL_UART_Transmit+0x124>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2221      	movs	r2, #33	; 0x21
 8009782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009786:	f7f8 f92b 	bl	80019e0 <HAL_GetTick>
 800978a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	88fa      	ldrh	r2, [r7, #6]
 8009790:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	88fa      	ldrh	r2, [r7, #6]
 8009798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a4:	d108      	bne.n	80097b8 <HAL_UART_Transmit+0x84>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d104      	bne.n	80097b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	e003      	b.n	80097c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097bc:	2300      	movs	r3, #0
 80097be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80097c8:	e02c      	b.n	8009824 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2180      	movs	r1, #128	; 0x80
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f001 f871 	bl	800a8bc <UART_WaitOnFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e039      	b.n	8009858 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10b      	bne.n	8009802 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	3302      	adds	r3, #2
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	e007      	b.n	8009812 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	781a      	ldrb	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	3301      	adds	r3, #1
 8009810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800982a:	b29b      	uxth	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1cc      	bne.n	80097ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2200      	movs	r2, #0
 8009838:	2140      	movs	r1, #64	; 0x40
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f001 f83e 	bl	800a8bc <UART_WaitOnFlagUntilTimeout>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e006      	b.n	8009858 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	e000      	b.n	8009858 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009856:	2302      	movs	r3, #2
  }
}
 8009858:	4618      	mov	r0, r3
 800985a:	3720      	adds	r7, #32
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	f640 030f 	movw	r3, #2063	; 0x80f
 8009886:	4013      	ands	r3, r2
 8009888:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d118      	bne.n	80098c2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b00      	cmp	r3, #0
 8009898:	d013      	beq.n	80098c2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	f003 0320 	and.w	r3, r3, #32
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 8145 	beq.w	8009b42 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
      }
      return;
 80098c0:	e13f      	b.n	8009b42 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80e8 	beq.w	8009a9a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	4ba1      	ldr	r3, [pc, #644]	; (8009b54 <HAL_UART_IRQHandler+0x2f4>)
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d105      	bne.n	80098e0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	4ba0      	ldr	r3, [pc, #640]	; (8009b58 <HAL_UART_IRQHandler+0x2f8>)
 80098d8:	4013      	ands	r3, r2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80dd 	beq.w	8009a9a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d010      	beq.n	800990c <HAL_UART_IRQHandler+0xac>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2201      	movs	r2, #1
 80098fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009902:	f043 0201 	orr.w	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d010      	beq.n	8009938 <HAL_UART_IRQHandler+0xd8>
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2202      	movs	r2, #2
 8009926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800992e:	f043 0204 	orr.w	r2, r3, #4
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	d010      	beq.n	8009964 <HAL_UART_IRQHandler+0x104>
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2204      	movs	r2, #4
 8009952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995a:	f043 0202 	orr.w	r2, r3, #2
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d015      	beq.n	800999a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4b76      	ldr	r3, [pc, #472]	; (8009b54 <HAL_UART_IRQHandler+0x2f4>)
 800997c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00b      	beq.n	800999a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2208      	movs	r2, #8
 8009988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009990:	f043 0208 	orr.w	r2, r3, #8
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d011      	beq.n	80099c8 <HAL_UART_IRQHandler+0x168>
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00c      	beq.n	80099c8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099be:	f043 0220 	orr.w	r2, r3, #32
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80b9 	beq.w	8009b46 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d011      	beq.n	8009a02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	f003 0320 	and.w	r3, r3, #32
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a14:	2b40      	cmp	r3, #64	; 0x40
 8009a16:	d004      	beq.n	8009a22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d031      	beq.n	8009a86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 ffca 	bl	800a9bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a32:	2b40      	cmp	r3, #64	; 0x40
 8009a34:	d123      	bne.n	8009a7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d013      	beq.n	8009a76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a52:	4a42      	ldr	r2, [pc, #264]	; (8009b5c <HAL_UART_IRQHandler+0x2fc>)
 8009a54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f9 fd32 	bl	80034c4 <HAL_DMA_Abort_IT>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d017      	beq.n	8009a96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009a70:	4610      	mov	r0, r2
 8009a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a74:	e00f      	b.n	8009a96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f87c 	bl	8009b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a7c:	e00b      	b.n	8009a96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f878 	bl	8009b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a84:	e007      	b.n	8009a96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f874 	bl	8009b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009a94:	e057      	b.n	8009b46 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a96:	bf00      	nop
    return;
 8009a98:	e055      	b.n	8009b46 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00d      	beq.n	8009ac0 <HAL_UART_IRQHandler+0x260>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ab6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 ffd3 	bl	800aa64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009abe:	e045      	b.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d012      	beq.n	8009af0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d104      	bne.n	8009ade <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d031      	beq.n	8009b4a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	4798      	blx	r3
    }
    return;
 8009aee:	e02c      	b.n	8009b4a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d008      	beq.n	8009b0c <HAL_UART_IRQHandler+0x2ac>
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d003      	beq.n	8009b0c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 ff93 	bl	800aa30 <UART_EndTransmit_IT>
    return;
 8009b0a:	e01f      	b.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d008      	beq.n	8009b28 <HAL_UART_IRQHandler+0x2c8>
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 ffb3 	bl	800aa8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b26:	e011      	b.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00c      	beq.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da09      	bge.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 ff9d 	bl	800aa78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b3e:	bf00      	nop
 8009b40:	e004      	b.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
      return;
 8009b42:	bf00      	nop
 8009b44:	e002      	b.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009b46:	bf00      	nop
 8009b48:	e000      	b.n	8009b4c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009b4a:	bf00      	nop
  }
}
 8009b4c:	3720      	adds	r7, #32
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	10000001 	.word	0x10000001
 8009b58:	04000120 	.word	0x04000120
 8009b5c:	0800aa05 	.word	0x0800aa05

08009b60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009b8c:	b08e      	sub	sp, #56	; 0x38
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	4bc1      	ldr	r3, [pc, #772]	; (8009ec8 <UART_SetConfig+0x340>)
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	6812      	ldr	r2, [r2, #0]
 8009bc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4ab7      	ldr	r2, [pc, #732]	; (8009ecc <UART_SetConfig+0x344>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d004      	beq.n	8009bfe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	4bb2      	ldr	r3, [pc, #712]	; (8009ed0 <UART_SetConfig+0x348>)
 8009c06:	4013      	ands	r3, r2
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6812      	ldr	r2, [r2, #0]
 8009c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	f023 010f 	bic.w	r1, r3, #15
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4aa9      	ldr	r2, [pc, #676]	; (8009ed4 <UART_SetConfig+0x34c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d177      	bne.n	8009d22 <UART_SetConfig+0x19a>
 8009c32:	4ba9      	ldr	r3, [pc, #676]	; (8009ed8 <UART_SetConfig+0x350>)
 8009c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c3a:	2b28      	cmp	r3, #40	; 0x28
 8009c3c:	d86c      	bhi.n	8009d18 <UART_SetConfig+0x190>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0xbc>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009ce9 	.word	0x08009ce9
 8009c48:	08009d19 	.word	0x08009d19
 8009c4c:	08009d19 	.word	0x08009d19
 8009c50:	08009d19 	.word	0x08009d19
 8009c54:	08009d19 	.word	0x08009d19
 8009c58:	08009d19 	.word	0x08009d19
 8009c5c:	08009d19 	.word	0x08009d19
 8009c60:	08009d19 	.word	0x08009d19
 8009c64:	08009cf1 	.word	0x08009cf1
 8009c68:	08009d19 	.word	0x08009d19
 8009c6c:	08009d19 	.word	0x08009d19
 8009c70:	08009d19 	.word	0x08009d19
 8009c74:	08009d19 	.word	0x08009d19
 8009c78:	08009d19 	.word	0x08009d19
 8009c7c:	08009d19 	.word	0x08009d19
 8009c80:	08009d19 	.word	0x08009d19
 8009c84:	08009cf9 	.word	0x08009cf9
 8009c88:	08009d19 	.word	0x08009d19
 8009c8c:	08009d19 	.word	0x08009d19
 8009c90:	08009d19 	.word	0x08009d19
 8009c94:	08009d19 	.word	0x08009d19
 8009c98:	08009d19 	.word	0x08009d19
 8009c9c:	08009d19 	.word	0x08009d19
 8009ca0:	08009d19 	.word	0x08009d19
 8009ca4:	08009d01 	.word	0x08009d01
 8009ca8:	08009d19 	.word	0x08009d19
 8009cac:	08009d19 	.word	0x08009d19
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009d19 	.word	0x08009d19
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009d19 	.word	0x08009d19
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d09 	.word	0x08009d09
 8009cc8:	08009d19 	.word	0x08009d19
 8009ccc:	08009d19 	.word	0x08009d19
 8009cd0:	08009d19 	.word	0x08009d19
 8009cd4:	08009d19 	.word	0x08009d19
 8009cd8:	08009d19 	.word	0x08009d19
 8009cdc:	08009d19 	.word	0x08009d19
 8009ce0:	08009d19 	.word	0x08009d19
 8009ce4:	08009d11 	.word	0x08009d11
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e233      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf6:	e22f      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e22b      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d00:	2310      	movs	r3, #16
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e227      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d08:	2320      	movs	r3, #32
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e223      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e21f      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d18:	2380      	movs	r3, #128	; 0x80
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	bf00      	nop
 8009d20:	e21a      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a6d      	ldr	r2, [pc, #436]	; (8009edc <UART_SetConfig+0x354>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d132      	bne.n	8009d92 <UART_SetConfig+0x20a>
 8009d2c:	4b6a      	ldr	r3, [pc, #424]	; (8009ed8 <UART_SetConfig+0x350>)
 8009d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	2b05      	cmp	r3, #5
 8009d36:	d827      	bhi.n	8009d88 <UART_SetConfig+0x200>
 8009d38:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <UART_SetConfig+0x1b8>)
 8009d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3e:	bf00      	nop
 8009d40:	08009d59 	.word	0x08009d59
 8009d44:	08009d61 	.word	0x08009d61
 8009d48:	08009d69 	.word	0x08009d69
 8009d4c:	08009d71 	.word	0x08009d71
 8009d50:	08009d79 	.word	0x08009d79
 8009d54:	08009d81 	.word	0x08009d81
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5e:	e1fb      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d60:	2304      	movs	r3, #4
 8009d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d66:	e1f7      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d68:	2308      	movs	r3, #8
 8009d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6e:	e1f3      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d70:	2310      	movs	r3, #16
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e1ef      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e1eb      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e1e7      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d88:	2380      	movs	r3, #128	; 0x80
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	bf00      	nop
 8009d90:	e1e2      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a52      	ldr	r2, [pc, #328]	; (8009ee0 <UART_SetConfig+0x358>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d132      	bne.n	8009e02 <UART_SetConfig+0x27a>
 8009d9c:	4b4e      	ldr	r3, [pc, #312]	; (8009ed8 <UART_SetConfig+0x350>)
 8009d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	2b05      	cmp	r3, #5
 8009da6:	d827      	bhi.n	8009df8 <UART_SetConfig+0x270>
 8009da8:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <UART_SetConfig+0x228>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dd1 	.word	0x08009dd1
 8009db8:	08009dd9 	.word	0x08009dd9
 8009dbc:	08009de1 	.word	0x08009de1
 8009dc0:	08009de9 	.word	0x08009de9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e1c3      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e1bf      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e1bb      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e1b7      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e1b3      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009df0:	2340      	movs	r3, #64	; 0x40
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e1af      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	bf00      	nop
 8009e00:	e1aa      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a37      	ldr	r2, [pc, #220]	; (8009ee4 <UART_SetConfig+0x35c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d132      	bne.n	8009e72 <UART_SetConfig+0x2ea>
 8009e0c:	4b32      	ldr	r3, [pc, #200]	; (8009ed8 <UART_SetConfig+0x350>)
 8009e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e10:	f003 0307 	and.w	r3, r3, #7
 8009e14:	2b05      	cmp	r3, #5
 8009e16:	d827      	bhi.n	8009e68 <UART_SetConfig+0x2e0>
 8009e18:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <UART_SetConfig+0x298>)
 8009e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009e39 	.word	0x08009e39
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	08009e49 	.word	0x08009e49
 8009e2c:	08009e51 	.word	0x08009e51
 8009e30:	08009e59 	.word	0x08009e59
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3e:	e18b      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e40:	2304      	movs	r3, #4
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e187      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e48:	2308      	movs	r3, #8
 8009e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4e:	e183      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e50:	2310      	movs	r3, #16
 8009e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e56:	e17f      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e58:	2320      	movs	r3, #32
 8009e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5e:	e17b      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e177      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e68:	2380      	movs	r3, #128	; 0x80
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	bf00      	nop
 8009e70:	e172      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1c      	ldr	r2, [pc, #112]	; (8009ee8 <UART_SetConfig+0x360>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d144      	bne.n	8009f06 <UART_SetConfig+0x37e>
 8009e7c:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <UART_SetConfig+0x350>)
 8009e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	2b05      	cmp	r3, #5
 8009e86:	d839      	bhi.n	8009efc <UART_SetConfig+0x374>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <UART_SetConfig+0x308>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea9 	.word	0x08009ea9
 8009e94:	08009eb1 	.word	0x08009eb1
 8009e98:	08009eb9 	.word	0x08009eb9
 8009e9c:	08009ec1 	.word	0x08009ec1
 8009ea0:	08009eed 	.word	0x08009eed
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e153      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e14f      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009eb8:	2308      	movs	r3, #8
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e14b      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e147      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009ec8:	cfff69f3 	.word	0xcfff69f3
 8009ecc:	58000c00 	.word	0x58000c00
 8009ed0:	11fff4ff 	.word	0x11fff4ff
 8009ed4:	40011000 	.word	0x40011000
 8009ed8:	58024400 	.word	0x58024400
 8009edc:	40004400 	.word	0x40004400
 8009ee0:	40004800 	.word	0x40004800
 8009ee4:	40004c00 	.word	0x40004c00
 8009ee8:	40005000 	.word	0x40005000
 8009eec:	2320      	movs	r3, #32
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	e131      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efa:	e12d      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	bf00      	nop
 8009f04:	e128      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4ab6      	ldr	r2, [pc, #728]	; (800a1e4 <UART_SetConfig+0x65c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d178      	bne.n	800a002 <UART_SetConfig+0x47a>
 8009f10:	4bb5      	ldr	r3, [pc, #724]	; (800a1e8 <UART_SetConfig+0x660>)
 8009f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f18:	2b28      	cmp	r3, #40	; 0x28
 8009f1a:	d86d      	bhi.n	8009ff8 <UART_SetConfig+0x470>
 8009f1c:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <UART_SetConfig+0x39c>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009fc9 	.word	0x08009fc9
 8009f28:	08009ff9 	.word	0x08009ff9
 8009f2c:	08009ff9 	.word	0x08009ff9
 8009f30:	08009ff9 	.word	0x08009ff9
 8009f34:	08009ff9 	.word	0x08009ff9
 8009f38:	08009ff9 	.word	0x08009ff9
 8009f3c:	08009ff9 	.word	0x08009ff9
 8009f40:	08009ff9 	.word	0x08009ff9
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009ff9 	.word	0x08009ff9
 8009f4c:	08009ff9 	.word	0x08009ff9
 8009f50:	08009ff9 	.word	0x08009ff9
 8009f54:	08009ff9 	.word	0x08009ff9
 8009f58:	08009ff9 	.word	0x08009ff9
 8009f5c:	08009ff9 	.word	0x08009ff9
 8009f60:	08009ff9 	.word	0x08009ff9
 8009f64:	08009fd9 	.word	0x08009fd9
 8009f68:	08009ff9 	.word	0x08009ff9
 8009f6c:	08009ff9 	.word	0x08009ff9
 8009f70:	08009ff9 	.word	0x08009ff9
 8009f74:	08009ff9 	.word	0x08009ff9
 8009f78:	08009ff9 	.word	0x08009ff9
 8009f7c:	08009ff9 	.word	0x08009ff9
 8009f80:	08009ff9 	.word	0x08009ff9
 8009f84:	08009fe1 	.word	0x08009fe1
 8009f88:	08009ff9 	.word	0x08009ff9
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	08009ff9 	.word	0x08009ff9
 8009f94:	08009ff9 	.word	0x08009ff9
 8009f98:	08009ff9 	.word	0x08009ff9
 8009f9c:	08009ff9 	.word	0x08009ff9
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009ff9 	.word	0x08009ff9
 8009fac:	08009ff9 	.word	0x08009ff9
 8009fb0:	08009ff9 	.word	0x08009ff9
 8009fb4:	08009ff9 	.word	0x08009ff9
 8009fb8:	08009ff9 	.word	0x08009ff9
 8009fbc:	08009ff9 	.word	0x08009ff9
 8009fc0:	08009ff9 	.word	0x08009ff9
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e0c3      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e0bf      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	e0bb      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe6:	e0b7      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009fe8:	2320      	movs	r3, #32
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e0b3      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009ff0:	2340      	movs	r3, #64	; 0x40
 8009ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff6:	e0af      	b.n	800a158 <UART_SetConfig+0x5d0>
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffe:	bf00      	nop
 800a000:	e0aa      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a79      	ldr	r2, [pc, #484]	; (800a1ec <UART_SetConfig+0x664>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d132      	bne.n	800a072 <UART_SetConfig+0x4ea>
 800a00c:	4b76      	ldr	r3, [pc, #472]	; (800a1e8 <UART_SetConfig+0x660>)
 800a00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	2b05      	cmp	r3, #5
 800a016:	d827      	bhi.n	800a068 <UART_SetConfig+0x4e0>
 800a018:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <UART_SetConfig+0x498>)
 800a01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a039 	.word	0x0800a039
 800a024:	0800a041 	.word	0x0800a041
 800a028:	0800a049 	.word	0x0800a049
 800a02c:	0800a051 	.word	0x0800a051
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a061 	.word	0x0800a061
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03e:	e08b      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a046:	e087      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04e:	e083      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e07f      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a058:	2320      	movs	r3, #32
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e07b      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	e077      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a068:	2380      	movs	r3, #128	; 0x80
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	bf00      	nop
 800a070:	e072      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a5e      	ldr	r2, [pc, #376]	; (800a1f0 <UART_SetConfig+0x668>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d132      	bne.n	800a0e2 <UART_SetConfig+0x55a>
 800a07c:	4b5a      	ldr	r3, [pc, #360]	; (800a1e8 <UART_SetConfig+0x660>)
 800a07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	2b05      	cmp	r3, #5
 800a086:	d827      	bhi.n	800a0d8 <UART_SetConfig+0x550>
 800a088:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <UART_SetConfig+0x508>)
 800a08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08e:	bf00      	nop
 800a090:	0800a0a9 	.word	0x0800a0a9
 800a094:	0800a0b1 	.word	0x0800a0b1
 800a098:	0800a0b9 	.word	0x0800a0b9
 800a09c:	0800a0c1 	.word	0x0800a0c1
 800a0a0:	0800a0c9 	.word	0x0800a0c9
 800a0a4:	0800a0d1 	.word	0x0800a0d1
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ae:	e053      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e04f      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0be:	e04b      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c6:	e047      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ce:	e043      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0d0:	2340      	movs	r3, #64	; 0x40
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d6:	e03f      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0de:	bf00      	nop
 800a0e0:	e03a      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a43      	ldr	r2, [pc, #268]	; (800a1f4 <UART_SetConfig+0x66c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d132      	bne.n	800a152 <UART_SetConfig+0x5ca>
 800a0ec:	4b3e      	ldr	r3, [pc, #248]	; (800a1e8 <UART_SetConfig+0x660>)
 800a0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d827      	bhi.n	800a148 <UART_SetConfig+0x5c0>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <UART_SetConfig+0x578>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a119 	.word	0x0800a119
 800a104:	0800a121 	.word	0x0800a121
 800a108:	0800a129 	.word	0x0800a129
 800a10c:	0800a131 	.word	0x0800a131
 800a110:	0800a139 	.word	0x0800a139
 800a114:	0800a141 	.word	0x0800a141
 800a118:	2302      	movs	r3, #2
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11e:	e01b      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a120:	2304      	movs	r3, #4
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e017      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a128:	2308      	movs	r3, #8
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e013      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a130:	2310      	movs	r3, #16
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e00f      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a138:	2320      	movs	r3, #32
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e00b      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e007      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a148:	2380      	movs	r3, #128	; 0x80
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	bf00      	nop
 800a150:	e002      	b.n	800a158 <UART_SetConfig+0x5d0>
 800a152:	2380      	movs	r3, #128	; 0x80
 800a154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a25      	ldr	r2, [pc, #148]	; (800a1f4 <UART_SetConfig+0x66c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	f040 80b8 	bne.w	800a2d4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a164:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d019      	beq.n	800a1a0 <UART_SetConfig+0x618>
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	dc04      	bgt.n	800a17a <UART_SetConfig+0x5f2>
 800a170:	2b02      	cmp	r3, #2
 800a172:	d009      	beq.n	800a188 <UART_SetConfig+0x600>
 800a174:	2b04      	cmp	r3, #4
 800a176:	d00b      	beq.n	800a190 <UART_SetConfig+0x608>
 800a178:	e042      	b.n	800a200 <UART_SetConfig+0x678>
 800a17a:	2b20      	cmp	r3, #32
 800a17c:	d02b      	beq.n	800a1d6 <UART_SetConfig+0x64e>
 800a17e:	2b40      	cmp	r3, #64	; 0x40
 800a180:	d02c      	beq.n	800a1dc <UART_SetConfig+0x654>
 800a182:	2b10      	cmp	r3, #16
 800a184:	d014      	beq.n	800a1b0 <UART_SetConfig+0x628>
 800a186:	e03b      	b.n	800a200 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a188:	f7fd fdba 	bl	8007d00 <HAL_RCCEx_GetD3PCLK1Freq>
 800a18c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a18e:	e03d      	b.n	800a20c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	4618      	mov	r0, r3
 800a196:	f7fd fdc9 	bl	8007d2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a19e:	e035      	b.n	800a20c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a0:	f107 0308 	add.w	r3, r7, #8
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fd ff0d 	bl	8007fc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1ae:	e02d      	b.n	800a20c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1b0:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <UART_SetConfig+0x660>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d009      	beq.n	800a1d0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <UART_SetConfig+0x660>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	08db      	lsrs	r3, r3, #3
 800a1c2:	f003 0303 	and.w	r3, r3, #3
 800a1c6:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <UART_SetConfig+0x670>)
 800a1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1ce:	e01d      	b.n	800a20c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <UART_SetConfig+0x670>)
 800a1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1d4:	e01a      	b.n	800a20c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <UART_SetConfig+0x674>)
 800a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1da:	e017      	b.n	800a20c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1e2:	e013      	b.n	800a20c <UART_SetConfig+0x684>
 800a1e4:	40011400 	.word	0x40011400
 800a1e8:	58024400 	.word	0x58024400
 800a1ec:	40007800 	.word	0x40007800
 800a1f0:	40007c00 	.word	0x40007c00
 800a1f4:	58000c00 	.word	0x58000c00
 800a1f8:	03d09000 	.word	0x03d09000
 800a1fc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a20a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 824d 	beq.w	800a6ae <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	4aad      	ldr	r2, [pc, #692]	; (800a4d0 <UART_SetConfig+0x948>)
 800a21a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a21e:	461a      	mov	r2, r3
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	fbb3 f3f2 	udiv	r3, r3, r2
 800a226:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4613      	mov	r3, r2
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	4413      	add	r3, r2
 800a232:	6a3a      	ldr	r2, [r7, #32]
 800a234:	429a      	cmp	r2, r3
 800a236:	d305      	bcc.n	800a244 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a23e:	6a3a      	ldr	r2, [r7, #32]
 800a240:	429a      	cmp	r2, r3
 800a242:	d903      	bls.n	800a24c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a24a:	e230      	b.n	800a6ae <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	4618      	mov	r0, r3
 800a250:	f04f 0100 	mov.w	r1, #0
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	4a9d      	ldr	r2, [pc, #628]	; (800a4d0 <UART_SetConfig+0x948>)
 800a25a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	f04f 0400 	mov.w	r4, #0
 800a264:	461a      	mov	r2, r3
 800a266:	4623      	mov	r3, r4
 800a268:	f7f6 f836 	bl	80002d8 <__aeabi_uldivmod>
 800a26c:	4603      	mov	r3, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	4619      	mov	r1, r3
 800a272:	4622      	mov	r2, r4
 800a274:	f04f 0300 	mov.w	r3, #0
 800a278:	f04f 0400 	mov.w	r4, #0
 800a27c:	0214      	lsls	r4, r2, #8
 800a27e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a282:	020b      	lsls	r3, r1, #8
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	6852      	ldr	r2, [r2, #4]
 800a288:	0852      	lsrs	r2, r2, #1
 800a28a:	4611      	mov	r1, r2
 800a28c:	f04f 0200 	mov.w	r2, #0
 800a290:	eb13 0b01 	adds.w	fp, r3, r1
 800a294:	eb44 0c02 	adc.w	ip, r4, r2
 800a298:	4658      	mov	r0, fp
 800a29a:	4661      	mov	r1, ip
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f04f 0400 	mov.w	r4, #0
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4623      	mov	r3, r4
 800a2a8:	f7f6 f816 	bl	80002d8 <__aeabi_uldivmod>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2b8:	d308      	bcc.n	800a2cc <UART_SetConfig+0x744>
 800a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2c0:	d204      	bcs.n	800a2cc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2c8:	60da      	str	r2, [r3, #12]
 800a2ca:	e1f0      	b.n	800a6ae <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a2d2:	e1ec      	b.n	800a6ae <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2dc:	f040 8100 	bne.w	800a4e0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a2e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2e4:	2b40      	cmp	r3, #64	; 0x40
 800a2e6:	f200 80b7 	bhi.w	800a458 <UART_SetConfig+0x8d0>
 800a2ea:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <UART_SetConfig+0x768>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a3f5 	.word	0x0800a3f5
 800a2f4:	0800a3fd 	.word	0x0800a3fd
 800a2f8:	0800a459 	.word	0x0800a459
 800a2fc:	0800a459 	.word	0x0800a459
 800a300:	0800a405 	.word	0x0800a405
 800a304:	0800a459 	.word	0x0800a459
 800a308:	0800a459 	.word	0x0800a459
 800a30c:	0800a459 	.word	0x0800a459
 800a310:	0800a415 	.word	0x0800a415
 800a314:	0800a459 	.word	0x0800a459
 800a318:	0800a459 	.word	0x0800a459
 800a31c:	0800a459 	.word	0x0800a459
 800a320:	0800a459 	.word	0x0800a459
 800a324:	0800a459 	.word	0x0800a459
 800a328:	0800a459 	.word	0x0800a459
 800a32c:	0800a459 	.word	0x0800a459
 800a330:	0800a425 	.word	0x0800a425
 800a334:	0800a459 	.word	0x0800a459
 800a338:	0800a459 	.word	0x0800a459
 800a33c:	0800a459 	.word	0x0800a459
 800a340:	0800a459 	.word	0x0800a459
 800a344:	0800a459 	.word	0x0800a459
 800a348:	0800a459 	.word	0x0800a459
 800a34c:	0800a459 	.word	0x0800a459
 800a350:	0800a459 	.word	0x0800a459
 800a354:	0800a459 	.word	0x0800a459
 800a358:	0800a459 	.word	0x0800a459
 800a35c:	0800a459 	.word	0x0800a459
 800a360:	0800a459 	.word	0x0800a459
 800a364:	0800a459 	.word	0x0800a459
 800a368:	0800a459 	.word	0x0800a459
 800a36c:	0800a459 	.word	0x0800a459
 800a370:	0800a44b 	.word	0x0800a44b
 800a374:	0800a459 	.word	0x0800a459
 800a378:	0800a459 	.word	0x0800a459
 800a37c:	0800a459 	.word	0x0800a459
 800a380:	0800a459 	.word	0x0800a459
 800a384:	0800a459 	.word	0x0800a459
 800a388:	0800a459 	.word	0x0800a459
 800a38c:	0800a459 	.word	0x0800a459
 800a390:	0800a459 	.word	0x0800a459
 800a394:	0800a459 	.word	0x0800a459
 800a398:	0800a459 	.word	0x0800a459
 800a39c:	0800a459 	.word	0x0800a459
 800a3a0:	0800a459 	.word	0x0800a459
 800a3a4:	0800a459 	.word	0x0800a459
 800a3a8:	0800a459 	.word	0x0800a459
 800a3ac:	0800a459 	.word	0x0800a459
 800a3b0:	0800a459 	.word	0x0800a459
 800a3b4:	0800a459 	.word	0x0800a459
 800a3b8:	0800a459 	.word	0x0800a459
 800a3bc:	0800a459 	.word	0x0800a459
 800a3c0:	0800a459 	.word	0x0800a459
 800a3c4:	0800a459 	.word	0x0800a459
 800a3c8:	0800a459 	.word	0x0800a459
 800a3cc:	0800a459 	.word	0x0800a459
 800a3d0:	0800a459 	.word	0x0800a459
 800a3d4:	0800a459 	.word	0x0800a459
 800a3d8:	0800a459 	.word	0x0800a459
 800a3dc:	0800a459 	.word	0x0800a459
 800a3e0:	0800a459 	.word	0x0800a459
 800a3e4:	0800a459 	.word	0x0800a459
 800a3e8:	0800a459 	.word	0x0800a459
 800a3ec:	0800a459 	.word	0x0800a459
 800a3f0:	0800a451 	.word	0x0800a451
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3f4:	f7fc fd6a 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 800a3f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3fa:	e033      	b.n	800a464 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3fc:	f7fc fd7c 	bl	8006ef8 <HAL_RCC_GetPCLK2Freq>
 800a400:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a402:	e02f      	b.n	800a464 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a404:	f107 0314 	add.w	r3, r7, #20
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fc8f 	bl	8007d2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a412:	e027      	b.n	800a464 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a414:	f107 0308 	add.w	r3, r7, #8
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd fdd3 	bl	8007fc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a422:	e01f      	b.n	800a464 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a424:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <UART_SetConfig+0x94c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d009      	beq.n	800a444 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a430:	4b28      	ldr	r3, [pc, #160]	; (800a4d4 <UART_SetConfig+0x94c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	08db      	lsrs	r3, r3, #3
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	4a27      	ldr	r2, [pc, #156]	; (800a4d8 <UART_SetConfig+0x950>)
 800a43c:	fa22 f303 	lsr.w	r3, r2, r3
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a442:	e00f      	b.n	800a464 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a444:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <UART_SetConfig+0x950>)
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a448:	e00c      	b.n	800a464 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a44a:	4b24      	ldr	r3, [pc, #144]	; (800a4dc <UART_SetConfig+0x954>)
 800a44c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a44e:	e009      	b.n	800a464 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a456:	e005      	b.n	800a464 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8121 	beq.w	800a6ae <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	4a17      	ldr	r2, [pc, #92]	; (800a4d0 <UART_SetConfig+0x948>)
 800a472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a476:	461a      	mov	r2, r3
 800a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47e:	005a      	lsls	r2, r3, #1
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	085b      	lsrs	r3, r3, #1
 800a486:	441a      	add	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	b29b      	uxth	r3, r3
 800a492:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	2b0f      	cmp	r3, #15
 800a498:	d916      	bls.n	800a4c8 <UART_SetConfig+0x940>
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a0:	d212      	bcs.n	800a4c8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f023 030f 	bic.w	r3, r3, #15
 800a4aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f003 0307 	and.w	r3, r3, #7
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a4c4:	60da      	str	r2, [r3, #12]
 800a4c6:	e0f2      	b.n	800a6ae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a4ce:	e0ee      	b.n	800a6ae <UART_SetConfig+0xb26>
 800a4d0:	0800ae30 	.word	0x0800ae30
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	03d09000 	.word	0x03d09000
 800a4dc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4e4:	2b40      	cmp	r3, #64	; 0x40
 800a4e6:	f200 80b7 	bhi.w	800a658 <UART_SetConfig+0xad0>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0x968>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a5f5 	.word	0x0800a5f5
 800a4f4:	0800a5fd 	.word	0x0800a5fd
 800a4f8:	0800a659 	.word	0x0800a659
 800a4fc:	0800a659 	.word	0x0800a659
 800a500:	0800a605 	.word	0x0800a605
 800a504:	0800a659 	.word	0x0800a659
 800a508:	0800a659 	.word	0x0800a659
 800a50c:	0800a659 	.word	0x0800a659
 800a510:	0800a615 	.word	0x0800a615
 800a514:	0800a659 	.word	0x0800a659
 800a518:	0800a659 	.word	0x0800a659
 800a51c:	0800a659 	.word	0x0800a659
 800a520:	0800a659 	.word	0x0800a659
 800a524:	0800a659 	.word	0x0800a659
 800a528:	0800a659 	.word	0x0800a659
 800a52c:	0800a659 	.word	0x0800a659
 800a530:	0800a625 	.word	0x0800a625
 800a534:	0800a659 	.word	0x0800a659
 800a538:	0800a659 	.word	0x0800a659
 800a53c:	0800a659 	.word	0x0800a659
 800a540:	0800a659 	.word	0x0800a659
 800a544:	0800a659 	.word	0x0800a659
 800a548:	0800a659 	.word	0x0800a659
 800a54c:	0800a659 	.word	0x0800a659
 800a550:	0800a659 	.word	0x0800a659
 800a554:	0800a659 	.word	0x0800a659
 800a558:	0800a659 	.word	0x0800a659
 800a55c:	0800a659 	.word	0x0800a659
 800a560:	0800a659 	.word	0x0800a659
 800a564:	0800a659 	.word	0x0800a659
 800a568:	0800a659 	.word	0x0800a659
 800a56c:	0800a659 	.word	0x0800a659
 800a570:	0800a64b 	.word	0x0800a64b
 800a574:	0800a659 	.word	0x0800a659
 800a578:	0800a659 	.word	0x0800a659
 800a57c:	0800a659 	.word	0x0800a659
 800a580:	0800a659 	.word	0x0800a659
 800a584:	0800a659 	.word	0x0800a659
 800a588:	0800a659 	.word	0x0800a659
 800a58c:	0800a659 	.word	0x0800a659
 800a590:	0800a659 	.word	0x0800a659
 800a594:	0800a659 	.word	0x0800a659
 800a598:	0800a659 	.word	0x0800a659
 800a59c:	0800a659 	.word	0x0800a659
 800a5a0:	0800a659 	.word	0x0800a659
 800a5a4:	0800a659 	.word	0x0800a659
 800a5a8:	0800a659 	.word	0x0800a659
 800a5ac:	0800a659 	.word	0x0800a659
 800a5b0:	0800a659 	.word	0x0800a659
 800a5b4:	0800a659 	.word	0x0800a659
 800a5b8:	0800a659 	.word	0x0800a659
 800a5bc:	0800a659 	.word	0x0800a659
 800a5c0:	0800a659 	.word	0x0800a659
 800a5c4:	0800a659 	.word	0x0800a659
 800a5c8:	0800a659 	.word	0x0800a659
 800a5cc:	0800a659 	.word	0x0800a659
 800a5d0:	0800a659 	.word	0x0800a659
 800a5d4:	0800a659 	.word	0x0800a659
 800a5d8:	0800a659 	.word	0x0800a659
 800a5dc:	0800a659 	.word	0x0800a659
 800a5e0:	0800a659 	.word	0x0800a659
 800a5e4:	0800a659 	.word	0x0800a659
 800a5e8:	0800a659 	.word	0x0800a659
 800a5ec:	0800a659 	.word	0x0800a659
 800a5f0:	0800a651 	.word	0x0800a651
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f4:	f7fc fc6a 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 800a5f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5fa:	e033      	b.n	800a664 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5fc:	f7fc fc7c 	bl	8006ef8 <HAL_RCC_GetPCLK2Freq>
 800a600:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a602:	e02f      	b.n	800a664 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fd fb8f 	bl	8007d2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a612:	e027      	b.n	800a664 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a614:	f107 0308 	add.w	r3, r7, #8
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fd fcd3 	bl	8007fc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a622:	e01f      	b.n	800a664 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a624:	4b2c      	ldr	r3, [pc, #176]	; (800a6d8 <UART_SetConfig+0xb50>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0320 	and.w	r3, r3, #32
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d009      	beq.n	800a644 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a630:	4b29      	ldr	r3, [pc, #164]	; (800a6d8 <UART_SetConfig+0xb50>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	08db      	lsrs	r3, r3, #3
 800a636:	f003 0303 	and.w	r3, r3, #3
 800a63a:	4a28      	ldr	r2, [pc, #160]	; (800a6dc <UART_SetConfig+0xb54>)
 800a63c:	fa22 f303 	lsr.w	r3, r2, r3
 800a640:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a642:	e00f      	b.n	800a664 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a644:	4b25      	ldr	r3, [pc, #148]	; (800a6dc <UART_SetConfig+0xb54>)
 800a646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a648:	e00c      	b.n	800a664 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a64a:	4b25      	ldr	r3, [pc, #148]	; (800a6e0 <UART_SetConfig+0xb58>)
 800a64c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a64e:	e009      	b.n	800a664 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a656:	e005      	b.n	800a664 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a662:	bf00      	nop
    }

    if (pclk != 0U)
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d021      	beq.n	800a6ae <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	4a1d      	ldr	r2, [pc, #116]	; (800a6e4 <UART_SetConfig+0xb5c>)
 800a670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a674:	461a      	mov	r2, r3
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	fbb3 f2f2 	udiv	r2, r3, r2
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	441a      	add	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	2b0f      	cmp	r3, #15
 800a694:	d908      	bls.n	800a6a8 <UART_SetConfig+0xb20>
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a69c:	d204      	bcs.n	800a6a8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a4:	60da      	str	r2, [r3, #12]
 800a6a6:	e002      	b.n	800a6ae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a6ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3738      	adds	r7, #56	; 0x38
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	03d09000 	.word	0x03d09000
 800a6e0:	003d0900 	.word	0x003d0900
 800a6e4:	0800ae30 	.word	0x0800ae30

0800a6e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a716:	f003 0302 	and.w	r3, r3, #2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00a      	beq.n	800a756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75a:	f003 0308 	and.w	r3, r3, #8
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77c:	f003 0310 	and.w	r3, r3, #16
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00a      	beq.n	800a79a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01a      	beq.n	800a7fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e6:	d10a      	bne.n	800a7fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	430a      	orrs	r2, r1
 800a81e:	605a      	str	r2, [r3, #4]
  }
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af02      	add	r7, sp, #8
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a83c:	f7f7 f8d0 	bl	80019e0 <HAL_GetTick>
 800a840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0308 	and.w	r3, r3, #8
 800a84c:	2b08      	cmp	r3, #8
 800a84e:	d10e      	bne.n	800a86e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f82c 	bl	800a8bc <UART_WaitOnFlagUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e022      	b.n	800a8b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d10e      	bne.n	800a89a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a87c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f816 	bl	800a8bc <UART_WaitOnFlagUntilTimeout>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e00c      	b.n	800a8b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2220      	movs	r2, #32
 800a89e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	603b      	str	r3, [r7, #0]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8cc:	e062      	b.n	800a994 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d4:	d05e      	beq.n	800a994 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8d6:	f7f7 f883 	bl	80019e0 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d302      	bcc.n	800a8ec <UART_WaitOnFlagUntilTimeout+0x30>
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d11d      	bne.n	800a928 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689a      	ldr	r2, [r3, #8]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0201 	bic.w	r2, r2, #1
 800a90a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2220      	movs	r2, #32
 800a910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2220      	movs	r2, #32
 800a918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e045      	b.n	800a9b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0304 	and.w	r3, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	d02e      	beq.n	800a994 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a944:	d126      	bne.n	800a994 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a94e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a95e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	689a      	ldr	r2, [r3, #8]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0201 	bic.w	r2, r2, #1
 800a96e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2220      	movs	r2, #32
 800a984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e00f      	b.n	800a9b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	69da      	ldr	r2, [r3, #28]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	4013      	ands	r3, r2
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	bf0c      	ite	eq
 800a9a4:	2301      	moveq	r3, #1
 800a9a6:	2300      	movne	r3, #0
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d08d      	beq.n	800a8ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6899      	ldr	r1, [r3, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b08      	ldr	r3, [pc, #32]	; (800aa00 <UART_EndRxTransfer+0x44>)
 800a9e0:	400b      	ands	r3, r1
 800a9e2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	effffffe 	.word	0xeffffffe

0800aa04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff f8a6 	bl	8009b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa28:	bf00      	nop
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff f882 	bl	8009b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d101      	bne.n	800aab6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e027      	b.n	800ab06 <HAL_UARTEx_DisableFifoMode+0x66>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2224      	movs	r2, #36	; 0x24
 800aac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0201 	bic.w	r2, r2, #1
 800aadc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aae4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e02d      	b.n	800ab86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2224      	movs	r2, #36	; 0x24
 800ab36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0201 	bic.w	r2, r2, #1
 800ab50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f850 	bl	800ac0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d101      	bne.n	800aba6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aba2:	2302      	movs	r3, #2
 800aba4:	e02d      	b.n	800ac02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2224      	movs	r2, #36	; 0x24
 800abb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0201 	bic.w	r2, r2, #1
 800abcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f812 	bl	800ac0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b089      	sub	sp, #36	; 0x24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ac14:	4a2f      	ldr	r2, [pc, #188]	; (800acd4 <UARTEx_SetNbDataToProcess+0xc8>)
 800ac16:	f107 0314 	add.w	r3, r7, #20
 800ac1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac1e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ac22:	4a2d      	ldr	r2, [pc, #180]	; (800acd8 <UARTEx_SetNbDataToProcess+0xcc>)
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac2c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d108      	bne.n	800ac4a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac48:	e03d      	b.n	800acc6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac4a:	2310      	movs	r3, #16
 800ac4c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac4e:	2310      	movs	r3, #16
 800ac50:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	0e5b      	lsrs	r3, r3, #25
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	f003 0307 	and.w	r3, r3, #7
 800ac60:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	0f5b      	lsrs	r3, r3, #29
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	f003 0307 	and.w	r3, r3, #7
 800ac70:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ac72:	7fbb      	ldrb	r3, [r7, #30]
 800ac74:	7f3a      	ldrb	r2, [r7, #28]
 800ac76:	f107 0120 	add.w	r1, r7, #32
 800ac7a:	440a      	add	r2, r1
 800ac7c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ac80:	fb02 f303 	mul.w	r3, r2, r3
 800ac84:	7f3a      	ldrb	r2, [r7, #28]
 800ac86:	f107 0120 	add.w	r1, r7, #32
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ac90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ac9c:	7ffb      	ldrb	r3, [r7, #31]
 800ac9e:	7f7a      	ldrb	r2, [r7, #29]
 800aca0:	f107 0120 	add.w	r1, r7, #32
 800aca4:	440a      	add	r2, r1
 800aca6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	7f7a      	ldrb	r2, [r7, #29]
 800acb0:	f107 0120 	add.w	r1, r7, #32
 800acb4:	440a      	add	r2, r1
 800acb6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800acba:	fb93 f3f2 	sdiv	r3, r3, r2
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800acc6:	bf00      	nop
 800acc8:	3724      	adds	r7, #36	; 0x24
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	0800ae08 	.word	0x0800ae08
 800acd8:	0800ae10 	.word	0x0800ae10

0800acdc <StartOV2640>:
		}
	}
}

void StartOV2640()//拍照的线程
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0

	__HAL_DCMI_ENABLE_IT(DCMI_hdcmi, DCMI_IT_FRAME);//使用帧中断
 800ace0:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <StartOV2640+0x38>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <StartOV2640+0x38>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	60da      	str	r2, [r3, #12]
	memset((void *)JpegBuffer,0,pictureBufferLength * 4);//把接收BUF清空
 800acf4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800acf8:	2100      	movs	r1, #0
 800acfa:	4807      	ldr	r0, [pc, #28]	; (800ad18 <StartOV2640+0x3c>)
 800acfc:	f000 f870 	bl	800ade0 <memset>
	HAL_DCMI_Start_DMA(DCMI_hdcmi, DCMI_MODE_SNAPSHOT,(uint32_t)JpegBuffer, pictureBufferLength);//启动拍照
 800ad00:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <StartOV2640+0x38>)
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	4a04      	ldr	r2, [pc, #16]	; (800ad18 <StartOV2640+0x3c>)
 800ad06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	f7f7 f82c 	bl	8001d68 <HAL_DCMI_Start_DMA>

}
 800ad10:	bf00      	nop
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	2400a400 	.word	0x2400a400
 800ad18:	2400002c 	.word	0x2400002c

0800ad1c <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
			pictureLength--;
		}
		pictureLength*=4;//buf是uint32_t，下面发送是uint8_t,所以长度要*4
		Uart_Send((uint8_t*)JpegBuffer, pictureLength);
	}*/
	HAL_DCMI_Suspend(DCMI_hdcmi);//拍照完成，挂起DCMI
 800ad24:	4b18      	ldr	r3, [pc, #96]	; (800ad88 <HAL_DCMI_FrameEventCallback+0x6c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f7 f93f 	bl	8001fac <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(DCMI_hdcmi);//拍照完成，停止DMA传输
 800ad2e:	4b16      	ldr	r3, [pc, #88]	; (800ad88 <HAL_DCMI_FrameEventCallback+0x6c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7f7 f8da 	bl	8001eec <HAL_DCMI_Stop>
	int pictureLength =pictureBufferLength;
 800ad38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad3c:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800ad3e:	e009      	b.n	800ad54 <HAL_DCMI_FrameEventCallback+0x38>
	{
		if(JpegBuffer[pictureLength-1] != 0x00000000)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3b01      	subs	r3, #1
 800ad44:	4a11      	ldr	r2, [pc, #68]	; (800ad8c <HAL_DCMI_FrameEventCallback+0x70>)
 800ad46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <HAL_DCMI_FrameEventCallback+0x40>
		{
			break;
		}
		pictureLength--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
	while(pictureLength > 0)//循环计算出接收的JPEG的大小
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dcf2      	bgt.n	800ad40 <HAL_DCMI_FrameEventCallback+0x24>
 800ad5a:	e000      	b.n	800ad5e <HAL_DCMI_FrameEventCallback+0x42>
			break;
 800ad5c:	bf00      	nop
	}
	pictureLength*=4;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	60fb      	str	r3, [r7, #12]
	if(mHuart != NULL)
 800ad64:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <HAL_DCMI_FrameEventCallback+0x74>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <HAL_DCMI_FrameEventCallback+0x60>
		HAL_UART_Transmit(mHuart, (uint8_t*)JpegBuffer, pictureLength, 100000);
 800ad6c:	4b08      	ldr	r3, [pc, #32]	; (800ad90 <HAL_DCMI_FrameEventCallback+0x74>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	4b07      	ldr	r3, [pc, #28]	; (800ad94 <HAL_DCMI_FrameEventCallback+0x78>)
 800ad76:	4905      	ldr	r1, [pc, #20]	; (800ad8c <HAL_DCMI_FrameEventCallback+0x70>)
 800ad78:	f7fe fcdc 	bl	8009734 <HAL_UART_Transmit>

	StartOV2640();
 800ad7c:	f7ff ffae 	bl	800acdc <StartOV2640>
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	2400a400 	.word	0x2400a400
 800ad8c:	2400002c 	.word	0x2400002c
 800ad90:	2400a404 	.word	0x2400a404
 800ad94:	000186a0 	.word	0x000186a0

0800ad98 <__libc_init_array>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	4e0d      	ldr	r6, [pc, #52]	; (800add0 <__libc_init_array+0x38>)
 800ad9c:	4c0d      	ldr	r4, [pc, #52]	; (800add4 <__libc_init_array+0x3c>)
 800ad9e:	1ba4      	subs	r4, r4, r6
 800ada0:	10a4      	asrs	r4, r4, #2
 800ada2:	2500      	movs	r5, #0
 800ada4:	42a5      	cmp	r5, r4
 800ada6:	d109      	bne.n	800adbc <__libc_init_array+0x24>
 800ada8:	4e0b      	ldr	r6, [pc, #44]	; (800add8 <__libc_init_array+0x40>)
 800adaa:	4c0c      	ldr	r4, [pc, #48]	; (800addc <__libc_init_array+0x44>)
 800adac:	f000 f820 	bl	800adf0 <_init>
 800adb0:	1ba4      	subs	r4, r4, r6
 800adb2:	10a4      	asrs	r4, r4, #2
 800adb4:	2500      	movs	r5, #0
 800adb6:	42a5      	cmp	r5, r4
 800adb8:	d105      	bne.n	800adc6 <__libc_init_array+0x2e>
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adc0:	4798      	blx	r3
 800adc2:	3501      	adds	r5, #1
 800adc4:	e7ee      	b.n	800ada4 <__libc_init_array+0xc>
 800adc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adca:	4798      	blx	r3
 800adcc:	3501      	adds	r5, #1
 800adce:	e7f2      	b.n	800adb6 <__libc_init_array+0x1e>
 800add0:	0800ae50 	.word	0x0800ae50
 800add4:	0800ae50 	.word	0x0800ae50
 800add8:	0800ae50 	.word	0x0800ae50
 800addc:	0800ae54 	.word	0x0800ae54

0800ade0 <memset>:
 800ade0:	4402      	add	r2, r0
 800ade2:	4603      	mov	r3, r0
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d100      	bne.n	800adea <memset+0xa>
 800ade8:	4770      	bx	lr
 800adea:	f803 1b01 	strb.w	r1, [r3], #1
 800adee:	e7f9      	b.n	800ade4 <memset+0x4>

0800adf0 <_init>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	bf00      	nop
 800adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf6:	bc08      	pop	{r3}
 800adf8:	469e      	mov	lr, r3
 800adfa:	4770      	bx	lr

0800adfc <_fini>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	bf00      	nop
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr
